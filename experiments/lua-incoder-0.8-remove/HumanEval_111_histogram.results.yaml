language: lua
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local letters = {}\n   local counts\
    \ = {}\n   for i=1,#test do\n      local key = test[i]\n      local count = counts[key]\
    \ or 0\n      counts[key] = count + 1\n      table.insert(letters, key)\n   end\n\
    \   for i=1,#letters do\n      table.insert(counts, letters[i])\n   end\n   return\
    \ counts, letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7l83sgu.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpk7l83sgu.lua:11: in local 'candidate'\n\
    \t/tmp/tmpk7l83sgu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  for letter\
    \ in test:gmatch('%a') do\n    local count = result.get(letter) or 0\n    result[letter]\
    \ = count + 1\n  end\n  local most = nil\n  local maxCount = -math.infinity\n\
    \  for letter, count in pairs(result) do\n    if count == maxCount then\n    \
    \  most = letter\n    end\n    if count > maxCount then\n      maxCount = count\n\
    \      most = letter\n    end\n  end\n  return { least = most, count = maxCount,\
    \ result = result }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnoqh778.lua:8:\
    \ attempt to call a nil value (field 'get')\nstack traceback:\n\t/tmp/tmprnoqh778.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprnoqh778.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb4n0pcm5.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function count_letters(letters,\
    \ map)\n    local count = 0\n    for _, letter in ipairs(letters) do\n      count\
    \ = count + map[letter]\n      map[letter] = map[letter] + 1\n    end\n    return\
    \ count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdl73zqu3.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    return table.reduce(test:gsub('%[bcdefghjklmnpqrstuvwxyz]',\
    \ '%1'):gsub('(.-)%s+', '\\\\2'):gsub('(.-)%s*', '\\\\2'):gsub('(.-)%s?', '\\\\\
    2'), function(a, b, c) \n        if (a[c] < b[c]) then\n            return c\n\
    \        else\n            return a\n        end\n    end, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3vx18vl.lua:6:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpa3vx18vl.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpa3vx18vl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\n    for\
    \ letter, count in string.gmatch(test, \"%a\"):gmatch(\"(.-)%z()\") do\n     \
    \   histogram[letter] = histogram[letter] or 0\n        histogram[letter] = histogram[letter]\
    \ + 1 or 1\n    end\n    return histogram\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6vbgkdt.lua:7:\
    \ attempt to index a function value\nstack traceback:\n\t/tmp/tmpg6vbgkdt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpg6vbgkdt.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal hist = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq96pajbc.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local table = {}\n    for letter,\
    \ count in pairs(test.letters) do\n        if table[letter] == nil then\n    \
    \        table[letter] = {\n                count = 1,\n                letter\
    \ = letter\n            }\n        else\n            local letterCount = table[letter]\n\
    \            local newCount = letterCount.count + 1\n            if newCount >\
    \ letterCount.count then\n                table[letter] = {\n                \
    \    count = newCount,\n                    letter = letter\n                }\n\
    \            end\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3c3ht0zp.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp3c3ht0zp.lua:7: in local 'candidate'\n\t/tmp/tmp3c3ht0zp.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal letters = {}\n\tlocal counts\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwujhqmj3.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local words = string.gmatch(test,\
    \ \"([^ ]+)\")\n    if not words then return nil end\n    local counts = {}\n\
    \    for k, v in pairs(words) do\n        table.insert(counts, v)\n    end\n \
    \   local letters = {}\n    for k, v in pairs(counts) do\n        table.insert(letters,\
    \ {letter = k, count = v})\n    end\n    for i = #letters, 1, -1 do\n        local\
    \ most = letters[i]\n        for j = #letters, i, -1 do\n            if letters[j].count\
    \ == most.count then\n                letters[j] = {letter = letters[j].letter,\
    \ count = letters[j].count + 1}\n                break\n            end\n    \
    \    end\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ggqj6zh.lua:9:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp2ggqj6zh.lua:9: in local 'candidate'\n\t/tmp/tmp2ggqj6zh.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  local letter\
    \ = {}\n  for _, i in ipairs(test) do\n    table.insert(letter, i)\n    letters[#letters\
    \ + 1] = i\n  end\n  local counts = {}\n  local max = 0\n  local count\n  for\
    \ _, i in ipairs(letter) do\n    count = table.count(letters, i)\n    if count\
    \ > max then\n      max = count\n    end\n    counts[i] = count\n  end\n  return\
    \ counts, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqg2ngfa.lua:28:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpdqg2ngfa.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    local\
    \ letters = {}\n    local count = 0\n    for letter in test:gmatch(\"[%a]+\")\
    \ do\n        count = count + 1\n        letters[letter] = letters[letter] or\
    \ 1\n        letters[letter] = letters[letter] + 1\n    end\n    table.sort(letters)\n\
    \    for key, value in pairs(letters) do\n        if letters[key] > 1 then\n \
    \           result[value] = letters[key], count\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gzoj75.lua:26:\
    \ expected: {a=2, b=2}\nactual: {3=3}\nstack traceback:\n\t/tmp/tmpf7gzoj75.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local s = {}\n    for _, c in\
    \ ipairs(test) do s[c] = s[c] + 1 end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuxenrqc.lua:14:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpuuxenrqc.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal map = {}\n\tfor _, v in ipairs(test)\
    \ do\n\t\tlocal l = v:lower()\n\t\tif map[l] then\n\t\t\tmap[l] = map[l] + 1\n\
    \t\telse\n\t\t\tmap[l] = 1\n\t\tend\n\tend\n\treturn map\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxjaw2bc.lua:21:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmplxjaw2bc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local count = {}\n   for letter\
    \ in string.gmatch(test, \"%a\") do\n      count[letter] = count[letter] or 1\n\
    \      count[letter] = count[letter] + 1\n   end\n   if #count > 0 then\n    \
    \  table.sort(count, function(a, b) return count[b] > count[a] end)\n      return\
    \ count\n   end\n   return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5ngvpww.lua:21:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmpx5ngvpww.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = test:gsub(' ',\
    \ '') -- Remove spaces from input string\n    local frequency = {}\n    for letter\
    \ in letters do\n        if frequency[letter] == nil then\n            frequency[letter]\
    \ = 0\n        end\n        frequency[letter] = frequency[letter] + 1\n    end\n\
    \    local results = {}\n    for k, v in pairs(frequency) do\n        if results[k]\
    \ == nil then\n            results[k] = v\n        else\n            results[k]\
    \ = results[k] + v\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rj4hw34.lua:8:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp7rj4hw34.lua:8: in local 'candidate'\n\t/tmp/tmp7rj4hw34.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([a-z]+) \") do\n    if counts[letter] == nil then\n\
    \      counts[letter] = 1\n    else\n      counts[letter] = counts[letter] + 1\n\
    \    end\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilnsp8c6.lua:20:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmpilnsp8c6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local hist = {}\n  local words\
    \ = test:gmatch(\"%w+\")\n  for _, word in ipairs(words) do\n    local letter\
    \ = word:upper()\n    local count = hist[letter] or 0\n    hist[letter] = count\
    \ + 1\n  end\n  return hist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  for letter\
    \ in test:gmatch(\"[%l]+\") do\n    result[letter] = result[letter] or 0\n   \
    \ result[letter] = result[letter] + 1\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpovfe3wdc.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local dict = {}\n  local max =\
    \ 0\n  for _, _ in string.gmatch(test, \"%a+\") do\n    local count = 1\n    if\
    \ dict[tostring(_)] then\n      count = dict[tostring(_)]\n    end\n    dict[tostring(_)]\
    \ = count + 1\n    if count > max then\n      max = count\n    end\n  end\n  return\
    \ dict, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2b4__rs.lua:24:\
    \ expected: {a=2, b=2}\nactual: {nil=5}\nstack traceback:\n\t/tmp/tmpa2b4__rs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local count = {}\n   for item\
    \ in test:gmatch(\"%c\") do count[item] = count[item] or 1 end\n   return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vk_e2s9.lua:14:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp1vk_e2s9.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local count = { [test] = 1 }\n\
    \  for _, v in ipairs(test) do\n    count[v] = count[v] + 1\n  end\n  local max\
    \ = {}\n  for k, v in pairs(count) do\n    table.insert(max, { count = v, letter\
    \ = k })\n  end\n  table.sort(max, function(a, b)\n    return b.count > a.count\n\
    \  end)\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsqeb7di.lua:23:\
    \ expected: {a=2, b=2}\nactual: {{count=1, letter=\"a b b a\"}}\nstack traceback:\n\
    \t/tmp/tmphsqeb7di.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   if test == \"  \" then return\
    \ nil end\n   local map = {}\n   for ch in test:gmatch(\"(.)\") do\n      if not\
    \ map[ch] then\n         map[ch] = 1\n      else\n         map[ch] = map[ch] +\
    \ 1\n      end\n   end\n   return map\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn991bgw.lua:21:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmpqn991bgw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = { }\n    for letter\
    \ in test:gmatch(\"[a-z]\") do\n        table.insert(counts, letter)\n    end\n\
    \    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd8an27s.lua:16:\
    \ expected: {a=2, b=2}\nactual: {\"a\", \"b\", \"b\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmpcd8an27s.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local map = {}\n   for l in test:gmatch(\"\
    %w+\") do\n      map[l] = map[l] or {}\n      local val = map[l][#map[l]]\n  \
    \    map[l][#map[l]] = val + 1 or 1\n   end\n   return map\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9gs1opsw.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'val')\nstack traceback:\n\
    \t/tmp/tmp9gs1opsw.lua:10: in local 'candidate'\n\t/tmp/tmp9gs1opsw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local h = { }\n  for _, s in ipairs(test:gmatch(\"\
    [a-z]+\")) do\n    h[s] = (not h[s]) and 1 or h[s] + 1\n  end\n  return h\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal letters = test.letters or\
    \ string.char(65):gsub(\"(.)\", function(c)\n\t\treturn string.format(\"%c\",\
    \ string.byte(c))\n\tend)\n\tlocal counts = {}\n\tfor _, v in pairs(string.gsub(letters,\
    \ \".\", function(c) return c end)) do\n\t\tcounts[v] = counts[v] or 0\n\t\tcounts[v]\
    \ = counts[v] + 1\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(counts) do\n\
    \t\tif result[k] ~= nil then\n\t\t\tif result[k] > v then\n\t\t\t\tresult[k] =\
    \ v\n\t\t\tend\n\t\telse\n\t\t\tresult[k] = v\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi641au3_.lua:10:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpi641au3_.lua:10: in local 'candidate'\n\t/tmp/tmpi641au3_.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  if test == '' then return {} end\n\
    \  local letters = {}\n  for _ in string.gmatch(test, \"([a-z])\") do\n    table.insert(letters,\
    \ _)\n  end\n  local max_count = 1\n  local max_letter = nil\n  local count =\
    \ {}\n  for _, l in ipairs(letters) do\n    if not count[l] then\n      count[l]\
    \ = 1\n    elseif count[l] > max_count then\n      max_count = count[l]\n    \
    \  max_letter = l\n    end\n  end\n  local result = {}\n  for _, l in ipairs(letters)\
    \ do\n    if count[l] == max_count then\n      result[max_letter] = result[max_letter]\
    \ + count[l]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ucnfu3_.lua:25:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp5ucnfu3_.lua:25: in local 'candidate'\n\t/tmp/tmp5ucnfu3_.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local s = {}\n    for k, v in\
    \ pairs(test) do\n        s[k] = s[k] or 0\n        s[k] = s[k] + 1\n    end\n\
    \    return s\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9_wweted.lua:13: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function rec(x, t, n)\n \
    \   if x == \"\" then return n, {} end\n    if t[x] then\n      local _, vals\
    \ = rec(t[x], t, n)\n      n[x] = n[x] + 1\n      for k, v in vals do\n      \
    \  t[x] = k\n        table.insert(t, x)\n      end\n      return n, vals\n   \
    \ end\n    local _, vals = rec(x, t, n)\n    n[x] = 1\n    table.insert(t, x)\n\
    \    return n, vals\n  end\n  local t = {}\n  local n = {}\n  local count = {}\n\
    \  for k, v in test:gmatch(\"([%z\\- ])\") do\n    local x, y = k:byte()\n   \
    \ count[y] = count[y] + 1\n  end\n  local key\n  for key, value in pairs(count)\
    \ do\n    if n[key] > value then\n      n[key] = value\n      t[key] = key\n \
    \   end\n  end\n  while true do\n    local key, _, vals = rec(\"\", t, n)\n  \
    \  if key == \"-\" then break end\n    count[key] = 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp274r0iwc.lua:25: invalid escape sequence near ''"([%z\-''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for char in\
    \ test:gmatch(\"[%a]+\") do\n    counts[char] = counts[char] or 0\n    counts[char]\
    \ = counts[char] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao1ppwbx.lua:18:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpao1ppwbx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = test:gsub(\"\
    [^a-z]\", \"\"):gsub(\"%S+\", \"\")\n    local histogram = {}\n    for i = 1,\
    \ #letters do\n        histogram[letters[i]] = histogram[letters[i]] or 1\n  \
    \      histogram[letters[i]]  = histogram[letters[i]]  + 1\n    end\n    return\
    \ histogram\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybs9eny0.lua:18:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpybs9eny0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for c in\
    \ test:gmatch(\".\") do\n    table.insert(letters, c)\n  end\n  local max = {}\n\
    \  local letter\n  for i, letter in ipairs(letters) do\n    local count, count\
    \ = max[letter] or 0, 1\n    for j = 1, #letters do\n      if letters[j] == letter\
    \ then\n        count = count + 1\n      end\n    end\n    table.insert(max, letter,\
    \ count)\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vipg4ou.lua:19:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6vipg4ou.lua:19: in local 'candidate'\n\t/tmp/tmp6vipg4ou.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local words = string.gmatch(test,\
    \ \"%w+\")\n  local counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbn9q7h8.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for _, letter\
    \ in ipairs(test) do\n    if not counts.hasOwnProperty(letter) then\n      counts[letter]\
    \ = 0\n    end\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe5iyzir.lua:19:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmphe5iyzir.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  -- Get count of each letter in\
    \ test\n  local counts = {}\n  for i=1,#test do\n    local letter = test:sub(i,i)\n\
    \    counts[letter] = tonumber(counts[letter]) or 1\n  end\n  -- Find letter with\
    \ max count\n  local maxKey = nil\n  local maxValue = tonumber(counts[1])\n  for\
    \ key,value in pairs(counts) do\n    if value > maxValue then\n      maxKey =\
    \ key\n      maxValue = value\n    end\n  end\n  -- Return the letter with max\
    \ count and its corresponding count\n  return {maxKey,maxValue}\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI see you used `histogram`, but `local counts = {}`\
    \ is used before `local test = \"abbbc\"` - is it a typo? Also, what is the purpose\
    \ of `local letter` ? I do not see `letter` being used anywhere else. Finally,\
    \ the `for key,value in pairs(counts) do ... end` statement is never executed\n\
    <|/ c |>\n<| a dscore=2 tags=lua,string |>\nThe accepted answer gives the right\
    \ way to do it. But here's another way, which is probably faster:\n<code>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvg_xnpa0.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histogram = {}\n  for i =\
    \ 1, #test do\n    local letter = test[i]\n    if not histogram[letter] then\n\
    \      histogram[letter] = 1\n    else\n      histogram[letter] = histogram[letter]\
    \ + 1\n    end\n  end\n  return histogram\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd72oxrwg.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpd72oxrwg.lua:10: in local 'candidate'\n\
    \t/tmp/tmpd72oxrwg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for _,x in\
    \ string.gmatch(test, \"([a-z]+)\") do\n    counts[x] = (counts[x] or 0) + 1 --\
    \ If it is the first time the letter appears, make it 1.\n  end\n  return counts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemzt6oln.lua:8:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpemzt6oln.lua:8: in local 'candidate'\n\
    \t/tmp/tmpemzt6oln.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function count(letters)\n\
    \    local count = {}\n    for i=1,#letters do\n      count[i] = letters[i]:byte()\
    \ - 1\n    end\n    return count\n  end\n  local counts = {}\n  for i=1,#test\
    \ do\n    local words = test:match('^%w(%a+)*$')\n    local letters = test:gsub('^%w(%a+)*$',\
    \ '')\n    local counts = count(letters)\n    for letter,count in pairs(counts)\
    \ do\n      counts[letter] = counts[letter] + 1 or 1\n    end\n  end\n  local\
    \ letters = {}\n  for k,v in pairs(counts) do\n    letters[k] = v > 1 and v or\
    \ letters[k]\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8do89xc3.lua:9:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp8do89xc3.lua:9:\
    \ in local 'count'\n\t/tmp/tmp8do89xc3.lua:17: in local 'candidate'\n\t/tmp/tmp8do89xc3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for letter\
    \ in test:gmatch(\"%a\") do\n    table.insert(letters, letter)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjz0jq9g.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\n    for\
    \ letter, count in string.gmatch(test, \"[%l]\") do\n        histogram[letter]\
    \ = count\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvzvt2iup.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  for _, _,\
    \ _, c in gmatch string.rep(test, \" \") do\n    table.insert(result, c, table.ge(result,\
    \ c, 0) + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt7qgj7mt.lua:7: ''do'' expected near ''string''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  -- Create a table with each character\
    \ and the amount of times it occurs\n  local d = {}\n  -- Count the occurrences\
    \ of each character\n  for c in test:gmatch(\".\") do d[c] = d.[c] + 1 end\n \
    \ -- Sort the dictionary by the occurrence amount\n  table.sort(d)\n  -- Return\
    \ the character with the most occurrences\n  if d[d[1]] then return d[1] else\
    \ return nil end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67_sqygm.lua:9: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histogram = {}\n  for letter\
    \ in string.gmatch(test, \"%a\") do histogram[letter] = 1 end\n  return histogram\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp437hmmuh.lua:14:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmp437hmmuh.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for letter,\
    \ count in string.gmatch(test, \"(%w+)\") do\n        count = tonumber(count)\n\
    \        if count ~= nil then\n            table.insert(counts, { letter = letter,\
    \ count = count })\n        end\n    end\n    table.sort(counts, function(a, b)\
    \ return a.count > b.count end)\n    local max_count = 0\n    local max_letter\
    \ = nil\n    for i = 1, #counts do\n        local this_count = counts[i].count\n\
    \        if this_count > max_count then\n            max_count = this_count\n\
    \            max_letter = counts[i].letter\n        end\n    end\n    return max_count,\
    \ max_letter\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=lua |>\nYou can use a\
    \ global table to store the letters and their counts, and return the letter with\
    \ the highest count. I don't know what to write in Lua to do that, but I hope\
    \ this helps.\n<|/ a dscore=0 |>\n<| c |>\nOh, sorry, I didn't know what to write\
    \ in Lua. How would I go about that?\n<|/ c |>\n<| c |>\nHow would I make that\
    \ global table?\n<|/ c |>\n<| c |>\nI don't know Lua, but I can tell you how to\
    \ create a global table and fill it with key-value pairs. After that I can tell\
    \ you how to query the table with its keys and values.\n<|/ c |>\n<| a dscore=0\
    \ |>\nIf you don't want to use an extra table, then I would use a table to keep\
    \ track of the counts. \nThis program does what I think you want.\n<code>\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwjrlsxtf.lua:25: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  local letters\
    \ = {}\n  for letter in test:gmatch(\"[%a]+\") do table.insert(letters, letter)\
    \ end\n  for i = 1, #letters do\n    local letter = letters[i]\n    local count\
    \ = letters[letter]:count()\n    if result[letter] == nil then\n      result[letter]\
    \ = count\n    else\n      result[letter] = result[letter] + count\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59lpb_4v.lua:11:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp59lpb_4v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp59lpb_4v.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local frequencies = {}\n    for\
    \ letter, occurrences in pairs(test:gsub('%a',''):gsub(' ','')) do\n        if\
    \ frequencies[letter] == nil then\n            frequencies[letter] = 1\n     \
    \   else\n            frequencies[letter] = frequencies[letter] + 1\n        end\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6dhzvexb.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function count(key)\n   \
    \ if count == nil then count = { } end\n    if key[1] < 0 or key[1] > #test then\
    \ return end\n    local val = count[key[1]]\n    if val == nil then val = 1 end\n\
    \    count[key[1]] = val + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgurglusv.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test\
    \ do\n        table.insert(table[tostring(test[i])], 1)\n    end\n    local maxCount\
    \ = 1\n    local maxLetter = \"\"\n    for k,v in pairs(table) do\n        if\
    \ v > maxCount then\n            maxCount = v\n            maxLetter = k\n   \
    \     end\n    end\n    table.insert(table[tostring(maxLetter)], 1)\n    return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpa4x8mi.lua:8:\
    \ attempt to call a nil value (field 'insert')\nstack traceback:\n\t/tmp/tmpzpa4x8mi.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzpa4x8mi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local count = {}\n  for _, letter\
    \ in string.gmatch(test, \"[^ ]+\") do\n    local count = count.[letter] or 0\n\
    \    count[letter] = count + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs1oaen_.lua:8: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local letters = {}\n   for _,\
    \ letter in ipairs(test) do table.insert(letters, letter) end\n   local frequency\
    \ = {}\n   local max = -math.infinity\n   for _, letter in ipairs(letters) do\n\
    \      frequency.[letter] = frequency.[letter] or 0\n      frequency.[letter]\
    \ = frequency.[letter] + 1\n      if frequency.[letter] > max then max = frequency.[letter]\
    \ end\n   end\n   for letter, occurrence in pairs(frequency) do\n      frequency[letter]\
    \ = occurrence / max\n   end\n   return frequency\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqscawks.lua:11: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for i\
    \ = 1, #test do\n        local letter = string.sub(test, i, i)\n        -- If\
    \ the letter doesn't exist, create a new key/value pair with its occurrence as\
    \ value.\n        if letters[letter] == nil then\n            letters[letter]\
    \ = 0\n        end\n        letters[letter] += 1\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl7cjh51m.lua:13: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    local\
    \ counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq1kxuabb.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal letters = {}\n\tfor letter\
    \ in test:gmatch(\"[%a]\") do\n\t\tif not letters[letter] then\n\t\t\tletters[letter]\
    \ = 0\n\t\tend\n\t\tletters[letter] = letters[letter] + 1\n\tend\n\tlocal max\
    \ = 0\n\tlocal maxLetter\n\tfor letter in pairs(letters) do\n\t\tif letters[letter]\
    \ > max then\n\t\t\tmax = letters[letter]\n\t\t\tmaxLetter = letter\n\t\tend\n\
    \tend\n\treturn {\n\t\tcount = max,\n\t\tletter = maxLetter,\n\t}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply3bf20r.lua:30:\
    \ expected: {a=2, b=2}\nactual: {count=2, letter=\"b\"}\nstack traceback:\n\t\
    /tmp/tmply3bf20r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal dict = {}\n\tfor letter in\
    \ string.gmatch(test, \"([a-z]+):\") do\n\t\tdict[letter] = dict[letter] or 1\n\
    \t\tdict[letter] = dict[letter] + 1\n\tend\n\treturn dict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv4q5q5t.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpbv4q5q5t.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for letter\
    \ in string.gmatch(test, \"([a-z])\") do\n        table.insert(counts, letter,\
    \ table.count(test, \"%\"..letter..\"%\"))\n    end\n    table.sort(counts, function(a,\
    \ b) return a[2] > b[2] end)\n    local letters = {}\n    for i=1,#counts do\n\
    \        if counts[i][2] > 1 then\n            table.insert(letters, counts[i][2])\n\
    \        end\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfwq92vs6.lua:8:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpfwq92vs6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpfwq92vs6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- The \"table\" is a dictionary\
    \ where the first column is the letter, the second is the count\n    local table\
    \ = {}\n    -- The function below splits the string and counts the letters in\
    \ each space\n    local function count_letters(str)\n        for _, c in ipairs(str)\
    \ do\n            if table.has_key(tostring(c)) then\n                table[tostring(c)]\
    \ = table[tostring(c)] + 1\n            else\n                table.insert(table,\
    \ {tostring(c), 1)}\n            end\n        end\n    end\n    -- Call the function\
    \ above and pass the table as a parameter\n    count_letters(test)\n    return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpisofqyjk.lua:14: ''}'' expected near '')''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local frequency = {}\n    for\
    \ letter in test:gmatch(\"[%a]+\") do\n        frequency[letter] = frequency[letter]\
    \ or 0\n        frequency[letter] = frequency[letter] + 1\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzsk36e7g.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local keys = {}\n    local counts\
    \ = {}\n    for k in string.gmatch(test, \"%w+\") do table.insert(keys, k) end\n\
    \    for i,k in ipairs(keys) do\n        table.insert(counts, 1, k)\n    end\n\
    \    for k,v in ipairs(counts) do counts[k] = v end\n    table.sort(counts)\n\
    \    -- Return only the letter with the highest count\n    return counts[#counts]\n\
    end\nprint(histogram(\"a a a b b c\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "c\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5g9xdy8.lua:22:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmpi5g9xdy8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    local\
    \ max = 0\n    local result\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf6082ml1.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local t = {}\n  for letter, count\
    \ in string.gmatch(test, \"%a\") do\n    local count = tonumber(count)\n    if\
    \ count > 0 then\n      t[letter] = count\n    end\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ayfql8o.lua:9:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2ayfql8o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ayfql8o.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local result = {}\n   for _, letter\
    \ in ipairs(test) do\n      result[letter] = result[letter] or 1\n      result[letter]\
    \ = result[letter] + 1\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal9grz92.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpal9grz92.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- Create a table containing\
    \ every character of the alphabet\n    local letters = {}\n    for i = 65 do table.insert(letters,\
    \ string.char(i)) end\n    -- Transform the string into a table\n    local alphabet\
    \ = {}\n    for i = 1, #test do\n        -- If the character is not in the table\
    \ add it with a count of 1\n        if string.sub(test, i, i) not in alphabet[string.sub(test,\
    \ 1, i)] then\n            alphabet[string.sub(test, 1, i)] = 1\n        else\n\
    \            -- If the character is already in the table increment the count\n\
    \            alphabet[string.sub(test, 1, i)] = alphabet[string.sub(test, 1, i)]\
    \ + 1\n        end\n    end\n    -- Return the most repetitive character\n   \
    \ local most = alphabet[1]\n    for i = 1, #alphabet do\n        if alphabet[i]\
    \ > most then\n            most = alphabet[i]\n        end\n    end\n    -- Return\
    \ the characters with more occurrences as dictionary\n    local count = {}\n \
    \   for i = 1, #alphabet do\n        if alphabet[i] == most then\n           \
    \ table.insert(count, string.sub(test, 1, i))\n        end\n    end\n    return\
    \ count, most\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprtumdosz.lua:8: '','' expected near ''do''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = test:gsub(\"\
    %w+\",\"\")\n    local counts = letters:gsub(\"(.-)(.)\"):gsub(\"\\\\2\"):gsub(\"\
    ^\\\\1\"):gsub(\"^%+\",\"\")\n    local dict = { }\n    for _, letter in pairs(letters)\
    \ do\n        dict[letter] = dict[letter] or { }\n        dict[letter][counts[letter]]\
    \ = true\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykzkkcx8.lua:7:\
    \ bad argument #2 to 'gsub' (string/function/table expected, got no value)\nstack\
    \ traceback:\n\t/tmp/tmpykzkkcx8.lua:7: in local 'candidate'\n\t/tmp/tmpykzkkcx8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local freq = {}\n  for i, c in\
    \ ipairs(test) do\n    freq[c] = freq[c] or 1\n    freq[c] = freq[c] + 1\n  end\n\
    \  local max = 0\n  local best = {}\n  for c, n in pairs(freq) do\n    if n >\
    \ max then\n      max = n\n      best = {c = c, n = n}\n    end\n  end\n  return\
    \ best\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzza7x3j.lua:25:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpyzza7x3j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = { }\n  for _, letter\
    \ in ipairs(test) do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  \n  for letter, count in pairs(counts) do\n \
    \   if count == counts[letter] then\n      return { [letter] = count }\n    end\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpct4m55iq.lua:31: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for letter\
    \ in test:gmatch(\"%l+\") do\n        if not letters[letter] then\n          \
    \  letters[letter] = 0\n        end\n        letters[letter] = letters[letter]\
    \ + 1\n    end\n    return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbevgf2uo.lua:20:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpbevgf2uo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    for char\
    \ in test:gmatch(\"[%a]+\") do result[#result+1] = {char = char, count = 1} }\n\
    \    for i = 2, #result do\n        if result[i].count > result[i - 1]:count then\n\
    \            result[i - 1]:count = result[i].count\n            result[i - 1].char\
    \ = result[i].char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfq9hoi2p.lua:7: unexpected symbol near ''}''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for word\
    \ in test:gmatch(\"[[:alpha:]]\") do\n        for letter in word:gmatch(\"[[:alpha:]]\"\
    ) do\n            letters[letter] = letters[letter] or 1\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n    end\n    return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxkkvb77.lua:19:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmphxkkvb77.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function count(letter)\n\
    \    local counts = test[letter]\n    if not counts then\n      counts = { letter\
    \ }\n      test[letter] = counts\n    else\n      counts[letter] = counts[letter]\
    \ + 1\n    end\n  end\n  local frequencies = { }\n  local letters\n  for letter\
    \ in pairs(test) do\n    local count = test[letter]\n    count(letter)\n  end\n\
    \  for _, letter in ipairs(test) do\n    local count = test[letter]\n    letters\
    \ = letters or letter\n    count[letter] = count[letter] + 1\n    local max\n\
    \    if count[letter] > 1 then\n      max = count[letter]\n    end\n    if max\
    \ > frequencies[letter] then\n      frequencies[letter] = max\n    end\n  end\n\
    \  return frequencies\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqjvw7vu.lua:17:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpwqjvw7vu.lua:17: in local 'candidate'\n\t/tmp/tmpwqjvw7vu.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local count = {}\n    for letter\
    \ in string.gmatch(test, \"[%w]\") do\n        count[letter] = count[letter] +\
    \ 1 or 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqvts81t.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpdqvts81t.lua:8: in local 'candidate'\n\t/tmp/tmpdqvts81t.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal letters = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxfofc0xj.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for ch in\
    \ test:gmatch(\"%a\") do\n    table.insert(letters, ch)\n  end\n  local counts\
    \ = {}\n  local max = 0\n  for _, ch in ipairs(letters) do\n    local count =\
    \ table.count(letters, ch)\n    if count > max then\n      max = count\n    end\n\
    \    counts[ch] = count\n  end\n  -- Return result\n  local result = {}\n  for\
    \ _, ch in ipairs(letters) do\n    if counts[ch] > max then\n      result = {ch,\
    \ counts[ch]}\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx53xjr5.lua:13:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpfx53xjr5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpfx53xjr5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local letters = {}\n   for letter\
    \ in test:gmatch(\"[%a]+\") do\n      if not letters[letter] then\n         letters[letter]\
    \ = 0\n      end\n      letters[letter] = letters[letter] + 1\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_919ffuv.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0m3dss9.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- Create a dictionary to store\
    \ the letter count\n    local counts = {}\n    -- Create a variable with the test\
    \ string\n    local test = test\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp431pjm3b.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal hist = {}\n\tlocal words\
    \ = {}\n\tlocal splitted = test:gsub(\"%S+\", \" \")\n\tfor i, v in ipairs(splitted)\
    \ do\n\t\twords[i] = v\n\t\thist[v] = hist[v] + 1 -- Increment the count for each\
    \ occurence of the letter\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb_gtd2mf.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local s = string.rep(test,10)\n\
    \  local table = nil\n  if s:sub(1,1) == '{' then\n    local t = s:match('[^}]+')\n\
    \    table = t\n  end\n  local dict = {}\n  local counts = {}\n  for _, letter\
    \ in ipairs(s) do\n    local count = 1\n    local i = string.find(string, letter,\
    \ 1)\n    while i do\n      count = count + 1\n      i = string.find(string, letter,\
    \ i + 1)\n    end\n    table.insert(counts, letter)\n    dict[letter] = count\n\
    \  end\n  local max = 0\n  local maxLetter = nil\n  for k,v in pairs(counts) do\n\
    \    if v > max then\n      max = v\n      maxLetter = k\n    end\n  end\n  table.sort(counts,\
    \ function(a,b) return counts[a] < counts[b] end)\n  return { table = table, dict\
    \ = dict, max = max, maxLetter = maxLetter }\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppr_3qxwu.lua:32:\
    \ attempt to index a nil value (local 'table')\nstack traceback:\n\t/tmp/tmppr_3qxwu.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmppr_3qxwu.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter\
    \ in test:gmatch(\".\") do\n    local letter_count = tonumber(counts[letter] or\
    \ 0)\n    counts[letter] = letter_count + 1\n  end\n  return counts\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hdvunya.lua:17:\
    \ expected: {a=2, b=2}\nactual: {\" \"=3, a=2, b=2}\nstack traceback:\n\t/tmp/tmp8hdvunya.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\n    for\
    \ _, letter in ipairs(test) do\n        histogram[letter] = histogram[letter]\
    \ or 0\n        histogram[letter] = histogram[letter] + 1\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ix6x9n6.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local t = {}\n  for _, c in ipairs(test)\
    \ do\n    t[c] = t[c] or 1\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp752fd944.lua:16:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp752fd944.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for letter,\
    \ count in pairs(test:gsub(\"([a-z])\", \"%%%1\"):gsub(\"%([a-z])\", \"%d+\"))\
    \ do\n        letters[letter] = count or 0\n    end\n    local max_count = tonumber(letters.max)\n\
    \    local max_letter = letters[string.sub(string.char(#letters), 1, 1)]\n   \
    \ local output = {}\n    for letter, count in pairs(letters) do\n        if count\
    \ == max_count then\n            table.insert(output, max_letter, count)\n   \
    \     end\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70grn9_c.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp70grn9_c.lua:7: in local 'candidate'\n\t/tmp/tmp70grn9_c.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    local\
    \ count = -1\n    for c in test:gmatch(\"[%l%p]\") do\n        count = count +\
    \ 1\n        local found = false\n        for k,v in pairs(result) do\n      \
    \      if v == count then\n                result[k] = v+1\n                found\
    \ = true\n                break\n            end\n        end\n        if not\
    \ found then\n            result[c] = count\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagitzuct.lua:28:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=2}\nstack traceback:\n\t/tmp/tmpagitzuct.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local dict = nil\n    local max\
    \ = -1\n    local char = nil\n    local count = 0\n    for c in test:gmatch(\"\
    %a\") do\n        char = test[c]\n        if char == \"\" then break end\n   \
    \     if max == -1 then\n            max = #char\n            count = 0\n    \
    \    elseif #char > max then\n            max = #char\n            count = 0\n\
    \        elseif #char == max then\n            count = count + 1\n        end\n\
    \    end\n    dict = { max = max, char = char, count = count }\n    return dict\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz74w8opb.lua:14:\
    \ attempt to get length of a nil value (local 'char')\nstack traceback:\n\t/tmp/tmpz74w8opb.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpz74w8opb.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = redis.call('zcount',\
    \ test .. ':1', '-inf', 'inf', 0, -1, 'WITHSCORES')\n  for k,v in pairs(counts)\
    \ do\n    table.insert( v, k )\n  end\n  table.sort( v, function(a,b) return a[2]\
    \ > b[2] end )\n  return unpack( v, 1, 1 )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79jb350g.lua:6:\
    \ attempt to index a nil value (global 'redis')\nstack traceback:\n\t/tmp/tmp79jb350g.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp79jb350g.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal ret = {}\n\ttest.split(''):gsub(function(letter)\n\
    \t\tret[letter] = ret[letter] + 1 or 1\n\tend)\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zjw4b97.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp6zjw4b97.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6zjw4b97.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local table = {}\n    for letter,\
    \ count in pairs(string.gmatch(test, \"%a\"))\n    do\n        table[letter] =\
    \ table[letter] + 1 or 1\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r_6rpf8.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4r_6rpf8.lua:7: in local 'candidate'\n\t/tmp/tmp4r_6rpf8.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local table = {\"a\", \"b\", \"\
    c\", \"d\"}\n  local histo = {}\n  for i = 1, #table do\n    histo[table[i]] =\
    \ histo[table[i]] or 0\n    histo[table[i]] = histo[table[i]] + 1\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_xbej0fh.lua:26: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for char\
    \ in test:gmatch(\"%a\") do\n        table.insert(counts, char)\n    end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphyp7thet.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal t = {}\n\tfor _, l in ipairs(string.gmatch(test,\
    \ \"([a-z]+)\")) do\n\t\tt[#t + 1] = l\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8xd6e_i9.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal alphabet = {\n\t\t[\"a\"\
    ] = 1,\n\t\t[\"b\"] = 1,\n\t\t[\"c\"] = 1,\n\t\t[\"d\"] = 1,\n\t\t[\"e\"] = 1,\n\
    \t\t[\"f\"] = 1,\n\t\t[\"g\"] = 1,\n\t\t[\"h\"] = 1,\n\t\t[\"i\"] = 1,\n\t\t[\"\
    j\"] = 1,\n\t\t[\"k\"] = 1,\n\t\t[\"l\"] = 1,\n\t\t[\"m\"] = 1,\n\t\t[\"n\"] =\
    \ 1,\n\t\t[\"o\"] = 1,\n\t\t[\"p\"] = 1,\n\t\t[\"q\"] = 1,\n\t\t[\"r\"] = 1,\n\
    \t\t[\"s\"] = 1,\n\t\t[\"t\"] = 1,\n\t\t[\"u\"] = 1,\n\t\t[\"v\"] = 1,\n\t\t[\"\
    w\"] = 1,\n\t\t[\"x\"] = 1,\n\t\t[\"y\"] = 1,\n\t\t[\"z\"] = 1,\n\t}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyrk3dzvq.lua:48: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local frequency = {}\n  for letter\
    \ in test:gmatch(\"%S+\") do\n    local letter_count = frequency[letter]\n   \
    \ if not letter_count then\n      letter_count = 1\n    else\n      letter_count\
    \ = letter_count + 1\n    end\n    frequency[letter] = letter_count\n  end\n \
    \ return frequency\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiiq87mgs.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpiiq87mgs.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    return function()\n        for\
    \ _, v in ipairs(test) do\n            local word = string.lower(v)\n        \
    \    local letters = {}\n            local chars = {}\n            for _, c in\
    \ ipairs(string.gsub(string.lower(v), \" \", \"\")..\"\") do\n               \
    \ table.insert(letters, c)\n                table.insert(chars, c)\n         \
    \   end\n            -- Sort the characters in alphabetical order\n          \
    \  table.sort(letters)\n            -- Count the number of occurrences of each\
    \ letter\n            for _, c in ipairs(letters) do\n                table.insert(chars[c],\
    \ 0)\n            end\n            for _, c in ipairs(chars) do\n            \
    \    table.insert(chars[c], 1)\n            end\n            -- Now iterate over\
    \ the dictionary and find the letter with the most\n            -- repetition,\
    \ returning the count and the letter in that position\n            for k = 1,\
    \ #chars do\n                if chars[k][#chars[k]] > chars[chars[k][#chars[k]]]\
    \ then\n                    chars[chars[k][#chars[k]]] = chars[k]\n          \
    \          chars[k][#chars[k]] = nil\n                end\n            end\n \
    \           if #chars > 1 then\n                local maxChar, maxCount = nil,\
    \ 0\n                for k = 1, #chars do\n                    if chars[k][#chars[k]]\
    \ > maxCount then\n                        maxChar = chars[k][#chars[k]]\n   \
    \                     maxCount = chars[k][#chars[k]]\n                    end\n\
    \                end\n                return maxChar, maxCount\n            end\n\
    \        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g87pwib.lua:49:\
    \ expected: {a=2, b=2}\nactual: function: 0x55d5a5384ee0\nstack traceback:\n\t\
    /tmp/tmp7g87pwib.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for _,c in\
    \ ipairs(test) do\n    counts[c] = counts[c] + 1 or 1\n  end\n  local max,maxKey\
    \ = nil,nil\n  for key,value in pairs(counts) do\n    if max and max < value then\n\
    \      max,maxKey = value,key\n    end\n  end\n  if maxKey then\n    return maxKey,counts[maxKey]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4b2zdgb.lua:24:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmpw4b2zdgb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local count = {}\n  for letter\
    \ in test:gmatch(\"([A-Za-z]+)\") do\n    count = count[letter] or 0\n    count[letter]\
    \ = count + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8syebkr1.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local freq = {}\n    for c in\
    \ test:gmatch(\"[%a]+\") do\n        if not freq[c] then\n            freq[c]\
    \ = 1\n        else\n            freq[c] = freq[c] + 1\n        end\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp44yb3ch9.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7m5u3e58.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9dhvvpv.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local counts = {}\n   for letter,\
    \ count in pairs(test:gsub(\"(^[%a])\"):gsub(\"%L\", \" \")):gmatch(\"%w+\")\n\
    \      counts[letter] = tonumber(count)\n   end\n   counts = counts:sort(function(a,b)\
    \ return counts[a] > counts[b] end)\n   return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy02msvsz.lua:8: ''do'' expected near ''counts''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- remove whitespace\n    test\
    \ = test:gsub(\"%w+\", \"\")\n    local map = {}\n    for i = 1, #test do\n  \
    \      local letter = test:sub(i, i)\n        -- increase count of letter\n  \
    \      if map[letter] == nil then\n            map[letter] = 1\n        else\n\
    \            map[letter] = map[letter] + 1\n        end\n    end\n    -- return\
    \ all with highest count\n    local largest = nil\n    local count = nil\n   \
    \ for k, v in pairs(map) do\n        if largest == nil then\n            largest\
    \ = k\n            count = v\n        elseif v > count then\n            largest\
    \ = k\n            count = v\n        end\n    end\n    return largest, count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg3o5y8y.lua:36:\
    \ expected: {a=2, b=2}\nactual: \" \"\nstack traceback:\n\t/tmp/tmpkg3o5y8y.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local histogram = {}\n   for _,\
    \ letter in ipairs(test) do\n      histogram[letter] = histogram[letter] or 0\n\
    \      histogram[letter] = histogram[letter] + 1\n   end\n   return histogram\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6ozxs3p.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpp6ozxs3p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local s = #test - 1\n   local\
    \ histo = {}\n   for i = 1, s do\n      histo[test:sub(i,i)] = histo[test:sub(i,i)]\
    \ or 1\n   end\n   return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cjnuo9p.lua:17:\
    \ expected: {a=2, b=2}\nactual: {\" \"=1, a=1, b=1}\nstack traceback:\n\t/tmp/tmp6cjnuo9p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local chars = {}\n  local maxCount\
    \ = 0\n  for _ in test:gmatch(\"%a\") do\n    local charCount = 1\n    for c in\
    \ string.gsub(_, \"[^\" .. string.char(\" \") .. \"]\", \"\") do\n      charCount\
    \ = charCount + 1\n      chars[c] = chars[c] + 1 or 1\n    end\n    if charCount\
    \ > maxCount then\n      maxCount = charCount\n    end\n  end\n  return chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi54jux_0.lua:10:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpi54jux_0.lua:10: in local 'candidate'\n\t/tmp/tmpi54jux_0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters, occurrence = {},\
    \ {}\n    for letter in test:gmatch(\"%S+\") do\n        if occurrence[letter]\
    \ == nil then\n            occurrence[letter] = 1\n        else\n            occurrence[letter]\
    \ = occurrence[letter] + 1\n        end\n    end\n    return letters, occurrence\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaiqkz8z.lua:20:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpqaiqkz8z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histo = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4i83jfc1.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = test\n      \
    \  -- Separate the text into words.\n        -- The \"space\" character is removed\
    \ from the string. Then, each word is converted to\n        -- its lowercase letters,\
    \ using string.gsub. Finally a new table is created using table.split.\n    local\
    \ counts = table.new()\n    for i = 1, #letters do\n        -- Create a table\
    \ for each letter, where the key is the letter itself, and the value is the\n\
    \        -- count of how many times the letter appears in the string.\n      \
    \  counts[letters[i]] = counts[letters[i]] or 1\n    end\n    local max = -1\n\
    \    -- Return the letters with the highest count.\n    for i = 1, #counts do\n\
    \        if counts[i] > max then\n            max = counts[i]\n        end\n \
    \   end\n    local result = {}\n    -- Go through each letter and see if it's\
    \ in the result.\n    for i = 1, #letters do\n        if counts[letters[i]] ==\
    \ max then\n            result[letters[i]] = 1\n        end\n    end\n    return\
    \ table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4rhwqla.lua:10:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpn4rhwqla.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn4rhwqla.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for item in\
    \ test:gmatch(\"[%l]\") do\n    if counts[item] then\n      counts[item] = counts[item]\
    \ + 1\n    else\n      counts[item] = 1\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpex80k48q.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local mapping = {}\n   for letter,\
    \ count in string.gmatch(test, \"%a\") do\n      count = tonumber(count)\n   \
    \   if count == nil then\n         count = 1\n      end\n      mapping[letter]\
    \ = mapping[letter] or 0\n      mapping[letter] = count + mapping[letter]\n  \
    \ end\n   return mapping\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6cqvntx.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpv6cqvntx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal t = {}\n\tfor _,v in string.gmatch(test,\"\
    [%a]\") do\n\t\tt[v]=t[v] or 0\n\t\tt[v]+=1\n\tend\n\tlocal max,maxv = -0,0\n\t\
    for k,v in pairs(t) do\n\t\tif v>max then\n\t\t\tmax,maxv = v,k\n\t\tend\n\tend\n\
    \treturn maxv,t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp57ukjz5o.lua:9: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local dict = {}\n    local count\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_rt5_yj.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for i=1,#test\
    \ do counts[test[i]] = counts[test[i]] + 1 end\n    return counts, { _[1], _[1],\
    \ counts[_[1]] }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqx4ket7.lua:7:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpeqx4ket7.lua:7: in local 'candidate'\n\t/tmp/tmpeqx4ket7.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for letter\
    \ in string.gmatch(test, \"[%a]\") do\n    table.insert(letters, letter)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptrx26aci.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    local\
    \ counts = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4jkrt9a_.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histogram = {}\n  local counts\
    \ = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do \n    histogram[letter]\
    \ = histogram[letter] or 0\n    histogram[letter] = histogram[letter] + 1\n  end\n\
    \  for letter, count in pairs(histogram) do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + count\n  end\n  local max = 0\n\
    \  local letter\n  for letter, count in pairs(counts) do\n    if max < count then\n\
    \      max = count\n    end\n  end\n  for letter, count in pairs(histogram) do\n\
    \    if count > max then\n      max = count\n    end\n  end\n  local result =\
    \ {}\n  for letter, count in pairs(histogram) do\n    if count == max then\n \
    \     result[letter] = letter\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0dw7b85.lua:40:\
    \ expected: {a=2, b=2}\nactual: {a=\"a\", b=\"b\"}\nstack traceback:\n\t/tmp/tmpi0dw7b85.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for letter\
    \ in test:gmatch(\"[%l+]\") do\n        local count = table.insert(counts, letter)\n\
    \    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd03y3vjy.lua:16:\
    \ expected: {a=2, b=2}\nactual: {\"a\", \"b\", \"b\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmpd03y3vjy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for k\
    \ in string.gmatch(test, \"([a-z]+)\") do\n        table.insert(letters, k)\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppvheop9w.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = { }\n  for letter\
    \ in test:gmatch(\"%a\") do counts[letter] = counts[letter] + 1 end\n  local result\
    \ = { }\n  for letter, count in pairs(counts) do\n    result[letter] = { count\
    \ = count, occurrences = 1 }\n  end\n  for letter, count in pairs(counts) do\n\
    \    if count == result[letter].occurrences then\n      result[letter].occurrences\
    \ = count\n      result[letter].letters = result[letter].letters .. letter ..\
    \ \" \"\n    else\n      local new_count = count\n      if count > result[letter].occurrences\
    \ then\n        new_count = result[letter].occurrences\n      end\n      result[letter].occurrences\
    \ = new_count\n      result[letter].letters = result[letter].letters .. letter\
    \ .. \" \"\n    end\n  end\n  table.sort(result, function(a,b) return a.occurrences\
    \ < b.occurrences end)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi_cfec0.lua:7:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmppi_cfec0.lua:7: in local 'candidate'\n\t/tmp/tmppi_cfec0.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal result = {}\n\tfor _, letter\
    \ in ipairs(test) do\n\t\tlocal occurrences = result[letter] or 0\n\t\tresult[letter]\
    \ = occurrences + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqzk4l4b.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpwqzk4l4b.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- Given a string with 'A' as\
    \ 1, and 'B' as 2, etc.\n    local letters = {}\n    for letter, count in pairs(test)\
    \ do letters[letter] = count end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp73m3eh66.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    for letter,\
    \ count in pairs(string.gmatch(test, \"%l+\"))\n    do\n        table.insert(result,\
    \ { letter = letter, count = count })\n    end\n    return table.concat(result,\
    \ \"\\n\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75_8abkb.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp75_8abkb.lua:7: in local 'candidate'\n\t/tmp/tmp75_8abkb.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    return test:gsub('([a-z])', function(c)\
    \ return tonumber(c) end)\n        :groupBy('%1')\n        :filter(function(key)\
    \ ~= nil end)\n        :map(function(key) return {count = key, letter = key} end)\n\
    \        :orderByDesc('count')\n        :limit(1)\n        :list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoy4y9c56.lua:8: unexpected symbol near ''~=''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for _\
    \ in string.gmatch(test, \"[^ ]+\") do\n        if counts.counts[_] == nil then\n\
    \            counts.counts[_] = 1\n        else\n            counts.counts[_]\
    \ = counts.counts[_] + 1\n        end\n    end\n    return counts.counts\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ril6l9t.lua:8:\
    \ attempt to index a nil value (field 'counts')\nstack traceback:\n\t/tmp/tmp5ril6l9t.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5ril6l9t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvkeeef85.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  -- Split the test string into an\
    \ array of words\n  local words = test:gmatch(\"[^A-Za-z]+\")\n  -- Store the\
    \ counts for each word and letter as keys\n  local result = {}\n  for i=1,#words\
    \ do\n    local word = words[i]\n    local count = result[word] or 0\n    result[word]\
    \ = count + 1\n  end\n  -- Return the result in the form of a dictionary\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qewf0ca.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp5qewf0ca.lua:10: in local 'candidate'\n\t/tmp/tmp5qewf0ca.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = string.gsub(test,\
    \ \"[- ]\", \"\")\n  local count = letters:bytes()\n  local result = {}\n  for\
    \ letter in string.gmatch(\"([A-Z]+)\", letters) do\n    result[letter] = result[letter]\
    \ or 1\n    result[letter] = result[letter] + count\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcatpg__5.lua:7:\
    \ attempt to call a nil value (method 'bytes')\nstack traceback:\n\t/tmp/tmpcatpg__5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcatpg__5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal histo = {}\n\tfor letter\
    \ in string.gmatch(test, \"%a\") do\n\t\thisto[letter] = histo[letter] + 1 or\
    \ 1\n\tend\n\tlocal maxcount = -99\n\tlocal maxletter\n\tfor k, v in pairs(histo)\
    \ do\n\t\tif maxcount == -99 or v > maxcount then\n\t\t\tmaxcount = v\n\t\t\t\
    maxletter = k\n\t\tend\n\tend\n\treturn histo[maxletter], maxletter\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnmjskpp6.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpnmjskpp6.lua:8: in local 'candidate'\n\t/tmp/tmpnmjskpp6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function count(letter)\n\
    \    local count\n    if letter:sub(1,1) == \"a\" then count = 1 end\n    if letter:sub(1,1)\
    \ == \"b\" then count = 2 end\n    if letter:sub(1,1) == \"c\" then count = 3\
    \ end\n    if letter:sub(1,1) == \"d\" then count = 4 end\n    if letter:sub(1,1)\
    \ == \"e\" then count = 5 end\n    if letter:sub(1,1) == \"f\" then count = 6\
    \ end\n    if letter:sub(1,1) == \"g\" then count = 7 end\n    if letter:sub(1,1)\
    \ == \"h\" then count = 8 end\n    if letter:sub(1,1) == \"i\" then count = 9\
    \ end\n    if letter:sub(1,1) == \"j\" then count = 10 end\n    if letter:sub(1,1)\
    \ == \"k\" then count = 11 end\n    if letter:sub(1,1) == \"l\" then count = 12\
    \ end\n    if letter:sub(1,1) == \"m\" then count = 13 end\n    if letter:sub(1,1)\
    \ == \"n\" then count = 14 end\n    if letter:sub(1,1) == \"o\" then count = 15\
    \ end\n    if letter:sub(1,1) == \"p\" then count = 16 end\n    if letter:sub(1,1)\
    \ == \"q\" then count = 17 end\n    if letter:sub(1,1) == \"r\" then count = 18\
    \ end\n    if letter:sub(1,1) == \"s\" then count = 19 end\n    if letter:sub(1,1)\
    \ == \"t\" then count = 20 end\n    if letter:sub(1,1) == \"u\" then count = 21\
    \ end\n    if letter:sub(1,1) == \"v\" then count = 22 end\n    if letter:sub(1,1)\
    \ == \"w\" then count = 23 end\n    if letter:sub(1,1) == \"x\" then count = 24\
    \ end\n    if letter:sub(1,1) == \"y\" then count = 25 end\n    if letter:sub(1,1)\
    \ == \"z\" then count = 26 end\n    return count\n  end\n  local function maxCount(counts,\
    \ letter)\n    local max = 0\n    for _,count in pairs(counts) do\n      if count\
    \ > max then\n        max = count\n      end\n    end\n    return max\n  end\n\
    \  local letters = {}\n  for letter in test:gmatch(\"[%a]\") do\n    table.insert(letters,\
    \ letter)\n  end\n  local counts = {}\n  for i,letter in pairs(letters) do\n \
    \   counts[i] = count(letter)\n  end\n  local maxCount = -1\n  local maxLetter\
    \ = \"\"\n  for i,letter in pairs(letters) do\n    local count = counts[i]\n \
    \   if count > maxCount \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfh66_lyo.lua:58: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal histo = {}\n\tfor c in string.gmatch(test,\
    \ \"[%a]\") do\n\t\tif histo[c] then\n\t\t\thisto[c] = histo[c] + 1\n\t\telse\n\
    \t\t\thisto[c] = 1\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp58liqq4a.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = { }\n  for letter\
    \ in test:gmatch(\"[%a]\") do\n    table.insert(counts, letter)\n  end\n  return\
    \ counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4_hnxgl.lua:16:\
    \ expected: {a=2, b=2}\nactual: {\"a\", \"b\", \"b\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmpd4_hnxgl.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local dict = {}\n  for _, _, c\
    \ in ipairs(string.gsub(test, \"([^a-zA-Z]+)\", \n    function(c) return string.format('%s%s',\
    \ string.lower(c), 1) end)) do\n    dict[c] = dict[c] or 1\n  end\n  return dict\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbeh81ww.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpmbeh81ww.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counter = Dict()\n    for\
    \ letter in test:gmatch(\"[^ ]+\") do\n        counter[letter] = counter[letter]\
    \ or 1\n        counter[letter] = counter[letter] + 1\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj61lrosa.lua:6:\
    \ attempt to call a nil value (global 'Dict')\nstack traceback:\n\t/tmp/tmpj61lrosa.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj61lrosa.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for letter\
    \ in string.gmatch(test, \"%a\") do\n    table.insert(letters, letter)\n  end\n\
    \  local dict = {}\n  for _, letter in ipairs(letters) do\n    if dict[letter]\
    \ == nil then\n      dict[letter] = letters[#letters]\n    end\n    dict[letter]\
    \ = dict[letter] + 1\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6b54lp9.lua:15:\
    \ attempt to add a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmpa6b54lp9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpa6b54lp9.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([a-z]) do ([^ ]+) end\") do\n    local _, count =\
    \ unpack(letter)\n    counts[count] = counts[count] or {}\n    table.insert(counts[count],\
    \ letter)\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj2ddt74.lua:18:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpzj2ddt74.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- Remove extra space\n    test\
    \ = test:gsub('%w+', '')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgcfvix4v.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local dict = { }\n   for letter,\
    \ count in string.gmatch(test, \"[%l%a]+\") do\n      if dict[letter] == nil then\n\
    \         dict[letter] = { }\n      end\n      dict[letter][count] = true\n  \
    \ end\n   return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr4zjsct.lua:11:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpzr4zjsct.lua:11: in local 'candidate'\n\
    \t/tmp/tmpzr4zjsct.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local function f(x)\n       \
    \ local k = {}\n        for i = 1, #x do\n            local y = x[i]\n       \
    \     local count = 1\n            if k[y] then\n                count = k[y]\n\
    \            end\n            k[y] = count + 1\n        end\n        return k\n\
    \    end\n    return f( test:gsub(' ','').lower() ):select( function(k,_) return\
    \ k end, function(k,_) return k end )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2t22car.lua:18:\
    \ bad argument #1 to 'lower' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpv2t22car.lua:18: in local 'candidate'\n\t/tmp/tmpv2t22car.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local count = {}\n    for letter\
    \ in test:gmatch(\"%a\") do\n        count[letter] = count[letter] or 0\n    \
    \    count[letter] = count[letter] + 1\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_qp4_7a.lua:25: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local histogram = {}\n   for i,v\
    \ in ipairs(test:gmatch(\"(.-)\")) do\n      histogram[v] = histogram[v] or {}\n\
    \      histogram[v][#histogram[v] + 1] = 1\n   end\n   return histogram\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    for char\
    \ in test:gmatch(\"%a\") do\n        table.insert(result, char)\n    end\n   \
    \ local max = 0\n    local maxChar = \"\"\n    for key, value in pairs(result)\
    \ do\n        if value > max then\n            max = value\n            maxChar\
    \ = key\n        end\n    end\n    return {[maxChar] = max, result = result}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp736n5act.lua:13:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmp736n5act.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp736n5act.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local result = {}\n   for letter,\
    \ count in pairs(test:gsub(\"%a\", \" \"):gsub(\"%A\", \" \")) do\n      if result[letter]\
    \ == nil then\n         result[letter] = count\n      else\n         result[letter]\
    \ = result[letter] + count\n      end\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp97igyr59.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\n    for\
    \ _, letter in ipairs(string.gsub(string.format(\"%W\", test), \"[^\" .. string.letters\
    \ .. \"]\", \"\")) - \"\" do\n        histogram[letter] = histogram[letter] or\
    \ 1\n        histogram[letter] = histogram[letter] + 1\n    end\n    return histogram\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnqo4epd8.lua:7:\
    \ invalid conversion '%W' to 'format'\nstack traceback:\n\t/tmp/tmpnqo4epd8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnqo4epd8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local dict = {}\n  for letter in\
    \ string.gmatch(test, \"(%S+)\") do\n    dict[letter] = dict[letter] or 0\n  \
    \  dict[letter] = dict[letter] + 1\n  end\n  return dict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcud4rgv.lua:18:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpkcud4rgv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for _,\
    \ _, count in string.gmatch(test, \"(.)\") do\n        if counts[count] == nil\
    \ then\n            counts[count] = 1\n        else\n            counts[count]\
    \ = counts[count] + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj2xvbf88.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter\
    \ in test:gmatch(\"[%l%c]\") do\n    table.insert(counts, letter)\n  end\n  table.sort(counts,\
    \ function(a, b)\n    return a > b\n  end)\n  local most = counts[1]\n  for i\
    \ = 2, #counts do\n    if counts[i] ~= most then\n      most = counts[i]\n   \
    \ end\n  end\n  local result = {}\n  for i = 1, #counts do\n    result[counts[i]]\
    \ = i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk8mhzz8.lua:29:\
    \ expected: {a=2, b=2}\nactual: {a=4, b=2}\nstack traceback:\n\t/tmp/tmpxk8mhzz8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- This test input is the string\
    \ \"a b a b a c\"\n    local histogram = { }\n    local letters = {}\n    local\
    \ max = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb0_8_omm.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  for letter\
    \ in test:gmatch(\"%a\") do\n    if not result[letter] then\n      result[letter]\
    \ = 1\n    else\n      result[letter] = result[letter] + 1\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej3hmcau.lua:21:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpej3hmcau.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal alphabet = string.gsub(test,\
    \ \"[^a-z]\", \"\") -- Get rid of non-alphanumeric characters, like space\n\t\
    local freq = {}\n\tlocal count = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcx0dow8n.lua:23: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local result = {}\n    local\
    \ i = 1\n    for letter in string.gmatch(test, \"%a\") do\n        if result[letter]\
    \ == nil then\n            result[letter] = 1\n        else\n            result[letter]\
    \ = result[letter] + 1\n        end\n        if result[letter] == i then\n   \
    \         result[letter] = nil\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud33ex8b.lua:25:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmpud33ex8b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local count = {}\n  for _,letter\
    \ in ipairs(test) do\n    local occurrence = count[letter] or 0\n    occurrence\
    \ = occurrence + 1\n    count[letter] = occurrence\n  end\n  local letters = {}\n\
    \  for letter, count in pairs(count) do\n    letters[letter] = letters[letter]\
    \ or {count = count, letter = letter}\n  end\n  return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprlli1h2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpprlli1h2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    local\
    \ counts = {}\n    for letter, count in string.gmatch(test, \"%D+\") do\n    \
    \    local letter = letter:lower()\n        count = tonumber(count)\n        if\
    \ count > 1 then\n            table.insert(letters, letter)\n            table.insert(counts,\
    \ count)\n        end\n    end\n    if #letters == 0 then\n        return nil\n\
    \    end\n    return {\n        letters = letters,\n        counts = counts,\n\
    \    }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp452t3u4i.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp452t3u4i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp452t3u4i.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histogram = { }\n  for _,\
    \ letter in ipairs(test) do\n    histogram[letter] = histogram[letter] or 1\n\
    \    histogram[letter] = histogram[letter] + 1\n  end\n  return histogram\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z3_7s30.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp8z3_7s30.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  -- Split the string into list\n\
    \  local counts = {}\n  for letter in string.gmatch(test, \"(%S+)\") do\n    if\
    \ counts[letter] == nil then\n      counts[letter] = 1\n    else\n      counts[letter]\
    \ = counts[letter] + 1\n    end\n  end\n  -- Return letter and number of repetitions\n\
    \  local letter, count = nil, 0\n  for letter in pairs(counts) do\n    count =\
    \ counts[letter]\n    if count == 1 then\n      return { letter, count = count\
    \ }\n    end\n  end\nend\nprint(histogram(\"abbc\"))\nprint(histogram(\"abba\"\
    ))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "table: 0x55c6a53db7d0\ntable: 0x55c6a53dd1b0\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpohbhsord.lua:30: expected: {a=2, b=2}\nactual: nil\n\
    stack traceback:\n\t/tmp/tmpohbhsord.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal alphabet = {\n\t\t[\"a\"\
    ] = 1,\n\t\t[\"b\"] = 1,\n\t\t[\"c\"] = 1,\n\t\t[\"d\"] = 1,\n\t\t[\"e\"] = 1,\n\
    \t\t[\"f\"] = 1,\n\t\t[\"g\"] = 1,\n\t\t[\"h\"] = 1,\n\t\t[\"i\"] = 1,\n\t\t[\"\
    j\"] = 1,\n\t\t[\"k\"] = 1,\n\t\t[\"l\"] = 1,\n\t\t[\"m\"] = 1,\n\t\t[\"n\"] =\
    \ 1,\n\t\t[\"o\"] = 1,\n\t\t[\"p\"] = 1,\n\t\t[\"q\"] = 1,\n\t\t[\"r\"] = 1,\n\
    \t\t[\"s\"] = 1,\n\t\t[\"t\"] = 1,\n\t\t[\"u\"] = 1,\n\t\t[\"v\"] = 1,\n\t\t[\"\
    w\"] = 1,\n\t\t[\"x\"] = 1,\n\t\t[\"y\"] = 1,\n\t\t[\"z\"] = 1\n\t}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqk9f8fmh.lua:48: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local result = {}\n  for letter\
    \ in test:gmatch(\"([%l%u%W]+)\") do\n    result[letter] = result[letter] or 0\n\
    \    result[letter] = result[letter] + 1 or 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy4bk6dr.lua:17:\
    \ expected: {a=2, b=2}\nactual: {\"a b b a\"=1}\nstack traceback:\n\t/tmp/tmpgy4bk6dr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([a-z])\") do\n    table.insert(counts, letter)\n \
    \ end\n  \n  local max = -1\n  local results = {}\n  for i = 1, #counts do\n \
    \   if counts[i] == max then\n      for j = 1, #results do\n        if results[j]\
    \ == counts[i] then\n          table.insert(results[j], letter)\n          break\n\
    \        end\n      end\n    elseif counts[i] > max then\n      max = counts[i]\n\
    \      for j = 1, #results do\n        if results[j] == counts[i] then\n     \
    \     results[j] = {}\n          table.insert(results[j], letter)\n        end\n\
    \      end\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpranpajf3.lua:21:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpranpajf3.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpranpajf3.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for c in test:gmatch(\"\
    [%a]+\") do table.insert(counts, c) end\n  table.sort(counts, function(a, b) return\
    \ counts[a] > counts[b] end)\n  local max = {}\n  for i=1,#counts do\n    if counts.[i]>1\
    \ then\n      local letter = counts.[i]\n      max[letter] = counts.[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnt60qids.lua:11: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local s = {}\n    for letter\
    \ in string.gmatch(test, \"([a-z]+)\") do\n        s[letter] = s[letter] or 0\n\
    \        s[letter] = s[letter] + 1\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_lyxkfw.lua:18:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpz_lyxkfw.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histo = {}\n  for c in test:gmatch(\"\
    %a\") do\n    histo[c] = histo[c] or 1\n    histo[c] = histo[c] + 1\n  end\n \
    \ return histo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nd0uqff.lua:17:\
    \ expected: {a=2, b=2}\nactual: {a=3, b=3}\nstack traceback:\n\t/tmp/tmp0nd0uqff.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for _, letter\
    \ in ipairs(test) do\n    table.insert(letters, letter)\n  end\n  local max =\
    \ 0\n  local ans = {}\n  for _, letter in ipairs(letters) do\n    max = max or\
    \ letter\n    if letters[letter] > max then\n      max = letters[letter]\n   \
    \   ans = { letter = letter, count = max }\n    end\n  end\n  return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7278hkve.lua:25:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp7278hkve.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    for letter\
    \ in test:gmatch(\"([A-Za-z]+)\") do\n        if letters[letter] == nil then\n\
    \            letters[letter] = 1\n        else\n            letters[letter] =\
    \ letters[letter] + 1\n        end\n    end\n    -- Sort\n    table.sort(letters)\n\
    \    -- Return first element\n    return letters[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqng_rydj.lua:23:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmpqng_rydj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local freq = { }\n  for i = 1,#test\
    \ do freq[test[i]] = freq[test[i]] or 1 end\n  local max = 0\n  local result =\
    \ { }\n  for k,v in pairs(freq) do\n    if v > max then\n      max = v\n     \
    \ result = { }\n    end\n    result[#result+1] = { letter = k, count = v }\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6hw4edf.lua:7:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpn6hw4edf.lua:7: in local 'candidate'\n\
    \t/tmp/tmpn6hw4edf.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for letter,\
    \ count in string.gmatch(test, \"([a-zA-Z]+)\") do\n    counts[letter] = counts[letter]\
    \ or {count = 1, letters = letter}\n    counts[letter].count = counts[letter].count\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0wyrhwj.lua:17:\
    \ expected: {a=2, b=2}\nactual: {a={count=3, letters=\"a\"}, b={count=3, letters=\"\
    b\"}}\nstack traceback:\n\t/tmp/tmpb0wyrhwj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local function count_letters(letters)\n\
    \        local counts = {}\n        for letter in string.gmatch(test, '%a') do\n\
    \            table.insert(counts, letters[letter])\n        end\n        return\
    \ counts\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2,\
    \ ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] =\
    \ 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvwfqt8a5.lua:27: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal counts = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm0tvgz7j.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal letters = test\n\t\t:gsub(\"\
    [%w-]\", \"\")\n\t\t:lower()\n\t\t:gsub(\"^%l\", \"\")\n\t\t:gsub(\"%l\", \" \"\
    )\n\t\t:gsub(\"^%L\", \"\")\n\t\t:gsub(\"%L\", \" \")\n\t\t:gsub(\"^%c\", \"\"\
    )\n\t\t:gsub(\"%c\", \" \")\n\t\t:gsub(\"^%S\", \"\")\n\t\t:gsub(\"%S\", \" \"\
    )\n\t\t:gsub(\"^%z\", \"\")\n\t\t:gsub(\"%z\", \" \")\n\t\t:gsub(\"^%z\", \"\"\
    )\n\t\t:gsub(\"%z\", \" \")\n\t\t:gsub(\"^%L\", \"\")\n\t\t:gsub(\"%L\", \" \"\
    )\n\t\t:gsub(\"^%w\", \"\")\n\t\t:gsub(\"%w\", \" \")\n\t\t:gsub(\"^%v\", \"\"\
    )\n\t\t:gsub(\"%v\", \" \")\n\t\t:gsub(\"^%c\", \"\")\n\t\t:gsub(\"%c\", \" \"\
    )\n\t\t:gsub(\"^%c\", \"\")\n\t\t:gsub(\"%c\", \" \")\n\t\t:gsub(\"^%b\", \"\"\
    )\n\t\t:gsub(\"%b\", \" \")\n\t\t:gsub(\"^%c\", \"\")\n\t\t:gsub(\"%c\", \" \"\
    )\n\t\t:gsub(\"^%V\", \"\")\n\t\t:gsub(\"%V\", \" \")\n\t\t:gsub(\"^%A\", \"\"\
    )\n\t\t:gsub(\"%A\", \" \")\n\t\t:gsub(\"^%T\", \"\")\n\t\t:gsub(\"%T\", \" \"\
    )\n\t\t:gsub(\"^%A\", \"\")\n\t\t:gsub(\"%A\", \" \")\n\t\t:gsub(\"^%a\", \"\"\
    )\n\t\t:gsub(\"%a\", \" \")\n\t\t:gsub(\"^%p\", \"\")\n\t\t:gsub(\"%p\", \" \"\
    )\n\t\t:gsub(\"^%S\", \"\")\n\t\t:gsub(\"%S\", \" \")\n\t\t:gsub(\"^%S\", \"\"\
    )\n\t\t:gsub(\"%S\", \" \")\n\t\t:gsub(\"^%w\", \"\")\n\t\t:gsub(\"%w\", \" \"\
    )\n\t\t:gsub(\"^%h\", \"\")\n\t\t:gsub(\"%h\", \" \")\n\t\t:gsub(\"^%P\", \"\"\
    )\n\t\t:gsub(\"%P\", \" \")\n\t\t:gsub(\"^%B\", \"\")\n\t\t:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkoprm8bx.lua:59: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = {}\n    for letter\
    \ in test:gmatch(\"%a\") do\n        if counts.[letter] == nil then\n        \
    \    counts.[letter] = 1\n        else\n            counts.[letter] = counts.[letter]\
    \ + 1\n        end\n    end\n    return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfxqde5_4.lua:8: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local table = nil\n    local\
    \ counts = { }\n    for letter in test:gmatch('[^ ]') do\n        count = tonumber(test:sub(string.len(letter)\
    \ + 1, -string.len(letter))) + 1\n        counts[letter] = count\n    end\n  \
    \  local biggest = count\n    for letter in pairs(counts) do\n        if counts[letter]\
    \ > biggest then\n            biggest = counts[letter]\n            table = {letter\
    \ = letter, count = counts[letter]}\n        else\n            table.count = counts[letter]\n\
    \        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50p8omqi.lua:9:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp50p8omqi.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp50p8omqi.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local counts = Dict()\n    for\
    \ i,v in pairs(string.gmatch(test, \"([%A]+)\") ) do\n        counts[v] = counts[v]\
    \ or 0\n        counts[v] = counts[v] + 1\n    end\n    return counts\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnu2ry4m2.lua:6:\
    \ attempt to call a nil value (global 'Dict')\nstack traceback:\n\t/tmp/tmpnu2ry4m2.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpnu2ry4m2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histogram = {}\n  local max_count\
    \ = 0\n  for letter in test:gmatch(\"%a\") do\n    local count = histogram[letter]\
    \ or 0\n    count = count + 1\n    if count > max_count then\n      max_count\
    \ = count\n    end\n    histogram[letter] = count\n  end\n  return histogram\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2a9gxo2.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpl2a9gxo2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local hash = {}\n  for _, char\
    \ in pairs(test) do\n    hash[char] = (hash[char] or 0) + 1\n  end\n  -- sort\
    \ by number of occurence\n  table.sort(hash, function(t1,t2)\n    return t1 >\
    \ t2\n  end)\n  return hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezfz7oxn.lua:7:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpezfz7oxn.lua:7: in local 'candidate'\n\t/tmp/tmpezfz7oxn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal function count(s)\n\t\tlocal\
    \ tt = {}\n\t\tfor _, v in pairs(s) do tt[v] = tt.[v] + 1 end\n\t\treturn tt\n\
    \tend\n\tlocal d = count(test)\n\tlocal maxv = nil\n\tlocal maxv = nil\n\tfor\
    \ k, v in pairs(d) do\n\t\tif v > maxv then\n\t\t\tmaxv = v\n\t\t\tmaxk = k\n\t\
    \tend\n\tend\n\treturn {maxk, maxv}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc3c8ktb3.lua:8: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local hash = {}\n  for _, x in\
    \ ipairs(test:gsub(\"%W\", \"\")) do\n    hash[x] = (hash[x] or 0) + 1\n  end\n\
    \  local keys = {}\n  for k, v in pairs(hash) do\n    if keys[v] == nil then\n\
    \      keys[v] = k\n    end\n  end\n  return keys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpe4fkuo.lua:22:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpjpe4fkuo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local letters = {}\n    local\
    \ count = 0\n    for letter in test:gmatch(\"[%l]+\") do\n        count = count\
    \ + 1\n        if not letters[letter] then\n            letters[letter] = 1\n\
    \        else\n            letters[letter] = letters[letter] + 1\n        end\n\
    \    end\n    local result = {}\n    for key, val in pairs(letters) do\n     \
    \   if val > result[#result] and val > 1 then\n            result[#result] = {key,\
    \ val}\n        end\n    end\n    return result\nend\n</cell>\n<code language=xeus-cling-cpp14>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0oj5jjh.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local hash = {}\n  for _, c in\
    \ ipairs(test) do\n    hash[c] = hash[c] or 0\n    hash[c] = hash[c] + 1\n  end\n\
    \  local result = {}\n  for k, v in pairs(hash) do\n    table.insert(result, {\
    \ letter = k, count = v })\n  end\n  table.sort(result, function(a, b)\n    if\
    \ a.count < b.count then return -1 else if a.count > b.count then return 1 end\n\
    \    return a.letter < b.letter\n  end)\n  local result = {}\n  for _, r in ipairs(result)\
    \ do\n    table.insert(result, r.letter)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj78_v0ar.lua:18: unexpected symbol near '')''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  for letter,\
    \ count in string.gmatch(test, \"%a\") do\n    table.insert(letters, letter)\n\
    \  end\n  table.sort(letters)\n  local frequency = {}\n  for i=1,#letters do\n\
    \    table.insert(frequency, letters[i])\n  end\n  local result = {}\n  for i=1,#frequency\
    \ do\n    table.insert(result, { letter = frequency[i], count = frequency[i] })\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bwn9lc_.lua:25:\
    \ expected: \n{a=2, b=2}\nactual: \n{\n    {count=\"a\", letter=\"a\"},\n    {count=\"\
    a\", letter=\"a\"},\n    {count=\"b\", letter=\"b\"},\n    {count=\"b\", letter=\"\
    b\"}\n}\nstack traceback:\n\t/tmp/tmp_bwn9lc_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histo = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4i83jfc1.lua:21: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   -- Transform test into an array\
    \ of chars\n   local test = {unpack(test)} -- To remove parentheses\n   -- Create\
    \ a table of chars counting its occurrences\n   local histogram = {}\n   for _,\
    \ letter in ipairs(test) do histogram[letter] = histogram[letter] or 0 end\n \
    \  -- Sort the table in descending order\n   table.sort(histogram, function(a,\
    \ b) return a[2] > b[2] end)\n   -- Return the value corresponding to the letter\
    \ with the most occurrences\n   return histogram[#histogram][1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2isdofzs.lua:7:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp2isdofzs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2isdofzs.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local histo = {}\n   for _, str\
    \ in ipairs(test) do\n      local c = histo[str]\n      if not c then\n      \
    \   histo[str] = { count = 1, letters = {} }\n      else\n         histo[str].count\
    \ = histo[str].count + 1\n         histo[str].letters[#histo[str].letters + 1]\
    \ = str\n      end\n   end\n   return histo\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ntrudw.lua:22:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmps8ntrudw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal histo = {}\n\tfor c in test:gmatch(\"\
    [%A]\") do\n\t\tlocal lc = c:lower()\n\t\thisto[lc] = histo[lc] or 1\n\t\thisto[lc]\
    \ = histo[lc] + 1\n\tend\n\treturn histo\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjifk3h3f.lua:18:\
    \ expected: {a=2, b=2}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmpjifk3h3f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counts = {}\n  for _, x in\
    \ ipairs(string.gmatch(test, \"%a+\")) do\n    table.insert(counts, x)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50x8upve.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n\tlocal h = { }\n\tfor word in test:gmatch(\"\
    [^ ]+\") do\n\t\tfor letter in word:gmatch(\"%l+\") do\n\t\t\tlocal count = h[letter]\
    \ or 0\n\t\t\tcount = count + 1\n\t\t\th[letter] = count\n\t\tend\n\tend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b4m5y7r.lua:28: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local hist = {}\n   for _,v in\
    \ ipairs(test) do\n      if hist[v] == nil then\n         hist[v] = 1\n      else\n\
    \         hist[v] = hist[v] + 1\n      end\n   end\n   return hist\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv6w0gg9.lua:20:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmplv6w0gg9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function countingSort( table\
    \ )\n    table.sort(function(a, b) return a[2] > b[2] end)\n    return table\n\
    \  end\n  local counts = {}\n  for letter in string.gmatch(test, \"([a-zA-Z]+)\"\
    ) do\n    local count = table.insert(counts, letter)\n  end\n  counts = countingSort(counts)\n\
    \  local result = {}\n  for _, letter in pairs(counts) do\n    result[letter]\
    \ = result[letter] or 1\n    result[letter] = result[letter] + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmakw9t1e.lua:7:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpmakw9t1e.lua:7:\
    \ in local 'countingSort'\n\t/tmp/tmpmakw9t1e.lua:14: in local 'candidate'\n\t\
    /tmp/tmpmakw9t1e.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local map = {}\n  local chars =\
    \ {}\n  for char in test:gmatch(\"%l+\") do map[char] = map[char] or 1 end\n \
    \ for key, val in pairs(map) do\n    chars[val] = chars[val] or key\n  end\n \
    \ return chars, map\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfgzev5e.lua:18:\
    \ expected: {a=2, b=2}\nactual: {\"b\"}\nstack traceback:\n\t/tmp/tmpqfgzev5e.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  local count\
    \ = {}\n  local letterCount = 0\n  for letter in test:gmatch(\"[%a]\") do \n \
    \   letters[letter] = letters[letter] or 0\n    letters[letter] = letters[letter]\
    \ + 1\n    count[letter] = count[letter] or 0\n    count[letter] = count[letter]\
    \ + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsmfj972p.lua:29: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  local counts\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5jsig3f.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local histogram = { }\n   for\
    \ word in string.gmatch(test, \"%a\") do -- %a matches any single character and\
    \ %A matches any letter\n      local value = tonumber(word:sub(1, 1))\n      if\
    \ histogram[value] == nil then -- if no value has been stored for this key\n \
    \        histogram[value] = 0\n      end\n      histogram[value] = histogram[value]\
    \ + 1\n   end\n   return histogram\nend\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd83k6uzl.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local t = {}\n    local maxValue\
    \ = nil\n    local maxKey = \"\"\n    for _, letter in string.gmatch(test, \"\
    [%a]+\") do\n        t[letter] = t[letter] or 1\n        local count = t[letter]\n\
    \        if maxValue and count > maxValue then\n            maxValue = count\n\
    \            maxKey = letter\n        elseif maxValue and count == maxValue then\n\
    \            maxKey = letter\n        end\n    end\n    return {maxKey, maxValue}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_u5r44i.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpa_u5r44i.lua:10: in local 'candidate'\n\
    \t/tmp/tmpa_u5r44i.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    -- First split the string into\
    \ a table\n    local letters = {}\n    for letter in test:gmatch(\"%a\") do\n\
    \        table.insert(letters, letter)\n    end\n    -- Convert the table into\
    \ a dictionary of counts\n    local letters = {}\n    for _, letter in ipairs(letters)\
    \ do\n        local count = letters[letter]\n        table.insert(letters, letter,\
    \ count or 0)\n    end\n    -- Return the letter with the most occurences\n  \
    \  return letters[#letters]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_ekqmat.lua:24:\
    \ expected: {a=2, b=2}\nactual: nil\nstack traceback:\n\t/tmp/tmpj_ekqmat.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local histogram = {}\n    local\
    \ letters = {}\n    local words = test\n    for i, word in ipairs(words) do\n\
    \        local letterCount = 0\n        for letter in word do letterCount = letterCount\
    \ + 1 end\n        table.insert(letters, letterCount)\n    end\n    table.sort(letters,\
    \ function(a, b)\n        return a > b\n    end)\n    for _, letter in ipairs(letters)\
    \ do\n        local count = letters[letter]\n        local previousCount = letters[letter\
    \ - 1] or 0\n        if previousCount >= count then\n            histogram[letter]\
    \ = previousCount\n        else\n            histogram[letter] = count\n     \
    \   end\n    end\n    return histogram\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbeofgr7.lua:32:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpcbeofgr7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n   local counts = {}\n   for letter\
    \ in test:gmatch('%[a-z]+') do \n      counts[letter] = counts[letter] or 0\n\
    \      counts[letter] = counts[letter] + 1\n   end\n   return counts\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97f242fi.lua:17:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp97f242fi.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local count = { }\n  local result\
    \ = { }\n  for letter, count in string.gmatch(test, \"%w+\") do\n    count[letter]\
    \ = count[letter] or 0\n    count[letter] = count[letter] + 1\n  end\n  for letter,\
    \ count in pairs(count) do\n    table.insert(result, { letter = letter, count\
    \ = count })\n  end\n  table.sort(result)\n  return result\nend\nprint(histogram(\"\
    abbbccc\"))\nprint(histogram(\"abbccc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\"))\nprint(histogram(\"aaabb\"))\nprint(histogram(\"\
    abbbcc\"))\nprint(histogram(\"abbcc\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1j19d9il.lua:70: unfinished string near ''"abbcc''

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local letters = {}\n  local counts\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5jsig3f.lua:22: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local function compare(a, b) return\
    \ a < b end\n  local counts = table.new_table()\n  for letter in string.gmatch(test,\
    \ \"([^ ]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  table.sort(counts, compare)\n  return table.unpack(counts)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy81ou72m.lua:7:\
    \ attempt to call a nil value (field 'new_table')\nstack traceback:\n\t/tmp/tmpy81ou72m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy81ou72m.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local s = {}\n    for i = 1,\
    \ #test do\n        local letter = test[i]\n        s[letter] = s[letter] or 1\n\
    \        s[letter] = s[letter] + 1\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoued_l1a.lua:9:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpoued_l1a.lua:9: in local 'candidate'\n\
    \t/tmp/tmpoued_l1a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local counter = {}\n  for i = 1,\
    \ #test do\n    counter[test[i]] = counter[test[i]] + 1 or 1\n  end\n  return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v3i3bi6.lua:8:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp9v3i3bi6.lua:8: in local 'candidate'\n\t/tmp/tmp9v3i3bi6.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local histo = {}\n  for c in string.gmatch(test,\
    \ \"[^ ]+\") do histo[c] = 1 end\n  return histo\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftwout6a.lua:14:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=1}\nstack traceback:\n\t/tmp/tmpftwout6a.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local d = {}\n  for _, v in ipairs(test:gsub(\"\
    [()\\n\\r]\", \"\")) do\n    if v == \"\\n\" then v = \"\" end\n    if v == \"\
    ()\" then v = \"(\" end\n    local v = string.lower(v)\n    if not d.hasOwnProperty(v)\
    \ then\n      d[v] = { count = 1, letter = v }\n    else\n      d[v].count = d[v].count\
    \ + 1\n    end\n  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafc85xbv.lua:23:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpafc85xbv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n    local chars = {}\n    local maxCount\
    \ = 0\n    for i,k in pairs(test) do\n        if chars[k.char] == nil then\n \
    \           chars[k.char] = k.count\n            if k.count > maxCount then\n\
    \                maxCount = k.count\n            end\n        elseif chars[k.char]\
    \ > k.count then\n            chars[k.char] = k.count\n        end\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8gnlubjt.lua:32: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659823789
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\nlocal function histogram(test)\n  local frequency = {}\n  for _,\
    \ letter in string.gmatch(test, \"[%l]+\") do\n    local count = frequency[letter]\
    \ or 0\n    frequency[letter] = count + 1\n  end\n  return frequency\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpooo14jy6.lua:9:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpooo14jy6.lua:9: in local 'candidate'\n\
    \t/tmp/tmpooo14jy6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823789
