name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local ok = true\n    local pos = 1\n    local len = string.len(file_name)\n\
    \    while pos < len do\n        local c = string.sub(file_name, pos, pos)\n \
    \       if c == '.' then\n            local pos_next = string.find(file_name,\
    \ '.', pos + 1)\n            if pos_next == nil then\n                return false\n\
    \            elseif string.len(file_name) == pos_next then\n                return\
    \ false\n            else\n                pos = pos_next + 1\n            end\n\
    \        elseif c ~= '0' and c ~= '9' then\n            return false\n       \
    \ end\n        pos = pos + 1\n    end\n    -- If the code reaches here without\
    \ returning false, the file is valid.\n    return true\nend", "    local pattern\
    \ = '^[0-9][0-9]{0,3}\\.(txt|exe|dll)$'\n    return string.match(pattern, file_name)\n\
    end", "\tlocal file_ext = string.match(file_name, \"%.[a-z]$\")\n\tlocal file_ext\
    \ = string.match(file_ext, \"%d+.%s\")\n\tlocal file_ext = string.match(file_ext,\
    \ \"%w+.%s\")\n\tlocal file_ext = string.match(file_ext, \"%w.%s\")\n\tlocal file_ext\
    \ = string.match(file_ext, \"%w.%d+.%s\")\n\t\n\tif file_ext == nil then\n\t\t\
    return 'No'\n\telse\n\t\tlocal file_name = string.sub(file_name, 1, string.len(file_name)\
    \ - string.len(file_ext))\n\t\tlocal file_ext = string.sub(file_name,string.len(file_name)\
    \ - string.len(file_ext),string.len(file_name))\n\t\t\n\t\tlocal file_name = string.match(file_name,\
    \ \"(^[0-9][0-9]*$)|(^[a-zA-Z][a-zA-Z0-9]*$)\")\n\t\t\n\t\tif file_name == nil\
    \ then\n\t\t\treturn 'No'\n\t\telse\n\t\t\tif file_ext == 'dll' or file_ext ==\
    \ 'exe' or file_ext == 'txt' then\n\t\t\t\treturn 'Yes'\n\t\t\telse\n\t\t\t\t\
    return 'No'\n\t\t\tend\n\t\tend\n\tend\nend", "   -- Create a variable to keep\
    \ track of whether or not the function should return 'No'.\n   local file_check\
    \ = nil ", "  return string.find(file_name, \"%.\") ~= nil and string.find(file_name,\
    \ \"%.%.\") ~= nil and string.find(file_name, \"%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.\") ~= nil\
    \ and string.find(file_name, \"%.%.%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\"\
    ) ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\"\
    ) ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\"\
    ) ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.\"\
    ) ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name,\
    \ \"%.%.%.%.%.%.%.%.%.\") ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.%.\"\
    ) ~= nil and string.find(file_name, \"%.%.%.%.%.%.%.%.%.\") ~= nil\nend", "  \
    \  local file_splitted = string.split(file_name, '.')\n    local file_length =\
    \ #file_splitted\n    if file_length ~= 2 or file_splitted[1] ~= '' then\n   \
    \     return 'No'\n    end\n    for i = 1, (file_length - 1) do\n        local\
    \ letter = string.sub(file_splitted[1], i, i)\n        if letter ~= 'a' and letter\
    \ ~= 'z' and letter ~= 'A' and letter ~= 'Z' then\n            return 'No'\n \
    \       end\n    end\n    return ('Yes')\nend", "    local ok\n    ok = true\n\
    \    \n    -- Check the file name is valid.\n    if string.sub(file_name, 1, 3)\
    \ ~= '0' then\n        print('Error: Invalid file name.')\n        ok = false\n\
    \    end\n    \n    -- Check the file name contains only one dot\n    if string.sub(file_name,\
    \ string.find(file_name, '.') + 1, string.len(file_name)) ~= '.' then\n      \
    \  print('Error: Invalid file name.')\n        ok = false\n    end\n    \n   \
    \ -- Check the file name is not empty.\n    if string.find(file_name, '.') ~=\
    \ 1 then\n        print('Error: Invalid file name.')\n        ok = false\n   \
    \ end\n    \n    -- Check the file name starts with a latin alphabetic letter.\n\
    \    if string.find(file_name, '.') ~= 1 then\n        print('Error: Invalid file\
    \ name.')\n        ok = false\n    end\n    \n    -- Check the file name contains\
    \ 'txt', 'exe', 'dll' substring.\n    if string.find(file_name, '.') ~= 1 then\n\
    \        print('Error: Invalid file name.')\n        ok = false\n    end\n   \
    \ \n    -- Check the file's name ends with 'txt', 'exe', 'dll' substring.\n  \
    \  if string.find(file_name, '.') ~= 1 then\n        print('Error: Invalid file\
    \ name.')\n        ok = false\n    end\n    \n    -- Return the function result\n\
    \    return ok\nend", "   local result = true\n   local substring_before_dot =\
    \ ''\n   local substring_after_dot = ''\n   \n   -- Check that the file name only\
    \ contains numbers.\n   if string.match(file_name, '^[0-9]{3,}$') then\n     \
    \ -- Check that the file name contains exactly one dot '.'\n      if string.match(file_name,\
    \ '.') then\n         -- Check that the substring before the dot starts with a\
    \ letter from the latin \n         -- alphapet ('a'-'z' and 'A'-'Z')\n       \
    \  if string.match(file_name, '^([a-zA-Z].*)') then\n            -- Check that\
    \ the substring after the dot contains one of these \n            -- file_types\n\
    \            if string.match(file_name, '^['..file_type..'].*') then\n       \
    \        -- The file's name is valid.\n               return true\n          \
    \  else\n               result = false\n            end\n         else\n     \
    \       -- The substring before the dot contains invalid characters.\n       \
    \     result = false\n         end\n      else\n         -- The substring before\
    \ the dot is empty.\n         result = false\n      end\n   else\n      -- The\
    \ file name is invalid.\n      result = false\n   end\n   \n   return result\n\
    end", "\t-- We use file() to get the file name from the argument list\n\t-- file()\
    \ returns an array of strings, so we get the first one using an index:\n\tlocal\
    \ file_name = file()[1]\n\t-- We use a regular expression to match our conditions\n\
    \tlocal pattern = \"^([0-9]{3}\\.)*[a-z][a-z]$\"\n\t-- To test the pattern we\
    \ use the match function\n\t-- The function returns 'true' if it matches the pattern\
    \ and 'false' if it does not\n\treturn string.match(pattern, file_name) ~= nil\n\
    end", "    local valid = false\n    \n    if string.find(file_name, \"^[0-9]{3}$\"\
    , 1, true) ~= nil then\n        valid = true\n    end\n    \n    if string.find(file_name,\
    \ \".\", 1, true) ~= nil then\n        valid = true\n    end\n    \n    if string.find(file_name,\
    \ \"^[a-z]+$\", 1, true) ~= nil then\n        valid = true\n    end\n    \n  \
    \  local file_size = string.find(file_name, \"\\.\", 1, true)\n    \n    if file_size\
    \ == nil then\n        return valid\n    end\n    \n    if file_size > 1 then\n\
    \        return valid\n    end\n    \n    if string.find(file_name, \"^[a-z]+$\"\
    , 1, true) == nil then\n        return valid\n    end\n    \n    return valid\n\
    end", '    local flag = false', "    local result = false\n    \n    -- Check\
    \ that the file's name does not contain more than three digits\n    if string.len(file_name)\
    \ > 3 then\n        result = true\n    else\n        -- Check that the file's\
    \ name contains exactly one dot\n        -- The substring before the dot should\
    \ not be empty, and it starts with a letter from\n        -- the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n        if string.sub(file_name, 0, 1) == '\"' then\n\
    \            result = true\n        else\n            -- Check that the substring\
    \ after the dot is in ['txt', 'exe', 'dll']\n            if string.sub(file_name,\
    \ string.len(file_name) - 4, string.len(file_name)) ~= 'exe' and string.sub(file_name,\
    \ string.len(file_name) - 4, string.len(file_name)) ~= 'dll' then\n          \
    \      result = true\n            end\n        end\n    end", "    if string.find(file_name,\
    \ \"..\") then\n        return \"No\"\n    end\n    if string.find(file_name,\
    \ \".\") then\n        local index = string.find(file_name, \".\")\n        local\
    \ file_name = string.sub(file_name, 1, index)\n        local extension = string.sub(file_name,index)\n\
    \        if string.find(file_name, string.lower(\"a\"..string.upper(\"z\")) ~=\
    \ nil or\n            string.find(file_name, string.lower(\"A\"..string.upper(\"\
    Z\")) ~= nil or\n            string.find(file_name, string.lower(\"0\"..string.upper(\"\
    9\")) ~= nil or\n            string.find(file_name, \".txt\") ~= nil or\n    \
    \        string.find(file_name, \".exe\") ~= nil or\n            string.find(file_name,\
    \ \".dll\") ~= nil) then\n            return \"Yes\"\n        end\n    end\n \
    \   return \"No\"\nend", "   -- Initialize result to 'No'.\n   local result =\
    \ 'No'", "    -- Handle invalid file name.\n    -- Note: this function does not\
    \ verify if the file's name is a valid file name.\n    if file_name == nil then\n\
    \        error('Invalid file name.')\n    end\n    -- Handle valid file name.\n\
    \    if file_name == '' then\n        error('Invalid file name.')\n    end\n \
    \   -- Handle valid file name.\n    if string.find(file_name, ' ') then\n    \
    \    error('Invalid file name.')\n    end\n    -- Handle valid file name.\n  \
    \  if not string.sub(file_name, 1, 1) == string.char(string.byte('A')) then\n\
    \        error('Invalid file name.')\n    end\n    -- Handle valid file name.\n\
    \    if not string.sub(file_name, 1, string.byte('a')) then\n        error('Invalid\
    \ file name.')\n    end\n    -- Handle valid file name.\n    if not string.find(file_name,\
    \ '.') then\n        error('Invalid file name.')\n    end\n    -- Handle valid\
    \ file name.\n    if not string.find(file_name, '0') then\n        error('Invalid\
    \ file name.')\n    end\n    -- Handle valid file name.\n    if not string.find(file_name,\
    \ '9') then\n        error('Invalid file name.')\n    end\n    -- Handle valid\
    \ file name.\n    if string.sub(file_name, 1, string.byte('a'))  ~= 'a' then\n\
    \        error('Invalid file name.')\n    end\n    -- Handle valid file name.\n\
    \    if string.sub(file_name, 1, string.byte('A'))  ~= 'A' then\n        error('Invalid\
    \ file name.')\n    end\n    -- Handle valid file name.\n    if string.sub(file_name,\
    \ 1, string.byte('z'))  ~= 'a' then\n        error('Invalid file name.')\n   \
    \ end\n    -- Handle valid file name.\n    if string.sub(file_name, 1, string.byte('Z'))\
    \  ~= 'A' then\n        error('Invalid file name.')\n    end\n    -- Handle valid\
    \ file name.\n    if string.find(file_name, '.') ~= 1 then\n        error('Invalid\
    \ file name.')\n    end\n    -- Handle valid file name.\n    if string.find(file_name,\
    \ '0') ~= 1 then\n        error('Invalid file name.')\n    end\n    -- Handle\
    \ valid file name.\n    if string.find(file_name, '9') ~= 1 then\n        error('Invalid\
    \ file name.')\n    end\n    -- Handle valid file name.\n    if string.sub(file_name,\
    \ 1, string.byte('a'))  ~= 'a' then\n        error('Invalid file name.')\n   \
    \ end\n    -- Handle valid file name.\n    if string.sub(file_name, 1, string.byte('A'))\
    \  ~= 'A' then\n        error('Invalid file name.')\n    end\n    -- Handle valid\
    \ file name.\n    if string.sub(file_name, 1, string.byte('z'))  ~= 'a' then\n\
    \        error('", "\tlocal valid = false\n\tlocal num_digits = 0\n\tlocal num_dots\
    \ = 0\n\tlocal first_letter = nil\n\tlocal last_letter = nil\n\tlocal name_parts\
    \ = string.split(file_name, \".\")\n\t\n\t-- Check length of file_name\n\tif #file_name\
    \ > 3 then\n\t\treturn valid\n\telseif #file_name < 3 then\n\t\treturn valid\n\
    \telseif #file_name == 3 then\n\t\treturn valid\n\telseif #file_name > 1 then\n\
    \t\treturn valid\n\telseif #file_name < 1 then\n\t\treturn valid\n\telseif #file_name\
    \ ~= 1 then\n\t\treturn valid\n\telseif name_parts[#name_parts] ~= '' then\n\t\
    \treturn valid\n\telseif #name_parts < 2 then\n\t\treturn valid\n\telseif name_parts[1]\
    \ ~= nil then\n\t\tif name_parts[1]:match(\"^[a-ZA-Z].*\") then\n\t\t\tfirst_letter\
    \ = name_parts[1]:sub(1, 1)\n\t\t\t-- If there is a '.' in the first part of the\
    \ string\n\t\t\tif name_parts[1]:match(\"%.\") then\n\t\t\t\t-- Check to see if\
    \ the length of the substring after the dot is equal to the \n\t\t\t\t-- number\
    \ of dots found in the file_name string\n\t\t\t\tif #name_parts[1] == num_dots\
    \ then\n\t\t\t\t\t-- Check that the first letter does not start with a '0'\n\t\
    \t\t\t\tif first_letter == '0' then\n\t\t\t\t\t\treturn valid\n\t\t\t\t\telseif\
    \ #name_parts[1] > 1 then\n\t\t\t\t\t\treturn valid\n\t\t\t\t\telse\n\t\t\t\t\t\
    \treturn valid\n\t\t\t\t\tend\n\t\t\t\telseif #name_parts[1] < num_dots then\n\
    \t\t\t\t\treturn valid\n\t\t\t\telse\n\t\t\t\t\treturn valid\n\t\t\t\tend\n\t\t\
    \tend\n\t\telse\n\t\t\treturn valid\n\t\tend\n\telse\n\t\treturn valid\n\tend\n\
    end", "   -- Check if file_name is valid\n   if string.find(file_name, '.') then\n\
    \      -- Get the substring before the dot\n      local file_prefix = file_name:sub(1,\
    \ string.find(file_name, '.'))\n      -- Check if file_prefix is valid\n     \
    \ if string.find(file_prefix, '.') then\n         -- Get the substring after the\
    \ dot\n         local file_suffix = file_name:sub(string.find(file_name, '.')\
    \ + 1)\n         -- Check if the substring is valid\n         if string.find(file_suffix,\
    \ '.txt') then\n            -- Return 'Yes'\n            return 'Yes'\n      \
    \   elseif string.find(file_suffix, '.exe') then\n            -- Return 'Yes'\n\
    \            return 'Yes'\n         elseif string.find(file_suffix, '.dll') then\n\
    \            -- Return 'Yes'\n            return 'Yes'\n         else\n      \
    \      -- Return 'No'\n            return 'No'\n         end\n      elseif string.find(file_prefix,\
    \ 'a') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'b') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'c') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'd') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'e') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'f') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'g') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'h') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'i') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'j') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'k') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'l') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'm') then\n         -- Return 'No'\n         return 'No'\n      elseif string.find(file_prefix,\
    \ 'n') then\n", "    -- Get the substring before the dot (the file's extension)\n\
    \    local extension = string.sub(file_name, 1, string.find(file_name, \".\",\
    \ 1, 1))\n    -- Make sure the substring after the dot is one of the file types\
    \ we're looking for\n    if extension ~= 'exe' and extension ~= 'dll' and extension\
    \ ~= 'txt' then\n        return false\n    else\n        return true\n    end\n\
    end", "\t-- Return error if the file name is not valid\n\tif file_name:match('^[%0]$')\
    \ then\n\t\treturn 'No'\n\telse\n\t\tif file_name:match('%0%') then\n\t\t\treturn\
    \ 'No'\n\t\telse\n\t\t\t-- Check for invalid characters in the name\n\t\t\tif\
    \ file_name:match('^%[%aA-Za-z]$') then\n\t\t\t\treturn 'No'\n\t\t\telse\n\t\t\
    \t\t-- Check for valid filename characters after the first dot\n\t\t\t\tif file_name:match('^%%.%[%aA-Za-z]$')\
    \ then\n\t\t\t\t\treturn 'Yes'\n\t\t\t\telse\n\t\t\t\t\treturn 'No'\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\nend", "    return file_name:sub(1, 3) ~= '..'\
    \ and\n           file_name:sub(1, 1) in string.letters or\n           file_name:sub(1,\
    \ 2) ~= 'exe' and \n           file_name:sub(1, 3) ~= 'dll' and \n           file_name\
    \ == '????.txt' or\n           file_name == '????.exe' or\n           file_name\
    \ == '????.dll' \nend", "\treturn string.sub(file_name, 1, 3) == '000' and\n\t\
    \tstring.sub(file_name, 1, 1) ~= '0' and\n\t\tstring.sub(file_name, 1, 1) ~= '9'\
    \ and\n\t\tstring.sub(file_name, 2, 1) == '.' and\n\t\tstring.sub(file_name, 1,\
    \ 4) == 'txt' or\n\t\tstring.sub(file_name, 1, 4) == 'exe' or\n\t\tstring.sub(file_name,\
    \ 1, 4) == 'dll'\nend", "    local result\n    -- A file's name is considered\
    \ to be valid if and only if all the following conditions are met:\n    -- - There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n    -- -\
    \ The file's name contains exactly one dot '.'\n    -- - The substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n    -- - The substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    -- \n    -- A file's name is considered to\
    \ be valid if and only if all the following conditions are met:\n    -- - There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n    -- -\
    \ The file's name contains exactly one dot '.'\n    -- - The substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n    -- - The substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    --\n    -- If the file's name contains more\
    \ than one dot, the function will return 'No'.\n    -- If the file's name contains\
    \ no dot '.', the function will return 'No'.\n    -- If the file's name starts\
    \ with a character which is not latin alphapet ('a'-'z' or 'A'-'Z'), the function\
    \ will return 'No'.\n    -- If the file's name contains any character which is\
    \ not one of the 5 extensions ['txt', 'exe', 'dll'], the function will return\
    \ 'No'.\n    -- If the file's name contains any character which is not 'txt',\
    \ 'exe', 'dll', or 'exe', the function will return 'No'.\n    --\n    -- If the\
    \ file's name is valid, the function will return 'Yes'.\n    -- If the file's\
    \ name is invalid, the function will return 'No'.\n    --\n    local digits =\
    \ string.match(file_name, \"%%d\")\n    if digits ~= nil then\n        if string.len(digits)\
    \ ~= 3 then\n            result = 'No'\n        elseif digits ~= string.sub(file_name,1,1)\
    \ then\n            result = 'No'\n        elseif string.match(file_name, \"%%.*\"\
    ) ~= nil then\n            result = 'No'\n        elseif string.match(file_name,\
    \ \"[^a-z]\") ~= nil then\n            result = 'No'\n        elseif string.match(file_name,\
    \ \"[^A-Z]\") ~= nil then\n            result = 'No'\n        elseif string.match(file_name,\
    \ \"^[^.]\") ~= nil then\n            result = 'No'\n        else\n          \
    \  result = 'Yes'\n        end\n    else\n        result = 'No'\n    end\n   \
    \ return result\nend", "   -- Your code goes here\nend", "\t-- The file name must\
    \ be valid, and no more than 3 digits long.\n\tif (string.len(file_name) >= 3\
    \ or string.len(file_name) == 0) then\n\t\treturn 'No'\n\tend\n\t-- The file name\
    \ must be valid, contain exactly one dot ('.') and starts with a letter\n\t--\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n\tif (string.len(file_name)\
    \ == 0 or string.find(file_name, '.') == nil) then\n\t\treturn 'No'\n\tend\n\t\
    -- The substring before the dot should not be empty, and it starts with a letter\
    \ from\n\t-- the latin alphapet ('a'-'z' and 'A'-'Z').\n\tif (string.len(string.sub(file_name,1,1))\
    \ >= 1 or string.sub(file_name,1,1) ~= string.char(string.byte('a') .. string.byte('A'))\
    \ then\n\t\treturn 'No'\n\tend\n\t-- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n\t-- The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n\tlocal file_types = {'txt', 'exe', 'dll'}\n\
    \tlocal file_ext = string.sub(file_name,string.find(file_name, '.') + 1)\n\t--\
    \ The substring after the dot should not be empty, and it starts with a letter\
    \ from\n\t-- the latin alphapet ('a'-'z' and 'A'-'Z').\n\tif (string.len(file_ext)\
    \ == 0 or file_ext ~= 'txt' or file_ext ~= 'exe' or file_ext ~= 'dll') then\n\t\
    \treturn 'No'\n\tend\n\treturn 'Yes'\nend", "    if not file_name then\n     \
    \   return nil\n    end", "   -- Add your implementation here.\n   return 'Yes'\n\
    end", "  -- Verify that there is one dot ('.') in the file's name.\n  if not string.find(file_name,\
    \ \".\") then\n    return nil, \"File name must contain a dot\"\n  end\n  -- Verify\
    \ that there is exactly one digit ('0'-'9') in the file's name.\n  if string.find(file_name,\
    \ string.char(table.concat({ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\
    \ }, \"\")) .. string.char(table.concat({ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z', '0' }, \"\"))) then\n    return nil, \"File name must have exactly\
    \ one digit\"\n  end\n  -- Verify that there are only letters in the file's substring\
    \ before the dot.\n  if not string.find(file_name, \".\", 1, 1) then\n    return\
    \ nil, \"File name must contain a letter\"\n  end\n  -- Verify that there are\
    \ only one of the following file's extensions in the substring after the dot.\n\
    \  -- This implementation assumes that 'exe' is a valid extension for all files.\n\
    \  if not string.find(file_name, \".\", string.len(file_name) - 4, 4) then\n \
    \   return nil, \"File name must contain a valid extension\"\n  end\n  return\
    \ true\nend", "    -- Return whether the file_name is a valid filename\n    return\
    \ true\nend", "    if file_name ~= nil then\n        local dot_index = string.find(file_name,\
    \ \".\")\n        if dot_index == nil then \n            return true \n      \
    \  end\n        local first_letter = string.sub(file_name,1,1)\n        if first_letter\
    \ ~= nil then\n            if not ((first_letter >= 'a' and first_letter <= 'z')\
    \ \n                   or (first_letter >= 'A' and first_letter <= 'Z')) then\n\
    \                return false\n            end\n        end\n        if string.len(file_name)\
    \ ~= 1 then \n            return false\n        end\n        local extension =\
    \ string.sub(file_name,dot_index,-1)\n        if extension ~= nil and (extension\
    \ == \"txt\" or extension == \"exe\" or extension == \"dll\") then\n         \
    \   return true\n        end\n    end\n    return false\nend", "    -- This function\
    \ should return 'Yes' if your solution passes the file name check, and\n    --\
    \ return 'No' if it fails the check\nend", "  -- Start checking file name validity\n\
    \  if string.len(file_name) ~= 3 then\n    return 'No'\n  end", "   if string.len(file_name)\
    \ ~= 3 and file_name:sub(1, 3) ~= '..' then \n      return false\n   end\n   if\
    \ string.find(file_name, '.') ~= 1 then \n      return false\n   end\n   if string.find(file_name,\
    \ '%') ~= 1 then \n      return false\n   end\n   if string.find(file_name, ':')\
    \ ~= 1 then \n      return false\n   end\n   if string.find(file_name, '/') ~=\
    \ 1 then \n      return false\n   end\n   if string.find(file_name, '\\\\') ~=\
    \ 1 then \n      return false\n   end\n   if string.find(file_name, '-') ~= 1\
    \ then \n      return false\n   end\n   if string.find(file_name, '.') ~= 1 then\
    \ \n      return false\n   end\n   if string.find(file_name, '%') ~= 1 then \n\
    \      return false\n   end\n   if string.find(file_name, ':') ~= 1 then \n  \
    \    return false\n   end\n   if string.find(file_name, '/') ~= 1 then \n    \
    \  return false\n   end\n   if string.find(file_name, '\\\\') ~= 1 then \n   \
    \   return false\n   end\n   if string.find(file_name, '.') ~= 1 then \n     \
    \ return false\n   end\n   if string.find(file_name, '-') ~= 1 then \n      return\
    \ false\n   end\n   if string.find(file_name, ':') ~= 1 then \n      return false\n\
    \   end\n   if string.find(file_name, '/') ~= 1 then \n      return false\n  \
    \ end\n   if string.find(file_name, '\\\\') ~= 1 then \n      return false\n \
    \  end\n   return true\nend", "    local is_valid = true\n    \n    if file_name:sub(1,\
    \ 3) == '0' or file_name:sub(1, 3) == '00'\n        or file_name:sub(1, 2) ==\
    \ '..' or file_name:sub(1, 1) ~= 'a'\n        or file_name:sub(3, 4) == 'exe'\
    \ or file_name:sub(3, 4) == 'dll'\n    then\n        print('Invalid file name.')\n\
    \        is_valid = false\n    else\n        for i = 2, 4 do\n            if file_name:sub(i)\
    \ ~= '-' or file_name:sub(i) ~= '.'\n            or file_name:sub(i):byte(1, 1)\
    \ ~= 'a' or file_name:sub(i):byte(1, 1) ~= 'z'\n            or file_name:sub(i):byte(1,\
    \ 1) ~= 'A' or file_name:sub(i):byte(1, 1) ~= 'Z'\n            then\n        \
    \        print('Invalid file name.')\n                is_valid = false\n     \
    \       end\n        end\n    end\n    \n    return is_valid\nend\n ", "  -- Check\
    \ that the filename has 3 numbers in it\n  if (#file_name < 3) or (#file_name\
    \ > 9) then\n    return 'No'\n  end", "    local result = true\n    local file_name\
    \ = file_name:lower()\n    local file_name = file_name:gsub(\".\", \"\")\n   \
    \ local file_name = file_name:gsub(\"^[a-z_]\", \"\")\n    local file_name = file_name:gsub(\"\
    %[!.a-z]\", \"\")\n    local file_name = file_name:sub(1, 3)\n    if file_name\
    \ == \"\" then\n        result = false\n    end\n    \n    if #file_name ~= 1\
    \ then\n        result = false\n    end\n    \n    if file_name:sub(1, 1) ~= 'a'\
    \ or file_name:sub(1, 1) ~= 'z' or\n       file_name:sub(1, #file_name) ~= '0'\
    \ or file_name:sub(1, #file_name) ~= '9' then\n        result = false\n    end\n\
    \    \n    if #file_name ~= 1 or result:sub(1, 1) ~= 'a' or result:sub(1, 1) ~=\
    \ 'z' or\n       result:sub(1, #result) ~= '0' or result:sub(1, #result) ~= '9'\
    \ then\n        result = false\n    end\n    \n    if #file_name ~= 1 or result:sub(2,\
    \ 1) ~= 'a' or result:sub(2, 1) ~= 'z' or\n       result:sub(2, #result) ~= '0'\
    \ or result:sub(2, #result) ~= '9' then\n        result = false\n    end\n   \
    \ \n    if #file_name ~= 1 or result:sub(3, 1) ~= 'a' or result:sub(3, 1) ~= 'z'\
    \ or\n       result:sub(3, #result) ~= '0' or result:sub(3, #result) ~= '9' then\n\
    \        result = false\n    end\n    \n    if #file_name ~= 1 or result:sub(4,\
    \ 1) ~= 'a' or result:sub(4, 1) ~= 'z' or\n       result:sub(4, #result) ~= '0'\
    \ or result:sub(4, #result) ~= '9' then\n        result = false\n    end\n   \
    \ \n    if #file_name ~= 1 or result:sub(5, 1) ~= 'a' or result:sub(5, 1) ~= 'z'\
    \ or\n       result:sub(5, #result) ~= '0' or result:sub(5, #result) ~= '9' then\n\
    \        result = false\n    end\n    \n    if #file_name ~= 1 or result:sub(6,\
    \ 1) ~= 'a' or result:sub(6, 1) ~= 'z' or\n       result:sub(6, #result) ~= '0'\
    \ or result:sub(6, #result) ~= '9' then\n        result = false\n    end\n   \
    \ \n    if #file_name ~= 1 or result:sub(7, 1) ~= 'a' or result:sub(7, 1) ~= 'z'\
    \ or\n       result:sub(7, #result) ~", "\tif file_name == nil then return false\
    \ end\n\tlocal file_name = string.rep(file_name, 4)\n\tlocal file_extension =\
    \ string.gsub(file_name, \"%.\", \"\")\n\tlocal file_extension = string.gsub(file_extension,\
    \ \".\", \"\")\n\tlocal file_name_length = string.length(file_name)\n\tlocal extension_length\
    \ = string.length(file_extension)\n\tlocal first_character = string.sub(file_name,\
    \ 1, 1)\n\tlocal first_character = string.upper(first_character)\n\tlocal invalid_characters_count\
    \ = 0\n\tif file_name_length > 4 or file_name_length == 0 or file_extension ==\
    \ \"\" then\n\t\treturn false\n\telseif first_character ~= 'a' or first_character\
    \ ~= 'z' or first_character ~= 'A' then\n\t\treturn false\n\telseif extension_length\
    \ > 1 or extension_length == 0 or string.tolower(file_extension) ~= \"exe\" then\n\
    \t\treturn false\n\telse\n\t\treturn true\n\tend\nend", "    local num_digits\
    \ = string.len(file_name)\n    if (num_digits < 3) or (string.sub(file_name, 1,\
    \ num_digits) == '') then\n        return 'No'\n    end\n    local dot = string.find(file_name,\
    \ '.', 1, 1)\n    local dot_is_empty = dot ~= nil\n    local dot_is_letter = string.sub(file_name,\
    \ (dot + 1), (dot ~= nil)) in string.letters \n    if (not dot_is_empty) and (not\
    \ dot_is_letter) then\n        return 'No'\n    end\n    local dot_is_allowed\
    \ = string.sub(file_name, dot + 1, (dot ~= nil)) in {'txt', 'exe', 'dll'}\n  \
    \  if (not dot_is_allowed) then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "\tlocal result = {}\n\tlocal dot = ''\n\tlocal file_basename = file_name:sub(1,3)\n\
    \tfor i = 1,3 do\n\t\tlocal c = file_name:sub(i,i)\n\t\tif c ~= '0' and c ~= '9'\
    \ then\n\t\t\ttable.insert(result, false)\n\t\t\treturn result\n\t\tend\n\tend\n\
    \tdot = file_name:sub(3)\n\tlocal dot_pos = #dot\n\tif dot_pos ~= 0 then\n\t\t\
    if dot:sub(1,1) ~= 'a' then\n\t\t\ttable.insert(result, false)\n\t\t\treturn result\n\
    \t\tend\n\tend\n\tlocal dot_pos2 = #dot\n\tif dot_pos2 ~= 3 then\n\t\ttable.insert(result,\
    \ false)\n\t\treturn result\n\tend\n\tif file_name:sub(1,1) ~= 'a' then\n\t\t\
    table.insert(result, false)\n\t\treturn result\n\tend\n\tlocal i = 0\n\tfor i\
    \ = 1,dot_pos do\n\t\tif file_name:sub(i,i) ~= 'a' then\n\t\t\tbreak\n\t\tend\n\
    \tend\n\tlocal j = 1\n\tfor j = 1,dot_pos2 do\n\t\tif file_name:sub(i,j) ~= 'a'\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\tlocal extensions = {'txt', 'exe', 'dll'}\n\
    \tlocal extension_pos = #extensions\n\twhile i <= dot_pos and j <= dot_pos2 do\n\
    \t\ttable.insert(result, not (file_name:sub(i,i) == '0' and \n\t\t\tfile_name:sub(i,i)\
    \ == '9' and \n\t\t\tfile_name:sub(i,j) ~= '0' and \n\t\t\tfile_name:sub(i,j)\
    \ ~= '9' and\n\t\t\tfile_name:sub(i,j) == '.' and\n\t\t\t(file_name:sub(i,j):sub(1,1)\
    \ ~= 'a' or \n\t\t\tfile_name:sub(i,j):sub(2,2) ~= 'a' or \n\t\t\tfile_name:sub(i,j):sub(3,3)\
    \ ~= 'a'))))\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\t\n\tif #result ~= 1 then\n\
    \t\ttable.insert(result, false)\n\tend\n\t\n\tif result[1] then\n\t\t-- Extension\
    \ is valid\n\telse\n\t\t-- Extension is not valid\n\t\tlocal extension_count =\
    \ 0\n\t\tlocal max_extension_count = 0\n\t\tfor i = 1,dot_pos do\n\t\t\tif file_name:sub(i,i)\
    \ ~= 'a' then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tfor i = 1,dot_pos2 do\n\t\
    \t\tif file_name:sub(i,i) ~= 'a' then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\t\
    if i < dot_pos and j < ", "    local pattern = '^[0-9]+\\..+$|^[^.]+[.][^.]+'\n\
    \    if string.match(file_name,pattern) then\n        return 'Yes'\n    else\n\
    \        return 'No'\n    end\nend", "  -- If the file name contains more than\
    \ 3 digits, return false\n  -- If the file name contains one dot, return false\n\
    \  -- If the file name is not valid, return false\n  -- Else, return true.\n \
    \ if string.find(file_name, '%[0-9]') then\n    return false\n  end\n  if string.find(file_name,\
    \ '%.') then\n    return false\n  end\n  if string.find(file_name, '^[[:alpha:]]')\
    \ then\n    return false\n  end\n  if string.find(file_name, '[[:alpha:]]') then\n\
    \    return false\n  end\n  if string.find(file_name, '.') then\n    local first_part_length\
    \ = string.find(file_name, '%.') + 1\n    local second_part_length = string.find(file_name,\
    \ '%[^.]%.', first_part_length)\n    if second_part_length then\n      return\
    \ false\n    end\n  end\n  if string.find(file_name, '[[:alpha:]]') then\n   \
    \ return false\n  end\n  return true\nend", "\t-- Declare variables.\n\tlocal\
    \ is_valid, file_extension, file_name -- Boolean variables.\n\t-- Check the file\
    \ name.\n\tis_valid = false\n\t-- Check if file name is valid.\n\tif file_name\
    \ == '' or file_name ~= nil then\n\t\tif string.find(file_name, \"%.\") == nil\
    \ then\n\t\t\t-- Check that the substring before the dot is not empty.\n\t\t\t\
    if string.find(file_name, \".\") == nil then\n\t\t\t\t-- Check that the substring\
    \ after the dot is valid.\n\t\t\t\tif string.find(file_name, \"[a,z,A,Z]\") ~=\
    \ nil then\n\t\t\t\t\t-- Check if substring before the dot starts with a letter\
    \ from \n\t\t\t\t\t-- latin alphabet. \n\t\t\t\t\t-- Check if substring after\
    \ the dot is an extension.\n\t\t\t\t\t-- Check if substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n\t\t\t\t\tis_valid = true \n\t\t\t\telse\n\t\
    \t\t\t\tis_valid = false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t-- File name contains\
    \ only dots.\n\t\t\t\tis_valid = false\n\t\t\tend\n\t\telse\n\t\t\t-- File name\
    \ contains more than 3 digits.\n\t\t\tis_valid = false\n\t\tend\n\telse\n\t\t\
    -- File name is empty.\n\t\tis_valid = false\n\tend\n\t-- Return the result of\
    \ the file name check.\n\treturn is_valid\nend", "   local function is_valid(file_element)\n\
    \      local function is_digit(number)\n         return string.sub(number, 1,\
    \ 1) >= '0' and string.sub(number, 1, 1) <= '9' \n      end\n      local function\
    \ is_dot_symbol(symbol)\n         return string.sub(symbol, 2, 1) == '.'\n   \
    \   end\n      local function is_empty_string(symbol)\n         return string.sub(symbol,\
    \ 1, 1) == '' or string.sub(symbol, 1, 1) ~= '.'\n      end\n      local function\
    \ is_symbol_valid(symbol)\n         return symbol == 'a' or symbol == 'A' or symbol\
    \ == 'b' or symbol == 'B' \n             or symbol == 'c' or symbol == 'C' or\
    \ symbol == 'd' or symbol == 'D' \n             or symbol == 'e' or symbol ==\
    \ 'E' or symbol == 'f' or symbol == 'F' \n             or symbol == 'i' or symbol\
    \ == 'I' or symbol == 'l' or symbol == 'L' \n             or symbol == 'o' or\
    \ symbol == 'O' or symbol == 'r' or symbol == 'R' \n             or symbol ==\
    \ 's' or symbol == 'S' or symbol == 't' or symbol == 'T' \n             or symbol\
    \ == 'u' or symbol == 'U' or symbol == 'v' or symbol == 'V' \n             or\
    \ symbol == 'w' or symbol == 'W' or symbol == 'x' or symbol == 'X' \n        \
    \     or symbol == 'y' or symbol == 'Y' or symbol == 'z' or symbol == 'Z'\n  \
    \    end\n      return is_digit(file_element) \n         and is_dot_symbol(file_element)\
    \ \n         and is_empty_string(file_element) \n         and is_symbol_valid(file_element)\n\
    \   end", "   local regex_string = \"^[a-z]{1}\\\\([0-9]{1,3}\\\\)\\\\.(txt|exe|dll)$\"\
    \n   if string.find(file_name, \".\") then\n      return false\n   else\n    \
    \  if string.find(file_name, \"\") then\n         return false\n      elseif string.find(file_name,\
    \ \"..\") then\n         return false\n      elseif string.find(file_name, \"\
    \ \") then\n         return false\n      elseif string.find(file_name, \" \")\
    \ then\n         return false\n      elseif string.find(file_name, \" \") then\n\
    \         return false\n      elseif string.find(file_name, \"*\") then\n    \
    \     return false\n      elseif string.find(file_name, \"?\") then\n        \
    \ return false\n      elseif string.find(file_name, \":\") then\n         return\
    \ false\n      elseif string.find(file_name, \"<\") then\n         return false\n\
    \      elseif string.find(file_name, \">\") then\n         return false\n    \
    \  elseif string.find(file_name, \"|\") then\n         return false\n      elseif\
    \ string.find(file_name, \"\\\\\") then\n         return false\n      elseif string.find(file_name,\
    \ \"\\\"\") then\n         return false\n      elseif string.find(file_name, \"\
    '\") then\n         return false\n      elseif string.find(file_name, \"/\") then\n\
    \         return false\n      elseif string.find(file_name, \"|\") then\n    \
    \     return false\n      else\n         return true\n      end\n   end\nend",
  "   if file_name:match '.*[^0-9]' then \n      return 'No'\n   else\n      if file_name:sub(1,\
    \ 3) == '..' then\n         return 'No'\n      else\n         return 'Yes'\n \
    \     end\n   end\nend", "  if #file_name > 3 then\n    return false\n  elseif\
    \ string.find(file_name, '.') then\n    return false\n  elseif file_name:sub(1,\
    \ 1) == '[' then\n    return false\n  elseif file_name:sub(#file_name+1, #file_name-1)\
    \ not in {'txt', 'exe', 'dll'} then\n    return false\n  end\n  return true\n\
    end", "    local valid = false\n    local digit_count = 0\n    local dot_count\
    \ = 0\n    local letter_count = 0\n    local last_letter = -1\n    \n    -- The\
    \ file's name should be at most of 6 characters.\n    if string.len(file_name)\
    \ <= 6 then\n        return valid\n    end\n    \n    -- Get the substring before\
    \ the dot '.'\n    local index = string.find(file_name, \".\")\n    if index ==\
    \ nil then\n        return valid\n    end\n    \n    -- Get the substring after\
    \ the dot '.'\n    local substring = string.sub(file_name, index+1)\n    -- Check\
    \ the first character of the substring.\n    -- If it is not latin letter, return\
    \ 'No'.\n    if not is_latin_letter(substring) then\n        return false\n  \
    \  end\n    -- If the first character is not latin letter, return 'No'.\n    if\
    \ not is_latin_letter(file_name[1]) then\n        return false\n    end\n    --\
    \ Check the first letter of the substring.\n    -- If the first letter of the\
    \ substring is not latin letter, return 'No'.\n    if last_letter ~= -1 and file_name[last_letter]\
    \ ~= last_letter then\n        return false\n    end\n    \n    -- If the substring\
    \ contains exactly one dot, return 'No'.\n    if string.len(substring) == 1 then\n\
    \        return false\n    end\n    \n    -- Get the digit count of the file's\
    \ name.\n    -- Ignore the case-sensitive part.\n    digit_count = string.find(file_name,\
    \ \":\")\n    if digit_count == nil then\n        return false\n    end\n    \n\
    \    -- Get the letter count of the file's name.\n    -- Ignore the case-sensitive\
    \ part.\n    letter_count = string.find(file_name, letter)\n    if letter_count\
    \ == nil then\n        return false\n    end\n    \n    -- If the substring before\
    \ the dot should not be empty, and it starts with a\n    -- letter from the latin\
    \ alphabet ('a' -- -- -- -- -- -- -- -- -- -- -- --)\n    -- return 'No'.\n  \
    \  if digit_count > 1 and string.sub(substring, 0, 1) ~= first_letter then\n \
    \       return false\n    end\n    \n    -- If the substring after the dot should\
    \ be one of these: \n    -- ['txt', 'exe', 'dll'], return 'No'.\n    local strings\
    \ = {'txt', 'exe', 'dll'}\n    local dot_count = string.find(file_name, dot)\n\
    \    if dot_count == nil then\n        return false\n    end\n    \n    local\
    \ valid_count = 1\n    -- If dot_count is bigger than 0, then there are some substrings\
    \ \n    -- after the dot.\n    if dot_count > 1 then\n        valid_count = valid_count\
    \ * 2\n    end\n    \n    -- If the substring after the dot should not be empty,\
    \ and it start", "    -- Get the first character of the file's name\n    local\
    \ c = string.sub(file_name, 1, 1)", "   if #file_name < 3 or string.find(file_name,\
    \ '.') ~= 1 or string.sub(file_name, 1, 1) ~= 'a' or string.sub(file_name, 1,\
    \ 1) ~= 'z' then\n      return false\n   end\n   for i = 0, #{'txt', 'exe', 'dll'}\
    \ do\n      if string.sub(file_name, -#i + 1) == '.' then\n         if string.sub(file_name,\
    \ -i) ~= string.sub(file_name, -(#i + 1)) then\n            return false\n   \
    \      end\n      end\n   end\n   return true\nend", "    -- Replace the following\
    \ lines with the desired file name validation logic.\n    if string.len(string.gsub(file_name,\
    \ '[^0-9.]', '')) ~= 1 then\n        return false\n    end\n    if string.find(file_name,\
    \ '.') ~= 1 then\n        return false\n    end\n    if string.sub(file_name,1,1)\
    \ ~= 'a' or\n        string.sub(file_name,1,1) ~= 'A' then\n        return false\n\
    \    end\n    if string.sub(file_name,string.find(file_name, '.'),string.find(file_name,\
    \ '.')) ~= ['txt', 'exe', 'dll'] then\n        return false\n    end\n    return\
    \ true\nend", "    local result = os.execute('printf \"%%a\" &< \"'..file_name..'\"\
    ')\n    return (result ~= nil)\nend", "\t-- Check that there are no more than\
    \ three digits in the filename\n\tlocal result = true\n\t-- Replace the space\
    \ with an empty string\n\tfile_name = file_name:gsub(' ','')\n\t-- Make sure there\
    \ is a dot after the file name\n\t-- If the dot does not exists, add it\n\t--\
    \ Otherwise, make sure that the dot is followed by txt or exe or dll\n\t-- If\
    \ the dot is followed by txt, exe, or dll, then it is valid\n\tif file_name:sub(1,1)\
    \ ~= '..' then\n\t\tif file_name:sub(1,3) ~= '0' then\n\t\t\t-- No more than three\
    \ digits. \n\t\t\tresult = false\n\t\telseif file_name:sub(1,1) ~= 'a' and file_name:sub(1,1)\
    \ ~= 'A' then\n\t\t\t-- The substring before the dot should not be empty, and\
    \ it starts with a \n\t\t\t-- letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \t\t\tresult = false\n\t\telseif file_name:sub(1,3) ~= 'txt' and file_name:sub(1,3)\
    \ ~= 'exe' and file_name:sub(1,3) ~= 'dll' then\n\t\t\t-- The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n\t\t\tresult = false\n\
    \t\tend\n\tend\n\treturn result\nend", "    -- Your code here\n    if string.sub(file_name,1,3)\
    \ != '0' or string.sub(file_name,1,2) ~= string.char(string.byte('A')+string.byte('a')\
    \ -\n                1) or string.sub(file_name,string.find(file_name, '.')-1,string.find(file_name,\
    \ '.')) ~= '.' then return 'No' end\n    local dot_index = string.find(file_name,\
    \ '.')\n    if dot_index == nil then return 'No' end\n    local dot_before = string.sub(file_name,1,dot_index-1)\n\
    \    if string.sub(dot_before,1,1) ~= string.char(string.byte('a')+string.byte('A')-string.byte('0'))\
    \ then\n        return 'No'\n    end\n    local dot_after = string.sub(file_name,dot_index+1,string.find(file_name,\
    \ '.')-1)\n    local dot_names = ['txt', 'exe', 'dll']\n    for _,name in ipairs(dot_names)\
    \ do\n        if string.sub(dot_after,1,1) == string.char(string.byte('a')+string.byte('A')-string.byte('0'))\
    \ then\n            if dot_after ~= name then return 'No' end\n        end\n \
    \   end\n    return 'Yes'\nend", "  if string.find(file_name, \"[^0-9.]\") ==\
    \ nil then \n    if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \"\") ~= nil then \n        if string.find(file_name, \".\") ~= nil then\n \
    \         if string.find(file_name, \" \") ~= nil then\n            if string.find(file_name,\
    \ \"..\") ~= nil then\n              return nil\n            else\n          \
    \    return \"No\"\n            end\n          else\n            return \"No\"\
    \n          end\n        else\n          return \"No\"\n        end\n      else\n\
    \        return \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n\
    \    return \"No\"\n  end\nend", "   -- Check if the file name contains more than\
    \ three digits\n   if string.find(file_name, \"^%03d$\")~=nil then\n      return\
    \ \"No\"\n   end\n   -- Check if there is a dot in the name\n   if string.find(file_name,\
    \ \".\")~=nil then\n      -- Get the substring before the dot\n      local file_name\
    \ = string.sub(file_name,1,string.find(file_name, \".\")-1)\n      -- Check if\
    \ the substring starts with a letter from the latin alphabet\n      if string.find(file_name,\
    \ \"^[a-zA-Z]\")~=nil then\n         -- Check if the substring after the dot is\
    \ one of these three filenames\n         if string.find(file_name, \"(txt|exe|dll)\"\
    )~=nil then\n            return \"Yes\"\n         end\n      end\n   end\n   return\
    \ \"No\"\nend", "  -- Check if the file's name contains more than 3 digits\n \
    \ if string.sub(file_name, 1, string.len(file_name)-3) ~= '0' then\n    return\
    \ false\n  end\n  -- Check if the file's name contains exactly one dot\n  if string.sub(file_name,\
    \ string.len(file_name)-1, string.len(file_name)) ~= '.' then\n    return false\n\
    \  end\n  -- Check if the file's name starts with a latin alphabet letter\n  if\
    \ string.sub(file_name, 1, string.len(file_name)-1) ~= 'a' then\n    return false\n\
    \  end\n  -- Check if the file's name contains one of these strings\n  local extensions\
    \ = {'txt', 'exe', 'dll'}\n  for i=1,#extensions do\n    if string.find(file_name,\
    \ extensions[i]) > 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "   return true -- or false\nend", "    if file_name == nil or file_name\
    \ == '' then\n        return nil\n    end\n    local index = string.find(file_name,\
    \ \"%..\", 1)\n    if index == nil then\n        return nil\n    end\n    local\
    \ index2 = string.find(file_name, \"%..\", index+1)\n    if index2 == nil then\n\
    \        return nil\n    end\n    local sub = string.sub(file_name,index+1,index2)\n\
    \    if sub == nil then\n        return nil\n    end\n    if string.find(sub,\
    \ \".\") ~= nil then\n        if string.len(sub) ~= 1 then\n            return\
    \ nil\n        end\n        if string.sub(sub,1,1) ~= 'a' and string.sub(sub,1,1)\
    \ ~= 'A' and string.sub(sub,1,1) ~= '0' then\n            return nil\n       \
    \ end\n    end\n    for i,v in ipairs({\"txt\", \"exe\", \"dll\"}) do\n      \
    \  if string.find(sub,v) ~= nil then\n            return true\n        end\n \
    \   end\n    return false\nend", "   -- A file's name is considered to be valid\
    \ if and only if all the following conditions are met:\n   -- There should not\
    \ be more than three digits ('0'-'9') in the file's name.\n   -- The file's name\
    \ contains exactly one dot '.'\n   -- The substring before the dot should not\
    \ be empty, and it starts with a letter from the \n   -- latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n   -- The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n\
    \   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- --\n   -- -- -- ",
  "   -- Check input parameter\n   if file_name == nil then\n      print('nil argument\
    \ in file_name_check')\n      return 0\n   elseif file_name:len() < 4 then\n \
    \     print('file_name_check: string too short')\n      return 0\n   elseif file_name:sub(1,\
    \ 3) == '..' then\n      print('file_name_check: string contains \"..\"')\n  \
    \    return 0\n   elseif file_name:sub(1, 1) == '/' then\n      print('file_name_check:\
    \ string contains \"/\"')\n      return 0\n   elseif file_name:sub(1, 1) == '\\\
    \\' then\n      print('file_name_check: string contains \"\\\\\"')\n      return\
    \ 0\n   end\n   -- Check filename format\n   local num_digits = file_name:len()\n\
    \   if num_digits > 3 then\n      print('file_name_check: string contains too\
    \ many digits')\n      return 0\n   elseif num_digits < 1 then\n      print('file_name_check:\
    \ string contains no digits')\n      return 0\n   elseif num_digits == 1 then\n\
    \      local first_char = file_name:sub(1,1)\n      if first_char >= 'a' and first_char\
    \ <= 'z' then\n         if first_char < 'A' then\n            -- The substring\
    \ before the dot should not be empty, and it starts with a letter\n          \
    \  -- from the latin alphapet ('a'-'z')\n            if file_name:len() > 2 then\n\
    \               if file_name:sub(1, 2) == '..' then\n                  print('file_name_check:\
    \ string contains \"..\" at position ' .. file_name:len())\n                 \
    \ return 0\n               elseif file_name:sub(1, 1) ~= '.' then\n          \
    \        print('file_name_check: string contains \".\" at position ' .. file_name:len())\n\
    \                  return 0\n               elseif file_name:sub(1, 2) ~= '.'\
    \ then\n                  print('file_name_check: string contains \".\" at position\
    \ ' .. file_name:len())\n                  return 0\n               elseif file_name:sub(2,\
    \ 1) == '\\\\' then\n                  print('file_name_check: string contains\
    \ \"\\\\\" at position ' .. file_name:len())\n                  return 0\n   \
    \            elseif file_name:sub(2, 1) == '/' then\n                  print('file_name_check:\
    \ string contains \"/\" at position ' .. file_name:len())\n                  return\
    \ 0\n               else\n                  print('file_name_check: string contains\
    \ \"..\" at position ' .. file_name:len())\n                  return 0\n     \
    \          end\n            else\n               print('file_name_check: string\
    \ contains \".\" at position ' .. ", "    local s = string.lower(file_name)\n\
    \    return s:match \"^[0-9]+\\.[a-zA-Z]\" and not s:match \"^[^.]+$\" and not\
    \ s:match \"^[a-zA-Z]\" and not s:match \"^[%.]+$\" \nend", "   -- 1. Check validity\
    \ of file name:\n   if not (string.match(file_name, \"^[0-9]+$\") and\n      \
    \     string.match(file_name, \"^[^.]*$\") and\n           string.match(file_name,\
    \ \"^[a-z_][a-z._]+$\") and\n           string.match(file_name, \"^[^.]*[.]\"\
    ))\n      return false\n   end", "\t--assert(file_name ~= nil, 'file_name should\
    \ not be nil.')\n\t--assert(isstring(file_name), 'file_name should be a string.')\n\
    \t--assert(string.len(file_name) <= 5, 'file_name should be less than 5 characters.')\n\
    \t\n\t--local digits_num = tonumber(string.match(file_name, '%d+'))\n\t--assert(digits_num\
    \ > 0, 'digits should be greater than 0.')\n\t--assert(digits_num <= 100, 'digits\
    \ should be less than or equal to 100.')\n\t\n\t--local dot_num = string.find(file_name,\
    \ '%.', '.')\n\t--assert(dot_num == 0, 'dot_num should be greater than or equal\
    \ to 0.')\n\t--assert(dot_num ~= nil, 'dot_num should not be nil.')\n\t--assert(dot_num\
    \ ~= 0, 'dot_num should be greater than 0.')\n\t--assert(string.sub(file_name,\
    \ 0, dot_num) == '', 'dot_num should be an empty string.')\n\t\n\t--local extension_num\
    \ = string.find(file_name, '%.', dot_num+1)\n\t--assert(extension_num == nil,\
    \ 'extension_num should not be nil.')\n\t--assert(extension_num >= dot_num, 'extension_num\
    \ should be greater than dot_num.')\n\t--assert(extension_num < string.len(file_name),\
    \ 'extension_num should be less than the length of the file name.')\n\t\n\t--local\
    \ lower_case_alphabet = string.match(string.lower(file_name), '%a%d+')\n\t--assert(lower_case_alphabet\
    \ ~= nil, 'lower_case_alphabet should not be nil.')\n\t--assert(lower_case_alphabet\
    \ ~= nil, 'lower_case_alphabet should not be nil.')\n\t--assert(lower_case_alphabet\
    \ ~= nil, 'lower_case_alphabet should not be nil.')\n\t\n\t--return lower_case_alphabet\
    \ ~= 'a' and\n\t--\tlower_case_alphabet ~= 'z' and\n\t--\tlower_case_alphabet\
    \ ~= 'A' and\n\t--\tlower_case_alphabet ~= 'Z'\nend", "   if string.sub(file_name,\
    \ 1, 3) ~= '' then\n      if string.sub(file_name, 1, 3) ~= string.sub(file_name,\
    \ 1, 3) then\n         return 'No'\n      else\n         return 'Yes'\n      end\n\
    \   else\n      return 'No'\n   end\nend\n</cell>\n<text>\n7. Write the function\
    \ file_extension_check, which takes a string representing a file's \n name and\
    \ returns 'Yes' if the file's name has a valid extension, and returns 'No'\n otherwise.\
    \ Valid extensions are considered to be a subset of the extensions allowed for\
    \ \n a file name.\n For example, if the file name has a valid extension, then\
    \ it can be used as a file \n name. \n If not, then it is not possible.\n A file's\
    \ extension is a string which follows the dot ('.') in the file's name, \n which\
    \ can be any character. The dot ('.') cannot be the first or last character \n\
    \ in the string, and it cannot appear more than two times. The dot ('.') character\
    \ \n can appear in the middle of the string, but only if it is followed by at\
    \ least 3 \n characters, and it cannot be followed by a space, number, or letter,\
    \ other than \n the dot. \n If a valid extension string ends with a '.' character,\
    \ the dot is not required. \n If a valid extension string does not end with a\
    \ '.' character, the dot is required.\n Examples:", "\t-- Check if the file name\
    \ contains three digits in the name\n\tlocal has_three = 0\n\tfor idx, char in\
    \ pairs(file_name) do\n\t\tif char == '0' or char == '9' then\n\t\t\thas_three\
    \ = has_three + 1\n\t\tend\n\tend", "  -- Check that the file name has three digits\n\
    \  if #file_name > 3 then\n    return 'No'\n  end\n  -- Check that the file name\
    \ contains exactly one dot\n  if file_name ~= file_name then\n    return 'No'\n\
    \  end\n  -- Check that the file name does not start with a dot and that its name\
    \ \n  -- does not end with a dot\n  local dot = file_name:find('%.[^.]')\n  if\
    \ dot then\n    return 'No'\n  end\n  -- Check that the substring before the dot\
    \ is not empty\n  local name_before = file_name:sub(1, dot)\n  if name_before\
    \ == name_before then\n    return 'No'\n  end\n  -- Check that the substring before\
    \ the dot starts with a letter\n  local start = #name_before + 1\n  for i = start,\
    \ 1, -1 do\n    if name_before:sub(i) ~= name_before:sub(i, i) then\n      return\
    \ 'No'\n    end\n  end\n  -- Check that the substring after the dot is in the\
    \ list of acceptable file types\n  for _, file_type in pairs(file_types) do\n\
    \    if file_name:sub((dot + 1), #file_name) ~= file_type then\n      return 'No'\n\
    \    end\n  end\n  -- If the file's name is valid, it should return 'Yes'\n  return\
    \ 'Yes'\nend", "\tlocal num_zeros = file_name:len()\n\tif num_zeros > 3 then\n\
    \t\treturn \"No\"\n\telseif num_zeros == 0 then\n\t\t-- The file's name is blank,\
    \ so we return \"No\".\n\t\treturn \"No\"\n\telseif file_name:sub(1, 1) == \"\
    .\" then\n\t\t-- The file's name starts with '.', so we return \"No\".\n\t\treturn\
    \ \"No\"\n\telseif file_name:sub(1, 1) ~= \"\" and file_name:sub(1, 1) ~= \" \"\
    \ then\n\t\t-- The file's name starts with something other than a letter, so we\
    \ return \"No\".\n\t\treturn \"No\"\n\telseif file_name:sub(2, 3) ~= \"txt\" and\
    \ file_name:sub(2, 3) ~= \"exe\" and file_name:sub(2, 3) ~= \"dll\" then\n\t\t\
    -- The file's name doesn't contain one of the specified extensions, so we return\
    \ \"No\".\n\t\treturn \"No\"\n\telseif file_name:sub(3, 3) ~= \"txt\" then\n\t\
    \t-- The file's name ends with '.txt', so we return \"No\".\n\t\treturn \"No\"\
    \n\telseif file_name:sub(4, 4) ~= \"exe\" then\n\t\t-- The file's name ends with\
    \ '.exe', so we return \"No\".\n\t\treturn \"No\"\n\telseif file_name:sub(5, 5)\
    \ ~= \"dll\" then\n\t\t-- The file's name ends with '.dll', so we return \"No\"\
    .\n\t\treturn \"No\"\n\telse\n\t\t-- The file's name contains exactly one dot\
    \ ('.'), so we return \"Yes\".\n\t\treturn \"Yes\"\n\tend\nend", "\t-- Checking\
    \ the validity of the file name \n\tif string.find(file_name, \"%a\") then\n\t\
    \t-- If the file name has more than one digit then return false\n\t\tif string.find(file_name,\
    \ \"%[0-9]\") then\n\t\t\t-- If a string contains more than one digit return false\n\
    \t\t\treturn false\n\t\tend\n\telse\n\t\t-- If file name has one dot then return\
    \ false\n\t\tif string.find(file_name, \"%\\.\") then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\t-- Checking the validity of the file name\n\tif string.find(file_name,\
    \ \"%.\") then\n\t\t-- If file name has more than one dot then return false\n\t\
    \tif string.find(file_name, \"%[0-9]\") then\n\t\t\treturn false\n\t\tend\n\t\
    else\n\t\t-- If file name does not contain dot then return true\n\t\treturn true\n\
    \tend\n\t-- Checking the validity of the file name\n\tif string.find(file_name,\
    \ \"%[a-zA-Z]\") then\n\t\t-- If file name has more than one letter then return\
    \ false\n\t\tif string.find(file_name, \"%[0-9]\") then\n\t\t\treturn false\n\t\
    \tend\n\telse\n\t\t-- If file name does not contain letter then return true\n\t\
    \treturn true\n\tend\nend", "    local file_name = file_name -- remove unnecessary\
    \ lines\n    local file_name = file_name:gsub('[^0-9\\.]','') -- remove non digits\
    \ and '.' characters\n    local file_name = file_name:gsub('^','')\n    local\
    \ file_name = file_name:gsub('.','')\n    local file_name = file_name:gsub('^[a-zA-z]','')\n\
    \    local file_name = file_name:gsub('\\.[tT][xX][mM][lL]','')\n    local file_name\
    \ = file_name:gsub('\\.[eE][xX][mM][lL]','')\n    local file_name = file_name:gsub('\\\
    .[dD][lL][oO][wW]','')\n    local file_name = file_name:gsub('\\.[rR][eE][sS][tT]','')\n\
    \    return file_name == 'Yes'\nend", "\t-- return true if file_name is a valid\
    \ file name, false otherwise\n\t-- return false if file_name is empty or doesn't\
    \ contain any dot ('.'), \n\t-- or it contains more than three digits ('0'-'9')\n\
    \t-- return false if the file_name contains any dot ('.') but the first \n\t--\
    \ character of file_name is not the letter from latin alphabet ('a' - 'z' \n\t\
    -- and 'A' - 'Z')\n\t-- return false if the file_name contains any dot ('.') but\
    \ the last \n\t-- character of file_name is not 'txt', 'exe', 'dll'\n\t-- return\
    \ false if the file_name starts with any character other than \n\t-- the letter\
    \ from latin alphabet ('a'-'z' and 'A'-'Z')\n\t-- return false if the file_name\
    \ ends with any character other than 'txt', 'exe', \n\t-- 'dll'\n\t-- return false\
    \ if the file_name starts with any character other than \n\t-- the letter from\
    \ latin alphabet ('a'-'z' or 'A'-'Z') and file_name ends \n\t-- with any character\
    \ other than 'txt', 'exe', 'dll'\n\treturn (string.len(file_name) >= 3 and string.sub(file_name,1,3)\
    \ ~= '' and\n\t\tstring.sub(file_name,-1,1) ~= 'txt' and\n\t\tstring.sub(file_name,-1,1)\
    \ ~= 'exe' and\n\t\tstring.sub(file_name,-1,1) ~= 'dll' and\n\t\tstring.sub(file_name,1,1)\
    \ ~= 'a' and\n\t\tstring.sub(file_name,1,1) ~= 'A')\nend", "    if string.sub(file_name,\
    \ 1, 3) ~= '0' then\n        return 'No'\n    end", "  -- Write your solution\
    \ here\nend", "    local file_has_dot_name = true\n    local file_has_one_dot_name\
    \ = true\n    local file_has_letter = true\n    local file_has_extension = false\n\
    \    local file_has_extension_part\n    local file_has_extension_part_end\n  \
    \  local file_name_length = #file_name\n    local dot = string.find(file_name,\
    \ '.')\n    local dot1 = string.find(file_name, '.', 1, true)\n    local dot2\
    \ = string.find(file_name, '.', 1, true)\n    local dot3 = string.find(file_name,\
    \ '.', 1, true)\n    local dot4 = string.find(file_name, '.', 1, true)\n    local\
    \ dot5 = string.find(file_name, '.', 1, true)\n    local dot6 = string.find(file_name,\
    \ '.', 1, true)\n    local dot7 = string.find(file_name, '.', 1, true)\n    local\
    \ dot8 = string.find(file_name, '.', 1, true)\n    local dot9 = string.find(file_name,\
    \ '.', 1, true)\n    local dot10 = string.find(file_name, '.', 1, true)\n    local\
    \ dot11 = string.find(file_name, '.', 1, true)\n    local dot12 = string.find(file_name,\
    \ '.', 1, true)\n    local dot13 = string.find(file_name, '.', 1, true)\n    local\
    \ dot14 = string.find(file_name, '.', 1, true)\n    local dot15 = string.find(file_name,\
    \ '.', 1, true)\n    local dot16 = string.find(file_name, '.', 1, true)\n    local\
    \ dot17 = string.find(file_name, '.', 1, true)\n    local dot18 = string.find(file_name,\
    \ '.', 1, true)\n    local dot19 = string.find(file_name, '.', 1, true)\n    local\
    \ dot20 = string.find(file_name, '.', 1, true)\n    local dot21 = string.find(file_name,\
    \ '.', 1, true)\n    local dot22 = string.find(file_name, '.', 1, true)\n    local\
    \ dot23 = string.find(file_name, '.', 1, true)\n    local dot24 = string.find(file_name,\
    \ '.', 1, true)\n    local dot25 = string.find(file_name, '.', 1, true)\n    local\
    \ dot26 = string.find(file_name, '.', 1, true)\n    local dot27 = string.find(file_name,\
    \ '.', 1, true)\n    local dot28 = string.find(file_name, '.', 1, true)\n    local\
    \ dot29 = string.find(file_name, '.', 1, true)\n    local dot30 = string.find(file_name,\
    \ '.', 1, true)\n    local dot31 = string.find(file_name, '.', 1, true)\n    local\
    \ dot32 = string.find(file_name, '.', 1, true)\n    local dot33 = string.find(file_name,\
    \ '.', 1, true)\n    local dot34 = string.find(file_name, '.', 1, true)\n    local\
    \ dot35 = string.find(file_name, '.', 1, true)\n    local dot", "  -- The filename\
    \ must be exactly three digits, and contain exactly one dot, and\n  -- it starts\
    \ with a letter from a to z.\n  assert(file_name:match('^%s+\\.\\.+%s+$') and\
    \ file_name:sub(1, 1):match('[A-Za-z]'))\n  -- The extension of the file must\
    \ be one of these: ['txt', 'exe', 'dll']\n  return file_name:sub(-3) == '.txt'\
    \ or\n         file_name:sub(-3) == 'exe' or\n         file_name:sub(-3) == 'dll'\n\
    end", "   return string_valid(file_name, true, false, true, false, true, false,\
    \ true, false)\nend", "   local result = true\n   if file_input:sub(1, 1) ~= '0'\
    \ or file_input:sub(1, 1) ~= '9' or file_input:sub(1, 2) ~= '.' or not file_name:sub(1,\
    \ 1) ~= 'a' or not file_name:sub(1, 1) ~= 'z' or not file_name:sub(1, 2) ~= 'A'\
    \ or not file_name:sub(1, 2) ~= 'Z' or file_name:sub(1, 3) == '' then\n      result\
    \ = false\n   elseif file_name:sub(1, 3) == 'txt' or file_name:sub(1, 3) == 'exe'\
    \ or file_name:sub(1, 3) == 'dll' then\n      result = true\n   end\n   return\
    \ result\nend", "  return string.find(file_name, '^[0-9]{1,3}$') ~= nil \n  and\
    \ string.find(file_name, '.') ~= nil \n  and string.find(file_name, ' ') ~= nil\
    \ \n  and string.sub(file_name, 1, 1) ~= nil\n  and string.find(file_name, string.char(tonumber(string.sub(file_name,2,3)),\
    \ '%z')) ~= nil\n  and string.find(file_name, '[a-z][a-z]') ~= nil\n  and string.find(file_name,\
    \ '.') ~= nil \n  and string.sub(file_name, 1, 1) ~= nil\n  and string.find(file_name,\
    \ string.char(tonumber(string.sub(file_name,2,3)), '%z')) ~= nil\nend\nprint(file_name_check('111.exe'))\n\
    print(file_name_check('aaa.dffdff'))\nprint(file_name_check('1234abc'))\nprint(file_name_check('1.exe'))\n\
    print(file_name_check('1.exe..exe'))\nprint(file_name_check('1.exe.exe'))\nprint(file_name_check('.exe'))\n\
    print(file_name_check('exe'))\nprint(file_name_check(''))\nprint(file_name_check('111'))\n\
    print(file_name_check('111.'))\nprint(file_name_check('111..exe'))\nprint(file_name_check('111.exe'))\n\
    print(file_name_check('111.exe..exe'))\nprint(file_name_check('111.exe.exe'))\n\
    print(file_name_check('.exe'))\nprint(file_name_check('exe'))\nprint(file_name_check(''))\n\
    print(file_name_check('111'))\nprint(file_name_check('111.'))\nprint(file_name_check('111..exe'))\n\
    print(file_name_check('111.exe'))\nprint(file_name_check('111.exe..exe'))\nprint(file_name_check('111.exe.exe'))\n\
    print(file_name_check('.exe'))\nprint(file_name_check('exe'))\nprint(file_name_check(''))\n\
    print(file_name_check('111'))\nprint(file_name_check('111.'))\nprint(file_name_check('111..exe'))\n\
    print(file_name_check('111.exe'))\nprint(file_name_check('111.exe..exe'))\nprint(file_name_check('111.exe.exe'))\n\
    print(file_name_check('.exe'))\nprint(file_name_check('exe'))\nprint(file_name_check(''))\n\
    print(file_name_check('111'))\nprint(file_name_check('111.'))\nprint(file_name_check('111..exe'))\n",
  "   return file_name ~= nil and string.find(file_name, \"%^[^0-9]\", 1, true) and\
    \ string.find(file_name, \"%.[^a-zA-z0-9]\", 1, true) and string.find(file_name,\
    \ \"%.[^a-zA-z0-9]\", 1, true) and string.find(file_name, \"%.exe\", 1, false)\
    \ and string.find(file_name, \"%.dll\", 1, false) and string.find(file_name, \"\
    %.txt\", 1, false)\nend", "    if file_name ~= '' then\n        file_name = string.lower(file_name)\n\
    \        if string.find(file_name, \"..\") then\n            return nil\n    \
    \    end\n        \n        -- check if the file name only contains valid characters\n\
    \        if not (string.find(file_name, string.char(0x0021..string.char(0x007E)))\
    \ then\n            return nil\n        end\n        \n        -- check if the\
    \ first character is letter\n        if not (string.find(file_name, \"^[a-zA-Z]\"\
    )) then\n            return nil\n        end\n        \n        -- check if the\
    \ second character is '.'\n        if string.find(file_name, \"%.\") then\n  \
    \          return nil\n        end\n        \n        -- check if the third character\
    \ is one of these: ['txt', 'exe', 'dll']\n        if string.find(file_name, \"\
    %.txt\") then\n            if string.find(file_name, \"%.exe\") then\n       \
    \         return nil\n            end\n        end\n    end\n    return true\n\
    end", "  local file_name_check_result = 'No'\n  if file_name:match(\"^%z?%.[^.]+\\\
    .(txt|exe|dll)$\") then\n    file_name_check_result = 'Yes'\n  else\n    file_name_check_result\
    \ = 'No'\n  end\n  return file_name_check_result\nend", "\t-- Initialize a variable\
    \ to store all the file's names found.\n\tlocal file_list = {}", "   -- to verify\
    \ file name \n   if string.len(file_name) > 3 then\n      return false\n   elseif\
    \ file_name == nil then\n      return false\n   elseif string.len(file_name) <\
    \ 1 then\n      return false\n   elseif string.find(file_name, \".\") ~= 1 then\n\
    \      return false\n   elseif string.find(file_name, \"a\") ~= 1 or string.find(file_name,\
    \ \"z\") ~= 1 then\n      return false\n   elseif string.find(file_name, \".\"\
    , 1, 1) ~= 1 then\n      return false\n   elseif string.find(file_name, \".\"\
    , 1, 2) ~= 1 then\n      return false\n   elseif string.find(file_name, \".\"\
    , 1, 3) ~= 1 then\n      return false\n   end", "    local function is_valid_filename(file)\n\
    \        -- A file's name is considered to be valid if and only if all the following\
    \ conditions are met:\n        -- - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n        -- - The file's name contains exactly\
    \ one dot '.'\n        -- - The substring before the dot should not be empty,\
    \ and it starts with a letter from the \n        --   latin alphabet ('a'-'z'\
    \ and 'A'-'Z').\n        -- - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        local file_name = file \n            -- Remove\
    \ the dot from the file name\n            -- The substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphabet ('a'-'z' and\
    \ 'A'-'Z')\n            -- The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n            ,\n        -- A file's name is considered\
    \ to be valid if and only if all the following conditions are met:\n        --\
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \        -- - The file's name contains exactly one dot '.'\n        -- - The substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphabet ('a'-'z' and 'A'-'Z')\n        -- - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n        file_name_array:gsub('\\.',\
    \ '');\n        -- Check if all the conditions are met\n        return (\n   \
    \         -- There should not be more than three digits in the file name\n   \
    \         -- There are only three digits in the file name\n            string.find(file_name,\
    \ \"^[0-9]\") ~= nil and\n            -- The substring before the dot should not\
    \ be empty, and it starts with a letter from the latin alphabet ('a'-'z' and 'A'-'Z')\n\
    \            -- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n            string.find(file_name, \"^[^.]\") ~= nil and\n         \
    \   -- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \            string.find(file_name, \"^[^.]\") ~= nil and\n            -- The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \
    \        string.find(file_name, \"^[^.]\") ~= nil and\n            -- The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n            string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n            -- The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n            string.", "   if string.len(file_name)\
    \ > 3 then\n      return false\n   elseif file_name:sub(1, 1) ~= '\\.' then\n\
    \      return false\n   else\n      if file_name:sub(1, 1) == '\\0' or file_name:sub(1,\
    \ 1) ~= 'a' .. 'z' or\n         file_name:sub(1, 2) ~= '\\0' or file_name:sub(1,\
    \ 2) ~= 'a' .. 'z' or\n         file_name:sub(1, 3) ~= '\\0' or file_name:sub(1,\
    \ 3) ~= 'a' .. 'z' or\n         string.find(file_name:sub(1, :), '.') ~= 1 then\n\
    \         return false\n      else\n         if string.find(file_name:sub(1, :),\
    \ 'txt') ~= nil then\n            return true\n         elseif string.find(file_name:sub(1,\
    \ :), 'exe') ~= nil then\n            return true\n         elseif string.find(file_name:sub(1,\
    \ :), 'dll') ~= nil then\n            return true\n         else\n           \
    \ return false\n         end\n      end\n   end\nend", "\t-- Replace spaces and\
    \ dots with underscores.\n\tfile_name = string.rep(file_name, \" \")\n\tfile_name\
    \ = string.rep(file_name, \".\")", "  local digits_check = 0\n  local dot_check\
    \ = 0\n  local firstchar_check = 0\n  local name_check = string.find(file_name,\
    \ \"%.\")\n  local substring_check = string.sub(file_name,name_check + 1)\n  local\
    \ firstchar_check = string.byte(substring_check)\n  local file_name = string.sub(file_name,0,name_check)\n\
    \  for i = 1, string.len(file_name) do\n    local char = string.byte(file_name,i)\n\
    \    digits_check = digits_check + char - 48\n    if char == 32 then\n      digit_check\
    \ = digits_check\n      digits_check = 0\n    elseif char == 46 then\n      dot_check\
    \ = dot_check + 1\n    elseif char == 65 then\n      firstchar_check = firstchar_check\
    \ + 1\n    end\n  end\n  -- if digits_check > 3 then\n  --   return \"No\"\n \
    \ -- end\n  if dot_check > 1 then\n    return \"No\"\n  end\n  if firstchar_check\
    \ > 1 then\n    return \"No\"\n  end\n  if string.byte(substring_check) >= 48\
    \ then\n    return \"No\"\n  end\n  -- if string.byte(substring_check) >= 65 then\n\
    \  --   return \"No\"\n  -- end\n  if string.byte(substring_check) >= 97 then\n\
    \    return \"No\"\n  end\n  if name_check ~= string.len(file_name) then\n   \
    \ return \"No\"\n  end\n  return \"Yes\"\nend", "    local result = true;\n  \
    \  local file_name = string.gsub(file_name, \" \", \"0\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"0\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"0\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"0\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"0\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\");\n    local file_name = string.gsub(file_name, \" \", \"0\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"0\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.gsub(file_name,\
    \ \" \", \"0\");\n    local file_name = string.gsub(file_name, \" \", \"\");\n\
    \    local file_name = string.gsub(file_name, \" \", \"\");\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\");\n    local file_name = string.", "  \
    \  return string.sub(file_name, 1, 3) == '0' and string.sub(file_name, 1, 1) ~=\
    \ 'a' and string.sub(file_name, 1, 1) ~= 'z' and string.sub(file_name, 1, 1) ~=\
    \ 'A' and string.sub(file_name, 2, string.find(file_name, '.', 2, false) - 1)\
    \ in {'txt', 'exe', 'dll'}\nend", "  local file_name = file_name\n  local num_digits\
    \ = 0\n  local dot_count = 0\n  local dot_position = 1\n  local file_position\
    \ = 1", "  -- Initialize flag\n  local valid = false", "    -- Replace the following\
    \ line with the desired conditions to check whether a file name is valid or not\n\
    \    return string.find(file_name, \"^0*[^0-9]$\") ~= nil and string.find(file_name,\
    \ \"^.*[.][^.].*$\") ~= nil\nend", "\t-- Check if name is not empty\n\tif file_name\
    \ == nil or file_name == \"\" then\n\t\treturn \"No\"\n\tend\n\t-- Check if it\
    \ contains more than 3 digits\n\tif file_name:match(\"^(0?[1-9]|1[012])+$\") ==\
    \ nil then\n\t\treturn \"No\"\n\tend\n\t-- Check if it contains dot\n\tif file_name:match(\"\
    %.\") == nil then\n\t\treturn \"No\"\n\tend\n\t-- Check if it starts with a letter\
    \ from latin alphabet\n\tif file_name:sub(1, 1) ~= string.byte(\"a\") ~= string.byte(\"\
    z\") ~= string.byte(\"A\") ~= string.byte(\"Z\") then\n\t\treturn \"No\"\n\tend\n\
    \t-- Check if it contains valid file extension\n\tif string.find(file_name, \"\
    %.txt\") ~= nil or\n\t\tstring.find(file_name, \"%.exe\") ~= nil or\n\t\tstring.find(file_name,\
    \ \"%.dll\") ~= nil then\n\t\treturn \"Yes\"\n\tend\n\treturn \"No\"\nend", " \
    \   -- The name should only have these 4 characters\n    local file_name = string.lower(file_name)\n\
    \    local file_name = string.gsub(file_name, \"\", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \"-\", \"_\")\n    local file_name = string.gsub(file_name, \"_\", \"_\")\n\
    \    local file_name = string.gsub(file_name, \"\\\\\", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \"/\", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \":\", \"_\")\n    local file_name = string.gsub(file_name, \";\", \"_\")\n\
    \    local file_name = string.gsub(file_name, \":\", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \"&\", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \"+\", \"_\")\n    local file_name = string.gsub(file_name, \"%\", \"_\")\n\
    \    local file_name = string.gsub(file_name, \"<\", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \">\", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \"#\", \"_\")\n    local file_name = string.gsub(file_name, \",\", \"_\")\n\
    \    local file_name = string.gsub(file_name, \".\", \"_\")\n    local file_name\
    \ = string.gsub(file_name, \"?\", \"_\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"_\")\n    local file_name = string.gsub(file_name, \"'\", '')\n   \
    \ local file_name = string.gsub(file_name, \"%\", '')\n    local file_name = string.gsub(file_name,\
    \ \"/\", '')\n    local file_name = string.gsub(file_name, \" \", '')\n    local\
    \ file_name = string.gsub(file_name, \",\", '')\n    local file_name = string.gsub(file_name,\
    \ \"&\", '')\n    local file_name = string.gsub(file_name, \"+\", '')\n    local\
    \ file_name = string.gsub(file_name, \";\", '')\n    local file_name = string.gsub(file_name,\
    \ \"<\", '')\n    local file_name = string.gsub(file_name, \">\", '')\n    local\
    \ file_name = string.gsub(file_name, \"#\", '')\n    local file_name = string.gsub(file_name,\
    \ \":\", '')\n    local file_name = string.gsub(file_name, \":\", '')\n    local\
    \ file_name = string.gsub(file_name, \";\", '')\n    local file_name = string.gsub(file_name,\
    \ \":\", '')\n    local file_name = string.gsub(file_name, \"=\", '')\n    local\
    \ file_name = string.gsub(file_name, \"%\", '')\n    local ", "    local function\
    \ is_valid_name(input_file_name)\n        -- Check that the input file name is\
    \ valid.\n        -- This return 'No' if input_file_name is invalid.\n       \
    \ -- This return 'Yes' if input_file_name is valid.\n        if input_file_name:sub(1,\
    \ 3) ~= '0' and input_file_name:sub(1, 3) ~= '9' then\n            return 'No'\n\
    \        end\n        -- Check that there are no more than three digits in the\
    \ file name.\n        if input_file_name:sub(1, 2) ~= '..' then\n            return\
    \ 'No'\n        end\n        -- Check that there are exactly one dot in the file\
    \ name.\n        if input_file_name:sub(1, 1) ~= '.' then\n            return\
    \ 'No'\n        end\n        -- Check that there is at least one letter from the\
    \ latin alphabet in the file \n        -- name.\n        for i = 1, input_file_name:sub(1,\
    \ 1) do\n            if input_file_name:sub(1, i + 1) ~= 'a' and input_file_name:sub(1,\
    \ i + 1) ~= 'A' then\n                return 'No'\n            end\n        end\n\
    \        return 'Yes'\n    end\n    \n    if is_valid_name(file_name) == 'No'\
    \ then\n        return 'No'\n    end\n    \n    if string.match(file_name, '%.%')\
    \ == nil then\n        return 'No'\n    end\n    \n    for i = 1, string.len(file_name)\
    \ do\n        if string.sub(file_name:sub(1, i), i, i + 1) ~= 'a' and string.sub(file_name:sub(1,\
    \ i), i, i + 1) ~= 'A' then\n            return 'No'\n        end\n    end\n \
    \   \n    local function extension_check(input_file_name)\n        -- Check that\
    \ the file extension is valid.\n        -- This return 'No' if input_file_name\
    \ is invalid.\n        -- This return 'Yes' if input_file_name is valid.\n   \
    \     local ext = string.lower(input_file_name:sub(string.len(input_file_name)\
    \ - 1, string.len(input_file_name)))\n        \n        -- Check that the extension\
    \ is valid.\n        if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n\
    \            return 'No'\n        end\n        \n        -- Check that there are\
    \ no more than three digits in the file name.\n        if input_file_name:sub(1,\
    \ 2) ~= '..' then\n            return 'No'\n        end\n        -- Check that\
    \ there is at least one dot in the file name.\n        if input_file_name:sub(1,\
    \ 1) ~= '.' then\n            return 'No'\n        end\n        -- Check that\
    \ there is at least one letter from the latin alphabet in the file \n        --\
    \ name.\n        for i = 1, input_file_name:sub(1, 1) do\n            if input_file_name:sub(1,\
    \ i + 1) ~= 'a' and input_file_name:sub(1, i + 1) ~= 'A' then\n              \
    \  return 'No'\n            end\n        end\n        return '", "    -- Check\
    \ for valid name\n    if string.find(file_name, \".\") ~= nil then\n        --\
    \ Extract extension\n        local ext = string.sub(file_name, string.find(file_name,\
    \ \".\") + 1)", "\t-- Check file_name\n\tif (string.len(file_name) ~= 5) and (string.len(file_name)\
    \ ~= 4) and (string.len(file_name) ~= 3) then\n\t\treturn 'No'\n\telse\n\t\t--\
    \ Check dot position\n\t\t-- 1. Check dot position by removing '.'\n\t\t-- 2.\
    \ Check dot position by removing substring before '.'\n\t\t-- 3. Check dot position\
    \ by removing substring after '.'\n\t\t-- 4. Check dot position by removing substring\
    \ before '.'\n\t\t-- 5. Check dot position by removing substring before '.'\n\t\
    \t-- Example: file_name = 'myfile.txt'\n\t\t-- 1. Remove '.', result = myfile\n\
    \t\t-- 2. Remove 'myfile', result = file\n\t\t-- 3. Remove 'file', result = txt\n\
    \t\t-- 4. Remove 'txt', result = \n\t\t-- 5. Remove 'txt', result = \n\t\t-- Examples\n\
    \t\t-- 1. check dot position by removing '.', result ='myfile'\n\t\t-- 2. check\
    \ dot position by removing substring before '.', result ='file'\n\t\t-- 3. check\
    \ dot position by removing substring after '.', result ='txt'\n\t\t-- 4. check\
    \ dot position by removing substring before '.', result ='txt'\n\t\t-- 5. check\
    \ dot position by removing substring before '.', result ='myfile'\n\t\t-- Examples\n\
    \t\t-- 1. check dot position by removing '.', result ='myfile'\n\t\t-- 2. check\
    \ dot position by removing substring before '.', result ='file'\n\t\t-- 3. check\
    \ dot position by removing substring after '.', result ='txt'\n\t\t-- 4. check\
    \ dot position by removing substring before '.', result ='txt'\n\t\t-- 5. check\
    \ dot position by removing substring before '.', result ='myfile'\n\t\tif (string.sub(file_name,1,1)\
    \ ~= '.') then\n\t\t\treturn 'No'\n\t\telseif (string.find(file_name,'.') ~= 0)\
    \ then\n\t\t\t-- check dot position by removing substring before '.'\n\t\t\tif\
    \ string.find(file_name,'.') == 0 then\n\t\t\t\treturn 'No'\n\t\t\telse\n\t\t\t\
    \t-- check dot position by removing substring before '.'\n\t\t\t\tif string.find(file_name,'.',0,1)\
    \ == 0 then\n\t\t\t\t\treturn 'No'\n\t\t\t\telse\n\t\t\t\t\t-- check dot position\
    \ by removing substring before '.'\n\t\t\t\t\tif string.find(file_name,'.',0,2)\
    \ == 0 then\n\t\t\t\t\t\treturn 'No'\n\t\t\t\t\telse\n\t\t\t\t\t\t-- check dot\
    \ position by removing substring before '.'\n\t\t\t\t\t\tif string.find(file_name,'.',0,3)\
    \ == 0 then\n\t\t\t\t\t\t\treturn ", "\t-- Check that the file name contains exactly\
    \ three digits\n\tif string.find(file_name, \"%0%0%0\") ~= nil then\n\t\treturn\
    \ \"No\"\n\tend", "   --TODO: Implement file_name_check\nend", "  -- Get rid of\
    \ the extension, if any.\n  -- TODO: Look into using a string.find function.\n\
    \  if file_name ~= nil then\n    file_name = string.sub(file_name,1,string.len(file_name))\n\
    \  else\n    file_name = nil\n  end\n  -- Compare the return of the string.sub\
    \ function with the expected return value.\n  -- If it doesn't match, return 'No'.\n\
    \  if file_name ~= nil then\n    if file_name ~= '.' or string.find(file_name,'.')\
    \ == nil then\n      return 'No'\n    else\n      file_name = string.sub(file_name,1,string.find(file_name,'.'))\n\
    \    end\n  else\n    return 'No'\n  end\n  if file_name ~= nil then\n    if string.find(file_name,'.')\
    \ ~= nil then\n      if string.find(file_name,'.') > string.find(file_name,'.')\
    \ then\n        return 'No'\n      end\n      -- Make sure the first character\
    \ of name is a letter.\n      if string.sub(file_name,string.find(file_name,'.'),1)\
    \ ~= string.sub(file_name,string.find(file_name,'.'),1) then\n        return 'No'\n\
    \      end\n      -- Make sure the substring before the first dot is not a number.\n\
    \      if string.sub(file_name,string.find(file_name,'.'),1) ~= string.sub(file_name,string.find(file_name,'.'),1)\
    \ then\n        return 'No'\n      end\n      -- Make sure the substring after\
    \ the dot is one of the expected extensions.\n      if string.find(file_name,'.')\
    \ == nil then\n        return 'No'\n      end\n      if string.find(file_name,'.')\
    \ > string.find(file_name,'.') then\n        return 'No'\n      end\n      if\
    \ string.sub(file_name,string.find(file_name,'.'),string.find(file_name,'.'))\
    \ ~= 'exe' or string.sub(file_name,string.find(file_name,'.')+1,string.find(file_name,'.'))\
    \ ~= 'exe' or string.sub(file_name,string.find(file_name,'.')+1,string.find(file_name,'.'))\
    \ ~= 'dll' or string.sub(file_name,string.find(file_name,'.')+1,string.find(file_name,'.'))\
    \ ~= 'dll' then\n        return 'No'\n      end\n    end\n  end\n  return 'Yes'\n\
    end", "    -- Initialize variables\n    local valid = false\n    -- Check if name\
    \ has more than three digits in the name\n    if string.find(file_name, \"%[0-9]\"\
    ) then\n        valid = true\n    end\n    -- Check if name contains exactly one\
    \ dot '.'\n    if string.find(file_name, \"%.\") then\n        -- Check if name\
    \ starts with latin letter from latin alphabet\n        if string.find(file_name,\
    \ \"%a\") then\n            valid = true\n        end\n        if string.find(file_name,\
    \ \"%z\") then\n            valid = true\n        end\n        if string.find(file_name,\
    \ \"%A\") then\n            valid = true\n        end\n    end\n    -- Check if\
    \ name contains these strings\n    local string_to_include = {'txt', 'exe', 'dll'}\n\
    \    if string.find(file_name, string.format(string_to_include)) then\n      \
    \  valid = true\n    end\n    -- If the file's name is valid, return 'Yes'\n \
    \   if valid then\n        io.write(\"File name: \" .. file_name)\n        io.write('\
    \ -- File's name is valid\\n')\n        return 'Yes'\n    else\n        io.write(\"\
    File name: \" .. file_name)\n        io.write(' -- File's name is invalid\\n')\n\
    \        return 'No'\n    end\nend", "  -- Check that the file's name contains\
    \ three digits between '0' and '9'.\n  -- If not, return 'No'.\n  if not string.sub(file_name,\
    \ 1, 3) == '0' and not string.sub(file_name, 1, 3) == '1' and not string.sub(file_name,\
    \ 1, 3) == '2' then\n    return 'No'\n  end\n  \n  -- Check that the file's name\
    \ contains one dot ('.').\n  -- If not, return 'No'.\n  if string.find(file_name,\
    \ '.') == nil then\n    return 'No'\n  end\n  \n  -- Check the file's name.\n\
    \  local file_name = string.sub(file_name, 1, string.find(file_name, '.'))\n \
    \ \n  -- Check that substring before dot does not contain empty string.\n  if\
    \ string.sub(file_name, '^[^'.]') == '' then\n    return 'No'\n  end\n  \n  --\
    \ Check that substring before dot starts with letter from the latin alphabet.\n\
    \  if string.sub(file_name, '^[^a-zA-Z]') ~= 'a' then\n    return 'No'\n  end\n\
    \  \n  -- Check that substring after dot contains 'txt', 'exe', 'dll' substring.\n\
    \  if string.find(file_name, {'txt', 'exe', 'dll'}) == nil then\n    return 'No'\n\
    \  end\n  \n  -- If no error was detected, return 'Yes'.\n  return 'Yes'\nend",
  "\tif file_name:match('^[0-9]+$') then\n\t\treturn 'Yes'\n\telseif file_name ==\
    \ nil or file_name:match('^(%.-)$') then\n\t\treturn 'No'\n\telse\n\t\treturn\
    \ 'No'\n\tend\nend", "   -- First, check whether the file's name is valid.\n \
    \  if string.len(file_name) > 3 then\n      -- The length of the file's name is\
    \ greater than three characters.\n      return false\n   end", "    local chars\
    \ = {\n        ['0']\n        ['1']\n        ['2']\n        ['3']\n        ['4']\n\
    \        ['5']\n        ['6']\n        ['7']\n        ['8']\n        ['9']\n \
    \       ['.']\n        [' ']\n        ['a']\n        ['b']\n        ['c']\n  \
    \      ['d']\n        ['e']\n        ['f']\n        ['g']\n        ['h']\n   \
    \     ['i']\n        ['j']\n        ['k']\n        ['l']\n        ['m']\n    \
    \    ['n']\n        ['o']\n        ['p']\n        ['q']\n        ['r']\n     \
    \   ['s']\n        ['t']\n        ['u']\n        ['v']\n        ['w']\n      \
    \  ['x']\n        ['y']\n        ['z']\n        ['A']\n        ['B']\n    }",
  "    local result = 'No'\n    if string.len(file_name) <= 3 then\n        return\
    \ 'No'\n    end", "    return string.match(file_name, \"^%u{3}[a-zA-Z][^.]+[.]%u{0,1}[a-zA-Z0-9]+$\"\
    ) ~= nil\nend", "  -- A file's name is considered to be valid if and only if all\
    \ the following conditions \n  -- are met:\n  -- - There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n  if string.len(file_name) > 3 then\n\
    \    return false\n  elseif string.find(file_name, '.') ~= nil then\n    return\
    \ false\n  elseif string.sub(file_name,1,1) ~= 'a' ~= 'z' ~= 'A' then\n    return\
    \ false\n  elseif string.sub(file_name,string.len(file_name)-3) ~= '.exe' ~= '.dll'\
    \ then\n    return false\n  end\n  return true\nend", "  return string.match(file_name,\
    \ \"^[0-9]{3}\\.?[a-z][a-z.]*$\")\nend", "\t-- Check that the file name string\
    \ contains no more than three digits.\n\tif (not string.find(file_name, \"[0-9]{3,}\"\
    )) then\n\t\treturn nil, 'File name must contain no more than 3 digits'\n\tend\n\
    \t-- Check that the file contains only one dot ('.').\n\tif (string.find(file_name,\
    \ \".\") == nil) then\n\t\treturn nil, 'File name must contain exactly one dot'\n\
    \tend\n\t-- Check that there are no empty strings in the file name.\n\tlocal index_1st_empty_char\
    \ = string.find(file_name, \"^.{1}\")\n\tlocal index_last_empty_char = string.find(file_name,\
    \ \".{1}$\")\n\tif (index_1st_empty_char == nil) or (index_last_empty_char ==\
    \ nil) then\n\t\treturn nil, 'File name must not contain empty strings'\n\tend\n\
    \t-- Check that there is a letter after the dot.\n\tif (string.find(file_name,\
    \ \".\") > string.find(file_name, \"^.{1}\")) then\n\t\treturn nil, 'File name\
    \ must not start with empty strings'\n\tend\n\t-- Check that there is at least\
    \ one letter from the latin alphabet.\n\tlocal index_1st_alpha_char = string.find(file_name,\
    \ \"^[a-z]{1}\")\n\tif (index_1st_alpha_char == nil) then\n\t\treturn nil, 'File\
    \ name must contain at least one letter'\n\tend\n\t-- Check that there is at least\
    \ one letter from the latin alphabet or underscore.\n\tlocal index_1st_alpha_or_underscore\
    \ = string.find(file_name, \"^[a-z][_][a-z]{1}\")\n\tif (index_1st_alpha_or_underscore\
    \ == nil) then\n\t\treturn nil, 'File name must contain at least one letter'\n\
    \tend\n\t-- Check that there is at least one letter from the latin alphabet or\
    \ underscore.\n\tlocal index_1st_alpha_or_underscore = string.find(file_name,\
    \ \"^[a-z][_][a-z]{1}\")\n\tif (index_1st_alpha_or_underscore == nil) then\n\t\
    \treturn nil, 'File name must contain at least one letter'\n\tend\n\t-- Check\
    \ that the substring before the dot does not contain any dot.\n\tlocal index_1st_dot_char\
    \ = string.find(file_name, \"^.[^.]\")\n\tif (index_1st_dot_char == nil) then\n\
    \t\treturn nil, 'File name must contain at least one letter'\n\tend\n\t-- Check\
    \ that the substring after the dot is one of these strings: ['txt', 'exe', 'dll'].\n\
    \tlocal index_1st_text_exe_dll_char = string.find(file_name, \"[^.]{0,1}[txt|exe|dll]\"\
    )\n\tif (index_1st_text_exe_dll_char == nil) then\n\t\treturn nil, 'File name\
    \ must contain one of the strings: txt, exe, dll '\n\t", "    local function check_for_invalid_chars(file_name)\n\
    \        -- remove all whitespaces from the string\n        -- return string.gsub(file_name,\
    \ \" \", \"\")\n        return string.gsub(file_name, \" \", \"\")\n    end",
  "  -- TODO: Write your solution here\nend", "\tlocal digit_count = 0\n\tlocal dot_count\
    \ = 0\n\tlocal substr_start = 0\n\tlocal substr_end = 0\n\tlocal valid_count =\
    \ 0\n\t\n\tfor i = 1, #file_name do\n\t\tlocal c = string.byte(file_name, i)\n\
    \t\t\n\t\tif digit_count < 3 then\n\t\t\tif c ~= string.byte('0') then\n\t\t\t\
    \treturn 'No'\n\t\t\telse\n\t\t\t\tdigit_count = digit_count + 1\n\t\t\tend\n\t\
    \tend\n\t\t\n\t\tif c ~= string.byte('.') then\n\t\t\treturn 'No'\n\t\telse\n\t\
    \t\tdot_count = dot_count + 1\n\t\tend\n\t\t\n\t\tif substr_start == 0 then\n\t\
    \t\tif string.byte('a') == c then\n\t\t\t\tsubstr_start = i\n\t\t\telseif string.byte('A')\
    \ == c then\n\t\t\t\tsubstr_start = i\n\t\t\telse\n\t\t\t\treturn 'No'\n\t\t\t\
    end\n\t\tend\n\t\t\n\t\tif substr_end == 0 then\n\t\t\tif string.byte('a') ==\
    \ c then\n\t\t\t\tsubstr_end = i\n\t\t\telseif string.byte('A') == c then\n\t\t\
    \t\tsubstr_end = i\n\t\t\telse\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\tend\n\t\t\n\
    \t\tif string.byte('a') == c then\n\t\t\tsubstr_end = i\n\t\telseif string.byte('A')\
    \ == c then\n\t\t\tsubstr_end = i\n\t\telse\n\t\t\treturn 'No'\n\t\tend\n\tend\n\
    \t\n\tif digit_count ~= 3 or dot_count ~= 1 or substr_start == 0 or substr_end\
    \ == 0 then\n\t\treturn 'No'\n\telse\n\t\tfor i = 1, #file_name do\n\t\t\tlocal\
    \ c = string.byte(file_name, i)\n\t\t\t\n\t\t\tif c ~= string.byte('0') then\n\
    \t\t\t\treturn 'No'\n\t\t\telse\n\t\t\t\tdigit_count = digit_count - 1\n\t\t\t\
    end\n\t\tend\n\t\t\n\t\treturn 'Yes'\n\tend\nend\n</cell>\n<text>\n5 - Write a\
    \ function that takes a file name as an argument, checks if the file is valid,\
    \ and\n then returns the file's extension. If the file is invalid, return the\
    \ string 'INVALID'", "    if not file_name then\n        return nil\n    end\n\
    \    -- Convert file to string\n    local file_name = tostring(file_name)\n  \
    \  -- Check if file name is valid using regex\n    return string.match(regexp('^[0-9]{1,3}\\\
    .txt$|^[0-9]{1,3}\\.exe$|^[0-9]{1,3}\\.dll$'), '' .. file_name)\nend", "    --\
    \ Check if the file's name contains more than three digits\n    -- or if it contains\
    \ a dot\n    if string.find(file_name, \"%1\") then\n        return 'No'\n   \
    \ end\n    local s = string.sub(file_name, 1, 1)\n    -- Check if the file's name\
    \ contains exactly one dot\n    if s ~= \".\" then\n        return 'No'\n    end\n\
    \    -- Check if the file's name starts with a latin character\n    local alphabet\
    \ = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n      \
    \                'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B',\n                      'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q',\n                      'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'};\n    if string.find(file_name, \".%1\") and string.sub(file_name,\
    \ 1, 1) ~= alphabet[1] then\n        return 'No'\n    end\n    -- Check if the\
    \ file's name contains one of the required extensions\n    local extensions =\
    \ {'txt', 'exe', 'dll'};\n    for _, ext in ipairs(extensions) do\n        if\
    \ string.find(file_name, ext) then\n            return 'Yes'\n        end\n  \
    \  end\nend", "   if string.find(file_name, \"..\") then\n      error(\"file name\
    \ should not contain ..\")\n   end\n   if #file_name < 3 then\n      error(\"\
    file name should contain at least 3 digits\")\n   end\n   if string.find(file_name,\
    \ \".\") then\n      local idx = string.find(file_name, \".\")\n      if not string.find(file_name,\
    \ \".\") then\n         error(\"file name should contain a dot\")\n      end\n\
    \      if not file_name[idx:idx+1] then\n         error(\"file name should start\
    \ with a letter\")\n      end\n   end\n   if string.find(file_name, \"[^a-zA-Z]\"\
    ) then\n      error(\"file name should contain only letters\")\n   end\n   if\
    \ string.find(file_name, \"[^a-zA-Z0-9]\") then\n      error(\"file name should\
    \ contain only letters and digits\")\n   end\n   return true\nend", "    -- Write\
    \ your implementation here\n    if string.find(file_name, \"%.\") ~= nil then\n\
    \        return false\n    end\n    local index = string.find(file_name, \"%.\"\
    , 1)\n    if index == nil then\n        return false\n    end\n    return string.find(file_name,\
    \ \"%.\", index+1) ~= nil\nend", "  -- Get the position of the last occurrence\
    \ of '.'\n  local last_dot_position = file_name:find('%.', -2, 1)", "    -- Declare\
    \ local variables to store the name's substrings, \n    -- their lengths, and\
    \ their first character positions.\n    local file_name = file_name\n    local\
    \ file_name = string.sub(file_name,1,3)\n    local file_name = string.gsub(file_name,\"\
    ^[A-Za-z]\",\"\")\n    local file_name = string.gsub(file_name,\"\\.\",\"\")\n\
    \    local file_name = string.gsub(file_name,\"^[^.]+\", \"\")\n    local file_name\
    \ = string.gsub(file_name,\"[^a-zA-Z0-9\\.]\", \"\")", "    local valid_filename_regex\
    \ = require('lua-rex').new('^(0[1-9]|[1-9][0-9]|[1-9]0)\\.([a-hA-H][0-9]|[A-H])$')\n\
    \    if not valid_filename_regex.match(file_name) then return nil end", "    local\
    \ valid_strings = {'txt', 'exe', 'dll'}\n    local i, j = string.find(file_name,\
    \ '.'), #file_name\n    if j == nil then\n        return 'No'\n    end\n    local\
    \ last_char = file_name:sub(i - 1, i)\n    local first_char = file_name:sub(1,\
    \ i)\n    if last_char == '0' then\n        return 'No'\n    end\n    if string.find(first_char,\
    \ 'a') == nil or\n       string.find(first_char, 'z') == nil or\n       string.find(first_char,\
    \ 'A') == nil or\n       string.find(first_char, 'Z') == nil then\n        return\
    \ 'No'\n    end\n    for _, string in ipairs(valid_strings) do\n        if string.find(file_name,\
    \ string) ~= nil then\n            return 'Yes'\n        end\n    end\n    return\
    \ 'No'\nend", "   local num_chars = string.len(file_name)\n   assert(num_chars\
    \ > 3, 'File name too short: '..file_name)\n   assert(string.find(file_name, '.')\
    \ ~= nil, 'File name should contain exactly one dot: '..file_name)\n   assert(string.sub(file_name,\
    \ 1, 1) ~= '', 'File name should be the first character of a valid name: ' ..\
    \ file_name)\n   assert(string.sub(file_name, 1, 1) ~= 'A', 'File name should\
    \ start with a latin letter: ' .. file_name)\n   assert(string.sub(file_name,\
    \ num_chars-2, num_chars) ~= 'txt', 'File name should end with one of these extensions:\
    \ ' .. file_name)\nend", "  -- Write your code below!\n  return 'No'\nend", " \
    \ local valid = false\n  local i = string.find(file_name, \".\")\n  local j =\
    \ string.find(file_name, \".\", i+1, true)\n  if ((j - i) == 1 and file_name:sub(1,\
    \ 1) ~= '-' and \n    string.find(file_name, \"^[a-z]\", 1) ~= nil and\n    string.find(file_name,\
    \ \"^[A-Z]\", 1) ~= nil and\n    string.find(file_name, \"[^0-9]\", 1, true) ~=\
    \ nil and\n    file_name:sub(1, 1) ~= string.lower(file_name:sub(1, 1))) then\n\
    \    valid = true\n  end\n  return valid\nend", "  -- Check if file_name contains\
    \ more than three digits, and it starts with a letter\n  if file_name ~= '' then\
    \ \n    -- check if it has exactly one dot ('.') and starts with a letter ('a')\n\
    \    -- check if it has exactly one dot ('.') and ends with a letter ('z')\n \
    \   -- check if it has exactly one dot ('.') and has a length not greater than\
    \ 3 \n      and string.find(file_name, '.') == 1 and string.sub(file_name,1,1)\
    \ ~= '' and string.sub(file_name,string.len(file_name)-1,string.len(file_name))\
    \ in ['txt', 'exe', 'dll'] then\n        return 'Yes'\n      else\n        return\
    \ 'No'\n      end\n  else\n    return 'No'\n  end\nend", "  -- Check for valid\
    \ chars\n  if string.find(file_name, \"..\") then\n    return false\n  elseif\
    \ string.find(file_name, \".\") then\n    -- Check if there is only one dot\n\
    \    if string.find(file_name, \".\") == nil then\n      return false\n    end\n\
    \    -- Check that there is a non-empty string before the dot\n    if string.sub(file_name,1,string.find(file_name,\
    \ \".\")-1) ~= \"\" then\n      return false\n    end\n    -- Check that there\
    \ is a valid letter in front of the dot\n    if string.find(file_name, \".\")\
    \ < 1 then\n      return false\n    end\n    -- Check that the name contains the\
    \ correct extension\n    if string.find(file_name, \".\") == nil then\n      return\
    \ false\n    end\n    return true\n  else\n    return true\n  end\nend", "   \
    \ local valid = 'No'\n    local file_name = file_name:gsub(\"[\\.][^.]+\", \"\"\
    )\n    if file_name ~= nil and file_name:match '^[a-zA-Z][0-9a-zA-Z]+$' then\n\
    \        file_name = file_name:gsub(\"^([a-zA-Z][0-9a-zA-Z]+)%.*$\", \"%1\")\n\
    \        if file_name == \"txt\" or file_name == \"exe\" or file_name == \"dll\"\
    \ then\n            valid = 'Yes'\n        end\n    end\n    return valid\nend",
  "   local result = false\n   local first_char, last_char = string.sub(file_name,\
    \ 1, 1), string.sub(file_name, -1)\n   if first_char == '' then\n      return\
    \ false\n   elseif first_char < 'a' or first_char > 'z' then\n      return false\n\
    \   elseif last_char == '' then\n      return true\n   elseif last_char < 'a'\
    \ or last_char > 'z' then\n      return false\n   elseif #file_name > 2 then\n\
    \      return false\n   elseif string.sub(file_name,1,1) ~= '0' then\n      return\
    \ false\n   elseif #file_name ~= 1 then\n      return false\n   elseif string.sub(file_name,1,2)\
    \ == '..' then\n      return false\n   elseif string.sub(file_name,1,3) == '.txt'\
    \ then\n      return true\n   elseif string.sub(file_name,1,3) == '.exe' then\n\
    \      return true\n   elseif string.sub(file_name,1,3) == '.dll' then\n     \
    \ return true\n   else\n      return false\n   end\nend", "   -- TODO: Insert\
    \ your code here\nend", "    if string.find(file_name, \"..\") then\n        return\
    \ false\n    else\n        local name_len = #file_name\n        if name_len <\
    \ 3 then\n            return false\n        else\n            if string.sub(file_name,\
    \ 1, name_len-1) ~= '0' then\n                return false\n            else\n\
    \                if string.find(file_name, \".\") then\n                    if\
    \ string.find(file_name, \".\") == 1 then\n                        local file_extension\
    \ = string.sub(file_name,name_len-2)\n                        if file_extension\
    \ ~= 'txt' then\n                            if file_extension ~= 'exe' then\n\
    \                                if file_extension ~= 'dll' then\n           \
    \                         return false\n                                end\n\
    \                            end\n                        end\n              \
    \      else\n                        return false\n                    end\n \
    \               else\n                    if string.find(file_name, \".\") ==\
    \ 1 then\n                        local file_extension = string.sub(file_name,name_len-2)\n\
    \                        if file_extension ~= 'txt' then\n                   \
    \         if file_extension ~= 'exe' then\n                                if\
    \ file_extension ~= 'dll' then\n                                    return false\n\
    \                                end\n                            end\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\n    return true\nend", "    -- Checking the validity\
    \ of the file name\n    if #file_name >= 3 then\n        if file_name ~= '0' and\
    \ file_name ~= '9' and file_name ~= '.' and \n            not file_name:sub(1,\
    \ 1) ~= '\\\\' and not file_name:sub(1, 1) ~= '\\\\' then\n            return\
    \ 'No'\n        end\n        if file_name:sub(1, 1) ~= letter and file_name:sub(1,\
    \ 1) ~= letter then\n            return 'No'\n        end\n        \n        --\
    \ Checking the validity of the substring before the dot\n        local dot_index\
    \ = file_name:find('.', 1, 1)\n        if dot_index == nil then\n            return\
    \ 'No'\n        end\n        if file_name:sub(1, dot_index - 1) ~= '.' or file_name:sub(1,\
    \ dot_index - 1) ~= '\\\\' then\n            return 'No'\n        end\n      \
    \  \n        -- Checking the validity of the substring after the dot\n       \
    \ local file_type = file_name:sub(1, dot_index)\n        if file_type ~= 'txt'\
    \ and file_type ~= 'exe' and file_type ~= 'dll' then\n            return 'No'\n\
    \        end\n    end\n    return 'Yes'\nend", "\t-- Initialize the check\n\t\
    local valid = false\n\t\n\t-- Check file's name length\n\tif (string.len(file_name)\
    \ ~= 9) then\n\t\treturn false\n\tend", "   -- return 'No' if the file's name\
    \ is not valid.\n   return (tostring(file_name) ~= nil) and ((string.find(string.sub(file_name,1,string.find(file_name,'.')-1),'0123456789')\
    \ and string.find(string.sub(file_name,string.find(file_name,'.')-1,string.len(file_name)),{'txt','exe','dll'})>0)\
    \ and (string.len(file_name)>1)) and (string.find(file_name,'.')==1) and (string.find(file_name,'..')==-1)\n\
    end", "  -- Check if file name contains only numbers and dots.\n  if (string.find(file_name,\
    \ '%[^0-9.]') ~= nil) then\n    return false\n  else\n    -- Check if name contains\
    \ only one dot.\n    if (string.find(file_name, '%[^.]') ~= nil) then\n      return\
    \ false\n    else\n      -- Check if file name starts with letter.\n      if ((string.find(file_name,\
    \ '%[a-z]') ~= nil) then\n        return false\n      else\n        return true\n\
    \      end\n    end\n  end\nend", "    return #file_name == 4 and\n          \
    \ string.sub(file_name,1,1) == '0' and\n           string.sub(file_name,2,2) ~=\
    \ '0' and\n           string.sub(file_name,3,2) ~= '0' and\n           string.sub(file_name,1,1)\
    \ == 'a' and\n           string.sub(file_name,1,1) == 'A' and\n           string.sub(file_name,2,2)\
    \ == 'b' and\n           string.sub(file_name,2,2) == 'B' and\n           string.find(file_name,'.')\
    \ ~= nil and\n           string.find(file_name,'.',1,1) ~= nil and\n         \
    \  string.find(file_name,'.',1,2) ~= nil and\n           string.find(file_name,'.',1,3)\
    \ ~= nil and\n           string.find(file_name,'.',1,4) ~= nil and\n         \
    \  string.find(file_name,'.',1,5) ~= nil and\n           string.find(file_name,'.',1,6)\
    \ ~= nil and\n           string.find(file_name,'.',1,7) ~= nil and\n         \
    \  string.find(file_name,'.',1,8) ~= nil and\n           string.find(file_name,'.',1,9)\
    \ ~= nil and\n           string.find(file_name,'.',1,10) == nil and\n        \
    \   string.find(file_name,'.',1,11) == nil and\n           string.find(file_name,'.',1,12)\
    \ == nil and\n           string.find(file_name,'.',1,13) == nil and\n        \
    \   string.find(file_name,'.',1,14) == nil and\n           string.find(file_name,'.',1,15)\
    \ == nil and\n           string.find(file_name,'.',1,16) == nil and\n        \
    \   string.find(file_name,'.',1,17) == nil and\n           string.find(file_name,'.',1,18)\
    \ == nil and\n           string.find(file_name,'.',1,19) == nil and\n        \
    \   string.find(file_name,'.',1,20) == nil and\n           string.find(file_name,'.',1,21)\
    \ == nil and\n           string.find(file_name,'.',1,22) == nil and\n        \
    \   string.find(file_name,'.',1,23) == nil and\n           string.find(file_name,'.',1,24)\
    \ == nil and\n           string.find(file_name,'.',1,25) == nil and\n        \
    \   string.find(file_name,'.',1,26) == nil and\n           string.find(file_name,'.',1,27)\
    \ == nil and\n           string.find(file_name,'.',1,28) == nil and\n        \
    \   string.find(file_name,'.',", "   -- Return true if file_name contains only\
    \ one dot '.' and is non empty,\n   -- and starts with an letter and has one of\
    \ these extensions: \n   -- 'txt', 'exe', 'dll'\n   return file_name ~= nil and\
    \ file_name:len() == 3\n      and file_name:sub(1, 1) ~= '^' and\n         ('.txt'\
    \ == file_name or '.exe' == file_name or '.dll' == file_name)\nend", "    local\
    \ pattern = \"^[0-9]{3}$\"\n    local pattern_1 = \"^[^.]*$\"\n    local pattern_2\
    \ = \"^[a-z]$\"\n    local pattern_3 = \"^[a-z_]$\"\n    local pattern_4 = \"\
    ^[a-z0-9_\\.]$\"\n    \n    if string.match(file_name, pattern) then\n       \
    \ return true\n    elseif string.match(file_name, pattern_1) then\n        return\
    \ true\n    elseif string.match(file_name, pattern_2) then\n        return true\n\
    \    elseif string.match(file_name, pattern_3) then\n        return true\n   \
    \ elseif string.match(file_name, pattern_4) then\n        return true\n    else\n\
    \        return false\n    end\nend", "  -- The following conditions are tested.\n\
    \  -- The file's name is considered to be valid if and only if all the following\
    \ conditions are \n  -- met:\n  -- - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n  -- - The file's name contains exactly one dot\
    \ '.'\n  -- - The substring before the dot should not be empty, and it starts\
    \ with a letter from the \n  --  latin alphapet ('a'-'z' and 'A'-'Z').\n  -- -\
    \ The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \  -- Note: If this function returns 'Yes', then 'file_name' is considered to\
    \ be valid.\n  return not (string.find(file_name, \"..\") or\n\tstring.find(file_name,\
    \ \".\") or\n\tstring.find(file_name, \"\\\\\") or\n\tstring.find(file_name, \"\
    /\") or\n\tstring.find(file_name, \"[\") or\n\tstring.find(file_name, \"]\") or\n\
    \tstring.find(file_name, \"*\") or\n\tstring.find(file_name, \"<\") or\n\tstring.find(file_name,\
    \ \">\") or\n\tstring.find(file_name, \"'\") or\n\tstring.find(file_name, \"\\\
    \") or\n\tstring.find(file_name, \"|\") or\n\tstring.find(file_name, \"%\") or\n\
    \tstring.find(file_name, \"?\") or\n\tstring.find(file_name, \"{\") or\n\tstring.find(file_name,\
    \ \"}\") or\n\tstring.find(file_name, \";\") or\n\tstring.find(file_name, \"-\"\
    ) or\n\tstring.find(file_name, \":\") or\n\tstring.find(file_name, \"-\") or\n\
    \tstring.find(file_name, \",\") or\n\tstring.find(file_name, \".\") or\n\tstring.find(file_name,\
    \ \"+\") or\n\tstring.find(file_name, \",\") or\n\tstring.find(file_name, \";\"\
    ) or\n\tstring.find(file_name, \"=\") or\n\tstring.find(file_name, \":\") or\n\
    \tstring.find(file_name, \"/\") or\n\tstring.find(file_name, \"?\") or\n\tstring.find(file_name,\
    \ \"/\") or\n\tstring.find(file_name, \".\") or\n\tstring.find(file_name, \"'\"\
    ) or\n\tstring.find(file_name, \"[\")) and\n  (string.find(file_name, \"[\") or\n\
    \tstring.find(file_name, \"]\") or\n\tstring.find(file_name, \"*\") or\n\tstring.find(file_name,\
    \ \"<\") or\n\tstring.find(file_name, \">\") or\n\tstring.find(file_name, \"'\"\
    ) or\n\tstring.find(file_name, \"\\\") or\n\tstring.find(file_name, \"|\") or\n\
    \tstring.find(file_name, \"%\") or\n\tstring.find(file_name, \"?\") or\n\tstring.find(file_name,\
    \ \"{\") or", "    -- Check for 3 digits in the file name\n    for i = 1, 3 do\n\
    \        if string.format(file_name, '%0', i) ~= file_name then\n            return\
    \ 'No'\n        end\n    end\n    -- Check for exactly 1 dot '.' in the file name\n\
    \    if string.find(file_name, '.') ~= 1 then\n        return 'No'\n    end\n\
    \    -- Check for non-empty substring before the dot\n    if string.find(file_name,\
    \ '.', 1, true) == 1 then\n        -- Check for characters 'a'-'z' or 'A'-'Z'\
    \ in the substring before the dot\n        if string.find(string.sub(file_name,\
    \ '.', 1, 1), string.letters) ~= 1 then\n            return 'No'\n        end\n\
    \    end\n    -- Check for allowed extensions in the substring after the dot\n\
    \    local allowed = { 'txt', 'exe', 'dll' }\n    for _, ext in ipairs(allowed)\
    \ do\n        if string.find(string.sub(file_name, '.', string.find(file_name,\
    \ '.') + 1), ext) ~= 1 then\n            return 'No'\n        end\n    end\n \
    \   return 'Yes'\nend", "\t-- Initialize variables\n\tlocal valid = 0\n\t\n\t\
    -- Remove all non-digit characters from the file name\n\tfile_name = string.gsub(file_name,\
    \ \"[^0-9]\", \"\")\n\t\n\t-- Check file name\n\tif string.len(file_name) <= 3\
    \ then\n\t\tvalid = 0\n\telseif string.find(file_name, \".\") then\n\t\tvalid\
    \ = 0\n\telseif string.find(file_name, \"^[^A-Z]\") then\n\t\tvalid = 0\n\telseif\
    \ string.find(file_name, \"%[^A-Z]\") then\n\t\tvalid = 0\n\telseif string.find(file_name,\
    \ \"%%[^A-Z]\") then\n\t\tvalid = 0\n\telseif string.find(file_name, \"%%.[^A-Z]\"\
    ) then\n\t\tvalid = 0\n\telseif string.find(file_name, \"%%%.[^A-Z]\") then\n\t\
    \tvalid = 0\n\telseif string.find(file_name, \"%%.%%%.[^A-Z]\") then\n\t\tvalid\
    \ = 0\n\telseif string.find(file_name, \"%%%.%%%.%%%.[^A-Z]\") then\n\t\tvalid\
    \ = 0\n\telseif string.find(file_name, \"%%.%%%.%%%.%%%.[^A-Z]\") then\n\t\tvalid\
    \ = 0\n\telseif string.find(file_name, \"%%%.%%%.%%%.%%%.%%%.[^A-Z]\") then\n\t\
    \tvalid = 0\n\telseif string.find(file_name, \"%%.%%%.%%%.%%%.%%%.%%%.[^A-Z]\"\
    ) then\n\t\tvalid = 0\n\telseif string.find(file_name, \"%%%.%%%.%%%.%%%.%%%.%%%.%%%.[^A-Z]\"\
    ) then\n\t\tvalid = 0\n\telseif string.find(file_name, \"%%.%%%.%%%.%%%.%%%.%%%.%%%.%%%.[^A-Z]\"\
    ) then\n\t\tvalid = 0\n\telse\n\t\tvalid = 1\n\tend\n\t\n\treturn valid\nend\n\
    </cell>\n<text>\nThe next function will take a file's name. It will check if the\
    \ file's name has already been stored under the given key. \nIf the file's name\
    \ is not yet stored, it will be added to the hash table under the given key. \n\
    If the file's name is already stored under the given key, it will return 'Yes',\
    \ indicating that the file's name is not yet stored under the given key. Otherwise,\
    \ it will return the file's name already stored under the given key.", "\t-- Check\
    \ that file name is valid.\n\tif string.find(file_name, \"%0\") ~= nil then\n\t\
    \treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\tif string.find(file_name,\
    \ \".\") ~= nil then\n\t\tif string.find(file_name, \".\") ~= 1 then\n\t\t\treturn\
    \ nil\n\t\tend\n\t\tif string.find(file_name, \".\") ~= 2 then\n\t\t\treturn nil\n\
    \t\tend\n\t\tif string.find(file_name, \".\") ~= 3 then\n\t\t\treturn nil\n\t\t\
    end\n\telse\n\t\treturn nil\n\tend\n\t-- Check that file name is valid name.\n\
    \tif string.find(file_name, string.char(32)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(47))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(58)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(59))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(60)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(61))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(91)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(92))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(93)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(122))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(9)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(10))\
    \ ~= nil then\n\t\treturn nil\n\tend\n\t-- Check that file name is in valid format.\n\
    \tif string.find(file_name, string.char(13)) ~= nil then\n\t\treturn nil\n\tend\n\
    \t-- Check that file name is in valid format.\n\tif string.find(file_name, string.char(10))\
    \ ~= nil then\n", "    local file_name_length = string.len(file_name)\n    local\
    \ dot_index = string.find(file_name, \".\")\n    if (dot_index == nil) then\n\
    \        return false\n    end\n    local dot_before = string.sub(file_name, 1,\
    \ dot_index)\n    if (string.len(dot_before) == 0) then\n        return false\n\
    \    end\n    local dot_after = string.sub(file_name, (dot_index + 1))\n    if\
    \ (not (dot_after:match(\".[tT][xX][eE][mM]$\")) or \n        (dot_after:match(\"\
    .[tT][xX][eE][mM]$\")) == nil) then\n        return false\n    end\n    local\
    \ dot_before_letter = string.sub(dot_before, 1, 1)\n    local dot_after_letter\
    \ = string.sub(dot_after, 1)\n    if (not (dot_before_letter:match(\"^[azZ]\"\
    )) or \n        (dot_before_letter:match(\"^[azZ]\")) == nil) then\n        return\
    \ false\n    end\n    if (not (dot_after_letter:match(\"[tT][xX][eE][mM]$\"))\
    \ or \n        (dot_after_letter:match(\"[tT][xX][eE][mM]$\")) == nil) then\n\
    \        return false\n    end\n    return true\nend", "    return true\nend",
  "    local check=false;\n    if string.find(file_name, '..') then\n        print('\\\
    nThe file name contains invalid characters.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.find(file_name, '..') then \n        print('\\nThe file name is invalid.\\\
    n');\n        check=false;\n    elseif string.find(file_name, '..') then \n  \
    \      print('\\nThe file name is invalid.\\n');\n        check=false;\n    elseif\
    \ string.", "\t-- Check that the length of the file name is not more than 3 digits,\
    \ since\n\t-- that would be an invalid file name.\n\tif (file_name:len() < 3)\
    \ then\n\t\treturn 'No'\n\tend", "\treturn file_name == '' or\n\t\tfile_name:sub(1,\
    \ 3) == '0'..'9' or\n\t\tfile_name:sub(1, 1) == 'a' and\n\t\tfile_name:sub(1,\
    \ 1) == 'b' and\n\t\tfile_name:sub(1, 1) == 'c' and\n\t\tfile_name:sub(1, 1) ==\
    \ 'd' and\n\t\tfile_name:sub(1, 1) == 'e' and\n\t\tfile_name:sub(1, 1) == 'f'\
    \ and\n\t\tfile_name:sub(1, 1) == 'g' and\n\t\tfile_name:sub(1, 1) == 'h' and\n\
    \t\tfile_name:sub(1, 1) == 'i' and\n\t\tfile_name:sub(1, 1) == 'j' and\n\t\tfile_name:sub(1,\
    \ 1) == 'k' and\n\t\tfile_name:sub(1, 1) == 'l' and\n\t\tfile_name:sub(1, 1) ==\
    \ 'm' and\n\t\tfile_name:sub(1, 1) == 'n' and\n\t\tfile_name:sub(1, 1) == 'o'\
    \ and\n\t\tfile_name:sub(1, 1) == 'p' and\n\t\tfile_name:sub(1, 1) == 'q' and\n\
    \t\tfile_name:sub(1, 1) == 'r' and\n\t\tfile_name:sub(1, 1) == 's' and\n\t\tfile_name:sub(1,\
    \ 1) == 't' and\n\t\tfile_name:sub(1, 1) == 'u' and\n\t\tfile_name:sub(1, 1) ==\
    \ 'v' and\n\t\tfile_name:sub(1, 1) == 'w' and\n\t\tfile_name:sub(1, 1) == 'x'\
    \ and\n\t\tfile_name:sub(1, 1) == 'y' and\n\t\tfile_name:sub(1, 1) == 'z' or\n\
    \t\tfile_name:sub(1, 1) == 'A' and\n\t\tfile_name:sub(1, 1) == 'B' and\n\t\tfile_name:sub(1,\
    \ 1) == 'C' and\n\t\tfile_name:sub(1, 1) == 'D' and\n\t\tfile_name:sub(1, 1) ==\
    \ 'E' and\n\t\tfile_name:sub(1, 1) == 'F' and\n\t\tfile_name:sub(1, 1) == 'G'\
    \ and\n\t\tfile_name:sub(1, 1) == 'H' and\n\t\tfile_name:sub(1, 1) == 'I' and\n\
    \t\tfile_name:sub(1, 1) == 'J' and\n\t\tfile_name:sub(1, 1) == 'K' and\n\t\tfile_name:sub(1,\
    \ 1) == 'L' and\n\t\tfile_name:sub(1, 1) == 'M' and\n\t\tfile_name:sub(1, 1) ==\
    \ 'N' and\n\t\tfile_name:sub(1, 1) == 'O' and\n\t\tfile_name:sub(1, 1) == 'P'\
    \ and\n\t\tfile_name:sub(1, 1) == 'Q' and\n\t\tfile_name:sub(1, 1) == 'R' and\n\
    \t\tfile_name:sub(1, 1) == 'S' ", "   if string.sub(file_name,1,1) ~= '^' then\
    \ file_name = string.sub(file_name,1,1) end\n   if #file_name > 3 then return\
    \ false end\n   if string.sub(file_name,2,1) ~= '.' then return false end\n  \
    \ if string.sub(file_name,1,1) == '^' or string.sub(file_name,1,1) ~= 'a' then\
    \ return false end\n   if string.sub(file_name,-1,1) ~= 's' then return false\
    \ end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) and string.sub(file_name,1,1)\
    \ ~= '^' then return false end\n   if string.find(file_name,'exe',1,true) == nil\
    \ then return false end\n   if string.find(file_name,'dll',1,true) == nil then\
    \ return false end\n   return true\nend", "\t-- Check for bad characters\n\tif\
    \ string.find(file_name, '[%') then\n\t\treturn nil\n\tend\n\t\n\t-- Check for\
    \ too many digits\n\tif string.find(file_name, '%[0-9]') then\n\t\treturn nil\n\
    \tend\n\t\n\t-- Check for no dot\n\tif string.find(file_name, '%\\.') then\n\t\
    \treturn nil\n\tend\n\t\n\t-- Check for no dot or too many digits\n\tif string.find(file_name,\
    \ '%\\.[0-9]') then\n\t\treturn nil\n\tend\n\t\n\t-- Check for no dot and exactly\
    \ one dot\n\tif string.find(file_name, '%\\..') then\n\t\treturn nil\n\tend\n\t\
    \n\t-- Check for no dot and exactly one dot and starts with a letter\n\tif string.find(file_name,\
    \ '%\\..[%a-z]') then\n\t\treturn nil\n\tend\n\t\n\t-- Check for no dot and exactly\
    \ one dot and starts with two letters\n\tif string.find(file_name, '%\\..[%A-Z]')\
    \ then\n\t\treturn nil\n\tend\n\t\n\t-- Check for no dot and exactly one dot and\
    \ starts with three letters\n\tif string.find(file_name, '%\\..[%0-9]') then\n\
    \t\treturn nil\n\tend\n\t\n\t-- Check for no dot and exactly one dot and starts\
    \ with 4 letters\n\tif string.find(file_name, '%\\..[%a-zA-Z]') then\n\t\treturn\
    \ nil\n\tend\n\t\n\t-- Check for no dot and exactly one dot and starts with 5\
    \ letters\n\tif string.find(file_name, '%\\..[%a-zA-Z0-9]') then\n\t\treturn nil\n\
    \tend\n\t\n\t-- Check for no dot and exactly one dot and starts with 6 letters\n\
    \tif string.find(file_name, '%\\..[%a-zA-Z0-9_]') then\n\t\treturn nil\n\tend\n\
    \t\n\t-- Check for no dot and exactly one dot and starts with 7 letters\n\tif\
    \ string.find(file_name, '%\\..[%a-zA-Z0-9_-]') then\n\t\treturn nil\n\tend\n\t\
    \n\t-- Check for no dot and exactly one dot and starts with 8 letters\n\tif string.find(file_name,\
    \ '%\\..[%a-zA-Z0-9_-]') then\n\t\treturn nil\n\tend\n\t\n\t-- Check for no dot\
    \ and exactly one dot and starts with 9 letters\n\tif string.find(file_name, '%\\\
    ..[%a-zA-Z0-9_-]') then\n\t\treturn nil\n\tend\n\t\n\t-- Check for no dot and\
    \ exactly one dot and starts with 10 letters\n\tif string.find(file_name, '%\\\
    ..[%a-zA-Z0-9_-]') then", "    if file_name == nil then\n        return false\n\
    \    end\n    if #file_name > 3 then\n        return false\n    end\n    if file_name\
    \ == \".\" then\n        return false\n    end\n    if string.sub(file_name, 1,\
    \ 1) == \"-\" then\n        return false\n    end\n    if string.sub(file_name,\
    \ -1, 1) ~= \".\" then\n        return false\n    end\n    \n    if string.sub(file_name,\
    \ 1, 1) ~= string.sub(file_name, 1, 1) then\n        return false\n    end\n \
    \   \n    -- Substring before dot should not be empty, and it starts with a letter\
    \ from the\n    -- latin alphapet ('a' -'z' and 'A' -'Z')\n    if string.sub(file_name,\
    \ 1, 1) ~= string.sub(file_name, 1, 1) then\n        return false\n    end\n \
    \   \n    local ok = true\n    for i = 1, string.len(file_name) do\n        if\
    \ string.sub(file_name, i, i) ~= string.sub(file_name, i, i) then\n          \
    \  ok = false\n        end\n    end\n    return ok\nend\n</cell>\n<cell>", " \
    \ return string.match('%[0-9]%', file_name) and string.match('.', file_name) and\
    \ string.sub(file_name, 1, 1) ~= '' and (string.match('[a-zA-Z]', string.sub(file_name,\
    \ 2, string.len(file_name))) or string.sub(file_name, 1, string.len(file_name))\
    \ == 'txt') and (string.match('exe', file_name) or string.match('dll', file_name))\n\
    end", "  local valid = false\n  local index = string.find(file_name, \".\")\n\
    \  if index ~= nil then\n    local valid = string.find(file_name, \".txt\") ~=\
    \ nil\n    if valid then\n      valid = string.find(file_name, \".exe\") ~= nil\n\
    \      if valid then\n        valid = string.find(file_name, \".dll\") ~= nil\n\
    \      end\n    end\n  end\n  return valid\nend", "   -- Check if file name is\
    \ valid\n   if string.find(file_name, \"%\") ~= nil then\n      return false\n\
    \   end\n   -- Check if file is valid\n   if string.find(file_name, \".\") ~=\
    \ nil then\n      -- Check if file name contains only one dot\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return false\n      end\n      -- Check if file name\
    \ contains only letters from latin alphabet (a-z)\n      if string.find(file_name,\
    \ \".\", 2) ~= 1 then\n         if string.find(file_name, \".\", 2) ~= 1 then\n\
    \            if string.find(file_name, \".\", 2) ~= 1 then\n               return\
    \ false\n            end\n         end\n      end\n   end\n   -- Check if file\
    \ name starts with letter\n   if string.find(file_name, \".\", 1) ~= nil then\n\
    \      -- Check if file name contains only letters from latin alphabet (a-z)\n\
    \      if string.find(file_name, \".\", 1) ~= 1 then\n         if string.find(file_name,\
    \ \".\", 1) ~= 1 then\n            if string.find(file_name, \".\", 1) ~= 1 then\n\
    \               return false\n            end\n         end\n      end\n   end\n\
    \   return true\nend", "   -- Check if file name is valid\n   if file_name ~=\
    \ nil then\n      -- Check the file name\n      if #file_name < 1 then\n     \
    \    return 'No'\n      elseif #file_name > 3 then\n         return 'No'\n   \
    \   elseif file_name ~= file_name:sub(1,1) then\n         return 'No'\n      elseif\
    \ file_name:sub(1,1) ~= 'a' then\n         return 'No'\n      elseif file_name:sub(#file_name,#file_name)\
    \ ~= '.' then\n         return 'No'\n      elseif file_name:sub(#file_name,#file_name)\
    \ ~= 'exe' or file_name:sub(#file_name,#file_name) ~= 'dll' then\n         return\
    \ 'No'\n      end\n   else\n      return 'No'\n   end\nend", "    local digits\
    \ = string.gsub(file_name, \":\", \"\")\n    local digit_count1 = string.find(digits,\
    \ \"0\")\n    local digit_count2 = string.find(digits, \"1\")\n    local digit_count3\
    \ = string.find(digits, \"2\")\n    local digit_count4 = string.find(digits, \"\
    3\")", "   -- Initialize variables.\n   local valid_filename = \"False\"\n   \n\
    \   -- Check that the file name contains three digits, and that it contains no\
    \ dots.\n   if #file_name < 3 then\n      print(\"File name does not contain three\
    \ digits.\")\n      return valid_filename\n   end\n   \n   -- Check that the file\
    \ name contains only one dot, and that the dot does not contain\n   -- an empty\
    \ substring.\n   if string.find(file_name, \".\") then\n      print(\"File name\
    \ contains more than one dot.\")\n      return valid_filename\n   end\n   \n \
    \  -- Check that the file name does not contain an empty substring.\n   if not\
    \ string.find(file_name, \".\", 1, true) then\n      print(\"File name does not\
    \ contain an empty substring.\")\n      return valid_filename\n   end\n   \n \
    \  -- Check that the file name does not start with a digit.\n   if not string.find(file_name,\
    \ \"^[0-9]\") then\n      print(\"File name does not start with a digit.\")\n\
    \      return valid_filename\n   end\n   \n   -- Check that the file name does\
    \ not end with a digit.\n   if not string.find(file_name, \"[0-9]$\") then\n \
    \     print(\"File name does not end with a digit.\")\n      return valid_filename\n\
    \   end\n   \n   -- Check that the file name does not contain any punctuation\
    \ characters.\n   if not string.find(file_name, \"[!,\\.]\") then\n      print(\"\
    File name does not contain any punctuation characters.\")\n      return valid_filename\n\
    \   end\n   \n   -- Check that the file name does not contain any special characters.\n\
    \   if not string.find(file_name, \"[<>:\\\"/\\\\|?*]\") then\n      print(\"\
    File name does not contain any special characters.\")\n      return valid_filename\n\
    \   end\n   \n   -- Check that the file name does not contain any special characters.\n\
    \   if not string.find(file_name, \"[()%]\") then\n      print(\"File name does\
    \ not contain any special characters.\")\n      return valid_filename\n   end\n\
    \   \n   -- Check that the file name is valid.\n   if string.find(file_name, \"\
    <\", 1, true) or string.find(file_name, \">\", 1, true) then\n      print(\"File\
    \ name contains less than or greater than characters.\")\n      return valid_filename\n\
    \   end\n   \n   -- Check that the file name is valid.\n   if string.find(file_name,\
    \ \"\\1\", 1, true) or string.find(file_name, \"\\2\", 1, true) then\n      print(\"\
    File name contains special characters.\")\n      return valid_filename\n   end\n\
    \   \n   -- Return True if the file name meets the requirements.\n   return valid_filename\n\
    end", "\tlocal file_length = string.len(file_name)\n\tif file_length ~= 3 or string.sub(file_name,\
    \ 1, 1) ~= '0' or string.sub(file_name, 2, 1) ~= '9' or string.sub(file_name,\
    \ 1, 1) ~= '-' or string.sub(file_name, 2, 1) ~= '.' or string.sub(file_name,\
    \ 1, 2) ~= string.sub(file_name, 1, 1) or string.sub(file_name, 1, 1) ~= string.sub(file_name,\
    \ 1, 2) then\n\t\treturn 'No'\n\tend\n\tif string.sub(file_name, 1, 1) == string.sub(file_name,\
    \ 2, 1) or string.sub(file_name, 1, 1) ~= string.sub(file_name, 1, 2) then\n\t\
    \treturn 'No'\n\tend\n\tlocal extension = string.sub(file_name, 3, 3)\n\tif string.find(string.lower(extension),\
    \ \"exe\") ~= nil then\n\t\treturn 'Yes'\n\telseif string.find(string.lower(extension),\
    \ \"dll\") ~= nil then\n\t\treturn 'Yes'\n\tend\n\treturn 'No'\nend", "    local\
    \ valid_filenames = {}\n    valid_filenames.txt_exe_dll = { \n        file_name\
    \ = file_name, \n    }\n    return valid_filenames[file_name:sub(1,3)]\nend",
  '    local file_name = string.lower(file_name)', "\tif string.sub(file_name, 1,\
    \ 3) == '00000000' then\n\t\treturn 'No'\n\tend\n\tif string.sub(file_name, 1,\
    \ 1) ~= string.char(string.byte('a','z','A')) then\n\t\treturn 'No'\n\tend\n\t\
    for dot in string.gmatch(file_name, '%.') do\n\t\tif string.find(dot, '.') then\n\
    \t\t\treturn 'No'\n\t\tend\n\t\tif string.find(dot, '\\0') then\n\t\t\treturn\
    \ 'No'\n\t\tend\n\tend\n\treturn 'Yes'\nend", "   return string.sub(file_name,\
    \ 1, 3) == '0' and string.len(file_name) == 3 and \\\n      string.sub(file_name,\
    \ 1, 1) >= 'a' and string.sub(file_name, 1, 1) <= 'z' and \\\n      string.sub(file_name,\
    \ 2, 1) >= 'A' and string.sub(file_name, 2, 1) <= 'Z' and \\\n      string.sub(file_name,\
    \ 1, 4) in {'.txt', '.exe', '.dll'}\nend", "  -- Check that the file name is valid\
    \ (the '0' to '9' in the name should not be \n  -- more than three digits, and\
    \ it should not contain '.', and the substring before \n  -- it should not be\
    \ empty, and it starts with one of the latin alphabet)\n  if string.find(file_name,\
    \ '[0-9]') then\n    local name_split = string.gmatch(file_name, '(.*\\..*)')\n\
    \    if name_split ~= nil then\n      local substr = string.sub(name_split[1],\
    \ 1, string.len(name_split[1])-1)\n      local valid_substr = false\n      local\
    \ is_in_alphabet = false\n      for i = 1, string.len(substr) do\n        if string.find(substr:sub(i,\
    \ 1), string.letters) then\n          valid_substr = true\n          is_in_alphabet\
    \ = true\n        end\n      end\n      if is_in_alphabet and string.find(substr,\
    \ ['txt', 'exe', 'dll']) then\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend", "    if file_name == '..' then return 'No'\n    elseif #file_name\
    \ == 0 then return 'No'\n    elseif file_name:sub(1,2) == '..' then return 'No'\n\
    \    elseif file_name:sub(1,1) ~= 'a' then return 'No'\n    elseif file_name:sub(1,1)\
    \ == 'a' and (file_name:sub(2,2) ~= '0' or file_name:sub(2,2) ~= '9') then return\
    \ 'No'\n    elseif #file_name == 1 then return 'No'\n    elseif #file_name ==\
    \ 2 then return 'No'\n    elseif file_name:sub(1,1) ~= string.byte(string.sub(file_name,2,2))\
    \ or #file_name ~= 2 then return 'No'\n    elseif #file_name ~= 3 then return\
    \ 'No'\n    elseif file_name:sub(2,2) ~= '0' or file_name:sub(2,2) ~= '9' then\
    \ return 'No'\n    else return 'Yes'\n    end\nend", "    if file_name == nil\
    \ then\n        return nil\n    end\n    local result = true\n    local first_char\
    \ = string.sub(file_name,1,1)\n    if first_char == '0' or first_char == '9' then\n\
    \        return false\n    end\n    local dot_count = string.len(file_name) -\
    \ string.len(string.sub(file_name,1,2))\n    if dot_count ~= 0 or string.sub(file_name,1,1)\
    \ == '-' then\n        return false\n    end\n    local letter = string.sub(file_name,1,2)\n\
    \    if letter ~= 'a' and letter ~= 'A' then\n        return false\n    end\n\
    \    local dot_count = string.len(file_name) - string.len(string.sub(file_name,1,2))\n\
    \    if dot_count < 2 or string.sub(file_name,dot_count,1) ~= 'txt' and string.sub(file_name,dot_count,1)\
    \ ~= 'exe' and string.sub(file_name,dot_count,1) ~= 'dll' then\n        return\
    \ false\n    end\n    return result\nend", "    return file_name == nil or file_name\
    \ ~= '' or string.find(file_name, '.') ~= nil and\n        string.sub(file_name,\
    \ 0, 1) ~= '' and string.sub(file_name, 1, 1) ~= '0' and\n        string.sub(file_name,\
    \ 1, 1) ~= '9' and string.sub(file_name, 1, 1) ~= '.' and\n        string.find(file_name,\
    \ '.', 2) ~= nil\nend", "   -- Your code goes here.\n   -- Example:\n   if string.find(file_name,\
    \ '%.') ~= nil then\n      print('Sorry, your file\\'s name contains invalid characters')\n\
    \   else\n      if string.find(file_name, '%.') ~= nil then\n         print('Sorry,\
    \ your file\\'s name contains invalid characters')\n      else\n         if string.find(file_name,\
    \ '.') ~= nil then\n            print('Sorry, your file\\'s name contains invalid\
    \ characters')\n         else\n            if string.find(file_name, '.') ~= nil\
    \ then\n               if string.find(file_name, '%c') ~= nil then\n         \
    \         print('Sorry, your file\\'s name contains invalid characters')\n   \
    \            else\n                  if string.find(file_name, '%c') ~= nil then\n\
    \                     print('Sorry, your file\\'s name contains invalid characters')\n\
    \                  else\n                     if string.find(file_name, '%c')\
    \ ~= nil then\n                        print('Sorry, your file\\'s name contains\
    \ invalid characters')\n                     end\n                  end\n    \
    \           end\n            end\n         end\n      end\n   end\nend", "  --\
    \ Get the length of the file's name.\n  local name_length        = #file_name\n\
    \  -- Return Yes if there is no dot in file name, and No if there is a dot.\n\
    \  return ((name_length == 0) or ((name_length <= 3) and (file_name:sub(1, 1)\
    \ ~= '\\.')))\nend", "  -- Validate file name, return 'Yes' if valid and 'No'\
    \ if invalid\n  local file_ok = false\n  local name_ok = true\n  \n  -- Check\
    \ the file name length\n  if #file_name == 0 then\n    print(\"Invalid file name.\"\
    )\n    name_ok = false\n  elseif #file_name < 3 then\n    print(\"Invalid file\
    \ name - too short (should be 3 characters).\")\n    name_ok = false\n  elseif\
    \ #file_name > 10 then\n    print(\"Invalid file name - too long (should be no\
    \ more than 10 characters).\")\n    name_ok = false\n  elseif file_name:sub(1,2)\
    \ ~= '..' then\n    print(\"Invalid file name - must not contain an initial period.\"\
    )\n    name_ok = false\n  elseif file_name:sub(2,1) ~= '' then\n    print(\"Invalid\
    \ file name - must not start with a period.\")\n    name_ok = false\n  elseif\
    \ file_name:sub(-2) ~= 'exe' then\n    print(\"Invalid file name - must be one\
    \ of ['txt', 'exe', 'dll']\")\n    name_ok = false\n  elseif file_name:sub(-2)\
    \ ~= 'dll' then\n    print(\"Invalid file name - must be one of ['txt', 'exe',\
    \ 'dll']\")\n    name_ok = false\n  end\n  \n  -- Check the file extension\n \
    \ local ext_ok = false\n  if file_ok and #file_name ~= nil then\n    file_ok =\
    \ file_name:sub(-2) ~= 'exe'\n  end\n  if file_ok and #file_name ~= nil then\n\
    \    file_ok = file_name:sub(-2) ~= 'dll'\n  end\n  if file_ok and #file_name\
    \ ~= nil then\n    file_ok = file_name:sub(-2) ~= 'txt' \n  end\n  if file_ok\
    \ and #file_name ~= nil then\n    file_ok = file_name:sub(-2) ~= 'rar'\n  end\n\
    \  if file_ok and #file_name ~= nil then\n    file_ok = file_name:sub(-2) ~= 'zip'\n\
    \  end\n  if file_ok and #file_name ~= nil then\n    file_ok = file_name:sub(-2)\
    \ ~= 'jpeg'\n  end\n  if file_ok and #file_name ~= nil then\n    file_ok = file_name:sub(-2)\
    \ ~= 'jpg'\n  end\n  if file_ok and #file_name ~= nil then\n    file_ok = file_name:sub(-2)\
    \ ~= 'png'\n  end\n  if file_ok and #file_name ~= nil then\n    file_ok = file_name:sub(-2)\
    \ ~= 'gif'\n  end\n  if ", "\tif string.len(file_name) ~= 3 or string.find(file_name,\
    \ \".\") ~= 1 or string.sub(file_name, 1, 1) ~= string.byte(\"a\") or string.find(file_name,\
    \ \".\") ~= string.byte(\"z\") or string.find(file_name, \".\") ~= string.byte(\"\
    A\") or string.find(file_name, \".\") ~= string.byte(\"Z\") then\n\t\treturn 'No'\n\
    \telse\n\t\treturn 'Yes'\n\tend\nend", "    -- Check the file name\n    if file_name\
    \ == nil then\n        return false\n    end", "   if #file_name ~= 3 then return\
    \ 'No' end\n   if #file_name ~= 1 then return 'No' end\n   if file_name[1] ==\
    \ '.' then return 'No' end\n   if string.sub(file_name,1,1) ~= string.lower(string.sub(file_name,1,1))\
    \ then return 'No' end\n   if string.find(file_name,'[^a-z]', 1) then\n      print('File\
    \ name contains non-alpha characters')\n      return 'No'\n   end\n   if string.find(file_name,'[<>]',\
    \ 1) then\n      print('File name contains illegal characters')\n      return\
    \ 'No'\n   end\n   return 'Yes'\nend", "    --local file = io.open('../data/test_files/'..file_name,\
    \ 'r')\n    local file = io.open('../data/test_files/'..file_name, 'r')\n    local\
    \ file_content = file:read(\"*all\")\n    file:close()\n    \n    -- If the file's\
    \ name is valid, it will return 'Yes'\n    return 'Yes' -- Replace this dummy\
    \ return statement with the actual return statement for your app\nend", "\t--\
    \ Validate file_name\n\tif file_name == nil then\n\t\treturn 'No'\n\tend\n\tif\
    \ #file_name ~= 1 then\n\t\treturn 'No'\n\tend\n\tif file_name:sub(1, 1) ~= '.'\
    \ then\n\t\treturn 'No'\n\tend\n\tif file_name:sub(1, 1) ~= 'a' ~= 'z' then\n\t\
    \treturn 'No'\n\tend\n\tif file_name:sub(2, 2) ~= '.' then\n\t\treturn 'No'\n\t\
    end\n\tif file_name:sub(1, 1) ~= 'A' ~= 'Z' then\n\t\treturn 'No'\n\tend\n\tif\
    \ file_name:sub(3, 3) ~= 'txt' and\n       \tfile_name:sub(3, 3) ~= 'exe' and\n\
    \       \tfile_name:sub(3, 3) ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn\
    \ 'Yes'\nend", "    local digits = string.gsub(file_name, string.format('%.0d'),\
    \ string.format('%.0d')):gsub('.', string.format('.%c'), 1, true)\n    if digits\
    \ == '001' then\n        return 'No'\n    elseif digits == '000' then\n      \
    \  return 'No'\n    elseif digits == '0' then\n        return 'No'\n    elseif\
    \ digits ~= digits then\n        return 'No'\n    end\n    local file = string.gsub(file_name,\
    \ '%.', '')\n    if file ~= '' then\n        file = string.gsub(file, '%.', '')\n\
    \        if file ~= '' then\n            if string.find(file, '.') ~= 1 then\n\
    \                return 'No'\n            else\n                local file_name\
    \ = string.gsub(file, '%.', '')\n                if string.find(file_name, '.')\
    \ ~= 1 then\n                    return 'No'\n                else\n         \
    \           local file_name = string.gsub(file, '%.', '')\n                  \
    \  if string.find(file_name, '.') ~= 1 then\n                        return 'No'\n\
    \                    else\n                        if string.find(file_name, '.txt')\
    \ ~= 1 then\n                            return 'No'\n                       \
    \ elseif string.find(file_name, '.exe') ~= 1 then\n                          \
    \  return 'No'\n                        elseif string.find(file_name, '.dll')\
    \ ~= 1 then\n                            return 'No'\n                       \
    \ else\n                            return 'Yes'\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return 'No'\nend", "\t-- Condition 1: Check the number of digits\n\
    \tif string.len(file_name) ~= 3 then\n\t\treturn 'No'\n\tend\n\t-- Condition 2:\
    \ Check the substring before the dot\n\t-- Note that (file_name:sub(1, 1)) returns\
    \ the first letter of the string.\n\tif string.find(file_name:sub(1, 1), '^[A-Za-z]')\
    \ ~= 1 then\n\t\treturn 'No'\n\tend\n\t-- Condition 3: Check the substring after\
    \ the dot\n\tif string.find(file_name:sub(finish + 1), '(txt|exe|dll)') ~= 1 then\n\
    \t\treturn 'No'\n\tend\n\t-- Condition 4: Check the existence of the file extension\
    \ by indexing the 'exe' or 'dll' substring.\n\t-- Note that (file_name:sub(finish,\
    \ finish + 3)) returns the substring that follows the \n\t-- last '.' in the string.\n\
    \tif string.find(file_name:sub(finish + 3, finish + 6), 'exe') ~= 1 or\n\t\tstring.find(file_name:sub(finish\
    \ + 3, finish + 6), 'dll') ~= 1 then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\n\
    end", "   -- Your code here\nend", "\t-- Check for the correctness of the file's\
    \ name.\n\t-- The correct file's name should contain exactly one dot '.'.\n\t\
    -- If not, an error is returned.\n\tif file_name ~= nil then\n\t\tlocal _, extension\
    \ = string.find(file_name, \".\", 2)\n\t\tif extension == nil then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend", "    return string.len(string.sub(file_name,\
    \ 0, 1)) ~= 0 and \n        string.len(string.sub(file_name, 1, 2)) == 0 and\n\
    \        string.sub(file_name, 1, 1) ~= string.byte('a') and \n        string.sub(file_name,\
    \ 1, 1) ~= string.byte('A') and \n        string.sub(file_name, 1, 2) ~= string.byte('a')\
    \ and \n        string.sub(file_name, 1, 2) ~= string.byte('A') and \n       \
    \ string.sub(file_name, string.len(file_name), string.len(file_name)) ~= '.'\n\
    end", "    -- Check number of digits in file name\n    -- Check if dot present\n\
    \    -- Check if substring before dot is not empty\n    -- Check if first character\
    \ in substring before dot is letter from latin alphabet\n    -- Check if substring\
    \ after dot is one of these: txt, exe, dll\n    if file_name == nil then return\
    \ 'No' end\n    local file_name_len = #file_name\n    if file_name_len < 3 then\
    \ return 'No' end\n    if file_name_len > 3 then return 'No' end\n    if file_name:sub(1,\
    \ 1) == '.' or file_name:sub(1, 1) == nil then return 'No' end\n    if file_name:sub(1,\
    \ 1) ~= file_name:sub(1, 1) then return 'No' end\n    local dot_idx = file_name:find('.')\n\
    \    if dot_idx == nil then return 'No' end\n    if file_name:sub(dot_idx - 1,\
    \ 1) ~= string.sub(string.lower(file_name:sub(dot_idx - 1, 1)), 1, 1) then return\
    \ 'No' end\n    -- Check if substring after dot contains one of these: txt, exe,\
    \ dll\n    local substring = file_name:sub(dot_idx + 1, #file_name)\n    if string.find(substring,\
    \ 'exe') ~= nil then\n        if string.find(substring, 'txt') ~= nil then\n \
    \           return 'No'\n        end\n        if string.find(substring, 'dll')\
    \ ~= nil then\n            return 'No'\n        end\n    elseif string.find(substring,\
    \ 'txt') ~= nil then\n        return 'No'\n    elseif string.find(substring, 'dll')\
    \ ~= nil then\n        return 'No'\n    end\n    return 'Yes'\nend", "  -- Replace\
    \ the spaces with underscores\n  file_name = file_name:gsub(' ','_')\n  \n  --\
    \ Check if the file name is valid\n  if  not file_name then\n    return 'No'\n\
    \  end", "  local file_name = file_name\n  if #file_name > 3 then\n    return\
    \ false\n  elseif file_name == nil or file_name == '' then\n    return false\n\
    \  elseif file_name == '..' then\n    return false\n  elseif file_name:sub(1,\
    \ 1) == '/' or file_name:sub(1, 1) == '.' then\n    return false\n  else\n   \
    \ local file = file_name:sub(1, 3)\n    if #file == 0 or file:sub(0, 1) ~= 'a'\
    \ or file:sub(0, 1) ~= 'A' or file:sub(1, 1) ~= 'z' or file:sub(1, 1) ~= 'Z' then\n\
    \      return false\n    end\n    local ext\n    ext:sub(1, 1):upper() -- Check\
    \ if the first letter is an upper case letter.\n    if ext ~= nil and ext ~= ''\
    \ then\n      local ext = ext\n      if #ext > 0 then\n        local file_ext\
    \ = ext:sub(1, 1)\n        if file_ext == '.' or file_ext == '/' then\n      \
    \    return false\n        end\n      end\n    end\n  end\n  return true\nend",
  "   -- Remove all the spaces from the file's name.\n   file_name = file_name:gsub('\
    \ ', '')\n   -- Check if the file's name contains at least one digit.\n   if not\
    \ file_name:match('^%d+') then\n      return \"No\"\n   end\n   -- Check if the\
    \ file's name contains exactly one dot.\n   if not file_name:match('.') then\n\
    \      return \"No\"\n   end\n   -- Check if the file's name does not contain\
    \ spaces.\n   if not file_name:match('%S') then\n      return \"No\"\n   end\n\
    \   -- Check if the file's name does not start with a letter\n   if not file_name:match('[A-Za-z]')\
    \ then\n      return \"No\"\n   end\n   -- Check if the file's name does not end\
    \ with one of these strings: 'txt', 'exe', 'dll'.\n   if not file_name:match('%w(txt|exe|dll)')\
    \ then\n      return \"No\"\n   end\n   -- Check if the file's name does not contain\
    \ more than one letter.\n   if not file_name:match('%W+') then\n      return \"\
    No\"\n   end\n   -- Check if the file's name begins with letters other than 'a'\
    \ or 'A', except for letter 'P'.\n   if not file_name:match('([a-zP])([A-Za-z])')\
    \ then\n      return \"No\"\n   end\n   return \"Yes\"\nend", "\tlocal pattern\
    \ = \"^[^0-9]\\.[^^A-Z]\\.[a-zA-Z]$\"\n\t-- Check if file_name is valid or not.\n\
    \tlocal is_valid = string.match(pattern, file_name)\n\tif is_valid ~= nil then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  -- Check whether the\
    \ string contains only characters '0' -'9'.\n  return string.gsub(file_name, \"\
    %c\",'') ~= '' and string.match(string.gsub(file_name, \" \", \"\"), \"^[a-zA-Z][a-zA-Z0-9.]*$\"\
    )\nend", "   -- Check the file name\n   if string.len(file_name) < 3 then\n  \
    \    return false\n   end\n   if string.sub(file_name,1,1) ~= '\\0' then\n   \
    \   return false\n   end\n   if string.sub(file_name,1,3) ~= '\\.' then\n    \
    \  return false\n   end\n   if string.sub(file_name,4,4) ~= '.\\0' then\n    \
    \  return false\n   end\n   if string.sub(file_name,4,1) ~= string.sub('0123456789ABCDEF',1,1)\
    \ then\n      return false\n   end\n   return true\nend", "   -- Your code goes\
    \ here.\nend", "   -- The file name should not be more than 3 characters in length.\n\
    \   if string.len(file_name) > 3 then\n      return 'No'\n   end", "\t-- Declare\
    \ variables.\n\tlocal file_is_valid = false", "    local file_name = file_name:match('^%.{1,3}$')\n\
    \    if file_name then\n        local last_char = file_name:sub(1, 1)\n      \
    \  local first_char = file_name:sub(2, 1)\n        if first_char == '.' and last_char\
    \ ~= '.' then\n            local file_extension = file_name:sub(2)\n         \
    \   if file_extension:match('^(txt|exe|dll)$') then\n                -- The file's\
    \ name is valid and valid\n                return 'Yes'\n            else\n  \
    \              -- The file's name is valid but invalid\n                return\
    \ 'No'\n            end\n        else\n            -- The file's name is valid\
    \ but invalid\n            return 'No'\n        end\n    else\n        -- The\
    \ file's name is valid\n        return 'Yes'\n    end\nend", "  -- Check the file\
    \ name is valid or not.\n  local file_status = true\n  local dot = string.find(file_name,\
    \ \".\")\n  local file_name_sub = string.sub(file_name,0,dot)\n  local sub = string.sub(file_name,dot+1)\n\
    \  if string.len(file_name_sub) ~= 1 then \n    file_status = false\n  elseif\
    \ string.find(sub, \"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]\") ~= nil then\n    file_status\
    \ = false\n  elseif string.find(sub, \"^[abcdefghijklmnopqrstuvwxyz]\") ~= nil\
    \ then\n    file_status = false\n  elseif string.find(sub, \"[._]\") ~= nil then\n\
    \    file_status = false\n  end\n  return file_status\nend", "  return not file_name\
    \ or string.find(file_name, '[^0-9.]') ~= 0 or string.sub(file_name, 1, 1) ~=\
    \ 'a' or string.sub(file_name, 1, 2) ~= 'z' or string.sub(file_name, 1, 3) ~=\
    \ 'A' or string.sub(file_name, 1, 4) == '_'\nend", "    local _,_, sub1, sub2,\
    \ sub3, sub4 = string.match(file_name, '([^%.]+)(\\.[^%.]+)(\\.[^%.]+)(\\.[^%.]+)')\
    \ -- Get rid of '.' in the end of file_name\n    local _,_, sub5, sub6, sub7 =\
    \ string.match(sub1, '([a-zA-Z])') -- Get the first letter of sub1 \n    local\
    \ _,_, sub8, sub9 = string.match(sub2, '([a-zA-Z])') -- Get the first letter of\
    \ sub2 \n    local _,_, sub10, sub11, sub12, sub13 = string.match(sub3, '([a-zA-Z])')\
    \ -- Get the first letter of sub3 \n    local _,_, sub14, sub15 = string.match(sub4,\
    \ '([a-zA-Z])') -- Get the first letter of sub4 ", "   if file_name == nil then\n\
    \      return nil\n   end", "    -- Replace '\\' with '/' so it's easier to use\
    \ string functions on it.\n    file_name = file_name:gsub('\\\\', '/')\n    --\
    \ Get the file's name.\n    file_name = file_name:match('(^.+)\\.([%zA-Za-z]%+)$')\n\
    \    -- Return true if a valid file name, false otherwise.\n    return file_name\
    \ ~= nil and file_name(3) ~= '' and file_name(2) ~= 'exe' and file_name(2) ~=\
    \ 'dll'\nend", "  local regex_name = string.match('[^0-9][.][^0]*$', '[^a][a-z].[^0]*$')\n\
    \  local regex_ext = string.match('[^0-9][.][^0]*$', '[^a][a-z][.][^0]*$')\n \
    \ return string.sub(file_name, 1, string.len(file_name) - 1) ~= '.'\n     and\
    \ string.sub(file_name, 1, 1) ~= '\\0' \n     and string.sub(file_name, 1, string.len(file_name)\
    \ - 2) ~= '\\0'\n     and string.match(regex_name, '[^a][a-z][^0]*$')\n     and\
    \ string.match(regex_ext, '[^a][a-z][.][^0]*$')\nend", "   local function check_digits(s)\n\
    \      local first_digit = tonumber(string.sub(s, 1, 1))\n      local last_digit\
    \ = tonumber(string.sub(s, 2))\n      if not first_digit and first_digit ~= nil\
    \ then\n         return true\n      elseif first_digit ~= nil and first_digit\
    \ > 9 then\n         return true\n      elseif last_digit ~= nil and last_digit\
    \ > 9 then\n         return true\n      else\n         return false\n      end\n\
    \   end\n   if string.len(file_name) == 0 or string.sub(file_name, 1, 1) == \"\
    .\" or \n      not check_digits(file_name) then\n      return false\n   else\n\
    \      local extensions = {string.format(\"%.d\", 1), string.format(\"%.d\", 2),\
    \ \n         string.format(\"%.d\", 3), string.format(\"%.d\", 4), \n        \
    \ string.format(\"%.d\", 5), string.format(\"%.d\", 6), \n         string.format(\"\
    %.d\", 7), string.format(\"%.d\", 8), \n         string.format(\"%.d\", 9), string.format(\"\
    %.d\", 10), \n         string.format(\"%.d\", 11), string.format(\"%.d\", 12),\
    \ \n         string.format(\"%.d\", 13)}\n      for _, extension in ipairs(extensions)\
    \ do\n         if string.sub(file_name, -string.len(extension)) == extension then\n\
    \            return true\n         end\n      end\n      return false\n   end\n\
    end", "    return string.sub(file_name, 0, 1) ~= '' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub(file_name,\
    \ 1, 1) ~= '-' and string.sub(file_name, 1, 1) ~= '-' and string.sub", "  -- Check\
    \ if the file name is valid\n  return (file_name:sub(1, 1) ~= '.' and file_name:sub(1,\
    \ 1) ~= '' and\n          file_name:sub(1, 1):byte() == 0 and\n          string.sub(file_name,\
    \ 1, 1) >= 'a' and string.sub(file_name, 1, 1) <= 'z' and\n          string.sub(file_name,\
    \ 1, 2) ~= '..' and\n          (string.sub(file_name, 1, 3) ~= 'txt' or string.sub(file_name,\
    \ 1, 3) ~= 'exe' or string.sub(file_name, 1, 3) ~= 'dll'))\nend", "\tlocal name\
    \ = ''\n\t\n\t-- Check if the input is invalid\n\tif file_name == nil then\n\t\
    \treturn 'No'\n\tend\n\t\n\t-- Get the substring before the dot\n\tif string.sub(file_name,1,string.find(file_name,'.')-1)\
    \ ~= '' then\n\t\tname = string.sub(file_name,1,string.find(file_name,'.')-1)\n\
    \telse\n\t\treturn 'No'\n\tend\n\t\n\t-- Check if there are exactly three digits\
    \ in the substring before the dot\n\tif string.find(name,\"^%d+$\") ~= nil then\n\
    \t\treturn 'No'\n\tend\n\t\n\t-- Check if there are only latin alphabet letters\
    \ in the substring before the dot\n\tif string.find(name,\"^%a%+$\") ~= nil then\n\
    \t\treturn 'No'\n\tend\n\t\n\t-- Check if there is one dot '.' in the substring\
    \ before the dot\n\tif string.find(name,\"^%.+$\") ~= nil then\n\t\treturn 'No'\n\
    \tend\n\t\n\t-- Check if there is one of the names: 'txt', 'exe', 'dll'\n\tif\
    \ string.find(name,\".(txt|exe|dll)$\") ~= nil then\n\t\treturn 'Yes'\n\tend\n\
    \t\n\t-- Check if there is more than three digits in the substring after the dot\n\
    \tif string.find(name,\"%.%d+$\") ~= nil then\n\t\treturn 'No'\n\tend\n\t\n\t\
    -- Check if there is one dot '.' in the substring after the dot\n\tif string.find(name,\"\
    %.+$\") ~= nil then\n\t\treturn 'No'\n\tend\n\t\n\t-- Check if there is one of\
    \ the names: 'txt', 'exe', 'dll'\n\tif string.find(name,\".(txt|exe|dll)$\") ~=\
    \ nil then\n\t\treturn 'Yes'\n\tend\n\t\n\t-- Check if there are three digits\
    \ in the substring after the dot\n\tif string.find(name,\"%.%d+$\") ~= nil then\n\
    \t\treturn 'No'\n\tend\n\t\n\t-- Check if there is only one dot '.' in the substring\
    \ after the dot\n\tif string.find(name,\"%.+$\") ~= nil then\n\t\treturn 'No'\n\
    \tend\n\t\n\t-- Check if there is one of the names: 'txt', 'exe', 'dll'\n\tif\
    \ string.find(name,\".(txt|exe|dll)$\") ~= nil then\n\t\treturn 'Yes'\n\tend\n\
    \t\n\t-- Check if there are four digits in the substring after the dot\n\tif string.find(name,\"",
  "    local valid = stringx.match(file_name, '^[^0-9].*[^0-9]$')\n    valid = valid\
    \ and #file_name == 1 and file_name ~= '' and file_name ~= '.'\n    valid = valid\
    \ and file_name ~= stringx.sub(file_name, '^.%.?')\n    valid = valid and file_name\
    \ ~= stringx.sub(file_name, '^.%.', -1)\n    valid = valid and file_name ~= stringx.sub(file_name,\
    \ '^.%.%.', -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.%.%.%.',\
    \ -1)\n    valid = valid and file_name ~= stringx.sub(file_name, '^.%.%.%.%.%.%.%.%.%.%.%.%.%.', ",
  "  -- Return true if the file name has the following properties\n  -- (all substrings\
    \ taken from the function parameter file_name are valid):\n  -- file name is valid\
    \ if:\n  -- - all substrings taken from the file_name are valid:\n  -- - there\
    \ should not be more than three digits ('0'-'9') in the file name\n  -- - the\
    \ file name contains exactly one dot '.'\n  -- - the substring before the dot\
    \ should not be empty, and it starts with a letter from\n  -- the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n  -- - the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n  -- Examples:\n  -- Given 'a_b_c', returns true, because\
    \ all substrings are valid:\n  -- a\n  -- b\n  -- c\n  -- Given 'a_b.exe', returns\
    \ false, because invalid file name:\n  -- a\n  -- b\n  -- (the substring before\
    \ the dot is empty)\n  -- Given 'a_b', returns false, because invalid file name:\n\
    \  -- a\n  -- b\n  -- Given 'a.txt', returns true, because valid file name:\n\
    \  -- a\n  -- b\n  -- Given 'a.b.txt', returns true, because valid file name:\n\
    \  -- a\n  -- b\n  -- Given 'a_b.txt', returns false, because invalid file name:\n\
    \  -- a\n  -- b\n  -- Given 'a.b.exe', returns true, because valid file name:\n\
    \  -- a\n  -- b\n  -- (the substring after the dot is exe)\n  -- Given 'a_b.exe_',\
    \ returns false, because invalid file name:\n  -- a\n  -- b\n  -- Given 'a_b.exe_c.txt',\
    \ returns false, because invalid file name:\n  -- a\n  -- b\n  -- Given 'a_b.exe_c.txt_',\
    \ returns false, because invalid file name:\n  -- a\n  -- b\n  return string.find(file_name,\
    \ \"^.[^%.]\", 1, 'right')==0 and string.find(file_name, \"^[%.].*$\", 1, 'right')==0\
    \ and string.find(file_name, \"^[%.][^%.]\", 1, 'left')==0 and string.find(file_name,\
    \ \"^[^%.].*$\", 1, 'left')==0 and string.find(file_name, \"^[^%.]\", 1, 'left')==0\n\
    end", "    -- Checks the file name.\n    return file_name:match('[0-9][0-9][0-9]%.[^.]+%[aA|Zz]')\
    \ ~= nil\nend", "    \n    -- The file name is valid if the following conditions\
    \ are met:\n    --   1) There should not be more than three digits ('0'-'9') in\
    \ the file name.\n    --   2) The file name contains exactly one dot '.'\n   \
    \ --   3) The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    --       the latin alphabet ('a'-'z' and 'A'-'Z').\n   \
    \ --   4) The substring after the dot should be one of these: ['txt', 'exe', 'dll']"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
