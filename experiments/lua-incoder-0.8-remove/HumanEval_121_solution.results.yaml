language: lua
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst[1] == nil then\n    return 0\n  elseif lst[2] == nil then\n    return\
    \ lst[1]\n  else\n    return solution(lst[1]) + solution(lst[2])\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ruhocc1.lua:8:\
    \ attempt to index a number value (local 'lst')\nstack traceback:\n\t/tmp/tmp9ruhocc1.lua:8:\
    \ in upvalue 'solution'\n\t/tmp/tmp9ruhocc1.lua:13: in local 'candidate'\n\t/tmp/tmp9ruhocc1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  assert(lst~=nil, \"Solution expects a list as input\")\n  local sum = 0\n \
    \ local pos = 0\n  local is_even = false\n  for i=1,#lst do\n    if lst[i]~=nil\
    \ then\n      if is_even then\n        sum = sum + lst[i]\n      else\n      \
    \  if lst[i] % 2 ~= 0 then\n          sum = sum + lst[i]\n        end\n      end\n\
    \      is_even = not is_even\n    end\n    if i%2==0 then\n      pos = i\n   \
    \   break\n    end\n  end\n  return sum\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the first n positive integers such that sum of the first\
    \ n natural numbers is equal to the given number. For example, the sum of 51,\
    \ 59, and 74 is 97.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlbvmvcs.lua:30: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst[1] == nil then\n        return 0\n    else\n        local odd = 0\n\
    \        local even = 0\n        local total = 0\n        for i = 2, #lst do\n\
    \            if lst[i] % 2 == 0 then\n                even = even + lst[i]\n \
    \           elseif lst[i] % 2 == 1 then\n                odd = odd + lst[i]\n\
    \            end\n            total = total + lst[i]\n        end\n        return\
    \ total - even + odd\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthxv5niw.lua:29:\
    \ expected: 12, actual: 16\nstack traceback:\n\t/tmp/tmpthxv5niw.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- base case: if the list is empty, return the empty list\n  if #lst == 0 then\
    \ return [] end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfno6n7s8.lua:9: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0 \n\tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 0 then\n\t\t\t\
    sum = sum + v \n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o23lq7x.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp4o23lq7x.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst .. _.reduce(lst, function(sum, v)\n        return sum + v -- odd\
    \ elements in even positions\n    end, 0) -- sum of sum of odd elements\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb3v2evkn.lua:8:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpb3v2evkn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpb3v2evkn.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst <= 1 then return 0 end\n  if lst[1] <= 1 then return 0 end\n  return\
    \ lst[1] + solution(lst[2:end])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4h6ssj8.lua:10: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then\n        return nil\n    end\n    local even = lst:sub(1,(#lst-1)/2)\n\
    \    local odd = lst:sub((#lst-1)/2)\n    return even:sum{function(x,y)\n    \
    \    return math.abs(x - y) == 1 and math.abs(y - 2*y) == 0\n    end}+odd:sum{function(x,y)\n\
    \        return math.abs(x - y) == 1 and math.abs(y - 2*y) == 1\n    end}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzc8_nsw.lua:11:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpwzc8_nsw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwzc8_nsw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   if lst[1] == nil then\n      return nil\n   end\n   return lst[1] + solution(lst\
    \ [2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp01b1c4wz.lua:11: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local total = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n\
    \            total = total + lst[i]\n        end\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox_1wncq.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpox_1wncq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i = 2, #lst do\n\t\tif ((lst[i] % 2 == 0) and (lst[i] >\
    \ lst[i-2])) then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbf23o0nx.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbf23o0nx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbf23o0nx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll359jqo.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpll359jqo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst <= 0 then\n    return 0\n  end\n  local sum = 0 \n  local counter =\
    \ 0 \n  for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\n\
    \      counter = counter + 1 \n    end\n  end\n  if counter % 2 == 0 then\n  \
    \  return sum\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7m1hg1p.lua:29:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmps7m1hg1p.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local evens = lst:sub(1,lst:len() ):filter(function(n)\n    return n%2 == 1\n\
    \  end)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpejwbsfve.lua:24: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyusa9ip.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpbyusa9ip.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst == nil then return 0 end\n  local result = 0, lst[2]\n  local j = 1\n\
    \  for i in lst:gmatch(\"..*\") do\n    if i % 2 == 0 then \n      if j < 2 then\
    \ \n        result = result + i \n      else \n        result = result + lst[j\
    \ - 1] \n      end\n      j = j + 1 \n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemx5o8b_.lua:11:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpemx5o8b_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpemx5o8b_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:gsub(\"^%d%d+$\", function(x) return x%2 ~= 0 and x:sub(1,2) or\
    \ x end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6ljucai.lua:8:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpk6ljucai.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpk6ljucai.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \treturn lst:select( function(x) \n\t\treturn x%2 == 1 and x or 0 \n\tend):sum()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwijmpcnv.lua:8:\
    \ attempt to call a nil value (method 'select')\nstack traceback:\n\t/tmp/tmpwijmpcnv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwijmpcnv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return math.sum(lst:gsub('%d%d', '%d'):gsub('%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d', '%d%d'):gsub('%d%d',\
    \ '%d%d'):gsub('%d%d\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp90q4vf4f.lua:8: unfinished string near ''''%d%d''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    \n    for i = 1, #lst, 1 do\n        if i % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    \n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60x52_n0.lua:22:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp60x52_n0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:reduce(function (acc, x)\n    return acc + x%2 and x%2 or acc\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppag6j19g.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmppag6j19g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmppag6j19g.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 2, #lst do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nprint(solution([5, 8, 7,\
    \ 1])) -- 12\nprint(solution([3, 3, 3, 3, 3])) -- 9\n</cell>\n<text>\nQuestion\
    \ 10\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7pk8sgmw.lua:16: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then\n        return 0\n    end\n    local sum = 0\n    for\
    \ i = 1,#lst-1 do\n        if ((i-1) % 2) == 0 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26dbrhcr.lua:24:\
    \ expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmp26dbrhcr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst:sub(i,i) % 2 ~= 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9c4zike1.lua:10:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp9c4zike1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9c4zike1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1,#lst,2 do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s03029o.lua:20:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp5s03029o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then return 0 end\n    local oddSum = 0\n    local evenSum\
    \ = 0\n    for i = 1,#lst,1 do\n        if i ~= (lst:sub(i,i)/2) then\n      \
    \      oddSum = oddSum + lst[i]\n        else\n            evenSum = evenSum +\
    \ lst[i]\n        end\n    end\n    return oddSum + evenSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_lt_hpw.lua:12:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp6_lt_hpw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6_lt_hpw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0 \n    for i=1,#lst do\n        if lst[i]%2==1 then\n      \
    \      sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw1nelul.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpfw1nelul.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Your code here\n  if lst == nil then return nil end\n  local sum = 0\n \
    \ for i=1,#lst,1 do\n    if i%2 == 1 then\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvy7x1z6l.lua:24:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpvy7x1z6l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i=1,#lst do \n        if i % 2 == 0 then \n      \
    \      sum = sum + lst[i] \n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghzeljbm.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpghzeljbm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        if lst[i] % 2 == 1 then\n   \
    \         sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolanorvo.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpolanorvo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:filter(function(x)\n            return x%2==1 and x~=lst[#lst]\n\
    \        end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8qx56g8.lua:8:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmp_8qx56g8.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_8qx56g8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tif lst == nil then return 0 end\n\tlocal even, odd = 0, 1\n\tfor _, x in pairs(lst)\
    \ do \n\t\tif x % 2 == 0 then \n\t\t\teven = even + x \n\t\telse \n\t\t\todd =\
    \ odd + x \n\t\tend \n\tend \n\treturn even + odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirc4jgah.lua:23:\
    \ expected: 12, actual: 22\nstack traceback:\n\t/tmp/tmpirc4jgah.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code in whatever way you like\n  return 0 -- Replace this line\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zc7ubvp.lua:15:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp2zc7ubvp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Write your code in JavaScript (for loops, recursion, etc).\n\t-- Start by\
    \ using the map function to return a list of all the odd numbers in your list.\n\
    \t-- Next, find the sum of the odd numbers using filter and reduce\n\t-- Finally,\
    \ return the result\n\treturn lst:map(function (n)\n\t\treturn math.floor(n/2)\n\
    \t):filter(function(n) return n % 2 == 1):reduce(function(a, b) \n\t\treturn a\
    \ + b\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4o6oq1hv.lua:14: ''end'' expected (to close ''function'' at
    line 12) near '')''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  \n  local result = 0\n  for i = 1, lst:len()\
    \ do\n    if i % 2 ~= 0 then \n      result = result + lst[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgv9bi2i.lua:8:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpxgv9bi2i.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxgv9bi2i.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local evens, odds\n  for i = 1,#lst,2 do\n    if lst[i]%2==1 then\n      table.insert(evens,\
    \ lst[i])\n    else\n      table.insert(odds, lst[i])\n    end\n  end\n  return\
    \ table.unpack(table.sort(odds))+table.unpack(table.sort(evens))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp523d34o9.lua:11:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp523d34o9.lua:11: in local 'candidate'\n\t/tmp/tmp523d34o9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    local n = #lst\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnm9kbjj.lua:21:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmppnm9kbjj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t\n\t-- base case\n\tif not lst then return 0 end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpie3a5n_k.lua:24: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if not lst[1] then return end\n    if #lst < 2 then return 0 end\n    local\
    \ total = 0\n    for i, v in pairs(lst) do\n        if i % 2 == 1 then total =\
    \ total + v end\n    end\n    return total\nend\n</cell>\n<text>\nExercise 12:\
    \ Part 1\nWrite a recursive function called sum_odd_positions that will accept\
    \ a list of integers and return the sum of all of the odd positions within the\
    \ list.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3r1da6nn.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst[1] ~= nil then\n    local sum = 0\n    local i = 0\n    while i < lst\
    \ do\n      if lst[i] % 2 == 1 then\n        sum = sum + lst[i]\n        lst[i]\
    \ = nil\n      end\n      i = i + 1\n    end\n    return sum\n  else\n    return\
    \ 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ibj8goy.lua:11:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmp1ibj8goy.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1ibj8goy.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local n = 0\n    for i = 1, #lst do \n        if lst[i]%2 ~= 0 and lst[i]%2\
    \ == 1 then\n            n=n+lst[i]\n        end\n    end\n    return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dvz659t.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp4dvz659t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 1\n    for _, v in pairs(lst) do\n        if v % 2 == 0 then\n\
    \            local even = lst[#lst]\n            local index = #lst - v\n    \
    \        if index ~= nil then\n                even = lst[index]\n           \
    \ end\n            result = result + even\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpisk5snqw.lua:16:\
    \ attempt to perform arithmetic on a nil value (local 'even')\nstack traceback:\n\
    \t/tmp/tmpisk5snqw.lua:16: in local 'candidate'\n\t/tmp/tmpisk5snqw.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local oddSum = 0\n    for index, value in pairs(lst) do\n        if index%2\
    \ == 1 then\n            oddSum = oddSum + value\n        end\n    end\n    return\
    \ oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowui2kiz.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpowui2kiz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt68fssea.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmpt68fssea.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 ~= 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4dwqmma.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpx4dwqmma.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:map(function(a) return a + a / 2 end):filter(function(a) return\
    \ a % 2 == 1 end):sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7obtgr9.lua:8:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpe7obtgr9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpe7obtgr9.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local even = 0\n    local total = 0\n    for i = 2, #lst do\n        if lst[i]%2\
    \ == 1 then\n            even = even + 1\n            total = total + lst[i]\n\
    \        end\n    end\n    return total + even\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yhdfqpz.lua:22:\
    \ expected: 12, actual: 10\nstack traceback:\n\t/tmp/tmp1yhdfqpz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if not lst or #lst <= 0 then\n        return 0\n    end\n    if lst[#lst]\
    \ == 2 then\n        return lst[1] + lst[3]\n    end\n    local even = lst[#lst]\n\
    \    local odd = 0\n    for i = 1, #lst do\n        if lst[i] % 2 ~= 0 then\n\
    \            odd = odd + lst[i]\n        end\n        if lst[i] % 2 == 0 then\n\
    \            even = even - lst[i]\n        end\n    end\n    return even + odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxkljxyw.lua:30:\
    \ expected: 12, actual: 6\nstack traceback:\n\t/tmp/tmppxkljxyw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i in lst:gmatch(\"%d*%d%d*\") do\n\t\tsum = sum + tonumber(i)\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7yhbu06i.lua:9:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp7yhbu06i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7yhbu06i.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nPart II. Day 1: Cooking Out the New York Times (Day 1: The New York Times)\n\
    This assignment is about finding out what you need to cook the New York Times\
    \ again for twenty hours. You will do so by first choosing a date for the New\
    \ York Times appointment (any weekday or weekend should be fine), then cooking\
    \ twenty hours each morning until it is over. The appointment is open from 8AM\
    \ Monday through 5AM Friday and closed at 5PM. You can choose from any of the\
    \ many pre-cooked recipes you can find at your local newspaper or website. Your\
    \ goal is to cook the next twenty hours and tell the people that need it.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphffcm5z8.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 0
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   if lst == nil then return nil end\n   if #lst == 0 then return 0 end\n   local\
    \ sum = 0\n   for i = 1, #lst, 2 do\n      if lst[i] % 2 == 1 then sum = sum +\
    \ lst[i] end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst == nil then\n    return 0\n  end\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydnx0wk6.lua:23:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpydnx0wk6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 0
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i=1,#lst,2 do\n    if lst[i] % 2 ~= 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        if i % 2 == 0 then\n        \
    \    sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburz6vcs.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpburz6vcs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst == 0 then return nil end\n  if lst[1] % 2 = 0 then return lst[1] end\n\
    \  return lst[1] + solution(lst:sublist(2))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp9nnmh22.lua:9: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   -- Base Case\n   if #lst == 0 then\n      return 0\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqozy4iqd.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tlocal i = 1\n\twhile i <= #lst do\n\t\tif lst[i] == 3 then\n\
    \t\t\tsum = sum + lst[i-1]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28ckkcwk.lua:22:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp28ckkcwk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0 \n  local i = 1\n  while i <= lst do\n    if lst:imod(i) ~= 0\
    \ then sum = sum + lst:imod(i) \n    end \n    i = i + 1\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2jj6o0z.lua:10:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmp_2jj6o0z.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_2jj6o0z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:gsub(\"^%s*\"):match(\"%-#*[^\\n]*\")\n       :gsub(\"(%-#*)\"):gsub(\"\
    %1+\"):gsub(\"^%1+\"):gsub(\"%1+$\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv3vjs16t.lua:8:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpv3vjs16t.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpv3vjs16t.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal odd = 0\n\tfor index, value in pairs(lst) do\n\t\tif index % 2 == 0 then\n\
    \t\t\tif value % 2 ~= 0 then\n\t\t\t\todd = odd + value\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic90mt4w.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpic90mt4w.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if ((i-1) % 2) == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3ceopay.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpl3ceopay.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tif lst[1] == nil then\n\t\treturn 0\n\telseif lst[2] == nil then\n\t\treturn\
    \ lst[1] + lst[2]\n\telse\n\t\treturn solution(lst[1]) + solution(lst[2]) + lst[3]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15it5jua.lua:8:\
    \ attempt to index a number value (local 'lst')\nstack traceback:\n\t/tmp/tmp15it5jua.lua:8:\
    \ in upvalue 'solution'\n\t/tmp/tmp15it5jua.lua:13: in local 'candidate'\n\t/tmp/tmp15it5jua.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local even, odd\n    local sum = 0\n    local i = 1\n    while i < #lst do\n\
    \        local val = lst[i]\n        if val % 2 == 0 then\n            sum = sum\
    \ + val\n            even = even:add(val)\n        elseif val % 2 == 1 then\n\
    \            sum = sum - val\n            odd = odd:sub(val)\n        end\n  \
    \      i = i + 1\n    end\n    return sum - #even * #odd\nend\n</cell>\n<cell>\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8ig4z4q5.lua:24: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = {}\n    for i = 1, #lst do\n        if i % 2 == 0 then\n \
    \           table.insert(result, lst[i])\n        end\n    end\n    return table.sum(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq784jic3.lua:14:\
    \ attempt to call a nil value (field 'sum')\nstack traceback:\n\t/tmp/tmpq784jic3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpq784jic3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local total = 0\n  for i = 1, lst[1] do\n    if lst[i] % 2 == 1 then\n    \
    \  total = total + lst[i]\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1crf6d5m.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1crf6d5m.lua:10: in local 'candidate'\n\t/tmp/tmp1crf6d5m.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:reduce(function(s, n)\n        if n % 2 == 0 then\n          \
    \  return s + n\n        else\n            return s\n        end\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn843h3oh.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpn843h3oh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpn843h3oh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  local count = 0\n  for i = 1,#lst do \n    if i > 1 and lst[i]\
    \ % 2 == 0 then\n      if count < #lst then \n        sum = sum + lst[i]\n   \
    \     count = count + 1\n      else\n        count = count + 1\n      end\n  \
    \  end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm1za27i.lua:26:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpdm1za27i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- base case\n  if #lst == 0 then return 0 end\n  -- get last element in list\n\
    \  local last_elem = lst[#lst]\n  -- get first element in list\n  local first_elem\
    \ = lst[1]\n  -- return sum of all odd elements\n  return first_elem + last_elem\
    \ + sum (lst[#lst-1]:gmatch('%d*%d'))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnzt6zs0d.lua:15:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpnzt6zs0d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpnzt6zs0d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for _, v in pairs(lst) do\n    sum = sum + v % 2 == 1 and\
    \ v or 0\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdbgght2.lua:18:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpkdbgght2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst[#lst] * (lst[#lst] % 2 + 1) + (lst[#lst] % 2 + 1) * (lst[#lst] %\
    \ 2)\nend\n</cell>\n<text>\nQ10. Given a binary tree, return the inorder traversal\
    \ of its nodes' values.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppfykiaze.lua:10: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst == nil then return 0 end\n  local sum = 0\n  local count = 0\n  for\
    \ i = 1, #lst do\n    if i % 2 == 1 then sum = sum + lst[i] end\n    if i % 2\
    \ == 0 then count = count + 1 end\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5esyr4n.lua:21:\
    \ expected: 12, actual: 6.0\nstack traceback:\n\t/tmp/tmpy5esyr4n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code here.\n  local odd = {}\n  for _, v in pairs(lst) do table.insert(odd,\
    \ v) end\n  local even = {}\n  table.sort(odd)\n  for _, v in pairs(odd) do table.insert(even,\
    \ v) end\n  local result = 0\n  table.sort(even)\n  for _, v in pairs(even) do\
    \ result = result + v end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_edw8gd.lua:23:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpb_edw8gd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- write your code in Python 2.7\n    -- return sum([lst[i+i] for i in range(0,len(lst),\
    \ 2) if lst[i]%2==1])\n    -- return sum(filter(lambda x:x%2==1, lst))\n    return\
    \ sum(map(lambda x:x%2==1, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4c8aqett.lua:11: '')'' expected near ''x''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evenSum = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 0\
    \ then\n            evenSum = evenSum + v\n        end\n    end\n    return evenSum\n\
    end\n</code>\n<|/ a tags=lua,algorithm dscore=0 |>\n<| c |>\nThank you for the\
    \ effort! It will be helpful for me for future problems that I post on here.\n\
    <|/ c |>\n<| a tags=lua,algorithm |>\nI solved this challenge using two nested\
    \ for loops:\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqd7zlj9.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local n = #lst\n    local sum = 0\n    for i = 1, n do\n        if i % 2\
    \ == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3jdho6i.lua:23:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpl3jdho6i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal oddsum = 0\n\tfor i,v in pairs(lst) do\n\t\tif(i%2 == 1) then\n\t\t\t\
    oddsum = oddsum + v\n\t\tend\n\tend\n\treturn oddsum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b55ojy_.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp8b55ojy_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst:len() == 0 then return 0 end\n  if lst:len() == 1 then return lst:get(0)\
    \ end\n  if lst:len() % 2 == 0 then return lst:get(1) end\n  local even = solution(lst:sub(1,\
    \ lst:len() - 2))\n  local odd = lst:get(lst:len() - 1)\n  local sum = 0\n  for\
    \ i = 1, lst:len() do\n    if odd == even then sum = sum + odd else sum = sum\
    \ + odd - even end\n    if odd - even > 0 and lst:get(i + 2) % 2 == 0 then \n\
    \      sum = sum + odd - even \n    end\n    odd = lst:get(i + 1)\n    even =\
    \ even\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3fdm0bjl.lua:8:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp3fdm0bjl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3fdm0bjl.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evens_sum = 0\n    for _, v in ipairs(lst) do\n        if v %2 == 0\
    \ then\n            evens_sum = evens_sum + v\n        end\n    end\n    return\
    \ evens_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzayydsy.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmplzayydsy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst == nil then\n    return 0\n  else\n    return lst[1] + lst[2] + lst[3]\
    \ + (lst[4] + lst[5])/2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpger7ypg7.lua:11:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpger7ypg7.lua:11: in local 'candidate'\n\t/tmp/tmpger7ypg7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local sum = 0\n   for _, v in pairs(lst) do\n      if v % 2 == 1 then\n  \
    \       sum = sum + v\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66m7b8xa.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp66m7b8xa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return reduce(fn, lst, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv203a8uj.lua:8:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpv203a8uj.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpv203a8uj.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local sum = 0\n   for i, v in ipairs(lst) do\n      if v % 2 == 1 then\n \
    \        sum = sum + v\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4n5qhs.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpgp4n5qhs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if (i % 2) == 0 then\n   \
    \         sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcglqqh4.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpkcglqqh4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(lst) .. \" \" .. solution(lst:sub(1,end-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8hus3hg5.lua:8: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal result = 0\n\tfor _, elem in pairs(lst) do\n\t\tresult = result + math.floor((elem\
    \ % 2) / 2)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuo1j9cr.lua:18:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpsuo1j9cr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(lst):select(function(x)\n      if x == 1 then return 1 end\n   \
    \   if x:mod(2) == 0 then return 1 end\n      return 0\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprza1i1lf.lua:8:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmprza1i1lf.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmprza1i1lf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:filter(function(x, i)\n    return i ~= #lst\n  and x % 2 ~= 0\n\
    \  and x ~= lst[i]\n  and x ~= lst[i - 1] end):reduce(function(x,y)\n    return\
    \ x + y\n  end)\nend\n</cell>\n<text>\nProblem 10\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm2rbnhum.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local odds = Set{}\n  for i,v in ipairs(lst) do\n    if v %2 == 1 then\n  \
    \    table.insert(odds, v)\n    end\n  end\n  return sum( unpack( map(function(x)\
    \ return odds[x] end, odds) ) )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvw1ma81p.lua:8:\
    \ attempt to call a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmpvw1ma81p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpvw1ma81p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local evens = lst:filter(function(x) return x % 2 == 0 end)\n  local odds =\
    \ lst:filter(function(x) return x % 2 ~= 0 end)\n  return evens:reduce(function(acc,\
    \ x) return acc + x end) + odds:reduce(function(acc, x) return acc + x end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqgxivmz.lua:8:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpeqgxivmz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpeqgxivmz.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:filter(function(x) return x:sub(1, 2) ~= nil end):sum()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4reyp0lo.lua:8:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmp4reyp0lo.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4reyp0lo.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local ans = 0\n    for _, val in ipairs(lst) do\n        if val % 2 ~= 0\
    \ then\n            ans = ans + val\n        end\n    end\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpae2r5swr.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpae2r5swr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evens, odds = lst[1], lst[2:]\n    local total = 0\n    for i=1,#odds\
    \ do\n        if evens[i] then\n            total = total + odds[i]\n        end\n\
    \    end\n    return total\nend\n</code>\n<|/ a dscore=2 tags=lua |>\n<| a |>\n\
    Here is my solution.\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprti8b0nj.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst == 0 then\n    return 0 \n  else\n    return lst[#lst] * 3 + (lst[1]\
    \ % 2 == 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeis99omp.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpeis99omp.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpeis99omp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for _, elem in ipairs(lst) do\n        if elem % 2 ==\
    \ 0 then\n            sum = sum + elem\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyxnzjfd.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpbyxnzjfd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local i, sum, j=0, 0, 1\n   for i, v in ipairs(lst) do\n      if v then \n\
    \         sum = sum + v\n         j=j+1\n      else\n         sum = sum + j\n\
    \         j=1\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w73k1sp.lua:24:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp5w73k1sp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code here.\n  local sum = 0 \n  for i, v in ipairs(lst) do\n\
    \    if v%2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp920iyfl9.lua:21:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp920iyfl9.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst < 2 then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8_oe4mwe.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then\n        return nil\n    end\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            sum = sum + lst[i]\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj779lh6.lua:25:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpgj779lh6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evenSum = 0\n    for i = 1, #lst, 1 do \n        if lst[i] == 1 then\
    \ evenSum = evenSum + lst[i] end\n    end\n    return evenSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02sh9m7p.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp02sh9m7p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:reduce(function(result, val)\n    if val % 2 == 0 then\n      result\
    \ = result + val\n    end\n    return result\n  end, 0) \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkn1ocpk.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpzkn1ocpk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzkn1ocpk.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Your code here\n\treturn sum(filter(function(e) return e % 2 == 1 end, lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0l3dkt3.lua:9:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpa0l3dkt3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa0l3dkt3.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tlocal odds = #lst%2\n\tfor i = 1, odds do\n\t\tsum = sum +\
    \ lst[i]\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshliagw8.lua:19:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpshliagw8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- base case\n  if #lst < 1 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgdtqrlof.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0 \n  for i = 2, #lst do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pbhgry2.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmp3pbhgry2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst==nil then return nil end\n  local sum=0\n  for i=1, #lst do\n    if\
    \ i%2==0 then\n      sum=sum+lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3c59u4g.lua:21:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpg3c59u4g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local oddSum = 0\n  for i=1,#lst do \n    if i % 2 ~= 0 then\n      oddSum\
    \ = oddSum + lst[i]\n    end\n  end\n  return oddSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvurcea0d.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpvurcea0d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n\
    \            result = result + lst[i]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox266mrd.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpox266mrd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst[1] == nil then return 0 end\n    local sum = 0\n    for i = 2, #lst\
    \ do\n        if lst[i] == lst.[i] then\n            sum = sum + lst.[i]\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp18584160.lua:11: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal s = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v % 2 == 1 then\n\t\t\ts =\
    \ s + v\n\t\tend\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqruxlmhs.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpqruxlmhs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst[1] == nil then return 0 end\n  local even = 0\n  local odd = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == 2 then\n      even = even + lst[i]\n    else\n\
    \      odd = odd + lst[i]\n    end\n  end\n  return even + odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgy62xl6.lua:24:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpsgy62xl6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Base cases\n  if #lst < 1 then return 0 end\n  if #lst == 1 then return\
    \ lst[1] end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiy7sakne.lua:24: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   -- Base case\n   if lst[1] == nil then\n      return nil\n   end\n   \n  \
    \ -- Find the first even number\n   local even = lst[1]\n   local first = 2\n\
    \   -- Find the first odd number\n   for i = 2, #lst do\n      if lst[i] ~= even\
    \ then\n         even = lst[i]\n         first = i\n      end\n   end\n   -- Find\
    \ the sum of odd numbers after the found even number\n   return even + sum(lst[first+2:end])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppkzy6iu1.lua:24: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local odd_count = 0\n  local even_count = 0\n  for _, x in ipairs(lst) do\n\
    \    if x%2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4cyhatn.lua:30: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- base case: if the list is empty, return 0\n  if #lst == 0 then\n    return\
    \ 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbfokpoza.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for _,v in pairs(lst) do\n    sum = sum + v % 2\n  end\n \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijb6tozc.lua:18:\
    \ expected: 12, actual: 3\nstack traceback:\n\t/tmp/tmpijb6tozc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1,#lst do\n    if i % 2 == 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm32cyhmz.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpm32cyhmz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local sum = 0\n   for i = 1, #lst do\n      if i mod 2 == 0 then\n       \
    \  sum = sum + lst[i]\n      end\n   end\n   return sum\nend\n</cell>\n<code language=julia-0.6>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<text>\nProblem 4\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps2ca2jp6.lua:10: ''then'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i > 1 and lst[i] % 2 == 1 and lst[i\
    \ - 1] % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_9e9thj.lua:20:\
    \ expected: 12, actual: 7\nstack traceback:\n\t/tmp/tmp7_9e9thj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst <= 0 then\n    return 0\n  end\n  local even = 0\n  local odd = 0\n\
    \  for i=1, #lst do\n    local value = lst[i]\n    if value % 2 == 0 then\n  \
    \    even = even + value\n    else\n      odd = odd + value\n    end\n  end\n\
    \  return even + odd\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkavvwixd.lua:23: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local oddSum = 0\n    for _, v in ipairs(lst) do\n        oddSum = oddSum\
    \ + math.floor(v / 2)\n    end\n    return oddSum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuh2ycx.lua:18:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpehuh2ycx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1,#lst do\n    if i % 2 == 0 then\n      sum = sum\
    \ + lst[i]\n    end\n  end\n  return sum\nend\n</cell>\n<cell>\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqdcsv0yx.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum=0\n    for i=1,#lst do\n        if lst[i]%2 ~= 0 then\n       \
    \     sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4uc86v8.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpc4uc86v8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  local index = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      sum = sum + lst[index]\n      index = index + 1\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilkrl2gc.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpilkrl2gc.lua:12: in local 'candidate'\n\t/tmp/tmpilkrl2gc.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst[1] == nil then\n        return 0\n    end\n    local sum = 0\n   \
    \ for i=1,#lst,2 do\n        if lst[i] % 2 == 0 then\n            sum = sum +\
    \ lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nGiven a\
    \ non-empty list of words, return the total number of words in the list. Words\
    \ are separated by whitespace. \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk2clb5yb.lua:19: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local oddsum = 0\n    for _, v in ipairs(lst) do\n        if v ~= 1 then\n\
    \            oddsum = oddsum + v\n        end\n    end\n    return oddsum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrvnkio2.lua:20:\
    \ expected: 12, actual: 20\nstack traceback:\n\t/tmp/tmpgrvnkio2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  assert(lst, \"Input list must not be empty\")\n  local result = 0\n  for i\
    \ = 1, #lst do\n    -- We need to add odd elements to get to even positions.\n\
    \    -- A bit hacky, but does the job.\n    local j = math.floor((i - 1) / 2)\n\
    \    if j > 0 and lst[i] % 2 ~= 0 then\n      result = result + lst[j]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfz2mgpl.lua:24:\
    \ expected: 12, actual: 10\nstack traceback:\n\t/tmp/tmpvfz2mgpl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for _, v in pairs(lst) do\n    if v:mod(2):~= 0 then\n   \
    \   sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppgauwgxv.lua:10: <name> expected near ''~=''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Base case: empty list\n  if lst[1] == nil then return 0 end\n  \n  -- Base\
    \ case: odd number of elements in a list\n  if #lst % 2 == 1 then \n    return\
    \ lst[#lst]+solution(lst[#lst+1:])\n  end\n  \n  -- Use recursion to find the\
    \ sum of all odd elements in even positions in the list.\n  return solution(lst[#lst+1:])\
    \ + lst[#lst]*(lst[#lst+1]%2 ~= 1)\nend\n</cell>\n<text>\nTest your Code\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpous0ppzt.lua:13: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tif lst==nil then\n\t\treturn 0\n\tend\n\tlocal evenSum = 0\n\tfor _, x in pairs(lst)\
    \ do\n\t\tif x%2==0 then\n\t\t\tevenSum = evenSum + x\n\t\tend\n\tend\n\treturn\
    \ evenSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9g1gg0u.lua:23:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpg9g1gg0u.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evenSum = 0\n    for i=1,#lst do\n        if lst[i]%2 ~= 0 then\n \
    \           evenSum = evenSum + lst[i]\n        end\n    end\n    return evenSum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ylpxrs0.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp6ylpxrs0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tif lst == nil then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\tlocal n = #lst\n\
    \tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a7ewgr_.lua:24:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp3a7ewgr_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst, 1 do\n\t\tif ((i -1) % 2) == 0 then\n\t\t\t\
    sum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad4cv65y.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpad4cv65y.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst == 0 then\n    return 0\n  else\n    return lst[#lst] * 3 + lst[1]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4nu2iuw.lua:18:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpu4nu2iuw.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\t\n\t-- The first half of the list is even, so \n\t-- we only\
    \ need to check the odd elements.\n\t-- \n\t-- The second half of the list is\
    \ odd,\n\t-- so we need to check the even elements.\n\tfor _,v in ipairs(lst)\
    \ do\n\t\tif v%2 == 1 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\t\n\treturn\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbrdfs3n.lua:27:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpjbrdfs3n.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:reduce(function(acc, num)\n        if num % 2 == 1 then\n    \
    \        acc = acc + num\n        end\n        return acc\n    end, 0) \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y3prtme.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmp3y3prtme.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3y3prtme.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0 \n    for i = 1, #lst do\n        if math.fmod(i, 2) == 1 then\n\
    \            sum = sum + lst[i] \n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplja3qnfv.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmplja3qnfv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local s = lst[1]\n    for i = 2, #lst do\n        s = (s + lst[i]) %  100\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghw2h6xa.lua:18:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpghw2h6xa.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- write your code in JavaScript (or the Haskell equivalent of your favorite\
    \ functional language) here \n  local total = 0\n  for i = 1, #lst do \n    total\
    \ = total + lst[i]\n    if i %2 ==0 then\n      total = total + lst[#lst]\n  \
    \  end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukgbit0x.lua:22:\
    \ expected: 12, actual: 23\nstack traceback:\n\t/tmp/tmpukgbit0x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 ~= 0 then\n     \
    \       sum = sum + lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nD - Cumulative sum\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaqghadm0.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code here.\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uknlg30.lua:15:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp6uknlg30.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  assert(lst~=nil, \"solution expects a non-nil argument\")\n  \n  if #lst==0\
    \ then \n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpir213km0.lua:26: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local function sum(l)\n        local sum = 0\n        for _,v in pairs(l)\
    \ do sum=sum+v end\n        return sum\n    end\n    return sum(lst:sub(1,lst:len()-1)):mod(2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd19l207r.lua:13:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpd19l207r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd19l207r.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nprint(solution([5,\
    \ 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvzce8tlo.lua:16: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Base case -- If there are no even elements, just return 0\n  if #lst ==\
    \ 0 then return 0 end\n  -- For each element, add it to the sum of all of its\
    \ neighbors\n  -- (ie, the sum of the two elements immediately in front of it).\n\
    \  local sum_of_odds = 0\n  for i = 0, #lst - 1 do\n    if i > 1 then\n      --\
    \ Add the two elements to the sum\n      sum_of_odds = sum_of_odds + lst[i] +\
    \ lst[i-1]\n    end\n  end\n  return sum_of_odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwkwo787.lua:25:\
    \ expected: 12, actual: 28\nstack traceback:\n\t/tmp/tmpqwkwo787.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n    end\n  end\n\
    \  return even + odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9pvi6z5.lua:23:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpd9pvi6z5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local even = 1\n  local odd = 0\n  local total = 0\n  for i = 1, #lst do\n\
    \    if i % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd\
    \ + lst[i]\n    end\n  end\n  total = even + odd\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc95qql26.lua:25:\
    \ expected: 12, actual: 22\nstack traceback:\n\t/tmp/tmpc95qql26.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local evensum = 0\n    for i=1,#lst do\n        if lst[i]%2 ~= 0 then\n \
    \           evensum = evensum + lst[i]\n        end\n    end\n    return evensum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucig1oys.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpucig1oys.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\t\n\tfor i=1,#lst do\n\t\tif i % 2 == 0 then\n\t\t\tsum = sum\
    \ + lst[i]\n\t\tend\n\tend\n\t\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49ff2k_k.lua:22:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp49ff2k_k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   -- Write the code here\n    local sum = 0\n    for i = 1, #lst do\n      \
    \  if i % 2 ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx1dm6mi.lua:23:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmplx1dm6mi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if ((i -1) % 2) == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxasdu5g.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpnxasdu5g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Base case: if the list is empty, return zero.\n\tif not lst then return 0\
    \ end\n\t\n\t-- Use an auxiliary variable to track the number in even positions.\n\
    \tlocal n = 0\n\t\n\tfor i, v in ipairs(lst) do\n\t\t-- Increment the variable\
    \ for odd positions.\n\t\tif i%2 == 1 then\n\t\t\tn = n + v\n\t\tend\n\tend\n\t\
    \n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5m0_m5m.lua:29:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpv5m0_m5m.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:gsub(\"(%d+)\", function(f) \n    return tonumber(f:match(\"(%d+)\"\
    ))  + tonumber(f:match(\"(%d+)\")) \n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87r5jhxf.lua:8:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmp87r5jhxf.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp87r5jhxf.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if v mod 2 == 0 then\n   \
    \   sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqm2olxtz.lua:10: ''then'' expected near ''mod''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for _, v in pairs(lst) do\n        if v%2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwat5024.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmppwat5024.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Base Case\n\tif lst[1] == nil then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgmnn4h2p.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- base case: if the list is empty, return zero\n  if not lst then\n    return\
    \ 0\n  -- base case: if the list is one element, return it\n  elseif #lst == 1\
    \ then\n    return lst[1]\n  -- recursive case: if we have an even number of elements,\n\
    \  -- the sum will be the sum of two pairs of numbers in the list\n  elseif #lst\
    \ % 2 == 0 then\n    return solution(lst[#lst-1:1]) + solution(lst[#lst-2:2])\n\
    \  -- base case: if we have an odd number of elements, then\n  -- the sum will\
    \ be the sum of the odd and even elements of the list\n  else\n    return solution(lst[#lst-1:1])\
    \ + solution(lst[#lst-2:2]) + lst[#lst]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpmytgw6.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then\n        return nil\n    end\n    local res = lst[1]\n\
    \    for i = 2, #lst do\n        if lst[i] ~= nil and lst[i] % 2 == 0 then\n \
    \           res = res + lst[i]\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0gwvvke.lua:23:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpq0gwvvke.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:filter(function(x) return x % 2 == 1 end):reduce(function(total,\
    \ next) total = total + next return total end, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptpapryp5.lua:8:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmptpapryp5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptpapryp5.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local odd = 0\n  for i, value in pairs(lst) do\n    if value % 2 == 1 then\n\
    \      odd = odd + (value * value)\n    end\n  end\n  return odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk76x5nb.lua:20:\
    \ expected: 12, actual: 75\nstack traceback:\n\t/tmp/tmpxk76x5nb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tif #lst == 0 then\n\t\treturn 0\n\telse\n\t\treturn lst[#lst + 1] + solution(lst[1:#lst])\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp896wjezw.lua:11: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for _, v in pairs(lst) do\n        if v % 2 == 1 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cobvqmj.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp3cobvqmj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local ls=lst\n  local total=0\n  for i=1,#ls do\n     if ls[i]%2==1 then total=total+ls[i]\
    \ end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ah_zqaj.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp3ah_zqaj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst[1] == nil or lst[2] == nil then\n    return nil\n  end\n  return lst[1]\
    \ + lst[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2f272a3.lua:17:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpp2f272a3.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Write your code in JavaScript (list comprehension is okay).\n  local sum\
    \ = 0 \n  for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[i]\
    \ \n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6653_su.lua:21:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpd6653_su.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local evensum = 0\n  for i=1,#lst,2 do\n    local j = 1\n    while j<=#lst\
    \ and lst[j] ~= lst[j+1] do\n      j = j+1\n    end\n    if j<#lst then\n    \
    \  evensum = evensum+lst[j]\n    end\n  end\n  return evensum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp292ujlt9.lua:24:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp292ujlt9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz2_vw2b.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpuz2_vw2b.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 1 then\n     \
    \       sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0y1kr5_2.lua:22:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp0y1kr5_2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local evens = #lst - lst:filter((function(x)\n    return x % 2\n  end)) - lst:filter((function(x)\n\
    \    return not (x % 2)\n  end)) - #lst\n  return evens * 2 + lst[evens]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgofjyzw3.lua:8:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpgofjyzw3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgofjyzw3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do \n        if lst[i] % 2 == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep969ci_.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpep969ci_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst>0 then\n    local sum=0\n    local i=1\n    for _,v in pairs(lst) do\n\
    \      sum=sum+(v%2) and 1 or 0\n      if i>=#lst then\n        return sum\n \
    \     end\n      i=i+1\n    end\n  end\nend\n</code>\n<|/ a tags=lua,loops,for-loop\
    \ dscore=1 |>\n<| c |>\nIt would be nice to add an explanation for the code.\n\
    <|/ c |>\n<| c |>\nThis answer is also a great answer because of the comment in\
    \ the code which explains what the code is doing.\n<|/ c |>\n<| a tags=lua,loops,for-loop\
    \ dscore=0 |>\n<code>\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy8e5dmfk.lua:20: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for _, v in ipairs(lst) do\n        if v %2 == 1 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sn8uger.lua:20:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp5sn8uger.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:reduce(function(total, curr)\n    if curr % 2 == 1 then return total\
    \ + curr end\n    return total\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zuurw4z.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmp1zuurw4z.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1zuurw4z.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- Your code here\n    local odd = 0\n    for i = 1, #lst, 2 do\n       \
    \ if lst[i] == lst[i + 1] then\n            odd = odd + lst[i]\n        end\n\
    \    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88x6n4tf.lua:21:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp88x6n4tf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local total = 0\n   for idx, value in ipairs(lst) do \n      if value % 2\
    \ == 0 then\n         total = total + value\n      end\n   end\n   return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4ukikmf.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpf4ukikmf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   -- Write your code here.\n   return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjpr0fvz.lua:15:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmpxjpr0fvz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        if ((i %% 2) == 1) then\n   \
    \         sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplr8msg0t.lua:10: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do \n        if math.mod(i, 2) == 1 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <cell>\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpohxexxyk.lua:16: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst == 0 then return 0 end\n  local n = lst[1]\n  local sum = 0\n  local\
    \ i = 1\n  for i = 2, #lst do\n    if lst[i] % 2 ~= 0 then\n      sum = sum +\
    \ lst[i]\n    end\n  end\n  return sum + n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs7_x_ma.lua:23:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpxs7_x_ma.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tlocal pos = 1\n\tfor i=1, #lst do\n\t\tif pos == 2 then\n\t\
    \t\tsum = sum + lst[i]\n\t\telseif pos % 2 == 0 then\n\t\t\tsum = sum + lst[i]\n\
    \t\tend\n\t\tpos = pos + 1\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0imi4r1.lua:24:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpk0imi4r1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- initialize sum\n  local sum = 0\n  -- Loop through list and test if element\
    \ is even\n  for i=1,#lst do\n    if math.mod(lst[i], 2) == 1 then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry0dilhb.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpry0dilhb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpry0dilhb.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal evens = lst:select( function(a,b)\n\t\tif a % 2 = 0 then return true end\n\
    \tend)\n\tlocal sum = 0\n\tlocal i = 1\n\tfor i=1,#evens do \n\t\tif evens[i]\
    \ % 2 = 0 then sum = sum + evens[i] end\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2xqv4a6e.lua:9: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 1 then sum = sum + lst[i]\
    \ end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6ixkbq2.lua:20:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpo6ixkbq2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if ((i % 2) == 0) then\n \
    \           sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpbgcwg7.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpgpbgcwg7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return lst:filter( function(n)\n        return ((n % 2) == 0) then 1 else\
    \ 0 end\n    ) \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu2csdiki.lua:9: ''end'' expected (to close ''function'' at
    line 8) near ''then''

    '
  stdout: ''
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return lst:reduce(function(sum, num)\n    if num % 2 == 0 then\n      sum =\
    \ sum + num\n    end\n    return sum\n  end)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm9310ncs.lua:8:\
    \ attempt to call a nil value (method 'reduce')\nstack traceback:\n\t/tmp/tmpm9310ncs.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpm9310ncs.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local total = 0\n    local counter = 1\n    for i=1,#lst do\n        if ((counter\
    \ % 2) == 1) then\n            total = total + lst[i]\n        end\n        counter\
    \ = counter + 1\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_ysxpog.lua:24:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpg_ysxpog.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return #lst and sum (lst:sub(1, #lst):map(function(item) return item % 2\
    \ == 1 end ):filter(function(item) return item == 1 end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii9z_e8i.lua:8:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpii9z_e8i.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpii9z_e8i.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then return 0 end\n    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v %2 == 1 then\n            sum = sum + v\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyjrifm.lua:21:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpwnyjrifm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \treturn lst and unpack(lst):gsub('%d%d%d*', function(x)\n\t\treturn x:match('%d*'):sub(2)\n\
    \tend) or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmqf4vao.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgmqf4vao.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpgmqf4vao.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 then\n     \
    \       sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyjj2nd2.lua:20:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbyjj2nd2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if lst == nil then\n        return 0\n    end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphclo0o7d.lua:24: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyusa9ip.lua:20:\
    \ expected: 12, actual: 8\nstack traceback:\n\t/tmp/tmpbyusa9ip.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 0, lst.length - 2 do\n    if (lst[i] % 2) and (lst[i\
    \ + 1] % 2) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphsdexnl.lua:9:\
    \ attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\
    \t/tmp/tmpphsdexnl.lua:9: in local 'candidate'\n\t/tmp/tmpphsdexnl.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal i = 0\n\tlocal s = 0\n\twhile i <= #lst do\n\t\tif lst[i] % 2 == 0 then\n\
    \t\t\ts = s + lst[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8793_yte.lua:11:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp8793_yte.lua:11: in local 'candidate'\n\t/tmp/tmp8793_yte.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if v %% 2 == 1 then\n     \
    \ sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxp8kuxwj.lua:10: unexpected symbol near ''%''

    '
  stdout: ''
  timestamp: 1659823739
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal odds = {}\n\tfor i=1,#lst do\n\t\tif (lst[i]%2)==1 then table.insert(odds,\
    \ lst[i]) end\n\tend\n\treturn table.getn(odds)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffwo5yo0.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpffwo5yo0.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpffwo5yo0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i=1,#lst-1 do\n\t\tif i % 2 == 1 then\n\t\t\tsum = sum\
    \ + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lzr_iqy.lua:21:\
    \ expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmp4lzr_iqy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if #lst == 0 then\n    return 0\n  end\n  local sum = 0 -- initialize the sum\n\
    \  for i = 1, #lst, 1 do -- iterate through the list\n    if i % 2 == 1 then --\
    \ check to see if item is odd\n      sum = sum + lst[i] -- add item to sum\n \
    \   end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizd2cpwl.lua:25:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpizd2cpwl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local odd = 1\n    local sum = 0\n    for i = 1, #lst do \n        if ((i\
    \ % 2) == 0) then \n            sum = sum + lst[i] \n            odd = (odd +\
    \ 1) %2\n        else\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2hoxwqs.lua:24:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmpx2hoxwqs.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0 \n    for _, v in ipairs(lst) do\n        if v then\n     \
    \       sum = sum + v \n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1r2m0ajs.lua:20:\
    \ expected: 12, actual: 21\nstack traceback:\n\t/tmp/tmp1r2m0ajs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823740
