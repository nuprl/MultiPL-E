name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local capitals = {}\n   local lowercases = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = str:len(extension:upper())\n   \
    \   local low = str:len(extension:lower())\n      capitals[cap] = capitals[cap]\
    \ or {}\n      capitals[cap][low] = capitals[cap][low] or extension\n      lowercases[low]\
    \ = lowercases[low] or extension\n   end\n   \n   local strengths = {}\n   for\
    \ cap, lower_extensions in pairs(capitals) do\n      for lower, extension in pairs(lower_extensions)\
    \ do\n         strengths[extension] = strengths[extension] or cap - lower\n  \
    \    end\n   end\n   for lower, extension in pairs(lowercases) do\n      strengths[extension]\
    \ = strengths[extension] or lower - 1\n   end\n   \n   local biggest = #extensions\n\
    \   local strongest\n   for _, big in pairs(strengths) do\n      if biggest >\
    \ big then\n         biggest = big\n         strongest = extensions\n      end\n\
    \   end\n   for _, big in pairs(strengths) do\n      if biggest < big then\n \
    \        biggest = big\n         strongest = extensions\n      end\n   end\n \
    \  for _, stron in pairs(strongest) do\n      assert(str:len(stron) == biggest)\n\
    \   end\n   return strongest\nend", "\t-- your code goes here\nend", "   local\
    \ strength = -1\n   local index\n   for i, extension in pairs(extensions) do\n\
    \      local c = string.match(class_name, '^%s*(%a+)%s*$')\n      if c == class_name\
    \ then\n         local sm = #string.lower(extension) - #string.lower(string.sub(class_name,\
    \ 1, string.find(class_name, '%a')))\n         if strength == -1 or strength >\
    \ sm * strength then\n            index = i\n            strength = sm\n     \
    \    end\n      end\n   end\n   return extensions[index]\nend", "  -- Write your\
    \ code here.\n  -- Solution\n  -- return class_name:sub(1, class_name:len()-2)..\"\
    _\"..extensions[#extensions]\nend", "    local cap_sum = 0\n    local sm_sum =\
    \ 0\n    local ext_sum = 0\n    local ext_name = ''\n    for _, ext_im in pairs(extensions)\
    \ do\n        local cap = ext_im:match('(.):(.)'):captures{1}\n        local sm\
    \ = ext_im:match('(.):(.)'):captures{2}\n        cap_sum = cap_sum + cap:byte()\n\
    \        sm_sum = sm_sum + sm:byte()\n        ext_sum = ext_sum + 1\n    end\n\
    \    cap_sum = cap_sum * 2\n    sm_sum = sm_sum * 2\n    ext_sum = ext_sum * 2\n\
    \    \n    local strength_sum = (cap_sum - sm_sum + ext_sum)\n    if strength_sum\
    \ == 0 then\n        strength_sum = 1\n    end\n    local strength = math.floor((cap_sum\
    \ - sm_sum + ext_sum) / strength_sum)\n    if strength > 0 then\n        ext_name\
    \ = class_name .. '_' .. strength .. '_' .. ext_name\n    end\n    return ext_name\n\
    end", "    local max_strength = nil\n    local strongest_extension = nil", " \
    \  -- Your code here\n   return str\nend", "    local StrongestExtensionName =\
    \ nil\n    local StrongestExtensionStrength = -1\n    \n    -- Get the count of\
    \ uppercase letters in the extension's name\n    local CAP = string.gsub(class_name,\"\
    [A-Z]\",\"%1\")\n    \n    -- Get the count of lowercase letters in the extension's\
    \ name\n    local SM = string.gsub(class_name,\"[a-z]\",\"%1\")\n    \n    --\
    \ Compute the strength of the extension based on the above counts\n    local StrongestExtensionStrength\
    \ = CAP - SM\n    \n    -- Find the extension with the strongest strength\n  \
    \  for i,v in pairs(extensions) do\n        if v.strength == StrongestExtensionStrength\
    \ then\n            StrongestExtensionName = v.name\n        end\n    end\n  \
    \  \n    -- Return the name of the strongest extension\n    return StrongestExtensionName\n\
    end", "    local class_name, extensions = tostring(class_name), tostring(extensions)\n\
    \    local strongest_extension = nil\n    for _, extension in pairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = #extension - cap\n        local strength = cap - sm\n        if strength\
    \ > 0 and class_name == extension then\n            strongest_extension = extension\n\
    \        end\n    end\n    return strongest_extension\nend", "  local cap, sm\
    \ = 0, 0 -- Initialize two counters.\n  for _,e in ipairs(extensions) do -- Go\
    \ through all extensions.\n    if stringupper(class_name) == stringupper(e) then\
    \ -- Compare the first letter of class.\n      cap = cap + 1 -- Increment the\
    \ counter if the letter is uppercase.\n    elseif stringlower(class_name) == stringlower(e)\
    \ then\n      sm = sm + 1 -- Increment the counter if the letter is lowercase.\n\
    \    end\n  end\n  -- Return strength fraction if class name is uppercase.\n \
    \ if cap > sm then\n    return (cap - sm) / cap -- Return strength fraction.\n\
    \  else -- If class name is lowercase\n    return cap / sm -- Return strength\
    \ fraction.\n  end\nend", "    if type(extensions) ~= 'table' then\n        return\
    \ 'Unknown Class'\n    end\n    local extension_strongest_index = -1\n    local\
    \ extension_strength = nil\n    for _, extension in ipairs(extensions) do\n  \
    \      local extension_class = GetClassName(extension)\n        local extension_class_strongest\
    \ = GetStrongestExtension(extension_class)\n        local extension_class_strongest_index\
    \ = GetExtensionIndex(extension_class_strongest)\n        if extension_class_strongest_index\
    \ > -1 then\n            if extension_strength == nil then\n                extension_strength\
    \ = extension_class_strongest_index\n            elseif extension_strength > extension_class_strongest_index\
    \ then\n                extension_strength = extension_class_strongest_index\n\
    \            end\n        else\n            extension_strongest_index = -1\n \
    \           break\n        end\n    end\n    if extension_strongest_index > -1\
    \ then\n        local extension_strongest = extensions[extension_strongest_index]\n\
    \        local extension_class = GetClassName(extension_strongest)\n        return\
    \ class_name .. '.' .. extension_class\n    else\n        return 'Unknown Class'\n\
    \    end\nend", "    local capitals = {}\n    local capitals_count = #class_name:gsub(\"\
    ^%l+\", \"\")\n    for i=1,capitals_count do\n        capitals[i] = #class_name:sub(1,\
    \ i+1) - i\n    end", "   local extension_map = {}\n   for i, extension_name in\
    \ ipairs(extensions) do\n      local extension = GetExtension(class_name, extension_name)\n\
    \      if extension ~= nil then\n         table.insert(extension_map, extension)\n\
    \      end\n   end\n   local strongest_extension = extension_map[1]\n   local\
    \ best_extension_strength = -1\n   for _, extension in ipairs(extension_map) do\n\
    \      local extension_strength = GetExtensionStrongest(class_name, extension)\n\
    \      if extension_strength ~= nil then\n         if extension_strength < best_extension_strength\
    \ then\n            best_extension_strength = extension_strength\n           \
    \ strongest_extension = extension\n         end\n      end\n   end\n   return\
    \ strongest_extension\nend", "\t-- Your code goes here\n\t\n\tlocal strongest\
    \ = \"\"\n\tlocal strongest_strength = -1", "  assert(type(class_name) == \"string\"\
    )\n  assert(type(extensions) == \"table\")", "    -- Your code goes here!\n  \
    \  return class_name..\".\"..extensions[1]\nend", '    local strengths = {}',
  "   local strongest_extensions = {}\n   local max_strength = -1", "    -- add your\
    \ code here\nend", "    --@unpack class_name\n    --@unpack extensions\n    local\
    \ strongest = {}\n    for _, extension in ipairs(extensions) do\n        local\
    \ extension_strength\n        local extension_class_name = extension:sub(1, #extension)\n\
    \        local extension_class_name = extension_class_name:upper()\n        local\
    \ extension_class_name_length = #extension_class_name\n        local extension_class_name_count_letters\
    \ = #extension_class_name:gsub(\"%W\", \"\")\n        -- Convert extension name\
    \ to upper case.\n        local extension_class_name_count_letters_upper = #extension_class_name:gsub(\"\
    %W\", \"%1\"):upper()\n        -- Remove letters from extension name.\n      \
    \  local extension_class_name_count_letters_upper = extension_class_name_count_letters_upper:gsub(\"\
    %1\", \"\")\n        -- Count the number of letters in the extension.\n      \
    \  local extension_class_name_count_letters_upper = #extension_class_name_count_letters_upper\n\
    \        -- Calculate and store the strength of the extension.\n        extension_strength\
    \ = extension_class_name_count_letters_upper - extension_class_name_count_letters\
    \ + 1\n        if extension_strength > strongest[extension_class_name] then\n\
    \            strongest[extension_class_name] = extension_strength\n        end\n\
    \    end\n    -- Sort by strength.\n    table.sort(strongest)\n    -- Return the\
    \ extension with the most strength.\n    if #strongest > 0 then\n        return\
    \ class_name .. \"-\" .. strongest[#strongest]\n    end\n    -- Return nil if\
    \ there are no extensions.\n    return nil\nend", "\tlocal extension_strengths\
    \ = {}\n\tfor _, extension_name in ipairs(extensions) do\n\t\tlocal extension\
    \ = GetExtension(class_name, extension_name)\n\t\tif extension then\n\t\t\tlocal\
    \ extension_strength = extension.Strength\n\t\t\tif extension_strength == -1 then\n\
    \t\t\t\t-- The extension is not a favored extension\n\t\t\t\textension_strength\
    \ = extension.Strength:len() - extension.Strength:sub(1, 1):len()\n\t\t\tend\n\
    \t\t\ttable.insert(extension_strengths, extension_strength)\n\t\tend\n\tend\n\t\
    table.sort(extension_strengths)\n\tfor i, extension_strength in ipairs(extension_strengths)\
    \ do\n\t\tif extension_strength == 1 then\n\t\t\treturn extensions[i]\n\t\tend\n\
    \tend\nend", "   local cap = #class_name\n   local sm = #class_name:lower()\n\
    \   for _, ext in pairs(extensions) do\n      local cap2 = #ext:upper()\n    \
    \  local sm2 = #ext:lower()\n      local s = cap - cap2\n      s = s - sm\n  \
    \    s = s + sm2\n      if s ~= 0 then\n         return class_name .. ext.\":\"\
    \ .. ext:sub(1,s - 1)\n      end\n   end\n   return class_name\nend", "  local\
    \ strongest_extension = nil\n  local extensions_length = 0\n  local number_of_caps\
    \ = 0\n  local number_of_sms = 0", "  local strongest = {}\n  local max = 0\n\
    \  local strongest_ext = {}\n  for _, ext in ipairs(extensions) do\n    local\
    \ cap = string.gsub(ext, \"(.)\", function (x)\n      return x:upper()\n    end)\n\
    \    local sm = #string.gsub(ext, \"(.)\", function (x)\n      return x:lower()\n\
    \    end)\n    if cap > max then\n      max = cap\n      strongest = {}\n    end\n\
    \    table.insert(strongest, ext)\n    if cap > sm then\n      strongest[#strongest\
    \ - 1] = ext\n    end\n  end\n  table.sort(strongest)\n  local strongest_ext =\
    \ strongest[#strongest]\n  if #strongest > 1 then\n    for i = 1, #strongest do\n\
    \      local ext = strongest[i]\n      local strongest = nil\n      for j = 1,\
    \ #extensions do\n        if string.sub(extensions[j], 1, #ext) == ext then\n\
    \          strongest = extensions[j]\n        end\n      end\n      if strongest\
    \ then\n        table.insert(strongest_ext, strongest)\n        break\n      end\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_ext\nend", "   -- Your\
    \ code here\n   -- The code you write here will help you find the strongest extension\
    \ with\n   -- least strength.\n   return nil\nend", "\tlocal str_exts = {}\n\t\
    for _, extension in pairs(extensions) do\n\t\tstr_exts[To_Strict(extension)] =\
    \ -1\n\tend\n\tlocal classes = {[class_name]}\n\tfor _, class_name in pairs(classes)\
    \ do\n\t\t-- Find extensions with the same strongest strength.\n\t\tlocal strongest_exts\
    \ = {}\n\t\tfor _, extension in pairs(extensions) do\n\t\t\tif str_exts[To_Strict(extension)]\
    \ ~= -1 then\n\t\t\t\ttable.insert(strongest_exts, extension)\n\t\t\tend\n\t\t\
    end\n\t\t-- Choose the one that comes first in the list.\n\t\tlocal strongest_ext\n\
    \t\tfor _, ext in pairs(strongest_exts) do\n\t\t\tstrongest_ext = ext\n\t\tend\n\
    \t\ttable.insert(str_exts, strongest_ext)\n\t\ttable.insert(classes, strongest_ext)\n\
    \tend\n\treturn class_name..'.'..table.concat(str_exts, '.')\nend", "\tlocal result\
    \ = \"\"\n\tfor i,ext in pairs(extensions) do\n\t\tlocal cap = string.upper(ext:sub(1,#ext))\n\
    \t\tlocal sm = string.lower(ext:sub(1,#ext))\n\t\tif cap-sm ~= 0 then\n\t\t\t\
    result = result .. string.lower(ext:sub(1,#ext))\n\t\tend\n\tend\n\treturn result\n\
    end", "   if extensions == nil then\n      return 'nil'\n   end\n   local capitals\
    \ = {}\n   local total = 0\n   local index = 1\n   while index <= #extensions\
    \ do\n      local name = string.sub(extensions,index,index)\n      if string.len(name)\
    \ > 0 then\n         capitals[string.lower(name)] = capitals[string.lower(name)]\
    \ or 0\n         capitals[string.lower(name)] = capitals[string.lower(name)] +\
    \ 1\n      end\n      index = index + 1\n   end\n   for name, count in pairs(capitals)\
    \ do\n      total = total + count\n      if total >= 1 then\n         return class_name\
    \ .. '.' .. name\n      end\n   end\nend", "  local class_name_split = string.split(class_name,\"\
    .\")\n  local str_extensions = {}\n  for extension in extensions do\n    str_extensions[#str_extensions+1]\
    \ = extension\n  end\n  local str_extensions_length = #str_extensions\n  local\
    \ strength = -1 -- default strongest extension\n  for i=1,str_extensions_length\
    \ do\n    local cap_letters = string.len(str_extensions[i]):byte() - 1\n    local\
    \ sm_letters = string.len(str_extensions[i]:lower()):byte() - 1\n    local strength_fraction\
    \ = cap_letters - sm_letters\n    local current_strength = strength\n    if strength_fraction\
    \ > 0 then\n      -- if there are more letters than there were uppercase\n   \
    \   -- letters, the strength is cap_letters - sm_letters.\n      current_strength\
    \ = current_strength + strength_fraction\n    end\n    if current_strength > strength\
    \ then\n      -- if we found a better one than the one we found\n      -- (this\
    \ implies we found a tie for the number of letters\n      -- of the extension),\
    \ we update the strength to that one.\n      strength = current_strength\n   \
    \ end\n  end\n  if str_extensions_length > 1 then\n    local first = str_extensions[1]\n\
    \    return class_name_split[#class_name_split+1].first .. \".\" .. first\n  else\n\
    \    return class_name\n  end\nend", "    local strength = {} -- This is a dictionary\
    \ with string keys and integer values.\n    \n    local capitals = class_name:upper():gsub(\"\
    [A-Z]\", \"%u\")\n    local lowercases = class_name:lower():gsub(\"[a-z]\", \"\
    %l\")", "    local strongest = nil\n    local counter = 0\n    for extension in\
    \ pairs(extensions) do\n        counter = counter + 1\n        if string.find(class_name,\
    \ extension) then\n            strongest = extension\n        end\n    end\n \
    \   if counter == 0 then\n        return 'Error'\n    end\n    if counter > 1\
    \ then\n        local extension_map = {}\n        for extension in pairs(extensions)\
    \ do\n            extension_map[extension] = extension_map[extension] or 0\n \
    \           extension_map[extension] = extension_map[extension] + 1\n        end\n\
    \        local keys = {}\n        for key, value in pairs(extension_map) do\n\
    \            keys[key] = value\n        end\n        keys = table.sort(keys)\n\
    \        strongest = keys[1]\n    end\n    return strongest\nend", "   -- your\
    \ code here\n   local str = class_name .. \".\" .. extensions[1]\n   local n =\
    \ #extensions\n   for i = 2, n do\n      local str2 = class_name .. \".\" .. extensions[i]\n\
    \      if str:upper() > str2:upper() then\n         str = str2\n      elseif str:upper()\
    \ < str2:upper() then\n         return str\n      end\n   end\n   return str\n\
    end", "\tlocal strongest = 0\n\tlocal strongest_name = nil", "  local max_strongest\
    \ = -1\n  local max_strongest_extension = \"\"", "   local capitals, lowers =\
    \ string.gsub(class_name, \"[A-Z]\", \"\"), string.gsub(class_name, \"[a-z]\"\
    , \"\")\n   local cap, sm = tonumber(capitals), tonumber(lowers)\n   \n   local\
    \ max_strength = -1\n   local max_extension\n   \n   for _,extension in ipairs(extensions)\
    \ do\n      local cap_extension, sm_extension = string.gsub(extension, \"[A-Z]\"\
    , \"\"), string.gsub(extension, \"[a-z]\", \"\")\n      \n      local strength\
    \ = cap - sm + cap_extension - sm_extension\n      if strength > max_strength\
    \ or max_strength == -1 then\n         max_extension = extension\n         max_strength\
    \ = strength\n      end\n   end\n   \n   return max_extension\nend", "    -- your\
    \ code goes here\n    local strongest = nil\n    for _,extension in ipairs(extensions)\
    \ do\n        local cap = #extension:upper()\n        local sm = #extension:lower()\n\
    \        local strongest_cap = cap - sm\n        if strongest_cap > 0 and strongest_cap\
    \ > strongest or strongest_cap == 0 then\n            strongest = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest\nend", "   --\
    \ Your code here\nend", "    return class_name .. '.' .. extensions[1]\nend",
  "   local strongest = 0\n   local strongest_index = nil", "    local cap, sm = 0,\
    \ 0\n    for _, ext in pairs(extensions) do\n        cap = cap + #ext:upper()\n\
    \        sm = sm + #ext:lower()\n    end\n    local frac = cap - sm\n    \n  \
    \  if frac == 0 then return class_name end\n    if frac == 1 then return class_name\
    \ .. '_' .. extensions[1] end\n    if frac > 0 then return class_name .. '_' ..\
    \ extensions[frac] end\nend\n</cell>\n<cell>", "   assert(type(class_name) ==\
    \ \"string\")\n   assert(type(extensions) == \"table\")", '    local extension_counter
    = {}', "\t-- Your code here\nend", "\t-- The code below should return the correct\
    \ value of this function.\nend", "    --return 'SErviNGSliCes' -- Example 1\n\
    \    --return 'Slices.SErviNGSliCes' -- Example 2\n    --return 'SErviNGSliCes.Cheese'\
    \ -- Example 3\n    --return 'Slices.SErviNGSliCes.Cheese' -- Example 4\n    local\
    \ strongest, strongest_strength = -1, -1\n    for _,extension in ipairs(extensions)\
    \ do\n        local c = string.lower(extension:sub(1, #extension))\n        local\
    \ s = #c\n        if strongest == -1 or strongest_strength < s then\n        \
    \    strongest, strongest_strength = extension, s\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest .. '.' .. strongest_strength\nend", "\tlocal\
    \ max_strength = -1\n\tlocal max_extension = nil", "    -- Write your code here\n\
    end", "   local max = 0\n   local strongest_extension = \"\"\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = #extension:upper()\n      local\
    \ sm = #extension:lower()\n      local stron_frac = cap - sm\n      -- Check if\
    \ this extension is stronger or equal the previous one\n      if stron_frac >=\
    \ 0 then\n         if stron_frac > max then\n            max = stron_frac\n  \
    \          strongest_extension = extension\n         end\n      else\n       \
    \  -- Check if this extension is stronger or equal the previous one\n        \
    \ if stron_frac <= 0 then\n            max = stron_frac\n            strongest_extension\
    \ = extension\n         end\n      end\n   end\n   return class_name .. \".\"\
    \ .. strongest_extension\nend", "  local max_strength = -1\n  local max_extension\n\
    \  for _, extension in ipairs(extensions) do\n    local extension_strength = extension:find(\"\
    -\"):upper()\n    if max_strength < extension_strength then\n      max_strength\
    \ = extension_strength\n      max_extension = extension\n    end\n  end\n  return\
    \ max_extension\nend", "   assert(class_name and extensions)\n   local best\n\
    \   local best_idx = -1\n   for i, ext in ipairs(extensions) do\n      local c\
    \ = class_name:sub(1, class_name:find(ext))\n      local score = GetStrongestClassExtension(c)\n\
    \      if score > best then\n         best,best_idx = score, i\n      end\n  \
    \ end\n   return class_name:sub(1, class_name:find(extensions[best_idx]))\nend",
  "    local cap_str, cap_num = string.match(class_name, '%a([A-Z]*)')\n    if cap_num\
    \ == nil then return nil end\n    local sm_str, sm_num = string.match(class_name,\
    \ '%a([a-z]*)')\n    if sm_num == nil then return nil end\n    local strongest_extension\
    \ = extensions[1]\n    for i = 2, #extensions do\n        local cap_ext = extensions[i]\n\
    \        local sm_ext = extensions[i - 1]\n        local cap_str, cap_num = string.match(cap_ext,\
    \ '%a([A-Z]*)')\n        local sm_str, sm_num = string.match(sm_ext, '%a([a-z]*)')\n\
    \        local strength = cap_num - sm_num\n        if strength > 0 then\n   \
    \         strongest_extension = class_name .. '.' .. cap_ext .. '.' .. sm_ext\n\
    \        end\n    end\n    return strongest_extension\nend", "   local extension_strengths\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local class_name =\
    \ class_name..extension\n      local capitals = 0\n      local lowercases = 0\n\
    \      for _, b in ipairs(extension:gmatch('.(..)') do lowercases = lowercases\
    \ + #b end)\n      for _, b in ipairs(extension:gmatch('.(..)') do capitals =\
    \ capitals + #b - lowercases end)\n      local ratio = capitals/lowercases\n \
    \     assert(ratio > 0, \"There is an error in the extension's name\")\n     \
    \ extension_strengths[extension] = ratio\n   end\n   table.sort(extension_strengths,\
    \ function(a, b)\n      return extension_strengths[a] > extension_strengths[b]\n\
    \   end)\n   return class_name .. extension_strengths[1]\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal sm = 0\n\tlocal cap = 0\n\tfor _, extension in pairs(extensions)\
    \ do\n\t\tcap = #extension:upper()\n\t\tsm = #extension:lower()\n\t\tif cap -\
    \ sm > strongest_extension then\n\t\t\tstrongest_extension = cap - sm\n\t\tend\n\
    \tend\n\treturn \"%s.%s\"..class_name, strongest_extension\nend", "   -- your\
    \ code here\nend", "    local extension_strength = {}\n    for _, extension in\
    \ ipairs(extensions) do\n        local class_name = string.upper(string.sub(1,\
    \ string.len(class_name)))\n        local extension = string.upper(string.sub(1,\
    \ string.len(extension)))\n        table.insert(extension_strength, math.abs(class_name\
    \ - extension))\n    end\n    local strength = extension_strength[1]\n    for\
    \ _, extension in ipairs(extensions) do\n        if extension_strength[#extension_strength]\
    \ > strength then\n            extension_strength = extension_strength\n     \
    \       strength = extension_strength[1]\n        end\n    end\n    local index\
    \ = find(extension_strength, strength, 1)\n    return class_name .. '.' .. extensions[index]\n\
    end", "\tlocal function compare_classes(x, y)\n\t\tif x == y then\n\t\t\treturn\
    \ 1\n\t\tend", "\tlocal strongest_extension = {}\n\tfor i=1,#extensions do\n\t\
    \tlocal name = extensions[i]\n\t\tlocal cap = #name\n\t\tlocal sm = #name:lower()\
    \ - cap\n\t\tif cap == 0 and sm == 0 then\n\t\t\tbreak\n\t\tend\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength == 0 then\n\t\t\tbreak\n\t\tend\n\t\tif #strongest_extension\
    \ == 0 then\n\t\t\tstrongest_extension.name = name\n\t\t\tstrongest_extension.strength\
    \ = strength\n\t\telseif strength < strongest_extension.strength then\n\t\t\t\
    strongest_extension.name = name\n\t\t\tstrongest_extension.strength = strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension.name\nend",
  "\tlocal Strongest_Extension_String = \"\"\n\tlocal Cap_Index = 1\n\tlocal SM_Index\
    \ = 1\n\tlocal Extension_Counter = 1\n\tlocal ClassName_Counter = 1\n\tfor _,\
    \ extension in pairs(extensions) do\n\t\tCapIndex = CapIndex + #extension:upper()\n\
    \t\tSM_Index = SM_Index + #extension:lower()\n\t\tExtension_Counter = Extension_Counter\
    \ + 1\n\t\tif Extension_Counter > 1 then\n\t\t\tbreak\n\t\tend\n\tend", "  --\
    \ your code here\nend", "    local c = string.lower(class_name:sub(1,1)) -- CAP\n\
    \    local s = string.lower(class_name:sub(2))     -- SM\n    local max_s = -1\n\
    \    for _, ext in ipairs(extensions) do\n        local e = string.lower(ext:sub(1,1))\
    \ -- CAP\n        local e_s= string.lower(ext:sub(2))   -- SM\n        if string.find(class_name,\
    \ e) ~= nil then\n            return class_name .. '.' .. e .. '.' .. s\n    \
    \    end\n        if string.find(class_name, e_s, 1, true) ~= nil then\n     \
    \       if max_s < e_s then\n                max_s = e_s\n            end\n  \
    \      end\n    end\n    return class_name .. '.' .. s .. '.' .. max_s\nend",
  "    local strength = {}\n    for i=1,#extensions do\n        local capitals = string.sub(extensions[i],1,1)\n\
    \        local lowercases = string.sub(extensions[i],2,#extensions[i]-1)\n   \
    \     local total_capital_count = 0\n        for j=1,#capitals do\n          \
    \  total_capital_count = total_capital_count + #string.format('%c%c',string.format('%c',capitals[j]),string.lower(capitals[j]))\n\
    \        end\n        local total_lowercase_count = #string.lower('a')\n     \
    \   for j=1,#lowercases do\n            total_lowercase_count = total_lowercase_count\
    \ + #string.format('%c%c',string.lower(lowercases[j]),string.format('%c%c',capitals[j]))\n\
    \        end\n        local fraction_capital_count = total_capital_count / #capitals\n\
    \        local fraction_lowercase_count = total_lowercase_count / #lowercases\n\
    \        local strength_score = fraction_capital_count - fraction_lowercase_count\n\
    \        table.insert(strength,strength_score)\n    end\n    table.sort(strength,function(a,b)\
    \ return strength[a]>strength[b] end)\n    return string.format(class_name,table[#strength][2])\n\
    end", "\tlocal class_list = string.gsub(class_name, '%..', '')\n\tlocal strongest_extensions\
    \ = { }\n\tlocal max_strength = -1\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal class_name = string.match(extension, \"^(.-)(.-?)$\")\n\t\tlocal extension_name\
    \ = string.match(extension, \"^.-(.-)$\")\n\t\tlocal strength = string.match(class_list,\
    \ extension_name)\n\t\tif strength == nil then\n\t\t\tassert(false, \"Invalid\
    \ extension: \" .. extension)\n\t\tend\n\t\t-- Keep a record of this extension\
    \ by its strength.\n\t\ttable.insert(strongest_extensions, {strength = strength,\
    \ extension = extension})\n\t\t-- Keep track of the max strength so far.\n\t\t\
    if strength > max_strength then\n\t\t\tmax_strength = strength\n\t\tend\n\tend\n\
    \t-- Choose the strongest extension from the list.\n\tlocal max_strongest = -1\n\
    \tlocal max_strongest_extension = nil\n\tfor _, strongest_extension in ipairs(strongest_extensions)\
    \ do\n\t\tif strongest_extension.strength > 0 then\n\t\t\t-- This extension is\
    \ stronger than the maximum.\n\t\t\tif strongest_extension.strength > max_strongest\
    \ then\n\t\t\t\t-- This is the new maximum strength extension.\n\t\t\t\tmax_strongest\
    \ = strongest_extension.strength\n\t\t\t\tmax_strongest_extension = strongest_extension.extension\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn string.sub(max_strongest_extension, 1, string.len(max_strongest_extension)-1)\n\
    end", "  assert(type(class_name) == \"string\")\n  assert(type(extensions) ==\
    \ \"table\")", "    local c = string.upper(class_name:sub(1, string.len(class_name)-1))\n\
    \    local strength = {}\n    for _, extension in ipairs(extensions) do\n    \
    \    local c_s = string.upper(extension:sub(1, string.len(extension)-1))\n   \
    \     local sm = string.lower(extension:sub(2, string.len(extension)-2))\n   \
    \     local strength_c = #c+1-sm\n        local strength_s = #c+1-sm+#c_s\n  \
    \      if strength_c >= strength_s then\n            table.insert(strength, -1)\n\
    \        elseif strength_c ~= 0 then\n            table.insert(strength, strength_c)\n\
    \        else\n            table.insert(strength, strength_s)\n        end\n \
    \   end\n    local best_index = -1\n    local best_strength = #strength\n    for\
    \ index, strength in ipairs(strength) do\n        if strength >= best_strength\
    \ then\n            best_index = index\n            best_strength = strength\n\
    \        end\n    end\n    return class_name:sub(1, string.len(class_name)-1)\
    \ + string.format('%.*s', best_strength)\nend", '  local strongest_ext = ""',
  "\t-- Write your code here\n\tlocal class_strength = #extensions\n\tfor i, extension\
    \ in pairs(extensions) do\n\t\tif GetUppercaseLetterCount(extension) < GetLowercaseLetterCount(extension)\
    \ then\n\t\t\tclass_strength = class_strength - 1\n\t\tend\n\tend\n\treturn class_name\
    \ .. '.' .. extensions[class_strength]\nend", "   local class_name_lower = class_name:lower()\n\
    \   local class_name_len = #class_name\n   local extensions_lower = extensions:map(function\
    \ (x)\n      return x:lower()\n   end)\n   local extensions_len = #extensions\n\
    \   local extensions_dict = {}\n   for i=1,extensions_len do\n      extensions_dict[extensions_lower[i]]\
    \ = i\n   end\n   \n   local extensions_sorted = {}\n   for _, extension_name\
    \ in pairs(extensions) do\n      local extension_name_lower = extension_name:lower()\n\
    \      local extension_name_len = #extension_name\n      local extension_name_diff\
    \ = extension_name_len - class_name_len\n      if extension_name_diff > 0 then\n\
    \         table.insert(extensions_sorted, extension_name)\n         extension_name_diff\
    \ = extension_name_diff - 1\n      elseif extension_name_diff < 0 then\n     \
    \    table.insert(extensions_sorted, '.' .. extension_name)\n         extension_name_diff\
    \ = 1\n      else\n         extension_name_diff = extension_name_diff / class_name_len\n\
    \      end\n   end\n   \n   local strength = -1\n   local extension_name\n   local\
    \ extension_lower = extensions:sort(function (x,y) \n      local xi = extensions_dict[x]\n\
    \      local yi = extensions_dict[y]\n      return xi-(yi or 0)\n   end)[1]\n\
    \   for _, extension_name in pairs(extensions_sorted) do\n      if extension_name:sub(1,\
    \ #extension_lower) == class_name_lower then\n         if strength < extension_name_diff\
    \ then\n            strength = extension_name_diff\n            extension_name\
    \ = extension_name\n         end\n      end\n   end\n   return class_name .. '.'\
    \ .. extension_name\nend", "  local cap, sm = string.upper(class_name):gsub(\"\
    ^(.)%l\",\"%1\"):match(\"(.)%l\")\n  local strength = -1 \n  for _, ext in ipairs(extensions)\
    \ do\n    local cap, sm = string.upper(ext):gsub(\"^(.)%l\",\"%1\"):match(\"(.)%l\"\
    )\n    local diff_cap = cap - sm\n    if diff_cap > 0 then\n      return (string.gsub(class_name,\
    \ cap .. \".\", \"\") .. string.lower(ext))\n    else\n      diff_cap = sm - cap\n\
    \      if diff_cap > 0 then\n        strength = strength or (diff_cap / 2)\n \
    \     else\n        -- No possible extension\n        break \n      end\n    end\n\
    \  end\n  return class_name .. string.sub(class_name, cap, -1)\nend", "  -- Write\
    \ your code here.\n  return class_name .. '.' .. table.sort(extensions)[1]\nend",
  "    local strongest = nil\n    local strongestStrength = -1\n    for _, extension\
    \ in ipairs(extensions) do\n        local extensionStrength = StrongestExtension(class_name,\
    \ extension)\n        if extensionStrength > strongestStrength then\n        \
    \    strongestStrength = extensionStrength\n            strongest = extension\n\
    \        end\n    end\n    return strongest\nend", "    local max_index = -1\n\
    \    local max_strength = -1\n    for i, extension in ipairs(extensions) do\n\
    \        local index = string.upper(class_name):find(extension)\n        if index\
    \ == nil then\n            return nil\n        end\n        local index_cap =\
    \ string.upper(extension:sub(1, index))\n        local index_sm = string.lower(extension:sub((index+1):lower()))\n\
    \        local strength = index_cap - index_sm\n        if strength > max_strength\
    \ then\n            max_strength = strength\n            max_index = i\n     \
    \   end\n    end\n    return class_name:sub(1, (max_index+1):lower())\nend", " \
    \   if extensions.NumElements() == 0 then\n        return class_name;\n    else\n\
    \        local strongest = {};\n        for _, extension in ipairs(extensions)\
    \ do\n            local cap = string.upper(extension:sub(1, string.len(extension)\
    \ - 1))\n            local sm = string.lower(extension:sub((string.len(extension)\
    \ - 1), -1))\n            local strength = cap - sm\n            if strength >=\
    \ 0 then\n                if strongest[strength] == nil then\n               \
    \     strongest[strength] = extension;\n                else\n               \
    \     local is_first = true;\n                    local strongest_strength = strength;\n\
    \                    for _, s in ipairs(strongest) do\n                      \
    \  if s > strongest_strength then\n                            strongest_strength\
    \ = s;\n                            is_first = false;\n                      \
    \  end\n                    end\n                    if is_first then\n      \
    \                  strongest[strength] = extension;\n                    end\n\
    \                end\n            end\n        end\n        local best_strength\
    \ = -1;\n        local best_extension;\n        for _, strength in ipairs(strongest)\
    \ do\n            if best_strength == -1 or strength > best_strength then\n  \
    \              best_strength = strength;\n                best_extension = strongest[strength];\n\
    \            end\n        end\n        return best_extension;\n    end\nend",
  "\tlocal strongest = {}\n\tlocal num_capitals = 0\n\tlocal num_lowercases = 0\n\t\
    local max_strength = 0\n\tlocal capitals = {}\n\tlocal lowercases = {}\n\tlocal\
    \ max_extension = ''", "   -- your code here\nend", "   -- Your code here\n  \
    \ return \"Slices\" \nend", "  local highest_strength = -1\n  local extension\
    \ = \"\"\n  for _, extension in pairs(extensions) do\n    if extension:find(upperCase(class_name))\
    \ == 0 then\n      if highest_strength == -1 then\n        highest_strength =\
    \ extension:find(lowerCase(class_name))\n      elseif highest_strength > extension:find(lowerCase(class_name))\n\
    \      then\n        highest_strength = extension:find(lowerCase(class_name))\n\
    \        extension = extension\n      end\n    end\n  end\n  return extension\n\
    end", "   -- TODO: Finish this function.\n   -- Use the 'extensions' list to find\
    \ the strongest extension.\nend", "   local max_extension = extensions[1]\n  \
    \ for _, extension in pairs(extensions) do\n      if extension:find(\".\") > 0\
    \ then\n         local parts = extension:gsub(\".\", \"\")\n         local cap,\
    \ sm = parts:match(\"(.)%l+(.)\")\n         if cap - sm > max_extension:find(\"\
    .\") then\n            max_extension = extension\n         end\n      end\n  \
    \ end\n   return class_name .. \".\" .. max_extension\nend", "   \n    -- Your\
    \ code here!\n    \nend", "  local strongest, strongest_strength = extensions[1],\
    \ -1\n  for _,extension in pairs(extensions) do\n    if extension:upper() == class_name:upper()\
    \ and strongest_strength < extension:lower():lower():len() then\n      strongest,\
    \ strongest_strength = extension, extension:lower():lower():len()\n    end\n \
    \ end\n  return strongest\nend", "    -- Your code here\nend", "  assert(type(class_name)\
    \ == \"string\" and type(extensions) == \"table\")\n  local cap, sm = string.upper(class_name)\
    \ .. string.lower(class_name), string.lower(class_name) .. string.upper(class_name)\n\
    \  local strongest_extension = nil\n  for _, ext in ipairs(extensions) do\n  \
    \  local cap2, sm2 = string.upper(ext) .. string.lower(ext), string.lower(ext)\
    \ .. string.upper(ext)\n    local cap3, sm3 = cap .. cap2, cap .. cap2\n    if\
    \ cap2 > sm then\n      sm, sm2 = cap2, cap3\n    end\n    if sm2 > sm then\n\
    \      sm, sm2 = sm2, cap3\n    end\n    if cap3 > sm then\n      sm, sm2 = sm2,\
    \ cap\n    end\n    if sm2 > sm then\n      sm, sm2 = sm, sm2\n    end\n    if\
    \ sm3 > sm then\n      sm = sm3\n    end\n    if cap3 > cap then\n      cap, sm2\
    \ = cap3, cap\n    end\n    if sm2 > sm then\n      sm = sm2\n    end\n    if\
    \ sm3 > sm then\n      sm = sm3\n    end\n    if cap2 > cap then\n      cap, sm2\
    \ = cap2, cap\n    end\n    if sm2 > sm then\n      sm = sm2\n    end\n    if\
    \ sm3 > sm then\n      sm = sm3\n    end\n    if sm2 > sm then\n      sm = sm2\n\
    \    end\n    if sm3 > sm then\n      sm = sm3\n    end\n    if sm2 > sm then\n\
    \      sm = sm2\n    end\n    if cap2 > cap then\n      cap, sm2 = cap2, cap\n\
    \    end\n    if sm2 > sm then\n      sm = sm2\n    end\n    if sm3 > sm then\n\
    \      sm = sm3\n    end\n    if sm2 > sm then\n      sm = sm2\n    end\n    if\
    \ sm3 > sm then\n      sm = sm3\n    end\n    if sm2 > sm then\n      sm = sm2\n\
    \    end\n    if cap2 > cap then\n      cap, sm2 = cap2, cap\n    end\n    if\
    \ sm2 > sm then\n      sm = sm2\n    end\n    if sm3 > sm then\n      sm = sm3\n\
    \    end\n    if sm2 > sm then\n      sm = sm2\n    end\n    if sm3 > sm then\n\
    \      sm = sm3\n    end\n    if ", "  local cap_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = #extension - cap\n    local strength = cap - sm\n    cap_extension[strength]\
    \ = extension\n  end", "   for _, extension in ipairs(extensions) do\n      if\
    \ string.find(class_name, extension) == 1 then\n         return string.sub(class_name,\
    \ 0, string.find(class_name, extension)-1)..extension\n      end\n   end\nend",
  "    local sorted_extensions = table.sort(extensions, function(a, b) return (string.len(a)\
    \ - string.len(b)) end)\n    return class_name .. sorted_extensions[1] .. '.'\
    \ .. sorted_extensions[2]\nend", "    local cap_letters = 0\n    local sm_letters\
    \ = 0\n    for _, b in pairs(extensions) do\n        local c, s = string.match(string.rep(b,\
    \ '%c'), string.upper('%c%c'))\n        cap_letters = cap_letters + c\n      \
    \  sm_letters = sm_letters + s\n    end\n    local strength = cap_letters - sm_letters",
  "    local max_strength = 0\n    local max_extension_name = \"\"\n    for _,extension\
    \ in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,string.len(extension)-1))\n\
    \        local sm = string.lower(extension:sub(string.len(extension)-1))\n   \
    \     local strength = cap - sm\n        if strength > max_strength then\n   \
    \         max_strength = strength\n            max_extension_name = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. max_extension_name\n\
    end", "  local cap_count, sm_count = 0, 0\n  for i,e in ipairs(extensions) do\n\
    \    local cap = string.upper(e:sub(1,1):lower())\n    local sm = string.lower(e:sub(1,1):lower())\n\
    \    cap_count = cap_count + cap:len()\n    sm_count = sm_count + sm:len()\n \
    \ end", "   -- TODO: Write your code here.\nend", "    local max = 0\n    local\
    \ strongest = ''\n    for i=1,#extensions do\n        local c = tonumber(string.sub(class_name,\
    \ string.len(class_name) - string.len(extensions[i]), -1))\n        local s =\
    \ tonumber(string.sub(class_name, string.len(class_name) - string.len(extensions[i])\
    \ - 1, -1))\n        local extension = class_name .. extensions[i]\n        if\
    \ c~=-1 and s~=-1 and c>0 and s>0 then\n            local strongest_extension\
    \ = class_name .. extensions[i]\n            if c~>strongest or s~>max then\n\
    \                max = s\n                strongest = strongest_extension\n  \
    \          end\n        end\n    end\n    return strongest\nend", "\tassert(type(class_name)\
    \ == 'string')\n\tassert(type(extensions) == 'table')", "   -- your code here\n\
    end", "    -- Your code here\nend", "   local cap_extensions = Map:new()\n   for\
    \ _,extension in ipairs(extensions) do\n      local cap_extension = string.upper(extension):gsub('%l','%1')\n\
    \      if not cap_extensions[cap_extension] then\n         cap_extensions[cap_extension]\
    \ = true\n      elseif cap_extensions[cap_extension] and tonumber(extension:sub(1,2))\
    \ then\n         cap_extensions[cap_extension] = false\n      end\n   end\n  \
    \ local sm = Map:new()\n   for _,extension in ipairs(extensions) do\n      local\
    \ cap_extension = string.upper(extension):gsub('%l','%1')\n      local sm_extension\
    \ = string.lower(extension):gsub('%1','%l')\n      if not sm[sm_extension] then\n\
    \         sm[sm_extension] = cap_extensions[cap_extension]\n      end\n   end\n\
    \   local extension_strength = nil\n   local strongest_extension = nil\n   for\
    \ _,extension in ipairs(extensions) do\n      local cap_extension = string.upper(extension):gsub('%l','%1')\n\
    \      local sm_extension = string.lower(extension):gsub('%1','%l')\n      local\
    \ strongest_extension_strength\n      if sm[sm_extension] then\n         strongest_extension_strength\
    \ = cap_extensions[cap_extension] - sm[sm_extension]\n      else\n         strongest_extension_strength\
    \ = tonumber(extension:sub(1,2))\n      end\n      if extension_strength == nil\
    \ then\n         extension_strength = strongest_extension_strength\n      elseif\
    \ strongest_extension_strength < extension_strength then\n         extension_strength\
    \ = strongest_extension_strength\n         strongest_extension = extension\n \
    \     end\n   end\n   return class_name .. '.' .. strongest_extension\nend", " \
    \   -- Your code here\nend", "  -- Write your code here.\n  local strongest_extension\
    \ = \"\"\n  local i = 0\n  for i,extension_name in pairs(extensions) do\n    local\
    \ extension_classes = class_name:find(\"%-\"..extension_name..\"%d+\")\n    if\
    \ extension_classes == nil then\n      break\n    end\n    local extension_classes\
    \ = extension_classes:sub(2)\n    local strength = extension_classes:find(\"-\"\
    ..extension_name..\"%d+\")\n    if strength == nil then\n      break\n    end\n\
    \    local strength = strength:sub(1)\n    local cap = extension_name:upper():len()\n\
    \    local sm = extension_name:lower():len()\n    local strength_fraction =  cap\
    \ - sm\n    local strength_total = strength + strength_fraction\n    if strength_total\
    \ > strongest_extension then\n      strongest_extension = extension_name\n   \
    \ end\n  end\n  return strongest_extension\nend", "    local max_strength = -1\n\
    \    local max_extension = \"\"", "  local function count_uppercase_letters(s)\n\
    \    local result = 0\n    for c in s:gmatch('[A-Z]') do result = result + 1 end\n\
    \    return result\n  end\n  local function count_lowercase_letters(s)\n    local\
    \ result = 0\n    for c in s:gmatch('[a-z]') do result = result + 1 end\n    return\
    \ result\n  end\n  local function strength_percentage(s, cap, sm)\n    return\
    \ (count_uppercase_letters(s) - count_lowercase_letters(s)) * 100.0 / (cap - sm)\n\
    \  end\n  local max_strength = -1\n  local max_extension\n  for _,ext in ipairs(extensions)\
    \ do\n    local ext = string.lower(ext)\n    if max_strength < strength_percentage(class_name,\
    \ count_uppercase_letters(ext), count_lowercase_letters(ext)) then\n      max_extension\
    \ = ext\n      max_strength = strength_percentage(class_name, count_uppercase_letters(ext),\
    \ count_lowercase_letters(ext))\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {strength = -1, extension\
    \ = \"\"}\n  local class_cap = class_name:upper():byte()\n  for _, extension_name\
    \ in ipairs(extensions) do\n    local extension_cap = extension_name:lower():byte()\n\
    \    local strength = extension_cap - class_cap\n    if strongest_extension.strength\
    \ == -1 or strength > strongest_extension.strength then\n      strongest_extension.strength\
    \ = strength\n      strongest_extension.extension = extension_name\n    end\n\
    \  end\n  return strongest_extension.extension\nend", "  -- Solve the problem\
    \ of finding strongest extension\n  -- Here i start from 0 because there are also\
    \ the extension names with the \n  -- same number of uppercase letters (first\
    \ extension)\n  local max_strength = 0 \n  local extension_strongest = extensions[1]\n\
    \  for i = 2, #extensions do\n    -- This line is to compare the current extension\
    \ strength with the maximum \n    -- strength, if the current extension strength\
    \ is greater than max strength\n    -- then this line will change max strength\
    \ and extension_strongest variable \n    -- to current extension\n    -- The line\
    \ below compares the two extensions strength using if statement\n    if extensions[i]:upper():len()\
    \ > extension_strongest:upper():len() then\n      max_strength = i\n      extension_strongest\
    \ = extensions[i]\n    end\n  end\n  return class_name .. \".\" .. extension_strongest:upper()\n\
    end", "\t--Solution here\nend", "    assert(type(extensions) == 'table')\n   \
    \ local strongest = extensions[1]\n    for i = 2, #extensions do\n        local\
    \ cap, sm = string.match(extensions[i], \"%[A-C](%i)\")\n        local ext = string.sub(class_name,\
    \ cap, cap + sm)\n        if extensions[i - 1] < extensions[i] then\n        \
    \    strongest = ext\n        end\n    end\n    return class_name .. '.' .. strongest\n\
    end", "    -- your code here\nend", "\tlocal cap_str=string.match(class_name,\
    \ '%u+([%A-Z]+)%+')\n\tlocal cap=tonumber(cap_str)\n\tlocal sm_str=string.match(class_name,\
    \ '%l+([%a-z]+)%+')\n\tlocal sm=tonumber(sm_str)\n\tlocal strength=cap-sm\n\t\
    local new_extension={}\n\tfor _,v in pairs(extensions) do\n\t\tlocal str_extension=string.match(v,\
    \ '%u+([%A-Z]+)%+')\n\t\tlocal cap_extension=tonumber(str_extension)\n\t\tlocal\
    \ sm_extension=string.match(v, '%l+([%a-z]+)%+')\n\t\tlocal sm_extension=tonumber(sm_extension)\n\
    \t\tlocal extension_strength=cap_extension-sm_extension\n\t\tif extension_strength>=0\
    \ then\n\t\t\tif extension_strength>strength then\n\t\t\t\tstrength=extension_strength\n\
    \t\t\t\tnew_extension=v\n\t\t\tend\n\t\tend\n\tend\n\treturn class_name..'.'..new_extension\n\
    end", "    -- Write your code here.\n    if extensions == nil then\n        return\
    \ 'Slices.' .. class_name\n    end\n    local max_extension = extensions[1]\n\
    \    for i = 2, #extensions do\n        if extensions[i] > max_extension then\n\
    \            max_extension = extensions[i]\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "   local strongest = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local c = GetClassByName(class_name, extension)\n\
    \      if c then\n         local strength = GetStrength(c)\n         if strength\
    \ > 0 and strength ~= #strongest then\n            table.insert(strongest, extension)\n\
    \         end\n      end\n   end\n   return table.concat(strongest, \".\")\nend",
  "   local strengths = {}\n   for _, extension in ipairs(extensions) do\n      local\
    \ length = #extension:upper()\n      if length > 0 then\n         local cap =\
    \ #extension:upper()\n         local sm = #extension:lower()\n         strengths[length\
    \ - cap - sm] = extension\n      end\n   end\n   local max_strongest, strongest_extension\
    \ = unpack(\n      pairs(strengths):sort(function(a, b)\n         if a[1] < b[1]\
    \ then\n            return true\n         else\n            return false\n   \
    \      end\n      end)\n   )\n   return string.format(class_name..'.%s', strongest_extension)\n\
    end", "    local strongest = {}\n    local extensions_count = #extensions\n  \
    \  for i=1,extensions_count do\n        local strength = 0\n        for j,letter\
    \ in pairs(extensions[i]) do\n            local char_code = string.byte(letter)\n\
    \            local uppercase_letter = string.byte(\"A\"..letter)\n           \
    \ local lowercase_letter = string.byte(\"a\"..letter)\n            local capital\
    \ = (char_code > uppercase_letter)\n            local lowers = (char_code > lowercase_letter)\n\
    \            strength = strength + capital * 10 + lowers * 1\n        end\n  \
    \      if strength > 0 then\n            table.insert(strongest, extensions[i])\n\
    \        end\n    end\n    local strongest_extensions = {}\n    local strongest_extensions_count\
    \ = #strongest\n    for i=1,strongest_extensions_count do\n        local extension\
    \ = strongest[i]\n        table.insert(strongest_extensions, extension..\".\"\
    ..class_name)\n    end\n    table.sort(strongest_extensions)\n    return strongest_extensions[1]\n\
    end", "  local cap = 1\n  local sm = 1\n  for _, ext in ipairs(extensions) do\n\
    \    if ext:find('^%l') then\n      cap = cap + 1\n    elseif ext:find('^%l')\
    \ then\n      sm = sm + 1\n    end\n  end\n  return class_name:sub(1, cap-sm-1)..'.'..class_name:sub(cap,\
    \ class_name:len())\nend", "    local strongest = {}\n    for i,_x in ipairs(extensions)\
    \ do\n        local ext, strength = string.find(class_name, '%c', i+1), i+1\n\
    \        if strength ~= nil then\n            strongest[ext] = strongest[ext]\
    \ or {}\n            strongest[ext][strength] = true\n        end\n    end\n \
    \   if #strongest == 1 then\n        return class_name:sub(1, 1)..strongest[1]\n\
    \    elseif #strongest > 1 then\n        local _, nstrength = #strongest, 1\n\
    \        for ext, str in pairs(strongest) do\n            if #strongest[ext] >\
    \ nstrength then\n                nstrength = #strongest[ext]\n            end\n\
    \        end\n        return class_name:sub(1, 1)..strongest[nstrength][1]\n \
    \   end\n    return nil\nend", "   local strongest_extension = extensions[1]\n\
    \   for i=2,#extensions do\n      local cap = string.upper(extensions[i]:sub(1,1))\
    \ - string.upper(extensions[i]:sub(2))\n      local sm = string.lower(extensions[i]:sub(1,2))\n\
    \      local strength = cap - sm\n      if strength == 0 then\n         return\
    \ class_name .. '.' .. extensions[i]\n      elseif strength > 0 then\n       \
    \  strongest_extension = extensions[i]\n      end\n   end\n   assert(false, strongest_extension\
    \ .. ' not found in list of extensions')\nend", "    -- Your code goes here\n\
    \    \n    -- Example\n    local classes = {'Slices', 'Sliders', 'Sliders'}\n\
    \    local extensions = {'SliCes', 'SeaFed', 'Stuffed'}\n    local s = Strongest_Extension('Slices',\
    \ extensions)\n    print(s)\nend", "   local strongest_extension = ''\n   for\
    \ _, extension in pairs(extensions) do\n      local s = string.upper(extension:sub(1,1))\n\
    \      local c = string.lower(extension:sub(2))\n      if math.abs(s:sub(1,1)\
    \ - c) > 0 then\n         local strength = string.upper(s):sub(1,1) - string.lower(s):sub(1,1)\n\
    \         if strength > 0 then\n            if strength > strongest_extension:len()\
    \ then\n               strongest_extension = extension\n            end\n    \
    \     else\n            if strongest_extension:len() ~= 0 then\n             \
    \  return '%s.%s' % (class_name, strongest_extension:sub(1,1))\n            else\n\
    \               return '%s.%s' % (class_name, extension)\n            end\n  \
    \       end\n      end\n   end\n   if strongest_extension:len() ~= 0 then\n  \
    \    return '%s.%s' % (class_name, strongest_extension:sub(1,1))\n   else\n  \
    \    return class_name\n   end\nend", "   assert(type(class_name) == \"string\"\
    , \"class_name should be a string\")\n   assert(type(extensions) == \"table\"\
    , \"extensions should be a table\")\n   local max_strength = -1\n   local max_extension\
    \ = \"\"\n   for _, extension in ipairs(extensions) do\n      local strength =\
    \ string.upper(class_name):find(extension, 1, 'B')\n      if strength == nil then\n\
    \         return nil\n      end\n      local cap = string.upper(class_name):find(extension,\
    \ 2, 'B')\n      local sm = string.upper(class_name):find(extension, 3, 'B')\n\
    \      if max_strength == -1 or strength > max_strength or strength == nil then\n\
    \         max_strength = strength\n         max_extension = extension\n      end\n\
    \      if cap == nil and sm == nil then\n         return nil\n      end\n    \
    \  if cap ~= nil and sm ~= nil then\n         if cap - sm > max_strength then\n\
    \            max_strength = cap - sm\n            max_extension = extension\n\
    \         end\n      end\n   end\n   return class_name .. \".\" .. max_extension\n\
    end", "   if extensions == nil then \n      print('The list of extensions must\
    \ be given to find the strongest extension.') \n   else \n      local strength_map\
    \ = {}\n      for _, extension in ipairs(extensions) do\n         local strength\
    \ = tonumber(string.match(extension, '([A-Z])([a-z])+'))\n         if strength\
    \ == nil then \n            print(string.format('Could not parse extension %s\
    \ for class %s. Extension should be in format <CAP><SM>.', extension, class_name))\n\
    \         elseif strength_map[strength] == nil then \n            strength_map[strength]\
    \ = { extension, class_name }\n         else\n            print(string.format('The\
    \ extension (%s) is already registered for the strength %d.', extension, strength))\n\
    \         end\n      end", "  -- Your code goes here\n  local strongest, strongest_index\
    \ = nil, nil -- The most \"strong\" extension\n  \n  for i = 1, #extensions do\n\
    \    local cp = string.upper(extensions[i])\n    local sp = string.lower(extensions[i])\n\
    \    local strength = #cp - #sp\n    \n    if not strongest_index then\n     \
    \ strongest = extensions[i]\n      strongest_index = i\n    else\n      if strength\
    \ > 0 then\n        strongest = strongest\n        strongest_index = i\n     \
    \ elseif strength == 0 then\n        strongest = extensions[i]\n        strongest_index\
    \ = i\n      end\n    end\n  end\n  \n  return class_name .. '.' .. strongest\n\
    end", "    local function Strongest(name)\n        local counter = { a = 0, b\
    \ = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, \n            i = 0, j = 0, k\
    \ = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, \n            t\
    \ = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0 }\n        local s = name\n\
    \        local length = #s\n        local i, j = 1, length\n        while i <=\
    \ length do\n            counter[s[i:sub(1, i)]:upper():byte()] += 1\n       \
    \     i = j\n            j = i + 1:byte() + 1\n        end\n        local cap\
    \ = counter.A + counter.B + counter.C + counter.D + counter.E + counter.F\n  \
    \      local sm = counter.a + counter.b + counter.c + counter.d + counter.e +\
    \ counter.f + counter.g + counter.h + counter.i + counter.j + counter.k + counter.l\
    \ + counter.m + counter.n + counter.o + counter.p + counter.q + counter.r + counter.s\
    \ + counter.t + counter.u + counter.v + counter.w + counter.x + counter.y + counter.z\n\
    \        return cap - sm\n    end\n    local strength = #extensions:map(function\
    \ (extension)\n        return Strongest(extension)\n    end)\n    return class_name\
    \ .. \".\" .. extensions[math.min(#extensions, #strength)]\nend", "   for _, extension\
    \ in ipairs(extensions) do\n      if string.sub(extension, 1, string.find(class_name,\
    \ \".\", 1, true)) ~= class_name then\n         return nil\n      end\n   end\n\
    \   return class_name .. '.' .. table.concat({-1}, extensions, '') \nend", " \
    \   -- your code here\nend", "  -- This implementation only handles one extension.\n\
    \  local extension = extensions[1]\n  local extension_strength = extension:find('%[Aa]%s+[Bb]%s+[Cc]%s+[Dd]%s+[Ee]%s+[Ff]%s+[Gg]%s+[Hh]%s+[Ii]%s+[Jj]%s+[Kk]%s+[Ll]%s+[Mm]%s+[Nn]%s+[Oo]%s+[Pp]%s+[Qq]%s+[Rr]%s+[Ss]%s+[Tt]%s+[Uu]%s+[Vv]%s+[Ww]%s+[Xx]%s+[Yy]%s+[Zz]%s+[Aa]%s+[Bb]%s+[Cc]%s+[Dd]%s+[Ee]%s+[Ff]%s+[Gg]%s+[Hh]%s+[Ii]%s+[Jj]%s+[Kk]%s+[Ll]%s+[Mm]%s+[Nn]%s+[Oo]%s+[Pp]%s+[Qq]%s+[Rr]%s+[Ss]%s+[Tt]%s+[Uu]%s+[Vv]%s+[Ww]%s+[Xx]%s+[Yy]%s+[Zz]%s+')\n\
    \  if extension_strength ~= nil then\n    extension_strength = extension_strength:sub(1,\
    \ -5)\n    if extension_strength ~= -1 then\n      local strongest_extension =\
    \ class_name .. '.' .. extension_strength .. extension\n      for _, extension\
    \ in pairs(extensions) do\n        local extension_strength = extension:find('%[Aa]%s+[Bb]%s+[Cc]%s+[Dd]%s+[Ee]%s+[Ff]%s+[Gg]%s+[Hh]%s+[Ii]%s+[Jj]%s+[Kk]%s+[Ll]%s+[Mm]%s+[Nn]%s+[Oo]%s+[Pp]%s+[Qq]%s+[Rr]%s+[Ss]%s+[Tt]%s+["]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
