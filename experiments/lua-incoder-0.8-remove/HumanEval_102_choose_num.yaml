name: HumanEval_102_choose_num
language: lua
prompt: "-- This function takes two positive numbers x and y and returns the\n-- biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n-- there's no\
  \ such number, then the function should return -1.\n-- For example:\nlocal function\
  \ choose_num(x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
  \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12),\
  \ -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
  \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
  \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
  \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local a, b = math.min(x, y), math.max(x, y)\n    for i = a, b do\n\
    \        if i%2 ~= 0 then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "  local num = nil\n  local count = 0\n  if x >= y then\n    return\
    \ -1\n  else\n    for i = x; i <= y; i = i + 1 do\n      if i % 2 ~= 0 then\n\
    \        count = count + 1\n        if count > 0 then\n          num = i\n   \
    \     end\n      end\n    end\n    return num\n  end\nend", "  if x >= y then\n\
    \    x, y = y, x\n  end\n  if x % 2 == 0 then\n    return 1\n  end\n  if y % 2\
    \ == 0 then\n    return -1\n  end\n  local i, j = 0, 0\n  while i <= x do\n  \
    \  while j <= y do\n      if i % 2 == 0 and j % 2 == 0 then\n        return i\n\
    \      end\n      j = j + 1\n    end\n    i = i + 1\n    j = i\n  end\n  return\
    \ -1\nend", "    if x > y then\n        x, y = y, x\n    end\n    local result\
    \ = x\n    local divisor = 2\n    while y > 1 do\n        if x % divisor == 0\
    \ then\n            if result == y then\n                return divisor\n    \
    \        else\n                result = y\n            end\n        end\n    \
    \    divisor = divisor + 1\n        y = y / 2\n    end\n    return -1\nend", " \
    \ local even_nums = nil\n  for i = x, y + 1 do\n    if i % 2 == 0 then\n     \
    \ if even_nums == nil then\n        even_nums = i\n      else\n        if even_nums\
    \ > i then \n          even_nums = i\n        end\n      end\n    end\n  end\n\
    \  if even_nums == nil then\n    return -1\n  else\n    return even_nums\n  end\n\
    end\nprint(choose_num(1, 1000000))", "   if x >= y and x < y then\n      return\
    \ x\n   else\n      return y\n   end\nend", "    local max_num = -1\n    for i\
    \ = x, y do\n        if i ~= 0 then\n            if i ~= max_num then\n      \
    \          max_num = i\n            end\n        end\n    end", "   local function\
    \ odd(n)\n      if n % 2 == 0 then return true else return false end\n   end",
  "    -- Write your code here\nend", "   if x ~= nil then\n      if y ~= nil and\
    \ y > x then\n         local result = y\n         while result ~= nil do\n   \
    \         result = math.max(result, x + 1)\n         end\n         return result\n\
    \      end\n   end\n   return -1\nend", "    local m = x ^ y\n    local n = x\
    \ + y\n    local q = x + (n - m) / 2\n    local r = x - (q - m) / 2\n    return\
    \ r if (r % 2) == 0 then r else -1 end\nend\nprint(choose_num(15, 19)) --> 4\n\
    print(choose_num(30, 7)) --> 8\nprint(choose_num(15, 16)) --> -1", "    if x <\
    \ y then\n        x, y = y, x\n    end\n    -- This loop will find out the biggest\
    \ even number that is between x and y.\n    for i = x, y + 1 do\n        if i\
    \ % 2 == 0 and i % 4 ~= 0 then\n            return i\n        end\n    end\n \
    \   return -1\nend", "    --assert(x >= 1 and x <= 100 and y >= 1 and y <= 100)\n\
    \    \n    -- The below code is equivalent to:\n    --if (x >= 1 and x <= 100\
    \ and y >= 1 and y <= 100) then\n    --    local num = x\n    --    while num\
    \ < y do\n    --        num = num * 2\n    --    end\n    --    return num\n \
    \   --else\n    --    return -1\n    --end\n    \n    -- The below code is the\
    \ same but with more efficient code. Notice\n    -- the use of \"and\" instead\
    \ of \"and\".\n    if (x >= 1 and x <= 100 and y >= 1 and y <= 100) then\n   \
    \     local num = x\n        while num < y do\n            num = num * 2\n   \
    \     end\n        return num\n    else\n        return -1\n    end\nend", " \
    \   -- your code here\nend", "  if x >= y then return -1\n  if x < 1 then return\
    \ y\n  if y < 1 then return x\n  if x == 1 then return y\n  local last_number\
    \ = y\n  while last_number > x do\n    last_number = last_number / 2\n  end\n\
    \  last_number = 1\n  local last_number_2 = last_number * last_number\n  while\
    \ x <= last_number_2 do\n    local number_to_add = last_number * 2\n    while\
    \ number_to_add < x do\n      number_to_add = number_to_add * 2\n    end\n   \
    \ x = x + number_to_add\n    local last_number = last_number + number_to_add\n\
    \    local last_number_2 = last_number * last_number\n  end\n  return last_number\n\
    end", "   local x\n   if y <= x then\n      x = y\n   else\n      x = y\n   end\n\
    \   local i = 0\n   while x <= y and x < 5000000 do\n      if x % 2 == 0 then\n\
    \         x = x + 1\n      else\n         x = x + (y - 1)\n      end\n      i\
    \ = i + 1\n   end\n   if i == 0 then\n      return -1\n   elseif i == 1 then\n\
    \      return x\n   else\n      return choose_num(x, y)\n   end\nend", "  -- your\
    \ implementation\nend", "  if x > y and x <= (math.floor(y/2)) then\n    return\
    \ y\n  end\n  return -1\nend", "    if x > y then\n        x, y = y, x\n    end\n\
    \    while x ~= y do\n        x = x + 1\n        if x % 2 == 0 then\n        \
    \    return x\n        end\n    end\n    return -1\nend", "   if x > y then\n\
    \      x, y = y, x\n   end\n   for i = x, y + 1 do\n      if i % 2 == 0 then\n\
    \         return i\n      end\n   end\n   return -1\nend", "    if x < y then\
    \ return choose_num(y, x) end\n    if x == y then return x end\n    for i = x,\
    \ y-1, 2 do\n        if i %% 2 == 0 then return i end\n    end\n    return -1\n\
    end", "    local i = 1\n    local k = 1\n    local m\n    if x > y then\n    \
    \    x, y = y, x\n    end\n    while i <= y do\n        m = i * i\n        if\
    \ m >= x and m <= y then\n            return k\n        end\n        k = k + 1\n\
    \        i = i + 1\n    end\n    return -1\nend", "   return x + y or -1\nend",
  "   if x == 2 then\n      return -1\n   elseif x > y then\n      return -1\n   elseif\
    \ x == y then\n      return 1\n   else\n      local m = 0\n      local p = 1\n\
    \      local q = 1 -- q is power of 2", "  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  \n  local function is_odd(n)\n    return n % 2 ~= 0\n \
    \ end\n  \n  if x <= y then\n    local function get_next(x)\n      if is_even(x)\
    \ then return x + 1 else return x end\n    end\n    return find_nearest(get_next,\
    \ y, x)\n  else\n    local function get_prev(x)\n      if is_odd(x) then return\
    \ x - 1 else return x end\n    end\n    return find_nearest(get_prev, x, y)\n\
    \  end\nend", "    -- ...\nend", "   if x < y then return choose_num(x, y + 1)\
    \ end\n   if x == y then return x end\n   if x % 2 == 0 then\n      return choose_num(x\
    \ / 2, y) + 1\n   else\n      return choose_num(x / 2, y + 1)\n   end\nend", " \
    \   if x < y then\n        choose_num = -1\n    else\n        choose_num = 0\n\
    \        while x + choose_num < y do\n            choose_num = choose_num * 2\
    \ + 1\n        end\n    end\n    return choose_num\nend\n</cell>\n<text>\n2.4\
    \ Challenge Exercise - Game of Life (More Challenges)", "    if x <= y then\n\
    \        return x\n    end\n    \n    local m = (x + y)/2\n    return choose_num(m,\
    \ y) \nend", "   local function is_even_number(number)\n      return (number %\
    \ 2) == 0\n   end\n   local function is_larger(left, right)\n      return left\
    \ > right or is_even_number(left) and is_even_number(right)\n   end\n   for i\
    \ = x, y = y do\n      if is_even_number(i) then\n         return i\n      end\n\
    \      if is_larger(i, y) then\n         return i\n      end\n   end\n   return\
    \ -1\nend", "    local function is_even_range(x, y)\n        if x == y then\n\
    \            return true\n        else\n            return not (x % y)\n     \
    \   end\n    end\n    local max_val = -1\n    for i = x, y + 1 do\n        if\
    \ is_even_range(i, y) then\n            if max_val < i then\n                max_val\
    \ = i\n            end\n        end\n    end\n    return max_val\nend", "    local\
    \ max_num  = -1\n    local max_even_num", "    if x <= y then return x end\n \
    \   if x == y then return x end\n    if x % 2 == 0 then return x end\n    -- This\
    \ following part is for positive numbers only (x % 2 == 1 would be \n    -- unnecessary\
    \ in this case).\n    if y % 2 == 0 then\n        local m = y / 2\n        local\
    \ result = choose_num(m, y) + 1\n        return result * 2\n    else\n       \
    \ local result = choose_num(x / 2, y) + 1\n        return result * 2\n    end\n\
    end", "    if x >= y then\n        return -1\n    end\n    local num_x = math.floor(x/2)\
    \ \n    local num_y = math.floor(y/2)\n    while num_x%2 == 0 and num_y%2 == 0\
    \ do\n        if num_x > num_y then\n            num_x = num_x + 1\n        else\n\
    \            num_y = num_y + 1\n        end\n    end\n    return num_x + num_y\n\
    end", "    if x <= y then\n        local num = x\n        while num <= y do\n\
    \            if num % 2 == 0 then\n                return num\n            else\n\
    \                num = num * 10 + 1\n            end\n        end\n    end\n \
    \   return -1\nend\nprint(choose_num(13, 45))", "    if x >= y then\n        return\
    \ -1\n    end\n    if x == y then\n        return x\n    end\n    while x <= y\
    \ do\n        local i = 1\n        -- find out how much time we can skip \n  \
    \      while x + i % 2 ~= y do\n            i = i + 1\n        end\n        if\
    \ x + i % 2 == y then\n            return x\n        end\n        x = x + i\n\
    \    end\n    return -1\nend", "  assert(x > 0 and y > 0 and x < y)\n  local biggest\
    \ = nil\n  for i = 1, x do\n    if biggest == nil or biggest < i then\n      biggest\
    \ = i\n    end\n  end\n  if biggest == nil then\n    biggest = -1\n  end\n  biggest\
    \ = biggest + 1\n  for i = y, 1, -1 do\n    if biggest == nil or biggest < i then\n\
    \      biggest = i\n    end\n  end\n  if biggest == nil then\n    biggest = -1\n\
    \  end\n  return biggest\nend", "    if x < y then\n        x, y = y, x\n    end",
  "  local function is_even(i)\n    return i %2 == 0\n  end\n  \n  local function\
    \ choose_even(x)\n    return x + 1\n  end\n  \n  if x <= y then\n    return -1\n\
    \  end\n  \n  -- Return value of function choose_even\n  local function choose_odd(x)\n\
    \    return x + 2\n  end\n  \n  if is_even(x) == is_even(choose_even(x)) == is_even(y)\
    \ then\n    return choose_even(x)\n  end\n  \n  if is_even(y) == is_even(choose_even(x))\
    \ == is_even(y) then\n    return choose_odd(x)\n  end\n  \n  if is_even(x) ==\
    \ is_even(choose_odd(x)) == is_even(y) then\n    return choose_odd(x)\n  end\n\
    \  \n  return -1\nend\nprint(choose_num(5, 6))", '   if x <= 0 or y <= 0 then
    return -1 end', "  if x < y then\n    local big, small = choose_num(x, y)\n  \
    \  if small < 0 or x > y then\n      return -1\n    end\n    return big\n  end\n\
    \  if x == 0 then return -1 end\n  if y > x then return -1 end", "   if x < y\
    \ then return -1 end\n   if x % 2 == 0 and y % 2 == 0 then\n      if x > y then\
    \ return x end\n      return y\n   else\n      if x < y then\n         x, y =\
    \ y, x\n         return choose_num(x, y)\n      else\n         return -1\n   \
    \   end\n   end\nend", "    if x >= y then\n        return -1\n    elseif x ==\
    \ 2 or y == 2 then\n        return 2\n    elseif x == y then\n        return x\n\
    \    else\n        return x + choose_num(x - 1, y)\n    end\nend", "    local\
    \ even = math.random(math.floor(x), math.ceil(y))\n    if even % 2 ~= 0 then\n\
    \        return even\n    else\n        return choose_num(x, y)\n    end\nend",
  "    return math.max(x,y)\nend", "    local function is_even(x)\n        return\
    \ x == 0 and 1 or 0\n    end\n    if x > y then\n        x, y = y, x\n    end\n\
    \    local min_v = math.min(x, y)\n    local max_v = math.max(x, y)\n    if min_v\
    \ == max_v then\n        return 0\n    end\n    local num_even = is_even(min_v)\n\
    \    local num_odd = is_even(max_v)\n    local num_min = math.floor(min_v / 2)\n\
    \    local num_max = math.floor(max_v / 2)\n    local num_min = math.min(x, y)\n\
    \    local num_max = math.max(x, y)\n    local num_min = math.min(x, y)\n    local\
    \ num_max = math.max(x, y)\n    local num_min\n    if num_min < y then\n     \
    \   num_min = y\n    end\n    if num_max > x then\n        num_max = x\n    end\n\
    \    if num_min > x and num_max > y then\n        num_min = num_max\n    end\n\
    \    if num_min == x and num_max == y then\n        return -1\n    end\n    if\
    \ num_min == x and num_even == 1 then\n        return num_max\n    end\n    if\
    \ num_max == y and num_even == 1 then\n        return num_min\n    end\n    if\
    \ num_min == x and num_even == 0 and num_max == y then\n        return num_max\n\
    \    end\n    if num_max == y and num_even == 0 and num_min == y then\n      \
    \  return num_min\n    end\n    if num_min == x and num_even == 0 and num_max\
    \ == y then\n        return num_max\n    end\n    if num_max == y and num_even\
    \ == 0 and num_min == y then\n        return num_min\n    end\n    if num_min\
    \ == x and num_even == 0 and num_max == y then\n        return num_max\n    end\n\
    \    if num_max == y and num_even == 0 and num_min == y then\n        return num_min\n\
    \    end\n    local num_max\n    if num_min < y then\n        num_min = y\n  \
    \  end\n    if num_max > x then\n        num_max = x\n    end\n    if num_min\
    \ > x and num_max > y then\n        num_min = num_max\n    end\n    if num_min\
    \ == x and num_max == y then\n        return -1\n    end\n    if num_min == x\
    \ and num_even == 1 then\n        return num_max\n    end\n    if num_max == y\
    \ and num_even == 1 then\n        return num_min\n    end\n    if num_min == x\
    \ and num_even == 0 and num_max == y then\n        return num_max\n    end\n \
    \   if num_max == y and num_even == 0 and num_min == y then\n        return num_min\n\
    \    end\n    if num_min == x and num_even == 0 and num_max == y then\n      \
    \  return num_max\n    end\n", "   -- Return the biggest even number in the range\
    \ [x, y] inclusively.\n   -- If there's no such number, then return -1.\n   if\
    \ x < y then\n      local max_num = x\n      max_num_pos = x\n      -- If the\
    \ left number is even, the right number is even.\n      if x % 2 == 0 then\n \
    \        if y % 2 == 0 then\n            max_num = y\n            max_num_pos\
    \ = y\n            -- If the left number is even, the right number is even, too.\n\
    \            if x > y then\n               if y % 2 == 0 then\n              \
    \    max_num = y\n                  max_num_pos = y\n                  if x <\
    \ y then\n                     -- If the left number is even, the right number\
    \ is even, too.\n                     return -1\n                  end\n     \
    \          end\n            end\n         end\n      end\n      return max_num\n\
    \   end\n   -- If the left number is even, the right number is even.\n   return\
    \ y\nend\nprint(choose_num(7, 9))\nprint(choose_num(100, 10))\nprint(choose_num(101,\
    \ 105))\nprint(choose_num(100, 15))\nprint(choose_num(19, 20))\nprint(choose_num(73,\
    \ 75))\nprint(choose_num(7, 7))\nprint(choose_num(7, -1))\nprint(choose_num(7,\
    \ -1))\nprint(choose_num(-1, 7))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1, -1))\nprint(choose_num(-1,\
    \ -1))\nprint(choose_", "    local num_found = false\n    for i=1, x do\n    \
    \    if i % 2 == 0 then\n            -- If num_found is true, then we found the\
    \ correct number in range\n            --[x,y]\n            num_found = true\n\
    \            break\n        end\n    end\n    if num_found then\n        return\
    \ x\n    else\n        return -1\n    end\nend", "    -- Write your function here!\n\
    end", "    if x >= y then\n        return -1\n    end\n    local max = 0\n   \
    \ for i=1, x, 1 do\n        if x % 2 == 0 then\n            max = x -- Keep the\
    \ largest even number\n        end\n        x = x / 2 -- Divide x by two to get\
    \ to the next even number\n    end\n    return max\nend", "    if x >= y and x\
    \ % 2 == 0 then \n        return y\n    elseif x == y then \n        return x\
    \ \n    else\n        local evens, odds = x, y\n        \n        while evens\
    \ <= odds do\n            evens, odds = evens + 2, odds + 1\n            \n  \
    \          if evens > odds then\n                return evens\n            end\n\
    \        end\n        \n        return -1\n    end\nend", "    local function\
    \ is_in_range(n)\n        return n > x and n < y\n    end", "    local function\
    \ is_even_number(n)\n        return n and n % 2\n    end\n    return -1 -- if\
    \ there is no such number\nend", "  if x >= y then\n    local x = math.max(x,y)\n\
    \    local y = math.min(x,y)\n    local z = x - y + 1\n    return y*(z-1)\n  else\n\
    \    local x = math.max(x,y)\n    local y = math.min(x,y)\n    local z = x - y\
    \ + 1\n    return z*(z-1)/2\n  end\nend", "    if x >= y then\n        return\
    \ -1\n    end", "  local big = nil\n  for i = x, y do\n    if i % 2 == 0 then\n\
    \      if big == nil then big = i else big = big * 2 end\n    end\n  end\n  return\
    \ big\nend", "    -- your code goes here\nend", "    if x > y then\n        x,\
    \ y = y, x\n    end\n    local num = 1\n    while x <= y do\n        if x % 2\
    \ == 0 then\n            num = num * 2\n            x, y = x + 1, y\n        else\n\
    \            x, y = y + 1, y\n        end\n    end\n    return num\nend", "  \
    \  if x >= y then return -1 end\n    local even = 1\n    local odd  = 1\n    while\
    \ even <= y do\n        even = even + x\n    end\n    while odd <= y do\n    \
    \    odd = odd + y\n    end\n    even = even - x\n    odd = odd - y\n    while\
    \ even > x do\n        even = even - x\n    end\n    while odd > y do\n      \
    \  odd = odd - y\n    end\n    return even\nend", "  if x < y then \n    return\
    \ -1 \n  end \n  \n  if x == y then \n    return x \n  end \n  \n  local n = 3\n\
    \  local i = 3\n  \n  while i <= y do \n    if x % i == 0 and y % i == 0 then\
    \ \n      n = x \n      break \n    end \n    \n    i = i + 2 \n  end \n  \n \
    \ return n \nend", "    local xs = x ^ 1\n    local ys = y ^ 1\n    local zs =\
    \ x ^ y\n    local xe = x ^ y\n    if xe == 0 then\n        return x\n    elseif\
    \ zs == xe then return choose_num(x, y)\n    elseif xs <= ys then\n        return\
    \ choose_num(xs, ys)\n    else return choose_num(xe, ys)\n    end\nend", "\tlocal\
    \ function is_even(n)\n\t\treturn n % 2 == 0\n\tend\n\tlocal function choose_num_internal(x,\
    \ y)\n\t\tif x ~= nil then\n\t\t\tif y ~= nil then\n\t\t\t\tif x <= y then\n\t\
    \t\t\t\tif is_even(x) then\n\t\t\t\t\t\treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\t\
    return y\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tif is_even(y) then\n\t\t\t\t\t\
    \treturn x\n\t\t\t\t\telse\n\t\t\t\t\t\treturn y\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\tif is_even(x) then\n\t\t\t\t\treturn x\n\t\t\t\telse\n\t\t\
    \t\t\treturn -1\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tif y ~= nil then\n\t\t\
    \t\tif is_even(y) then\n\t\t\t\t\treturn y\n\t\t\t\telse\n\t\t\t\t\treturn -1\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\treturn -1\n\t\t\tend\n\t\tend\n\tend\n\tx = choose_num_internal(x,\
    \ y)\n\tif x == -1 then\n\t\treturn -1\n\telse\n\t\treturn x\n\tend\nend", '  local
    result = -1', "  if x<=y then\n    return -1\n  end\n  if x>y then\n    return\
    \ 1\n  end\n  for i=x,y+1 do\n    if i%2==0 then\n      return i\n    end\n  end\n\
    \  return -1\nend", "    return -1\nend", "    local function is_even(n)\n   \
    \     return n % 2 == 0\n    end\n    local function is_between(x, low, high)\n\
    \        return x > low and x < high\n    end\n    if is_between(x, 0, y) then\n\
    \        if is_even(x) then\n            return x\n        else\n            local\
    \ next_x = x + 1\n            local y = y - 1\n            while y > 0 do\n  \
    \              if is_even(y) then\n                    return next_x\n       \
    \         else\n                    next_x = next_x + 1\n                    y\
    \ = y - 1\n                end\n            end\n            return -1\n     \
    \   end\n    end\n    return -1\nend", "  if x > y then\n    x, y = y, x\n  end\n\
    \  local function choose_num_helper(x, y, even)\n    if even then return x end\n\
    \    if x % 2 == 0 then return choose_num_helper(x/2, y, false) end\n    if y\
    \ % 2 == 0 then return choose_num_helper(y/2, x, true) end\n    return -1\n  end\n\
    \  return choose_num_helper(x, y, true)\nend", "    local function is_even_number(number)\n\
    \        return number % 2 == 0\n    end\n    local function choose_even_number(x,\
    \ y)\n        for i = x, y do\n            if is_even_number(i) then\n       \
    \         return i\n            end\n        end\n        return -1\n    end\n\
    \    return choose_even_number(x, y)\nend", "    if x < y then\n        if x >\
    \ y then\n            if x % 2 == 0 then\n                return x\n         \
    \   else\n                return y\n            end\n        else\n          \
    \  return -1\n        end\n    else\n        if y > x then\n            return\
    \ -1\n        else\n            if y % 2 == 0 then\n                return y\n\
    \            else\n                return x\n            end\n        end\n  \
    \  end\nend", "  if x > y then\n    local t = x\n    x = y\n    y = t\n  end\n\
    \  \n  local biggest_even = nil\n  \n  -- Finding the biggest even number\n  for\
    \ i = x to y do\n    if i ~= 0 then\n      if i % 2 ~= 0 then\n        if biggest_even\
    \ ~= nil then\n          biggest_even = biggest_even - 1\n        else\n     \
    \     biggest_even = i\n        end\n      end\n    end\n  end\n  return biggest_even\n\
    end", "\treturn math.floor(x/2) + math.floor(y/2)\nend", "   if x >= y then return\
    \ -1 end\n   local num\n   for i = 3, x + 1 do\n      if x % i == 0 then\n   \
    \      num = i\n         break\n      end\n   end\n   return num\nend", "   local\
    \ max = -1\n   for i = x, y do\n      if i % 2 == 0 then\n         if max < i\
    \ then max = i end\n      elseif i == max then\n         if max < i then max =\
    \ i end\n      end\n   end\n   return max\nend", "    local x_even = (x%2 == 0)\n\
    \    local y_even = (y%2 == 0)\n    local result\n    \n    if x_even and y_even\
    \ then\n        result = math.max(x,y)\n    elseif not x_even and y_even then\n\
    \        result = y\n    elseif not x_even and not y_even then\n        result\
    \ = x\n    end\n    \n    return result\nend", "   return math.max(x - 2, math.min(y\
    \ + 2, x))\nend", "    if x > y then\n        x, y = y, x\n    end\n    if y <=\
    \ 0 then\n        return -1\n    end\n    if x <= y then\n        return x\n \
    \   end\n    if x % 2 == 0 then\n        return x\n    end\n    if y % 2 == 0\
    \ then\n        return y\n    end\n    if x % 3 == 0 then\n        return x\n\
    \    end\n    if y % 3 == 0 then\n        return y\n    end\n    if x % 5 == 0\
    \ then\n        return x\n    end\n    if y % 5 == 0 then\n        return y\n\
    \    end\n    return -1\nend", "   -- The function should return this value:\n\
    \   return 0\nend", "   local function choose_num_aux(x, y, num)\n      if x >\
    \ y then\n         return -1\n      elseif x == y then\n         return num\n\
    \      elseif x < y then\n         return choose_num_aux(x+1, y, num)\n      else\n\
    \         return choose_num_aux(x, y+1, num)\n      end\n   end", "  if x <= 0\
    \ then return end\n  if y <= 0 then return end\n  if x <= y then return x end\n\
    \  local max_num = x\n  for i = y..1, -1, -1 do\n    if max_num <= i then\n  \
    \    max_num = i\n    end\n  end\n  return max_num\nend", "   if x > y and y >\
    \ x and y > 0 then\n      return y\n   else\n      return -1\n   end\nend", "\t\
    local a, b, c, d = x, y, 0, 0\n\twhile d < x and d < y do\n\t\tb = a + b\n\t\t\
    c = c + d\n\t\td = b\n\t\ta = c\n\tend\n\tif d < x then\n\t\treturn x\n\telseif\
    \ d < y then\n\t\treturn y\n\telse\n\t\treturn b\n\tend\nend", "   if x > y then\n\
    \      return x\n   else\n      return y\n   end\nend", "    if x > y then return\
    \ choose_num(y, x) else return x end\nend", "    if x < 0 or y <= x then return\
    \ -1 end\n    local result = 1\n    for i = 2, x and y - x + 1 do\n        if\
    \ x % i == 0 and y % i == 0 then\n            local mult = x * y + i - 1\n   \
    \         if mult > result then\n                result = mult\n            end\n\
    \        end\n    end\n    return result - 1\nend", "    if (x > y) return choose_num(y,\
    \ x)\n    if (x >= y && x % 2 == 0) return x\n    if (y >= x && y % 2 == 0) return\
    \ y\n    if (x >= y && x < y) then return x\n    if (y >= x && y < y) then return\
    \ y\n    return -1\nend", "   if x > y then\n      return choose_num(y, x)\n \
    \  elseif x == 0 then\n      return -1\n   elseif y == 0 then\n      return -1\n\
    \   else\n      if x % 2 == 1 then\n         return choose_num(x-1, y)\n     \
    \ else\n         return choose_num(x, y-1)\n      end\n   end\nend\nprint(choose_num(8,\
    \ 2))", "    local i, num = 0, -1\n    while i < x and num < y do i = i + 1 end\n\
    \    return i\nend", "   local n = 1\n   local i = 2\n   while i <= x do\n   \
    \   if x % i == 0 then\n         n = n ^ i\n      else\n         i = i + 1\n \
    \     end\n   end\n   return n\nend", "\tlocal max_even = nil\n\tlocal max_even_val\
    \ = 0\n\tlocal num_min = x\n\tlocal num_max = y\n\tif x < y then\n\t\tnum_min\
    \ = y\n\t\tnum_max = x\n\tend", "  -- Note that in Lua a negative number is represented\
    \ as a negative integer.\n  -- However, this function does not check for this\
    \ and will return an \n  -- incorrect result if x and y are both negative.\n \
    \ -- So it's better to do explicit check before converting x or y to integer\n\
    \  -- type.\n  return math.max( math.max( x, y ), -1 )\nend", "    local num =\
    \ nil\n    for i=x, y=y+1, 1 do\n        if i %2 == 0 then\n            num =\
    \ i\n        end\n    end\n    return num\nend", "    -- Your code goes here\n\
    \    return -1\nend", "  return math.max( math.floor(x/2), math.floor(y/2) )\n\
    end", "   if x < y then\n      x, y = y, x\n   end\n   if x > y then\n      x,\
    \ y = y, x\n   end\n   if x == y then\n      return x\n   end\n   for i = x, 1,\
    \ -1 do\n      if i % 2 == 0 then\n         return i\n      end\n   end\n   return\
    \ -1\nend", "   if x < y then x, y = y, x\n   for i = x, y + 1 do \n      if i\
    \ % 2 == 0 then\n         return i\n      end\n   end\n   return -1\nend", " \
    \ if x > y then return y end\n  if x == y then return x end", "    local x = tonumber(x)\n\
    \    local y = tonumber(y)\n    if not x or not y then\n        return -1\n  \
    \  end\n    return math.max(math.max(x, y), math.min(x, y))\nend", "  if x <=\
    \ y then\n    local i = x\n    local j = 1\n    local k = 1\n    while i < y do\n\
    \      if j % 2 ~= 0 then\n        break -- If i is even, it doesn't need another\
    \ iteration\n      end\n      k = 2 * k\n      i = i + k\n      j = j + k\n  \
    \  end\n    return i\n  else\n    return -1\n  end\nend", "    if x > y and x\
    \ < y then\n        local i = x\n        local j = y\n        while i <= j do\n\
    \            i = i + 1\n            if x % 2 == 0 then\n                j = j\
    \ + 1\n            end\n        end\n        if x > j then\n            return\
    \ i\n        else\n            return j\n        end\n    end\n    return -1\n\
    end", "\tif x > y then\n\t\treturn -1\n\telse\n\t\tlocal i = 1\n\t\tlocal temp\
    \ = 0\n\t\twhile i <= x and i <= y do\n\t\t\tif x % 2 == 0 and y % 2 == 0 then\n\
    \t\t\t\ttemp = temp + i\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = i + 1\n\
    \t\tend\n\t\tif temp >= x and temp <= y then\n\t\t\treturn temp\n\t\telse\n\t\t\
    \treturn -1\n\t\tend\n\tend\nend", "  if x < y then\n    x, y = y, x\n  end\n\
    \  for i = x, y-1, -1 do\n    if i ~= 0 then\n      i = i // 2\n      if not (i\
    \ + y) % 2 then\n        return i\n      end\n    end\n  end\n  return -1\nend",
  "    local even = (math.floor(x/2) * 2) % 2 == 0\n    if even then \n        --\
    \ Check that the smaller number is greater than the larger one\n        if x <\
    \ y then \n            return choose_num(x-1, y)\n        else\n            return\
    \ choose_num(x, y-1)\n        end\n    else \n        -- Check that the smaller\
    \ number is less than the larger one\n        if x > y then \n            return\
    \ choose_num(x+1, y)\n        else\n            return choose_num(x, y)\n    \
    \    end\n    end\nend\nreturn choose_num(8, 28)\nend", "    if x < 0 or y < 0\
    \ then return -1 end\n    if x % 2 == 0 and y % 2 == 0 then return x end\n   \
    \ if x > y then return choose_num(y ,x) end\n    return choose_num(x, y - 1)\n\
    end", "    if x < 0 or y < 0 then return -1 end\n    if x == 2 or y == 2 then\
    \ return 2 end\n    if x == y then return x end\n    -- now we know x and y are\
    \ positive\n    -- we can simply divide x and y by 2\n    -- until we get x and\
    \ y divided by two\n    -- then just add them\n    local last_d = 1\n    while\
    \ true\n        do\n            x, y = x / 2, y / 2\n            d = x - y\n \
    \           if d ~= last_d then\n                if d == 0 then\n            \
    \        -- this means we get x and y both divided by two\n                  \
    \  return x + y\n                else\n                    -- this means we get\
    \ x and y divided by another even\n                    -- number, and they have\
    \ no common factors\n                    return -1\n                end\n    \
    \        end\n            last_d = d\n        end\n    end\nend", "    if x <\
    \ y then return choose_num(y, x) end\n    \n    -- we know that x >= y\n    if\
    \ x > y then return x end\n    \n    -- let's find the biggest even number in\
    \ the range\n    -- [x, y]\n    local max_num = 0\n    for i = x, y + 1 do\n \
    \       if i % 2 == 0 then\n            max_num = i\n        end\n    end\n  \
    \  return max_num\nend", "\tif x < y then\n\t\treturn choose_num(y, x)\n\tend\n\
    \tif y == 0 then\n\t\treturn x\n\tend\n\tif x > y then\n\t\treturn choose_num(x,\
    \ y - 1)\n\tend\n\tlocal max = 0\n\twhile x < y do\n\t\tmax = max + 1\n\t\tx =\
    \ x + 2\n\tend\n\treturn max + 1 -- To get the final number as we know its even\
    \ number\nend", "\tlocal max_num\n\tlocal min_num\n\tlocal i\n\t\n\tif x < y then\
    \ return -1 end\n\t\n\tfor i = x do \n\t\tif i % 2 ~= 0 then\n\t\t\tif max_num\
    \ == nil or max_num <= i then \n\t\t\t\tmax_num = i \n\t\t\telseif min_num ==\
    \ nil or min_num >= i then \n\t\t\t\tmin_num = i \n\t\t\tend\n\t\tend\n\tend\n\
    \t\n\tif min_num == nil or max_num == nil then return -1 end\n\t\n\treturn min_num\
    \ + max_num\nend\n</cell>\n<cell>", "   if x > y then\n      return choose_num(y,\
    \ x)\n   else\n      local n = math.floor((x + y) / 2)\n      if n % 2 == 0 then\n\
    \         return n\n      else\n         return -1\n      end\n   end\nend", " \
    \  return ...\nend", "    if x < y then\n        local big = y\n        local\
    \ small = x\n    else\n        local big = x\n        local small = y\n    end\n\
    \    while big >= small do\n        if big_even(big) then\n            return\
    \ big\n        end\n        big = big_div(big, 2)\n    end\n    return -1\nend",
  "    local function is_even(n)\n        return math.mod(n, 2) == 0\n    end", " \
    \ local function check(x, y)\n    return x <= y or y == -1 or x > y\n  end\n \
    \ if check(x, y) then\n    return x\n  elseif check(y, x) then\n    return y\n\
    \  else\n    local ans = 1\n    local i = 1\n    while i <= y do\n      if check(i\
    \ * i, y) then\n        ans = i * ans \n        i = i + 1\n      else\n      \
    \  break\n      end\n    end\n    return ans\n  end\nend", "   if x > y and y\
    \ > 0 then\n      if x % 2 == 0 and y % 2 == 0 then\n         return y\n     \
    \ else\n         return x\n      end\n   else\n      return -1\n   end\nend",
  "    local function is_even(n)\n        return n >= 0 and (n % 2) == 0 or n <= 0\n\
    \    end\n    local function is_odd(n)\n        return n >= 0 and (n % 2) == 1\
    \ or n <= 1\n    end\n    if is_even(x) and is_even(y) and x > y then\n      \
    \  return x + (y - x + 1)\n    elseif is_odd(x) and is_odd(y) and y > x then\n\
    \        return x - (y - x + 1)\n    else\n        return -1\n    end\nend", " \
    \   if x < y and x < 70 then\n        return x\n    elseif x > y and x > 70 then\n\
    \        return y\n    elseif x == y then\n        return -1\n    end\nend", " \
    \   if x >= y and y > x then \n        return -1\n    end\n    if x == y then\n\
    \        return x\n    end\n    local even = math.floor(x/y)\n    local diff =\
    \ x - even*y\n    if even == 1 then\n        return even*y\n    elseif diff >=\
    \ 0 then\n        return even*y + diff\n    else\n        return even*y\n    end\n\
    end", "    if x > y then\n        x, y = y, x\n    end\n    for i = x, y + 1 do\n\
    \        if i % 2 == 0 then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "    if x < y then\n        local m = math.ceil(x)\n        if y <\
    \ m then\n            return m\n        end\n    end\n    \n    return math.ceil(y)\
    \ + 1\nend", "   for _, i in pairs(x..y) do\n      if i %2 == 0 then\n       \
    \  return i\n      end\n   end\n   return -1\nend\nprint(choose_num(5,3))", "\t\
    assert(x >= 0 and y > x)\n\tlocal n = math.floor((x + y) / 2)\n\tlocal m = math.floor((x\
    \ - y) / 2)\n\tif n == m then\n\t\treturn -1\n\telseif n == m or n == x + y then\n\
    \t\treturn n\n\telse\n\t\treturn choose_num(x, y)\n\tend\nend", "    local a =\
    \ x -- The biggest even integer between x and y that is in [x, y] inclusive.\n\
    \    local b = y -- The smallest even integer between x and y that is in [x, y]\
    \ inclusive.\n    while a >= b and b ~= 0 do\n        a = a % b + b\n        b\
    \ = a % b + b\n    end\n    if a >= b then\n        return a\n    else\n     \
    \   return -1\n    end\nend", "  if x < y then\n    x, y = y, x\n  end", "   \
    \ if x > y then\n        x, y = y, x\n    end\n    if y == 1 then\n        return\
    \ x\n    end\n    if y == 0 then\n        return -1\n    end\n    if x == 0 then\n\
    \        return 0\n    end\n    -- If x is negative, swap them.\n    if x < 0\
    \ then\n        x, y = -x, -y\n    end\n    local temp = 0\n    while y > 1 do\n\
    \        temp = x % y\n        x, y = y, temp % y\n    end\n    return x - temp\n\
    end", "   if x < y then return choose_num(y, x) end\n   if x == y then return\
    \ x end\n   local m, n = x - y, x + y\n   while m % 2 == 0 and n <= y do\n   \
    \   n = n + x\n      m = m / 2\n   end\n   return n\nend", "  local function is_even(a)\n\
    \    return a%2 == 0\n  end\n  return assert(math.max(is_even(x), is_even(y)))\n\
    end", "    local a = math.floor(x/2)\n    local b = math.floor(y/2)\n    local\
    \ even, odd = false, false\n    for i = a, b-1 do\n        if i ~= math.floor(i)\
    \ then\n            if i % 2 == 0 then\n                even = true\n        \
    \    elseif i % 2 == 1 then\n                odd = true\n            end\n   \
    \     end\n    end\n    if even and odd then\n        return a\n    end\n    if\
    \ even then\n        return b\n    end\n    if odd then\n        return a-1\n\
    \    end\n    return -1\nend", "  local result = nil\n  local x, y = x+0, y+0\
    \ -- convert to integer\n  while x >= y do\n    if x % 2 == 0 then\n      x, y\
    \ = x / 2, y\n    else\n      x, y = x % 2 + 1, x // 2\n    end\n  end\n  if x\
    \ > y then result = x else result = y end\n  return result\nend", "  if x <= y\
    \ then\n    if x % 2 == 0 then\n      return x - 1\n    else\n      return y -\
    \ 1\n    end\n  end\n  if x > y then\n    if y % 2 == 0 then\n      return x -\
    \ 1\n    else\n      return y\n    end\n  end\nend", "    local function is_even(n)\n\
    \        return n % 2 == 0\n    end\n    return x:is_even() and y:is_even() and\
    \ is_even(x:add(y)) and is_even(y:add(x))\n        and x > 0 and y > 0 and x >=\
    \ y and x > y\nend", "    if x < y then\n        return choose_num(y, x)\n   \
    \ end\n    if x == y then\n        return x\n    end\n    -- this line below is\
    \ what we call a \"bisection\" algorithm\n    -- we find the point at which the\
    \ sum of numbers from x to y equals z\n    -- (z starts at y - 1)\n    local z\
    \ = y - 1\n    local xx = x + 1\n    while xx <= z do\n        local yy = y +\
    \ 1\n        local num = choose_num(xx, yy)\n        if num > z then\n       \
    \     return num\n        end\n        yy = yy - 1\n    end\n    return -1\nend",
  "    local function is_even(i)\n        return i ~= 0 and i % 2 == 0\n    end\n\
    \    local function is_odd(i)\n        return i ~= 0 and i % 2 ~= 0\n    end\n\
    \    local i = 1\n    repeat \n        local candidate = i * 2\n        if is_even(candidate)\
    \ or is_odd(candidate) then\n            i = candidate + 1\n        end\n    until\
    \ i <= y \n    return i\nend", "    local n = math.floor(math.sqrt(x + y))\n \
    \   local result = 0\n    for i = 1, n do\n        if (x % i == 0) and (y % i\
    \ == 0) then\n            result = i\n        end\n    end\n    return result\n\
    end", "   if x > y and y > x then return -1\n   if x == y and x > 1 then return\
    \ 1\n   if y == x and y < 1 then return -1\n   if x > y and x == y then return\
    \ 0\n   if x < y and x == y then return 1\n   if x < y and y < x then return -1\n\
    \   if x < y and x == y then return 1\n   if y < x and x == y then return -1\n\
    \   if x < y and x < y then return 0\n   if x > y and x < y then return -1\n \
    \  if x > y and x == y then return 1\n   return -1\nend", "  if x > y then\n \
    \   x, y = y, x\n  end", "  local function is_even(n)\n    return n % 2 == 0\n\
    \  end\n  \n  if x > y then\n    x, y = y, x\n  end\n  \n  local function next_odd(n)\n\
    \    return (n - 1) ~= 0 and (n - 1) + 1 or n\n  end\n  \n  local function next_even(n)\n\
    \    return n ~= 0 and n + 1 or n\n  end\n  \n  local function get_num_at_interval(min,\
    \ max)\n    if min < max then\n      return (min == max) and next_even(max) or\
    \ min + (max - min) / 2\n    else\n      return -1\n    end\n  end\n  \n  local\
    \ function get_num_at_midpoint(min, max)\n    if min < max then\n      local mid\
    \ = min + (max - min) / 2\n      local num_at_midpoint = get_num_at_interval(min,\
    \ mid)\n      if num_at_midpoint ~= -1 then\n        return num_at_midpoint\n\
    \      end\n      \n      local num_at_midpoint = get_num_at_interval(mid + 1,\
    \ max)\n      if num_at_midpoint ~= -1 then\n        return num_at_midpoint\n\
    \      end\n    end\n    \n    return -1\n  end\n  \n  local function get_num_at_max_interval(min,\
    \ max)\n    local num_at_max_interval = -1\n    \n    if min > max then\n    \
    \  max, min = min, max\n    end\n    \n    if min < 2 then\n      return -1\n\
    \    end\n    \n    if min % 2 == 0 then\n      min = min - 1\n    end\n    \n\
    \    local evens = is_even(min)\n    local odds = is_odd(max)\n    \n    if evens\
    \ and odds then\n      local n = next_odd(min) + next_odd(max)\n      \n     \
    \ num_at_max_interval = n / 2\n      if n % 2 == 1 then\n        num_at_max_interval\
    \ = num_at_max_interval + 1\n      end\n    end\n    \n    if evens then\n   \
    \   local n = next_even(min) + next_even(max)\n      \n      num_at_max_interval\
    \ = n / 2\n      if n % 2 == 1 then\n        num_at_max_interval = num_at_max_interval\
    \ + 1\n      end\n    end\n    \n    if odds then\n      local n = next_odd(min)\
    \ + next_even(max)\n      \n      num_at_max_interval = n / 2\n      if n % 2\
    \ == 1 then\n        num_at_max_interval = num_at_max_interval + 1\n      end\n\
    \    end\n    \n    if min == max then\n      num_at_max_interval = min\n    end\n\
    \    \n    return num_at_max_interval\n  end\n  \n  return get_num_at_max_interval(x,\
    \ y)\nend", "  local function helper(x, y)\n    if x == 0 or y == 0 then\n   \
    \   return -1\n    end\n    if x < y then\n      x, y = y, x\n    end\n    if\
    \ x == y then\n      local xy = x * y\n      x = x ^ y\n      y = xy ^ y\n   \
    \   x = x ^ (y / 2)\n      y = xy ^ y\n      x = x ^ (y / 2)\n      y = x ^ y\n\
    \      y = y ^ x\n      return x\n    end\n    if x == y / 2 then\n      x = x\
    \ ^ y\n      y = x ^ y\n      x = x ^ (y / 2)\n      y = x ^ y\n      x = x ^\
    \ (y / 2)\n      y = x ^ y\n      y = y ^ x\n      return x\n    end\n  end\n\
    \  local xx = helper(x - 1, 1)\n  if xx < 0 and xx > y then\n    return xx ^ yy\n\
    \  end\n  local yy = helper(y - 1, 1)\n  return xx or yy\nend", "\tlocal x_even\
    \ = x % 2\n\tlocal y_even = y % 2\n\tlocal z = 0\n\t\n\tif x_even == y_even then\n\
    \t\tz = x\n\telse\n\t\tz = y\n\tend", "    if x < y then\n\tx = y\n\ty = x\n \
    \   end\n    if x == y then\n\tprint(\"Sorry, this range is invalid\")\n\treturn\
    \ -1\n    end\n    \n    -- x -- largest even number\n    -- y -- smallest even\
    \ number", "  if x >= y then return -1 end\n  local num = 2\n  while x <= y do\n\
    \    if num > y then break end\n    num = num * 2 + 1\n    x = x + 1\n  end\n\
    \  return num\nend", "    local n = math.abs(x-y)\n    local result = -1\n   \
    \ if n < 2 then\n        return result\n    end\n    while n > 0 do\n        result\
    \ = result * 10 + n % 2\n        n = math.floor(n / 2)\n    end\n    return result\n\
    end", "   -- Check if there's such a number.\n   if x >= y and x > 0 then\n  \
    \    return x\n   end", "   if x > y and x % 2 == 1 and y % 2 == 0 then\n    \
    \  return x\n   elseif x < y and x % 2 == 0 and y % 2 == 1 then\n      return\
    \ y\n   elseif x <= y and x % 2 == 0 and y % 2 == 0 then\n      return x\n   elseif\
    \ x >= y and x % 2 == 1 and y % 2 == 1 then\n      return y\n   else\n      return\
    \ -1\n   end\nend", "    local function check_even()\n        if x % 2 == 0 then\n\
    \            return x\n        else\n            return check_even()\n       \
    \ end\n    end", "  -- x must be greater than y\n  assert(x > y, \n      \"choose_num\
    \ expects two numbers as input, both greater than 0\")\n  -- x and y are positive\
    \ numbers\n  assert(x > 0, \n      \"choose_num expects two positive numbers as\
    \ input\")\n  -- x is smaller than y\n  assert(x < y, \n      \"choose_num expects\
    \ two numbers as input, both smaller than y\")\n  -- x is even\n  if x % 2 ==\
    \ 0 then\n    -- y is even too\n    if y % 2 == 0 then\n      return x -- both\
    \ x and y are even\n    end\n    -- y is odd\n    -- if y is not even, then x\
    \ must be even too\n    if y % 2 ~= 0 then\n      return -1\n    end\n    -- y\
    \ is even\n    return x\n  end\n  -- x is odd\n  if y % 2 == 0 then\n    -- y\
    \ is odd, too\n    -- if y is not even, then x must be even too\n    if y % 2\
    \ ~= 0 then\n      return -1\n    end\n    -- y is even\n    return x\n  end\n\
    \  -- y is even\n  return -1\nend", "    local function is_even_number(number)\n\
    \        return number % 2 == 0\n    end\n    local function is_bigger_than_x(number)\n\
    \        return number > x\n    end\n    local function is_bigger_than_y(number)\n\
    \        return number > y\n    end\n    if is_even_number(x) and is_even_number(y)\
    \ and is_bigger_than_x(y) and is_bigger_than_y(x) then\n        return y\n   \
    \ else\n        return -1\n    end\nend", "    local max = x or y\n    while max\
    \ > x do\n        max = math.ceil(max / 2.0)\n    end\n    while max > y do\n\
    \        max = math.ceil(max / 2.0)\n    end\n    return max\nend", "  local result\
    \ = nil\n  local i\n  \n  for i = x, y do\n    if math.mod(i, 2) == 0 then\n \
    \     if result ~= nil then\n\treturn -1\n      else\n\tresult = i\n      end\n\
    \    end\n  end", "    local num = nil\n    local i = 1\n    while true do\n \
    \       if ((x + i) % 2 == 0 or (x + i) / 2 == y) then\n            num = x +\
    \ i\n        end\n        i = i + 2\n    end\n    return num\nend", "    local\
    \ num_x = math.floor(x)\n    local num_y = math.floor(y)\n    if num_x ~= num_y\
    \ then\n        if num_x > num_y then\n            -- num_x is bigger than num_y,\
    \ return num_y\n            return num_y\n        else\n            -- num_y is\
    \ bigger than num_x, return num_x\n            return num_x\n        end\n   \
    \ end\n    -- Return -1\n    return -1\nend", "\tlocal even = x % 2\n\tx = x -\
    \ even\n\tif even ~= 0 then\n\t\ty = y + 1\n\tend\n\tlocal z = 0\n\twhile x ~=\
    \ y and z ~= y do\n\t\tz = z + 1\n\t\ty = z * 3 + 1\n\tend\n\tif z ~= y then\n\
    \t\treturn -1\n\telse\n\t\treturn z\n\tend\nend", "  if x < y then\n    return\
    \ choose_num(y, x)\n  end\n  if y <= x then\n    return -1\n  end", "   local\
    \ max = -1\n   for i = x, y + 1 do \n      if (x % 2 == 0 and y % 2 == 0 and i\
    \ % 2 == 0) or (x % 2 == 0 and y % 2 == 1 and i % 2 == 1) or (x % 2 == 1 and y\
    \ % 2 == 0 and i % 2 == 1) then\n         if max < i then\n            max = i\n\
    \         end\n      end\n   end\n   return max\nend", "  local result = nil\n\
    \  \n  -- Check if there's a number between x and y\n  for i = x, y + 1 do\n \
    \   if math.floor(i) % 2 == 0 then\n      if result then\n        result = math.max(result,\
    \ i)\n      else\n        result = i\n      end\n    end\n  end\n  \n  return\
    \ result\nend", "    local i, j = 1, 2\n    while i <= y do\n        if x % i\
    \ == 0 then\n            if x % j == 0 then\n                return i\n      \
    \      else\n                j = j + 1\n            end\n        end\n       \
    \ i = i + 2\n    end\n    return -1\nend", "    -- your code here\nend", "  --\
    \ Write your code here.\n  return -1\nend", "    local function is_even_number(n)\n\
    \        if ((n / 2) == 0) then\n            return false\n        else\n    \
    \        return true\n        end\n    end", "    if x < y then return choose_num(y,\
    \ x) end\n    -- now we have a number that is in the range [x, y] inclusive,\n\
    \    -- let's find the largest even number from it:\n    if x <= 1 then return\
    \ 1 end\n    if x > y then return choose_num(x >> 1, y) end", "    if x >= y then\
    \ return x end\n    for i = x, y + 1, 2 do\n        if i ~= math.ceil(i) then\n\
    \            return i\n        end\n    end\n    return -1\nend", "\tif x > y\
    \ then return choose_num(y, x) else return x end\n\tif x % 2 == 0 then\n\t\tfor\
    \ i = 2, x/2 do\n\t\t\tif x % i == 0 then return choose_num(i, x) else return\
    \ -1\n\t\tend\n\telse\n\t\tfor i = 2, x/2 do\n\t\t\tif y % i == 0 then return\
    \ choose_num(i, x) else return -1\n\t\tend\n\tend\n\treturn -1\nend", "   if x%2==0\
    \ and y%2==0 then\n      return x\n   elseif y%2==0 then\n      return y\n   elseif\
    \ x%2==0 then\n      return -1\n   else\n      return -1\n   end\nend\nprint(choose_num(15,\
    \ 10))", "    if x > y then\n        x, y = y, x\n    end\n    if x == y then\n\
    \        return x\n    elseif x % 2 == 0 then\n        return x \n    else\n \
    \       local x_odd = x % 2\n        local y_odd = y % 2\n        local x_even\
    \ = x + x_odd\n        local y_even = y + y_odd\n        return choose_num(x_even,\
    \ y_even)\n    end\nend", "    if x < 0 or x > y or y < 0 then\n        return\
    \ -1\n    end\n    local result = nil\n    for i = x:step(1, y) or 1 do\n    \
    \    if result ~= nil then\n            return -1\n        end\n        if i %\
    \ 2 == 0 then\n            result = i\n        end\n    end\n    return result\n\
    end", "    if x >= y then\n        x, y = y, x\n    end\n    local z = 1\n   \
    \ for i = x, y + 1 do \n        if z ~= i then\n            z = z * 2\n      \
    \  else\n            break\n        end\n    end\n    return z\nend", "    return\
    \ (x * y) / math.max(x, y)\nend", "    if x <= y then\n        x = x + 1\n   \
    \     y = y - 1\n    else\n        y = y - 1\n    end\n    if y <= 0 then\n  \
    \      if x == 0 then\n            return y\n        else\n            return\
    \ x\n        end\n    end", "  if x < y then\n    return -1\n  else\n    return\
    \ math.floor(x / 2)\n  end\nend", "  if x > y then return choose_num(y, x) end\n\
    \  local n = x\n  while n < y do\n    n = n + 1\n    if n % 2 == 0 then\n    \
    \  local m = n\n      while m < y do\n        m = m + 1\n        if m % 2 == 0\
    \ then\n          return m\n        end\n      end\n    end\n  end\n  return -1\n\
    end\nprint (choose_num(3, 6))\n</cell>\n<text>\nThe function above returns the\
    \ smallest even number that is in the range [x, y] inclusive. The algorithm is\
    \ easy to implement recursively.", "\tlocal num = nil\n\tlocal i = x\n\tlocal\
    \ j = y\n\tif i == j then\n\t\treturn -1\n\tend\n\twhile i <= j do\n\t\tlocal\
    \ c = i / 2\n\t\tif c % 2 == 0 then\n\t\t\tnum = c\n\t\t\tbreak\n\t\telse\n\t\t\
    \ti = c + 1;\n\t\tend\n\tend\n\treturn num\nend", "   if x >= y then\n      print(\"\
    This is not possible.\")\n      return -1\n   else\n      for i = x, y-1, 1 do\n\
    \         if x % i == 0 then\n            return i\n         end\n      end\n\
    \   end\nend", "    local function is_even_number(x)\n        if x%2==0 then\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    local num = -1\n    while not is_even_number(x) do\n        x =\
    \ x +1\n        num = num +1\n    end\n    num = num-1\n    while not is_even_number(y)\
    \ do\n        y = y-1\n        num = num-1\n    end\n    return num\nend", " \
    \  if x == 2 then return y end\n   if y == 1 then return x end\n   return x +\
    \ y\nend\nprint(choose_num(2, 6))", "    local function is_even(x)\n        return\
    \ x % 2 == 0\n    end\n    local function choose_even(x, y) return x end\n   \
    \ return y <= x and is_even(x) or choose_even(x, y - 1)\nend", "\tlocal function\
    \ check(x, y)\n\t\tif x >= y and x >= x then\n\t\t\treturn x\n\t\telseif y >=\
    \ y and y >= y then\n\t\t\treturn y\n\t\telseif x == y then\n\t\t\treturn -1\n\
    \t\tend\n\tend", "\t-- Only one argument is required.\n\tif #_ == 2 then\n\t\t\
    local x, y = (x and x) or 1, (y and y) or 1", "   for i = x,y+1 do\n      if i\
    \ ~= x && i ~= y then\n         return i\n      else\n         break\n      end\n\
    \   end\n   if x > y then return x else return y end\nend", "   if x < y then\
    \ return choose_num(y, x) end\n   if x == y then return x end\n   if x % 2 ~=\
    \ 0 then return choose_num(x / 2, y) end\n   for z = x, 1, -1 do\n      local\
    \ num = (z * z) % y\n      if num % 2 == 0 then return num\n   end\n   return\
    \ -1\nend", "    local num = 1\n    local max_num = -1\n    while num < y do\n\
    \        if (num % 2) == 0 then\n            if max_num < num then\n         \
    \       max_num = num\n            end\n        end\n        num = num + 1\n \
    \   end\n    return max_num\nend", "  -- your code goes here\nend", "    local\
    \ min_num = x or 0\n    local max_num = y or 0\n    for i = min_num, max_num +\
    \ 1 do\n        if i %2 ~= 0 then\n            return i\n        end\n    end\n\
    \    return -1\nend", "  if x < y then return choose_num(y, x) end\n  if x ==\
    \ y then return x end\n  for i = x, x + 2 do\n    if i ~= y then\n      if i %2\
    \ ~= 0 then\n        return i\n      end\n    end\n  end\n  return -1\nend", " \
    \  if x%2 ~= 0 then return x end\n   for a=y, b=0, a<x do\n      b=(b*2)+a\n \
    \  end\n   return b\nend", "  local function even(x)\n    return (x % 2) == 0\
    \ and x or nil\n  end\n  local function odd(x)\n    return (x % 2) == 1 and x\
    \ or nil\n  end\n  local function biggest(x, y)\n    if x == y then return x end\n\
    \    if even(x) == even and even(y) == even then return x end\n    if even(x)\
    \ == even and even(y) == odd then return y end\n    if even(x) == odd and even(y)\
    \ == odd then return x end\n    if even(x) == odd and even(y) == even then return\
    \ y end\n    if odd(x) == odd and odd(y) == odd then return x end\n    if odd(x)\
    \ == odd and odd(y) == even then return y end\n    if odd(x) == even and odd(y)\
    \ == odd then return x end\n    if odd(x) == even and odd(y) == even then return\
    \ y end\n    return nil\n  end\n  return biggest(x, y)\nend", "  if x >= y then\
    \ return -1 end\n  if x <= 1 then return 1 end\n  if x % 2 == 0 then return x\
    \ end\n  local biggest_even = 1\n  while biggest_even <= y do\n    local temp\
    \ = biggest_even\n    biggest_even = (biggest_even + x) / 2\n    if biggest_even\
    \ < temp then return -1 end\n    if biggest_even > y then return 1 end\n  end\n\
    \  return -1\nend", "    if x < y then\n        x, y = y, x\n    end\n    if y\
    \ > x then\n        x, y = y, x\n    end\n    if x < 2 then\n        x = 1\n \
    \   end\n    if y < 2 then\n        y = 1\n    end\n    local max_num = 1\n  \
    \  for i = x, y + 1 do\n        if max_num <= i then\n            max_num = i\n\
    \        end\n    end\n    return max_num\nend", "    if x >= y and x >= x then\n\
    \        return x\n    elseif y >= y and y >= y then\n        return y\n    else\n\
    \        return -1\n    end\nend", "  if x > y then return choose_num(y, x) end\n\
    \  if x % 2 == 0 then\n    return x -- x is even\n  else\n    return x -- x is\
    \ odd\n  end\nend\nchoose_num(7, 12)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a number n and returns the number of leading zeroes in n. For example:\n\
    7 is 0, but 0 is also a leading zero.\n0 is 0, but 0 is also a leading zero.\n\
    1 is 0, but 0 is also a leading zero.\n13 is 3, but 3 is not a leading zero.\n\
    14 is 3, but 3 is not a leading zero.", "  if x < y then\n    x, y = y, x\n  end",
  "  -- Check whether the number is in the range [x, y]\n  local function in_range()\n\
    \    if x > y then return false end\n    if x == y then return true end\n  end\n\
    \  -- Return biggest even number in [x, y]\n  local function is_even()\n    if\
    \ x > y and x % 2 == 0 then return true end\n    if y > x and y % 2 == 0 then\
    \ return true end\n  end\n  -- Return biggest even number that is a multiple of\
    \ 3 in [x, y]\n  local function is_even_multiple()\n    if x > y and x % 3 ==\
    \ 0 then return true end\n    if y > x and y % 3 == 0 then return true end\n \
    \ end\n  if in_range() and not is_even() and not is_even_multiple() then\n   \
    \ return -1\n  end\n  return x * x + y * y\nend", "   return -1 if (x <= 0 or\
    \ y <= 0) or (x < y) or (x == y)\n   \n   local n = (x + (y / 2))/2\n   local\
    \ max_num = (x + y)/2\n   \n   if n == max_num then\n      return n\n   else\n\
    \      return choose_num(x, max_num)\n   end\nend", "   if x >= y then\n     \
    \ x, y = y, x\n   end\n   for i = x:y do\n      if i % 2 == 0 then\n         return\
    \ i\n      end\n   end\n   if x == y then\n      return x\n   end\n   return -1\n\
    end", "   if x < y then\n      choose_num(y, x)\n   elseif x == y then\n     \
    \ x\n   else\n      choose_num(x+1, y)\n   end\nend", "   if x > y then\n    \
    \  local temp = x\n      x = y\n      y = temp\n   end\n   for _, i in pairs(table_range(1,\
    \ x, y)) do\n      if i % 2 ~= 0 then\n         return i\n      end\n   end\n\
    \   return -1\nend", "\tlocal num = -1\n\tlocal i = 1\n\twhile i <= x and i <=\
    \ y do\n\t\tif ((x % 2) == 0) and (y % 2) ~= 0 then\n\t\t\tnum = x + (i * y)\n\
    \t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn num\nend", "\tif x < 1 or\
    \ x > y then\n\t\treturn -1\n\tend\n\tlocal max = 0\n\tlocal m = #x\n\twhile m\
    \ > 0 do\n\t\tif x[m] > y then\n\t\t\tbreak\n\t\telseif x[m] > max then\n\t\t\t\
    max = x[m]\n\t\tend\n\t\tm = m - 1 -- remove from beginning\n\tend\n\treturn max\n\
    end", "    local function is_between(x, min, max)\n        if x >= min and x <=\
    \ max then\n            return x\n        end\n        return -1\n    end\n  \
    \  if is_between(x, 0, y) then\n        return -1\n    end\n    if is_between(y,\
    \ x, 2 * y) then\n        return -1\n    end\n    if is_between(x, (y / 2) + 1,\
    \ y) then\n        return x + (y / 2)\n    end\n    if is_between(2 * x, (y /\
    \ 2) + 1, y) then\n        return 2 * x + (y / 2)\n    end\n    if is_between(3\
    \ * x, (y / 2) + 1, y) then\n        return 3 * x + (y / 2)\n    end\n    if is_between(4\
    \ * x, (y / 2) + 1, y) then\n        return 4 * x + (y / 2)\n    end\n    if is_between(5\
    \ * x, (y / 2) + 1, y) then\n        return 5 * x + (y / 2)\n    end\n    if is_between(6\
    \ * x, (y / 2) + 1, y) then\n        return 6 * x + (y / 2)\n    end\n    if is_between(7\
    \ * x, (y / 2) + 1, y) then\n        return 7 * x + (y / 2)\n    end\n    if is_between(8\
    \ * x, (y / 2) + 1, y) then\n        return 8 * x + (y / 2)\n    end\n    if is_between(9\
    \ * x, (y / 2) + 1, y) then\n        return 9 * x + (y / 2)\n    end\n    if is_between(10\
    \ * x, (y / 2) + 1, y) then\n        return 10 * x + (y / 2)\n    end\n    if\
    \ is_between(11 * x, (y / 2) + 1, y) then\n        return 11 * x + (y / 2)\n \
    \   end\n    if is_between(12 * x, (y / 2) + 1, y) then\n        return 12 * x\
    \ + (y / 2)\n    end\n    if is_between(13 * x, (y / 2) + 1, y) then\n       \
    \ return 13 * x + (y / 2)\n    end\n    if is_between(14 * x, (y / 2) + 1, y)\
    \ then\n        return 14 * x + (y / 2)\n    end\n    if is_between(15 * x, (y\
    \ / 2) + 1, y) then\n        return 15 * x + (y / 2)\n    end\n    if is_between(16\
    \ * x, (y / 2) + 1, y) then\n        return 16 * x + (y / 2)\n    end\n    if\
    \ is_between(17 * x, (y / 2) + 1, y) then\n        return 17 * x + (y / 2)\n \
    \   end\n    if is_between(18 * x, (y / 2) + 1, y) then\n        return 18 * x\
    \ + (y / 2)\n    end\n    if is_between(19 * x, (y / 2) + 1, y) then\n       \
    \ return 19 * x + (y / 2)\n    end\n    if is_between", "   if x > y then\n  \
    \    x, y = y, x\n   end", "   if x <= y then\n      return choose_num(x + 1,\
    \ y)\n   elseif x > y then\n      return choose_num(x, y + 1)\n   else\n     \
    \ -- If x and y are both even then:\n      if x % 2 == 0 and y % 2 == 0 then\n\
    \         -- Return the sum of x and y.\n         return x + y\n      -- If x\
    \ is odd and y is even then:\n      elseif x % 2 == 0 and y % 2 ~= 0 then\n  \
    \       return x\n      -- If x is even and y is even then:\n      elseif x %\
    \ 2 ~= 0 and y % 2 == 0 then\n         return y\n      -- If x is odd and y is\
    \ odd then:\n      elseif x % 2 ~= 0 and y % 2 ~= 0 then\n         return x +\
    \ y\n      -- If x is even, y is even, and they are equal then:\n      else\n\
    \         return x\n      end\n   end\nend", "  if x > y then\n    return choose_num(y,\
    \ x)\n  end\n  local num_ones = math.floor((x - y) / 2)\n  local num_twos = math.floor((x\
    \ + y) / 2)\n  if num_ones == num_twos then\n    return x + 1\n  elseif num_twos\
    \ == 0 then\n    return y\n  else\n    return num_ones\n  end\nend", "    -- Your\
    \ code here\n    return \nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
