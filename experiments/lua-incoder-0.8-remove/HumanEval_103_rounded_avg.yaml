name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n > m then return -1 end\n  if n == m then return n end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    count = count + 1\n    sum\
    \ = sum + i\n  end\n  return round(sum / count)\nend", "  if m > n then return\
    \ -1 end\n  return n * (n / m + 1)\nend", "    return math.floor((m+n)/2)\nend\n\
    print(rounded_avg(4, 15))\nprint(rounded_avg(2, 10))\nprint(rounded_avg(1, 1))\n\
    print(rounded_avg(5, 5))\nprint(rounded_avg(6, 6))\nprint(rounded_avg(7, 7))\n\
    print(rounded_avg(8, 8))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(10, 10))\n\
    print(rounded_avg(11, 11))\nprint(rounded_avg(12, 12))\nprint(rounded_avg(13,\
    \ 13))\nprint(rounded_avg(14, 14))\nprint(rounded_avg(15, 15))\nprint(rounded_avg(16,\
    \ 16))\nprint(rounded_avg(17, 17))\nprint(rounded_avg(18, 18))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(20, 20))\nprint(rounded_avg(21, 21))\nprint(rounded_avg(22,\
    \ 22))\nprint(rounded_avg(23, 23))\nprint(rounded_avg(24, 24))\nprint(rounded_avg(25,\
    \ 25))\nprint(rounded_avg(26, 26))\nprint(rounded_avg(27, 27))\nprint(rounded_avg(28,\
    \ 28))\nprint(rounded_avg(29, 29))\nprint(rounded_avg(30, 30))\nprint(rounded_avg(31,\
    \ 31))\nprint(rounded_avg(32, 32))\nprint(rounded_avg(33, 33))\nprint(rounded_avg(34,\
    \ 34))\nprint(rounded_avg(35, 35))\nprint(rounded_avg(36, 36))\nprint(rounded_avg(37,\
    \ 37))\nprint(rounded_avg(38, 38))\nprint(rounded_avg(39, 39))\nprint(rounded_avg(40,\
    \ 40))\nprint(rounded_avg(41, 41))\nprint(rounded_avg(42, 42))\nprint(rounded_avg(43,\
    \ 43))\nprint(rounded_avg(44, 44))\nprint(rounded_avg(45, 45))\nprint(rounded_avg(46,\
    \ 46))\nprint(rounded_avg(47, 47))\nprint(rounded_avg(48, 48))\nprint(rounded_avg(49,\
    \ 49))\nprint(rounded_avg(50, 50))\nprint(rounded_avg(51, 51))\nprint(rounded_avg(52,\
    \ 52))\nprint(rounded_avg(53, 53))\nprint(rounded_avg(54, 54))\nprint(rounded_avg(55,\
    \ 55))\nprint(rounded_avg(56, 56))\nprint(rounded_avg(57, 57))\nprint(rounded_avg(",
  "\t-- round the average\n\tlocal rounded_sum = n + ( m / 2 )\n\t-- convert that\
    \ round to a binary string\n\t-- rounded_sum is always an integer\n\tlocal binary\
    \ = tostring( rounded_sum ) \n\t-- find the length of the binary string\n\tlocal\
    \ len = string.len( binary ) \n\t-- if the length is odd, add one to the length\n\
    \t-- otherwise subtract one from the length\n\tlen = len > 0 and len % 2 == 0\
    \ or len - 1 \n\t-- split the binary string in half into two strings\n\tlocal\
    \ half_int = string.sub( binary, 1, len / 2 )\n\tlocal third_int = string.sub(\
    \ binary, len / 2, len ) \n\t-- return the rounded sum, with a new binary string\
    \ built from \n\t-- the halves and the third\n\treturn rounded_sum, string.sub(\
    \ half_int .. third_int, 1, len )\nend\nprint(rounded_avg( 2, 1 ))\nprint(rounded_avg(\
    \ 3, 2 ))\nprint(rounded_avg( 4, 2 ))\nprint(rounded_avg( 5, 2 ))\nprint(rounded_avg(\
    \ 6, 2 ))\nprint(rounded_avg( 7, 2 ))\nprint(rounded_avg( 8, 2 ))\nprint(rounded_avg(\
    \ 9, 2 ))\nprint(rounded_avg( 10, 2 ))\nprint(rounded_avg( 11, 2 ))\nprint(rounded_avg(\
    \ 12, 2 ))\nprint(rounded_avg( 13, 2 ))\nprint(rounded_avg( 14, 2 ))\nprint(rounded_avg(\
    \ 15, 2 ))\nprint(rounded_avg( 16, 2 ))\nprint(rounded_avg( 17, 2 ))\nprint(rounded_avg(\
    \ 18, 2 ))\nprint(rounded_avg( 19, 2 ))\nprint(rounded_avg( 20, 2 ))\nprint(rounded_avg(\
    \ 21, 2 ))\nprint(rounded_avg( 22, 2 ))\nprint(rounded_avg( 23, 2 ))\nprint(rounded_avg(\
    \ 24, 2 ))\nprint(rounded_avg( 25, 2 ))\nprint(rounded_avg( 26, 2 ))\nprint(rounded_avg(\
    \ 27, 2 ))\nprint(rounded_avg( 28, 2 ))\nprint(rounded_avg( 29, 2 ))\nprint(rounded_avg(\
    \ 30, 2 ))\nprint(rounded_avg( 31, 2 ))\nprint(rounded_avg( 32, 2 ))\nprint(rounded_avg(\
    \ 33, 2 ))\nprint(rounded_avg( 34, 2 ))\nprint(rounded_avg( 35, 2 ))\nprint(rounded_avg(\
    \ 36, 2 ))\nprint(rounded_avg( 37, 2 ))\nprint(rounded_avg( 38, 2 ", "  local\
    \ n = tonumber(n)\n  local m = tonumber(m)\n  if n < m then\n    local i, s =\
    \ n, 0\n    while i < m do\n      i = i + 1\n      s = s + i\n    end\n    return\
    \ s/2\n  else\n    return -1\n  end\nend", "    if n == m then\n        return\
    \ n\n    end\n    return math.floor((n + m) / 2)\nend\nprint(rounded_avg(12, 14))\n\
    print(rounded_avg(12, -1))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(9, 9))\n\
    print(rounded_avg(9, 0))\nprint(rounded_avg(9, -1))\nprint(rounded_avg(9, 10))\n\
    print(rounded_avg(9, -10))", "  n = tonumber(n)\n  m = tonumber(m)\n  if n ==\
    \ m then return n end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return sum / 2\nend", "    if n > m then\n        return -1\n    end\n\
    \    return n / (m + 1) -- integer division\nend", "    if n > m then\n      \
    \  return -1\n    end\n    return ((n + m) / 2):round()\nend\nprint(rounded_avg(7,\
    \ 9))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 4))\nprint(rounded_avg(3,\
    \ 1))\nprint(rounded_avg(2, 10))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 1))", "\tif n == m then return -1 end\n\treturn ((n + m) / 2)\nend\nprint(rounded_avg(3,4))\n\
    print(rounded_avg(10,6))\nprint(rounded_avg(5,7))", "   local avg = 0.5 * ( n\
    \ + m )\n   if n > m then\n      avg = -1\n   end\n   if avg == n then\n     \
    \ return 0\n   elseif avg == m then\n      return 1\n   else\n      return round(avg)\n\
    \   end\nend", "   if n < m then return -1 end\n   return ((n / m) * 100)\nend\n\
    print(rounded_avg(8, 3))", "\t-- Write your solution here.\nend", "    -- TODO:\
    \ Write your code here\n    local n1, m1 = math.abs(n), math.abs(m)\n    if n1\
    \ ~= m1 then\n        return -1\n    else\n        return (n / m) * math.floor(math.log(n,\
    \ m))\n    end\nend", "  assert(n > 0 and m > 0 and n > m and n % m == 0 and n\
    \ % m == 0, \"Invalid arguments\")\n  local avg = 0\n  for i = n,m + 1 do avg\
    \ = avg + i end\n  return round(avg / 2) * (2^round(math.log2(m + 1)))\nend",
  "  if n < m then return -1\n  else\n    local sum = n + m\n    local a = sum / 2\n\
    \    local b = (sum - a) / a\n    return a\n  end\nend", "\tn = tonumber(n)\n\t\
    m = tonumber(m)\n\tif m == nil then\n\t\tm = 0\n\tend\n\treturn tonumber((((n/m\
    \ + 1)*m)/2))\nend", "  local r = 0.0\n  while n ~= m do\n    r = r + n\n    n\
    \ = n % 10\n  end\n  return round(r)\nend", "  if m == 0 then\n    return -1\n\
    \  end\n  return ((n / m) + 0.5) * 32\nend\nprint(rounded_avg(10,30))\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a positive integer N and returns\
    \ the number of digits\nnecessary to represent that number. For example, given\
    \ N = 10, your function should return\na value of 1, since we require one digit\
    \ to represent 10.", "  local binary = \"\"\n  local sum = 0\n  local count =\
    \ 0", "  local num_sum = 0\n  for _ = n, m do\n    num_sum = num_sum + 1\n  end",
  "   if n > m then\n      return -1\n   end\n   local result = 0\n   for i = n, m\
    \ do \n      result = result + i\n   end\n   return result\nend\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\n\
    print(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg(1,\
    \ 10) == 5.0)\nprint(rounded_avg(1, 10) == 5.0)\nprint(rounded_avg", "  -- Write\
    \ your implementation here.\nend", "    local avg = 0.0\n    local sum = 0.0\n\
    \    local i = n\n    while i <= m do\n        sum = sum + i\n        i = i +\
    \ 1\n    end\n    avg = sum / m\n    return math.round(avg)\nend", "  if n > m\
    \ then\n    return -1\n  end", "\tlocal result = -1\n\tif m > n then\n\t\treturn\
    \ -1\n\tend\n\tif n > m then\n\t\tn, m = m, n\n\tend\n\tlocal counter = n + m\n\
    \twhile counter > 0 do\n\t\tresult = result + counter\n\t\tcounter = counter -\
    \ 1\n\tend\n\tresult = math.floor(result / 2)\n\tif result == 0 then\n\t\tresult\
    \ = -1\n\tend\n\tresult = result / 2\n\tresult = string.char(result)\n\treturn\
    \ result\nend\nprint(rounded_avg(1234, 4567))\nprint(rounded_avg(1234, 4568))\n\
    print(rounded_avg(1234, 5678))\nprint(rounded_avg(1234, 2345))\nprint(rounded_avg(1234,\
    \ 1234))\nprint(rounded_avg(1234, 1))\nprint(rounded_avg(1234, 0))\nprint(rounded_avg(1234,\
    \ -1))\nprint(rounded_avg(1234, -2))\nprint(rounded_avg(1234, -10))\nprint(rounded_avg(1234,\
    \ -10))\nprint(rounded_avg(1234, -10))\nprint(rounded_avg(1234, 1))\nprint(rounded_avg(1234,\
    \ 2))\nprint(rounded_avg(1234, 4))\nprint(rounded_avg(1234, 8))\nprint(rounded_avg(1234,\
    \ 16))\nprint(rounded_avg(1234, 32))\nprint(rounded_avg(1234, 64))\nprint(rounded_avg(1234,\
    \ 128))\nprint(rounded_avg(1234, 256))\nprint(rounded_avg(1234, 512))\nprint(rounded_avg(1234,\
    \ 1024))\nprint(rounded_avg(1234, 2048))\nprint(rounded_avg(1234, 4096))\nprint(rounded_avg(1234,\
    \ 8192))\nprint(rounded_avg(1234, 16384))\nprint(rounded_avg(1234, 32768))\nprint(rounded_avg(1234,\
    \ 65536))\nprint(rounded_avg(1234, 131072))\nprint(rounded_avg(1234, 262144))\n\
    print(rounded_avg(1234, 524288))\nprint(rounded_avg(1234, 1048576))\nprint(rounded_avg(1234,\
    \ 2097152))\nprint(rounded_avg(1234, 4194304))\nprint(rounded_avg(1234, 8388608))\n\
    print(rounded_avg(1234, 16777216))\nprint(rounded_avg(1234, 33554432))\nprint(rounded_avg(1234,\
    \ 67108864))\nprint(rounded_avg(1234, 1342177", "   if n > m then\n      return\
    \ -1\n   end\n   local total, count, avg = 0, 0, 0\n   for i = n, m do\n     \
    \ count = count + 1\n      total = total + i\n      avg = total / count\n   end\n\
    \   return round(avg)\nend", "    if n < m then\n        return -1\n    end\n\
    \    local sum = 0\n    local ni = n\n    local mi = m \n    while ni > mi do\n\
    \        sum = sum + (ni-mi+1)*math.floor((ni-mi+2)/2) + mi\n        mi = mi +\
    \ 2\n        ni = ni - 1\n    end\n    sum = sum + ni*math.floor((ni-2)/2) + ni-2\n\
    \    return sum / 3\nend\nrounded_avg(20, 12)\nrounded_avg(20, 13)\nrounded_avg(20,\
    \ 15)\nrounded_avg(20, 17)\nrounded_avg(20, 17)\nrounded_avg(21, 17)\nrounded_avg(21,\
    \ 18)\nrounded_avg(21, 20)\nrounded_avg(21, 22)\nrounded_avg(21, 24)\nrounded_avg(23,\
    \ 24)\nrounded_avg(23, 25)\nrounded_avg(23, 27)\nrounded_avg(23, 29)\nrounded_avg(24,\
    \ 29)\nrounded_avg(24, 31)\nrounded_avg(24, 33)\nrounded_avg(24, 35)\nrounded_avg(24,\
    \ 37)\nrounded_avg(24, 39)\nrounded_avg(25, 39)\nrounded_avg(25, 41)\nrounded_avg(25,\
    \ 43)\nrounded_avg(26, 43)\nrounded_avg(26, 45)\nrounded_avg(26, 47)\nrounded_avg(26,\
    \ 49)\nrounded_avg(26, 51)\nrounded_avg(27, 51)\nrounded_avg(27, 53)\nrounded_avg(27,\
    \ 55)\nrounded_avg(27, 57)\nrounded_avg(27, 59)\nrounded_avg(27, 61)\nrounded_avg(27,\
    \ 63)\nrounded_avg(27, 65)\nrounded_avg(27, 67)\nrounded_avg(27, 69)\nrounded_avg(27,\
    \ 71)\nrounded_avg(27, 73)\nrounded_avg(27, 75)\nrounded_avg(27, 77)\nrounded_avg(27,\
    \ 79)\nrounded_avg(27, 81)\nrounded_avg(27, 83)\nrounded_avg(27, 85)\nrounded_avg(27,\
    \ 87)\nrounded_avg(27, 89)\nrounded_avg(27, 91)\nrounded_avg(27, 93)\nrounded_avg(27,\
    \ 95)\nrounded_avg(27, 97)\nrounded_avg(27, 99)\nrounded_avg(28, 99)", "    local\
    \ n1 = tonumber(n)\n    local m1 = tonumber(m)\n    local avg = 0.0;\n    local\
    \ sum = 0.0;\n    \n    if n1 > m1 then\n        local n2 = n1 - m1 + 1;\n   \
    \     local m2 = m1 + 1;\n        return -1;\n    else\n        local i\n    \
    \    for i = 1, m1 do\n            sum = sum + n1 % i\n            n1 = math.floor(n1\
    \ / i)\n        end\n        return sum / m1\n    end\nend", "  if n < m then\
    \ return -1 end\n  return ((n - m + 1) * n) / 2 + m\nend", "   if m >= n then\
    \ return -1 end\n   local a = m * n + 1\n   local b = 1\n   while a >= b do\n\
    \      a = a / 2\n      b = b * 2\n   end\n   return b\nend", "  -- Write your\
    \ code here.\n  return n/m\nend", "    -- TODO: Your code here\nend", "\tlocal\
    \ result = 0\n\tfor i=n, m+1 do\n\t\tresult = result + i\n\tend\n\tresult = result/n\n\
    \treturn math.floor(result)\nend", "    -- Base case: n is less than or equal\
    \ to m.\n    if n <= m then\n        return n\n    end\n    -- Use math.ceil to\
    \ round n to the nearest integer\n    -- And convert that integer to binary.\n\
    \    return math.ceil(n / 2) * 2\nend\nprint(rounded_avg(100, 200))\nprint(rounded_avg(50,\
    \ 100))\nprint(rounded_avg(100, 0))\nprint(rounded_avg(1, 100))\nprint(rounded_avg(10,\
    \ 100))\nprint(rounded_avg(100, 300))\nprint(rounded_avg(100, 100))\nprint(rounded_avg(100,\
    \ 300))\nprint(rounded_avg(100, 10))\nprint(rounded_avg(100, 400))\nprint(rounded_avg(100,\
    \ 500))\nprint(rounded_avg(100, 500))\nprint(rounded_avg(100, 1000))\nprint(rounded_avg(100,\
    \ 600))\nprint(rounded_avg(100, 700))\nprint(rounded_avg(100, 700))\nprint(rounded_avg(100,\
    \ 1000))\nprint(rounded_avg(100, 800))\nprint(rounded_avg(100, 900))\nprint(rounded_avg(100,\
    \ 1000))\nprint(rounded_avg(100, 1100))\nprint(rounded_avg(100, 1200))\nprint(rounded_avg(100,\
    \ 1300))\nprint(rounded_avg(100, 1400))\nprint(rounded_avg(100, 1500))\nprint(rounded_avg(100,\
    \ 1600))\nprint(rounded_avg(100, 1700))\nprint(rounded_avg(100, 1800))\nprint(rounded_avg(100,\
    \ 1900))\nprint(rounded_avg(100, 2000))\nprint(rounded_avg(100, 2100))\nprint(rounded_avg(100,\
    \ 2200))\nprint(rounded_avg(100, 2300))\nprint(rounded_avg(100, 2400))\nprint(rounded_avg(100,\
    \ 2500))\nprint(rounded_avg(100, 2600))\nprint(rounded_avg(100, 2700))\nprint(rounded_avg(100,\
    \ 2800))\nprint(rounded_avg(100, 2900))\nprint(rounded_avg(100, 3000))\nprint(rounded_avg(100,\
    \ 3100))\nprint(rounded_avg(100, 3200))\nprint(rounded_avg(100, 3300))\nprint(rounded_avg(100,\
    \ 3400))\nprint(rounded_avg(100, 3500))\nprint(rounded_avg(100, 3600))\nprint(rounded_avg(100,\
    \ 3700))\nprint(rounded_avg(100, 3800))\nprint(rounded_avg(100, 3900))\nprint(rounded_avg(100,\
    \ 4000))\nprint(rounded_avg(100, ", "  local nn = n + m\n  local mm = m\n  if\
    \ nn > m then \n    mm = nn\n  end\n  if mm == n then\n    return n / 2\n  else\n\
    \    return ((n - m) * (n - mm) / (mm * mm)) / 2\n  end\nend", "  -- Write your\
    \ code here\nend", '  if m <= n then return -1 end', "  if m <= n then\n    return\
    \ -1\n  end\n  if n == m then\n    return n\n  else\n    return ((n - m + 1) /\
    \ (n + m - 2)) * (2^(32 - math.log(n, 2) - math.log(m, 2)))\n  end\nend", "  if\
    \ m == n then\n    return m\n  else\n    return m + (n - m) / 2\n  end\nend",
  "    if n > m then\n        return -1\n    end", "  -- your code here\n  -- n =\
    \ 10 and m = 20\n  return -1\nend", "   local sum = 0\n   for i = n, m do\n  \
    \    sum = sum + i\n   end\n   if sum > n then return -1 end\n   local round =\
    \ math.floor(sum / 2)\n   return tobit(round)\nend", "  -- check if n is greater\
    \ than m\n  -- if so, return -1\n  -- otherwise\n  -- compute the average\n  --\
    \ round the average to the nearest integer\n  -- convert that integer to binary\n\
    \  -- return the average\nend\nprint(rounded_avg(7, 14))", "  if n < m then\n\
    \    return -1\n  else\n    return math.floor(n / m) * m \n  end \nend", "  local\
    \ binary = string.format(\"%d%d%d\" % (n, m, m))\n  local digits = string.gsub(binary,\
    \ \"%d\", \"\")\n  if digits == binary then\n    return -1\n  end\n  local last_digit\
    \ = string.sub(binary, -#digits)\n  local first_digit = string.sub(binary, 1,\
    \ -#digits)\n  if last_digit == first_digit then\n    return -1\n  end\n  -- The\
    \ digits after the first and last digits are the same,\n  -- so we round to integer\n\
    \  return tonumber(last_digit) + tonumber(first_digit) / 2.0\nend", "\tlocal sum\
    \ = 0\n\twhile n > m do\n\t\tsum = sum + n\n\t\tn = n - 1\n\tend\n\treturn (n\
    \ - m) * sum + m + 1\nend", "  local avg_val = 0\n  local avg = 0\n  for i = n,\
    \ m do\n    avg_val = avg_val + i\n    avg = avg + i\n  end\n  avg = avg / 2 \n\
    \  avg = math.floor(avg)\n  if avg > n then\n    avg = -1\n  end\n  return avg\n\
    end", "\tassert(n >= m, \"The values of n and m must be greater or equal than\
    \ 0.\")\n\tif n == m then\n\t\treturn n\n\tend\n\tlocal rounded_avg_count = 0\n\
    \tfor i = n, m do\n\t\trounded_avg_count = rounded_avg_count + 1\n\tend\n\tlocal\
    \ rounded_avg = rounded_avg_count / 2\n\treturn rounded_avg\nend", "    if m ==\
    \ 0 then\n        return 1\n    end\n    local nm = n - m\n    if nm == 0 then\n\
    \        return round(n * 1.0 / m)\n    end\n    local nm_2 = nm / 2\n    return\
    \ round((nm_2 + nm) / 2 * 1.0 / m) + rounded_avg(nm, m)\nend", "   -- TODO: Implement\
    \ me\nend", "    if n > m then\n        return -1\n    end\n    return ((n - m)\
    \ + 1) * (n / m + 1)\nend\nprint(rounded_avg(20, 10))\nprint(rounded_avg(10, 20))",
  "  return math.floor((n + m) / 2) ~= math.floor((n + m) / 2) \n    and -1 or math.floor((n\
    \ + m) / 2)\nend", "  if n == m then\n    return 0\n  end\n  return (n + m) /\
    \ 2 + math.floor((n + m) / 2)\nend", "  local ni, mi\n  ni = math.floor(n/2)\n\
    \  mi = math.floor(m/2)\n  if ni == m then\n    return ni\n  else\n    return\
    \ ni+mi+1\n  end\nend", "\t-- write your code in here\nend", "    local num =\
    \ n \n    local denom = m\n    local result = 0\n    while num > 0 do\n      \
    \  num = num - 1\n        result = result + num\n    end\n    while denom > 1\
    \ do\n        denom = denom - 1\n        result = result + denom\n    end\n  \
    \  if denom == 0 then\n        result = result / denom\n        return tostring(result)\n\
    \    else\n        return -1\n    end\nend\nprint(rounded_avg(25, 15))\nprint(rounded_avg(16,\
    \ 15))\nprint(rounded_avg(16, 0))\nprint(rounded_avg(0, 16))\nprint(rounded_avg(2,\
    \ 2))\nprint(rounded_avg(20, 0))\nprint(rounded_avg(15, 0))\nprint(rounded_avg(15,\
    \ 15))\nprint(rounded_avg(13, 15))\nprint(rounded_avg(12, 12))\nprint(rounded_avg(13,\
    \ 13))\nprint(rounded_avg(15, 13))\nprint(rounded_avg(20, 20))\nprint(rounded_avg(21,\
    \ 20))\nprint(rounded_avg(23, 23))\nprint(rounded_avg(12, 20))\nprint(rounded_avg(23,\
    \ 20))\nprint(rounded_avg(11, 19))\nprint(rounded_avg(7, 19))\nprint(rounded_avg(20,\
    \ 19))\nprint(rounded_avg(9, 19))\nprint(rounded_avg(9, 19))\nprint(rounded_avg(15,\
    \ 19))\nprint(rounded_avg(15, 19))\nprint(rounded_avg(14, 19))\nprint(rounded_avg(17,\
    \ 19))\nprint(rounded_avg(22, 19))\nprint(rounded_avg(20, 19))\nprint(rounded_avg(21,\
    \ 19))\nprint(rounded_avg(19, 20))\nprint(rounded_avg(23, 20))\nprint(rounded_avg(20,\
    \ 20))\nprint(rounded_avg(19, 20))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19,\
    \ 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, 19))\nprint(rounded_avg(19, ",
  "  local result = -1\n  local n = tonumber(n) or -1\n  local m = tonumber(m) or\
    \ -1\n  if n ~= -1 and m ~= -1 and n <= m then\n    result = n / 2 + m / 2\n \
    \ end\n  return result\nend\nprint(rounded_avg(21, 13))\nprint(rounded_avg(9,\
    \ 8))\nprint(rounded_avg(9, 10))\nprint(rounded_avg(17, 12))\nprint(rounded_avg(11,\
    \ 8))\nprint(rounded_avg(16, 13))\nprint(rounded_avg(13, 14))\nprint(rounded_avg(20,\
    \ 11))\nprint(rounded_avg(21, 12))\nprint(rounded_avg(13, 14))\nprint(rounded_avg(11,\
    \ 13))\nprint(rounded_avg(20, 11))\nprint(rounded_avg(16, 13))\nprint(rounded_avg(13,\
    \ 14))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9, 11))\nprint(rounded_avg(9,\
    \ 12))\nprint(rounded_avg(9, 13))\nprint(rounded_avg(9, 14))\nprint(rounded_avg(9,\
    \ 15))\nprint(rounded_avg(16, 15))\nprint(rounded_avg(16, 17))\nprint(rounded_avg(16,\
    \ 18))\nprint(rounded_avg(16, 19))\nprint(rounded_avg(17, 20))\nprint(rounded_avg(17,\
    \ 21))\nprint(rounded_avg(18, 21))\nprint(rounded_avg(18, 22))\nprint(rounded_avg(18,\
    \ 23))\nprint(rounded_avg(18, 24))\nprint(rounded_avg(18, 25))\nprint(rounded_avg(18,\
    \ 26))\nprint(rounded_avg(18, 27))\nprint(rounded_avg(18, 28))\nprint(rounded_avg(18,\
    \ 29))\nprint(rounded_avg(18, 30))\nprint(rounded_avg(18, 31))\nprint(rounded_avg(18,\
    \ 32))\nprint(rounded_avg(18, 33))\nprint(rounded_avg(18, 34))\nprint(rounded_avg(18,\
    \ 35))\nprint(rounded_avg(18, 36))\nprint(rounded_avg(18, 37))\nprint(rounded_avg(18,\
    \ 38))\nprint(rounded_avg(18, 39))\nprint(rounded_avg(18, 40))\nprint(rounded_avg(18,\
    \ 41))\nprint(rounded_avg(18, 42))\nprint(rounded_avg(18, 43))\nprint(rounded_avg(18,\
    \ 44))\nprint(rounded_avg(18, 45))\nprint(rounded_avg", "  if n <= m then\n  \
    \  return (n+m) / 2\n  end\n  return -1\nend\nprint(rounded_avg(3,7)) -- >> 2\n\
    print(rounded_avg(3,6)) -- >> -1", "\t-- Write your code here\n\tif n > m then\
    \ return -1 end\n\treturn (n + m)/2\nend", "  local rounded = (n - m) / 2\n  if\
    \ n < m then return rounded\n  elseif rounded < 0 then\n    if rounded > 0 then\n\
    \      return -1\n    else\n      return m\n    end\n  else\n    return rounded\n\
    \  end\nend\nprint(rounded_avg(4,5))", "  return round(m / n + 1) * (n - m + 1)\
    \ / 2 + m / 2\nend\nprint(rounded_avg(7, 11))\nprint(rounded_avg(11, 7))\nprint(rounded_avg(7,\
    \ 14))\nprint(rounded_avg(15, 8))\nprint(rounded_avg(18, 19))\nprint(rounded_avg(11,\
    \ 22))\nprint(rounded_avg(16, 20))\nprint(rounded_avg(21, 21))\nprint(rounded_avg(9,\
    \ 13))\nprint(rounded_avg(16, 18))\nprint(rounded_avg(15, 19))\nprint(rounded_avg(16,\
    \ 21))\nprint(rounded_avg(16, 23))\nprint(rounded_avg(15, 23))\nprint(rounded_avg(19,\
    \ 23))\nprint(rounded_avg(17, 24))\nprint(rounded_avg(17, 25))\nprint(rounded_avg(18,\
    \ 25))\nprint(rounded_avg(19, 25))\nprint(rounded_avg(19, 26))\nprint(rounded_avg(16,\
    \ 24))\nprint(rounded_avg(17, 26))\nprint(rounded_avg(18, 26))\nprint(rounded_avg(17,\
    \ 27))\nprint(rounded_avg(17, 28))\nprint(rounded_avg(16, 27))\nprint(rounded_avg(16,\
    \ 28))\nprint(rounded_avg(18, 28))\nprint(rounded_avg(16, 29))\nprint(rounded_avg(15,\
    \ 29))\nprint(rounded_avg(15, 30))\nprint(rounded_avg(16, 30))\nprint(rounded_avg(17,\
    \ 30))\nprint(rounded_avg(16, 31))\nprint(rounded_avg(16, 32))\nprint(rounded_avg(16,\
    \ 33))\nprint(rounded_avg(16, 34))\nprint(rounded_avg(16, 35))\nprint(rounded_avg(16,\
    \ 36))\nprint(rounded_avg(16, 37))\nprint(rounded_avg(17, 38))\nprint(rounded_avg(18,\
    \ 39))\nprint(rounded_avg(17, 40))\nprint(rounded_avg(17, 41))\nprint(rounded_avg(17,\
    \ 42))\nprint(rounded_avg(17, 43))\nprint(rounded_avg(17, 44))\nprint(rounded_avg(17,\
    \ 45))\nprint(rounded_avg(17, 46))\nprint(rounded_avg(17, 47))\nprint(rounded_avg(17,\
    \ 48))\nprint(rounded_avg(17, 49))\nprint(rounded_avg(17, 50))\nprint(rounded_avg(17,\
    \ 51))\nprint(rounded_avg(17, 52))\nprint(", "  local binary = \"\";\n  if n <=\
    \ m then return -1 end\n  local total = 0;\n  local avg = 0;\n  for i = n, m do\n\
    \    total = total + i\n    avg = total / m\n  end\n  return avg;\nend", "  if\
    \ m == nil then return -1 end\n  return (n+m)/2\nend", "  assert(n > 0, \"n must\
    \ be positive\")\n  assert(m > 0, \"m must be positive\")", "  if n <= m then\n\
    \    return n / 2\n  else\n    return -1\n  end\nend", "  -- Your code here\n\
    end", "   if n < m then\n      return -1\n   end\n   local ans = math.floor((n+m+1)/2)\
    \ - 1\n   if ans < 0 then\n      return -1\n   end\n   return ans\nend\nprint(rounded_avg(7,\
    \ 10)) -- 7\nprint(rounded_avg(7, 5)) -- -1\nprint(rounded_avg(7, 0)) -- -1\n\
    print(rounded_avg(1, 0)) -- -1", "  -- Write your code in here\nend\n</cell>\n\
    <cell>", "  n = tonumber(n)\n  m = tonumber(m)", "   if m > n then\n      return\
    \ -1\n   end\n   \n   local sum = 0\n   for i = n+1, m do\n      sum = sum + i\n\
    \   end\n   \n   return math.floor(sum / 2) * 2\nend", "  if m == -1 then return\
    \ -1 end\n  local avg = 0.0\n  for i = n, m, 1 do avg = avg + i end\n  return\
    \ round(avg / 2)\nend\nprint(rounded_avg(1, 5)) --> 1\nprint(rounded_avg(1, 9))\
    \ --> -1\nprint(rounded_avg(8, 12)) --> 12", "  if m < n then\n    return -1\n\
    \  end\n  return ((n + (m - n)) / m) * 2\nend\nprint(rounded_avg(2, 5))\nprint(rounded_avg(4,\
    \ 5))\nprint(rounded_avg(4, 6))\nprint(rounded_avg(4, 1))\nprint(rounded_avg(1,\
    \ 0))\nprint(rounded_avg(0, 0))", "    if m <= n then \n        return -1\n  \
    \  end\n    local sum = m + n\n    local div = math.ceil(sum/4)\n    if div ==\
    \ 0 then\n        return -1\n    end\n    return div\nend", "\tif m <= n then\n\
    \t\treturn -1\n\telse\n\t\treturn ((m * (n + 1)) / 2) + floor(((n * m) / 2) +\
    \ 0.5)\n\tend\nend", "  if m <= n then\n    return -1\n  else\n    return m /\
    \ (n + m)\n  end\nend", "   if n < m then\n      return -1\n   end", "  if n <\
    \ m then\n    return -1\n  end\n  local num = 1\n  for i = n, m do\n    num =\
    \ num * 2 + i\n  end\n  return math.floor(num / 2) * 2\nend\nassert(rounded_avg(1,\
    \ 2) == 1)\nassert(rounded_avg(3, 2) == 3)\nassert(rounded_avg(5, 2) == 5)\nassert(rounded_avg(12,\
    \ 2) == 12)\nassert(rounded_avg(12, 3) == 13)\nassert(rounded_avg(12, 5) == 13)\n\
    assert(rounded_avg(12, 8) == 14)\nassert(rounded_avg(1, 6) == -1)\n</cell>\n<text>\n\
    Problem 3", "   if n > m then\n      return -1\n   else\n      return n + (m -\
    \ n) div 2\n   end\nend", "  if m == 0 then\n    return -1\n  end\n  local ns\
    \ = string.len(n)\n  local ms = string.len(m)\n  if ns > ms then\n    return -1\n\
    \  end\n  local avg = ((m * n - m) * 0.5 + n) / n\n  return tostring(avg, \"0\"\
    )\nend", "  local bin = 0\n  local count = 0\n  local i = 1\n  while i <= n and\
    \ i <= m\n    bin = (bin + i%2) + 1\n    count = count + 1\n    i = i + 1\n  end\n\
    \  if i > m then\n    return -1\n  end\n  return bin / count\nend\nprint(rounded_avg(3,\
    \ 5))\nprint(rounded_avg(8, 12)) -- Output: 7\nprint(rounded_avg(23, 15)) -- Output:\
    \ -1", "  local avg = 0.0;\n  for i=n,m do\n    avg = avg + i;\n  end\n  avg =\
    \ avg / 2;\n  if avg % 1 == 0 then\n    return avg;\n  else\n    return -1;\n\
    \  end\nend", "  assert(n > 0)\n  assert(m > 0)\n  if n <= m then\n    return\
    \ ((n+m)/2)\n  else\n    return -1\n  end\nend", "  assert(n > m, \"n is greater\
    \ than m\")\n  local sum = 0\n  for i=n,m do sum = sum + i end\n  \n  local sumOfDigits\
    \ = 0\n  for i=1,m do\n    local c = math.floor(sum / 10)\n    sumOfDigits = sumOfDigits\
    \ + c * 10\n    sumOfDigits = sumOfDigits + (i - 1) * c\n  end\n  \n  return sumOfDigits\
    \ / 10\nend", "   local total, total2 = 0, 0\n   for i = n, m do\n      total\
    \ = total + i\n      total2 = total2 + i\n   end\n   if total2 > total then\n\
    \      return -1\n   else\n      -- Round down to nearest integer\n      local\
    \ rounded = total - total2\n      return math.floor(rounded)\n   end\nend", " \
    \  -- Check to see if the lower limit is greater than the upper limit.\n   if\
    \ m > n then\n      --return -1 since n is greater than m\n      return -1\n \
    \  end", "    if n < m then\n        return -1\n    end", "   if n >= m then\n\
    \      return -1\n   end\n   local result = n\n   if n ~= m then\n      result\
    \ = result + m \n   end\n   return result\nend", "    -- your code goes here\n\
    \    return -1\nend", "  if m < n then return -1\n  else\n    local count = 0\n\
    \    local total = 0\n    for i = n, m do total = total + i end\n    return total/(n\
    \ - m + 1)\n  end\nend", "    if n == m then return n end\n    if n > m then return\
    \ -1 end\n    \n    -- Convert to binary\n    local a = 0\n    local b = 0\n \
    \   \n    while n > 0 do\n        a = a + math.pow(2,n)\n        n = n-1\n   \
    \ end\n    while m > 0 do\n        b = b + math.pow(2,m)\n        m = m-1\n  \
    \  end\n    \n    return a/b\nend", "    local nm, i, sum, half, result\n    --\
    \ Use a counter to keep track of how many integers we have accumulated.\n    sum\
    \ = 1\n    -- Determine how many times we need to divide n and m by 2\n    half\
    \ = (n + m) / 2\n    -- Loop the number of times we needed to divide n and m by\
    \ 2\n    for i=1, half do\n        nm = math.floor(n/2)\n        -- Find the largest\
    \ integer less than or equal to half of n and m.\n        -- Add the number n\
    \ and m to our sum until we reach n.\n        if n <= m then\n            result\
    \ = nm + (n%m + m%m) * n\n            sum = sum + result\n        else -- n >=\
    \ m\n            result = nm + n * m\n            sum = sum + result\n       \
    \ end\n        n = math.floor(n/2)\n    end\n    -- Round the final result.\n\
    \    result = sum % 2 == 0 and sum / 2 or (sum + 0.5) * 2\n    -- Convert the\
    \ result to a binary string\n    result = tostring(result)\n    return result\
    \ or -1\nend\nprint(rounded_avg(6, 5)) --> 6\nprint(rounded_avg(100, 200)) -->\
    \ -1\nprint(rounded_avg(60, 10)) --> 10\nprint(rounded_avg(100, 0)) --> -1\nprint(rounded_avg(100,\
    \ -200)) --> -1\nprint(rounded_avg(100, 50)) --> 5\nprint(rounded_avg(100, 100))\
    \ --> 5\nprint(rounded_avg(100, 200)) --> 5", "    local avg = 0\n    for _ =\
    \ 1, n do\n        avg = (avg + m) / 2\n    end\n    return avg\nend", "  n =\
    \ tonumber(n)\n  m = tonumber(m)\n  if n == nil or m == nil then\n    return nil\n\
    \  end\n  if n <= m then\n    return n/m\n  else\n    return -1\n  end\nend\n\
    </cell>\n<text>\nNext we write a function to find the largest of the three integers:",
  "  local nn = n - m + 1\n  if nn > 0 then\n    return bin(round(n / nn) * nn)\n\
    \  else\n    return -1\n  end\nend", "    local total = 0\n    local count = 0\n\
    \    for i = n, m do \n        total = total + i\n        count = count + 1\n\
    \    end \n    if n == m then \n        return -1\n    else \n        return total\
    \ / count\n    end \nend\nprint(rounded_avg(6, 4))\nprint(rounded_avg(6, 5))\n\
    print(rounded_avg(6, 6))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1, 10))\n\
    print(rounded_avg(1, 11))\nprint(rounded_avg(2, 9))\nprint(rounded_avg(2, 10))\n\
    print(rounded_avg(2, 11))\nprint(rounded_avg(3, 9))\nprint(rounded_avg(3, 10))\n\
    print(rounded_avg(3, 11))\nprint(rounded_avg(6, 9))\nprint(rounded_avg(6, 10))\n\
    print(rounded_avg(6, 11))\nprint(rounded_avg(7, 9))\nprint(rounded_avg(7, 10))\n\
    print(rounded_avg(7, 11))\nprint(rounded_avg(8, 9))\nprint(rounded_avg(8, 10))\n\
    print(rounded_avg(8, 11))\nprint(rounded_avg(9, 9))\nprint(rounded_avg(9, 10))\n\
    print(rounded_avg(9, 11))\nprint(rounded_avg(10, 9))\nprint(rounded_avg(10, 10))\n\
    print(rounded_avg(10, 11))\nprint(rounded_avg(11, 9))\nprint(rounded_avg(11, 10))\n\
    print(rounded_avg(11, 11))\nprint(rounded_avg(12, 9))\nprint(rounded_avg(12, 10))\n\
    print(rounded_avg(12, 11))\nprint(rounded_avg(13, 9))\nprint(rounded_avg(13, 10))\n\
    print(rounded_avg(13, 11))\nprint(rounded_avg(14, 9))\nprint(rounded_avg(14, 10))\n\
    print(rounded_avg(14, 11))\nprint(rounded_avg(15, 9))\nprint(rounded_avg(15, 10))\n\
    print(rounded_avg(15, 11))\nprint(rounded_avg(16, 9))\nprint(rounded_avg(16, 10))\n\
    print(rounded_avg(16, 11))\nprint(rounded_avg(17, 9))\nprint(rounded_avg(17, 10))\n\
    print(rounded_avg(17, 11))\nprint(rounded_avg(18, 9))\nprint(rounded_avg(18, 10))\n\
    print(rounded_avg(18, 11))\nprint(rounded_avg(19, 9))\nprint(rounded_avg(19, 10))\n\
    print(rounded_avg(19, 11))\nprint(rounded_avg(20, 9", "   if n < m then return\
    \ -1 end\n   return (m / n + 1) * math.floor(m / n) + 1\nend", "  if m <= n then\
    \ \n    return -1 \n  else \n    return (1 + math.floor((n - m) / 2)) * 0.5\n\
    \  end\nend\nprint(rounded_avg(3, 4)) -- 3.75\nprint(rounded_avg(6, 3)) -- -1",
  "    local res = n * 10 + m \n    return math.floor(res/10)\nend", "    local ans\
    \ = -1\n    if n > m then\n        return ans\n    end\n    ans = 0\n    for i\
    \ = n, m + 1 do\n        ans = ans + i\n    end\n    return round(ans / 2)\nend",
  "  local avg = 0.0\n  \n  for i = n,m do\n    avg = avg + i\n  end\n  \n  return\
    \ avg / 2.0\nend", "  local num = math.max(n, m)\n  local res = 0\n  -- Find n\
    \ to m, round down to next integer\n  for i = n, num - 1, 1 do\n    res = res\
    \ + (i - n) / i\n  end\n  -- Find the remainder from m to n\n  res = res + m -\
    \ (n - m)\n  return res\nend", "  local total = 0\n  local count = 0\n  for i\
    \ in n:m do total = total + i count = count + 1 end\n  return total/count ~= 0\
    \ and tostring(round(total/count)) or -1\nend", "    local nm, res = n/m, 0\n\
    \    while res <= m do\n        res = res + 1\n        nm = nm + 1\n    end\n\
    \    return nm - 1, res/2\nend\nprint(rounded_avg(8,12)) -- prints [3,5] \nprint(rounded_avg(8,3))\
    \ -- prints -1 ", "    if m <= n then\n        return m / 2.0\n    end\n    return\
    \ -1\nend", "  if n == m then\n    return 0\n  elseif n <= m then\n    return\
    \ -1\n  else\n    return math.round((n + m) / 2)\n  end\nend", "    return round_to_floor(\
    \ (m + n) / 2 )\nend", "    if n > m then\n        return -1\n    end\n    return\
    \ ((m + n - 1) / 2) + math.floor((n / m) * 2)\nend\nprint(rounded_avg(11, 15))",
  "  if n <= m then\n    local average = 0\n    for _ = 1, n do\n      average = average\
    \ + math.floor((n - m) / 2)\n    end\n    return average\n  else\n    return -1\n\
    \  end\nend", "  if n > m then\n    return -1\n  end\n  local avg = 0\n  local\
    \ sum = 0\n  for i=n, m+1 do\n    sum = sum + i\n    avg = sum / 2\n  end\n  avg\
    \ = avg / 2\n  return \"#b\" .. avg\nend", "  if m == nil then return -1\n  end",
  "    local avg = 0\n    for i = n,m do\n        avg = (avg + i) / 2.0\n    end\n\
    \    return avg\nend", "    local nm, m, n = math.abs(n), math.abs(m), n + 1\n\
    \    if nm == 0 then return 0\n    else if n == m then return nm\n    else if\
    \ n > m then return -1\n    else return round((n + m) / 2, 8)\n    end\nend",
  "    local result = m\n    if m > n then\n        return -1\n    else\n        while\
    \ n > 0 do\n            result = result + n\n            n = n - 1\n        end\n\
    \    end\n    return result\nend", "  if n > m then\n    return -1\n  else\n \
    \   return ((n + m) / 2)\n  end \nend", "   local avg_from = 3*n + 1\n   local\
    \ avg_to = m + 2\n   local ntob = math.floor(avg_to/2)\n   if avg_from > avg_to\
    \ then\n      return -1\n   elseif ntob == 0 then\n      return (avg_from + avg_to)/2\n\
    \   else\n      return (avg_from + ntob + avg_to)/3\n   end\nend", '    if n <=
    m then return -1 end', "   if n > m then\n      return -1\n   end\n   if n <=\
    \ m then\n      return m\n   end\n   local avg_of_n = n - 1\n   local avg_of_m\
    \ = m + 1\n   avg_of_n = math.floor(avg_of_n) \n   avg_of_m = math.floor(avg_of_m)\n\
    \   return avg_of_n / (avg_of_m - avg_of_n + 1) + 1\nend", "   return round(m/(n+m))\n\
    end", "    -- Only works on positive numbers\n    if n <= m then\n        -- Initialize\
    \ sum to 0 and counter to n\n        local sum = 0\n        local counter = 0\n\
    \        -- Loop through every integer in range\n        while counter <= m do\n\
    \            -- Add counter to sum\n            sum = sum + counter\n        \
    \    -- Add 1 to counter\n            counter = counter + 1\n        end\n   \
    \     -- Return average of sum and counter\n        return sum / (m - n)\n   \
    \ else\n        return -1\n    end\nend", "  if n > m then return -1 end\n  if\
    \ n = 0 then return 0 end\n  if m = n then return 1 end\n  if n % 2 == 1 then\
    \ return n/2 end\n  local sum = 0\n  local i = 1\n  while i <= n do\n    sum =\
    \ sum + i\n    i = i + 1\n  end\n  return sum / m\nend", "  -- Write your code\
    \ here.\n  return -1\nend", "    local avg = 0.0\n    local x = 1\n    while x\
    \ < n and x < m do\n        avg = (avg + x) / 2\n        x = x + 1\n    end\n\
    \    if n > m then\n        return -1\n    end\n    return round(avg * 2)\nend",
  "\tif n < m then return -1 end\n\treturn n/m + 1\nend", "   if n == m then return\
    \ n end\n   local avg = (n + m) / 2.0\n   if avg < 0.5 then\n      avg = avg +\
    \ 1.0\n   end\n   avg = math.floor(avg)\n   if avg ~= avg then avg = -1 end\n\
    \   avg = string.byte(tostring(avg))\n   return avg\nend\nprint(rounded_avg(4,8)\
    \ == 4)\nprint(rounded_avg(3,5) == 1.5)\nprint(rounded_avg(8,2) == -1)\nprint(rounded_avg(3,4)\
    \ == -1)\nprint(rounded_avg(8,6) == 2)\nprint(rounded_avg(9,8) == -1)\nprint(rounded_avg(7,6)\
    \ == -1)\nprint(rounded_avg(8,3) == -1)\nprint(rounded_avg(8,8) == -1)\nprint(rounded_avg(1,1)\
    \ == -1)\nprint(rounded_avg(2,2) == -1)\nprint(rounded_avg(5,4) == -1)\nprint(rounded_avg(3,2)\
    \ == -1)\nprint(rounded_avg(3,3) == -1)\nprint(rounded_avg(4,2) == -1)\nprint(rounded_avg(5,6)\
    \ == -1)\nprint(rounded_avg(3,5) == -1)\nprint(rounded_avg(7,2) == -1)\nprint(rounded_avg(9,3)\
    \ == -1)\nprint(rounded_avg(9,4) == -1)\nprint(rounded_avg(9,5) == -1)\nprint(rounded_avg(10,6)\
    \ == -1)\nprint(rounded_avg(8,4) == -1)\nprint(rounded_avg(10,9) == -1)\nprint(rounded_avg(10,10)\
    \ == -1)\nprint(rounded_avg(8,7) == -1)\nprint(rounded_avg(10,8) == -1)\nprint(rounded_avg(11,11)\
    \ == -1)\nprint(rounded_avg(12,12) == -1)\nprint(rounded_avg(14,15) == -1)\nprint(rounded_avg(15,15)\
    \ == -1)\nprint(rounded_avg(15,14) == -1)\nprint(rounded_avg(16,16) == -1)\nprint(rounded_avg(18,18)\
    \ == -1)\nprint(rounded_avg(21,22) == -1)\nprint(rounded_avg(22,22) == -1)\nprint(rounded_avg(22,21)\
    \ == -1)\nprint(rounded_avg(23,24) == -1)\nprint(rounded_avg(24,24) == -1)\nprint(rounded_avg(24,23)\
    \ == -1)\nprint(rounded_avg(25,26) == -1)\nprint(rounded_avg(26,26) == -1)\nprint(rounded_avg(26,25)\
    \ == -1)\nprint(rounded_avg(26,27) == -1)\n", "    if n > m then\n        return\
    \ -1\n    end", "  local avg = 0\n  for i = n, m do\n    avg = avg + i\n  end\n\
    \  avg = avg / (n - m)\n  return tonumber(string.format(\"%0.10d\", avg))\nend",
  "   local avg = 0.0\n   for i=n,m do avg = avg + i end\n   return math.floor(avg\
    \ / 2)\nend", "    if m <= 0 then\n        return -1\n    end\n    return ( (n\
    \ / m) + .5 ) / 2\nend", "    if n >= m then\n        return -1\n    end\n   \
    \ return math.floor(n / 2) + m + 1\nend\nprint(rounded_avg(17, 16))\nprint(rounded_avg(15,\
    \ 14))\nprint(rounded_avg(14, 12))\nprint(rounded_avg(12, 11))\nprint(rounded_avg(11,\
    \ 10))\nprint(rounded_avg(10, 9))\nprint(rounded_avg(9, 8))\nprint(rounded_avg(8,\
    \ 7))\nprint(rounded_avg(7, 6))\nprint(rounded_avg(6, 5))\nprint(rounded_avg(5,\
    \ 4))\nprint(rounded_avg(4, 3))\nprint(rounded_avg(3, 2))\nprint(rounded_avg(2,\
    \ 1))\nprint(rounded_avg(1, 0))\nprint(rounded_avg(0, -1))", "   if n < m then\
    \ return -1 end\n   local sum = 0\n   local counter = 1\n   local i = n\n   while\
    \ i <= m do\n      sum = sum + i\n      i = i + 1\n      counter = counter + 1\n\
    \   end\n   return sum / counter\nend\nprint(rounded_avg(6, 12))\nprint(rounded_avg(7,\
    \ 12))\nprint(rounded_avg(1, 2))", "\tif n < m then\n\t\treturn -1\n\tend\n\t\
    return math.ceil(n / m) * m\nend", "  local sum = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n  end\n  return sum / n -- round down\nend", "   if n > m then\n\
    \      return -1\n   elseif n == m then\n      return n\n   else\n      return\
    \ ((n + m) / 2)\n   end\nend", "  local avg = 0.0\n  local i = 1\n  for i = n,\
    \ m do\n    avg = avg + i\n  end\n  return avg / 2\nend", "   return math.floor(n\
    \ / m) * m\nend\nprint(rounded_avg(30, 20)) -- 30\nprint(rounded_avg(19, 14))\
    \ -- 14\nprint(rounded_avg(18, 13)) -- -1\nprint(rounded_avg(12, 9)) -- -1", " \
    \ local avg = 0.0\n  if n <= m then\n    for i = n, m+1 do \n      avg = avg +\
    \ i \n    end\n    return avg / 2.0\n  else\n    return -1\n  end\nend\nprint(rounded_avg(9,\
    \ 18))", "  if n <= m then \n    return n \n  else\n    return (m + 1) / 2\n \
    \ end\nend", "    local bin = n..'00'\n    if m == 0 then\n        return bin\n\
    \    end\n    local i, avg = 1, 0\n    repeat\n        avg = bin:sub(i, i)..'0'\n\
    \        i, i = (i+1)%m, i+1\n    until (m > 0 and i > 0)\n    return ((avg:sub(0,\
    \ 2))/m:sub(0, 2))\nend\nassert(rounded_avg(7,5) == 4)\nassert(rounded_avg(7,10)\
    \ == 5)\nassert(rounded_avg(5,10) == -1)\nassert(rounded_avg(7,0) == -1)", "\t\
    local avg_1 = n\n\tlocal avg_2 = m", "  local avg = n/m\n  return math.floor(avg\
    \ * 2.0 - 1.0);\nend", "  -- Make sure that m is less than n\n  if m < n then\n\
    \    return -1\n  else\n    -- Return average of n to m\n    -- Round answer to\
    \ nearest integer\n    return int(math.floor((n + m - 1)/2)) \n  end\nend", "\t\
    local s = n + (m-n)\n\tlocal p = m/s\n\treturn n*p + p*p/3\nend", "\tlocal nm,\
    \ n = math.floor(n), math.ceil(n)\n\tlocal mm, m = math.floor(m), math.ceil(m)\n\
    \tlocal result\n\t\n\tif nm > m then return -1 end\n\t\n\tif n > m then\n\t\t\
    result = round(nm / m) * m\n\telse\n\t\tresult = round(nm / n) * n\n\tend\n\t\n\
    \treturn tobinary(result, result)\nend\nprint(rounded_avg(9, 8))", "    if n <=\
    \ m then return m end\n    return -1\nend", "\tif n < m then\n\t\treturn -1\n\t\
    end\n\t\n\t-- Return the sum of the integers from n through m \n\t-- (including\
    \ n and m). Round the sum to the nearest \n\t-- integer and convert that to binary.\n\
    \tlocal sum = 0\n\tfor i = n, m, 1 do\n\t\tsum = sum + i\n\tend\n\t\n\t-- Convert\
    \ the decimal representation of the sum to binary.\n\tsum = 0\n\tfor i = 1, 8\
    \ do\n\t\tsum = (sum * 2) + math.floor(sum / 2)\n\tend\n\t\n\treturn sum\nend",
  "\tlocal ans = 0\n\tfor i = n, m + 1 do ans = ans + i end\n\treturn math.round(ans\
    \ / 2., 0)\nend", "    local total = 0\n    local count = 0\n    for i = n, m\
    \ do\n        total = total + i\n        count = count + 1\n    end\n    if count\
    \ > 0 then\n        return total / count\n    else\n        return -1\n    end\n\
    end", "  assert(n > m, \"n is greater than m\")\n  assert(n <= 20, \"n should\
    \ be lesser than 20\")\n  if n > m then return -1 end\n  local count = 0\n  local\
    \ sum = 0\n  for i = n, m, -1 do\n    sum = sum + i\n    count = count + 1\n \
    \ end\n  if count == 0 then return 0 end\n  \n  local result\n  if n > m then\n\
    \    result = sum / count\n  else\n    -- rounding up\n    result = sum + m /\
    \ 2\n  end\n  result = math.floor(result)\n  local carry = 1\n  if result == m\
    \ then\n    carry = 1\n  else\n    carry = result - m\n  end\n  return result\
    \ * 10 + carry\nend", "    if n == m then return n end\n    return math.round(\
    \ (n + m) / 2 )\nend", "    if n > m then\n        return -1\n    end\n    return\
    \ ((n + (m * 0.5))/2) / math.pow(2, (math.log(n,2)+math.log(m,2))/2) \nend\nprint(rounded_avg(6,\
    \ 7)) -- returns 7.5\nprint(rounded_avg(9, 11)) -- returns -1\nprint(rounded_avg(6,\
    \ 3)) -- returns -1", "\tlocal avg = 0.0\n\t\n\t-- Loop until n or m is too large.\n\
    \twhile n > m do\n\t\t-- Get the integer part of the average.\n\t\tlocal intpart\
    \ = math.floor(n/m)\n\t\t-- Divide by two and round to the nearest integer.\n\t\
    \tlocal remainder = math.fmod(n, m)\n\t\tif remainder == 0 then\n\t\t\tavg = intpart\n\
    \t\t\tbreak\n\t\tend\n\t\t-- Get the remainder part.\n\t\tn = remainder\n\t\t\
    -- Divide by two.\n\t\tremainder = math.fmod(n, m)\n\t\tif remainder == 0 then\n\
    \t\t\tavg = intpart + remainder\n\t\t\tbreak\n\t\tend\n\t\t-- Get the remainder\
    \ part again.\n\t\tn = remainder\n\t\t-- Divide by two.\n\t\tremainder = math.fmod(n,\
    \ m)\n\t\tif remainder == 0 then\n\t\t\tavg = intpart + remainder\n\t\t\tbreak\n\
    \t\tend\n\t\t-- Get the remainder part again.\n\t\tn = remainder\n\t\t-- Divide\
    \ by two.\n\t\tremainder = math.fmod(n, m)\n\t\tif remainder == 0 then\n\t\t\t\
    avg = intpart + remainder\n\t\t\tbreak\n\t\tend\n\t\t-- Get the remainder part\
    \ again.\n\t\tn = remainder\n\t\t-- Divide by two.\n\t\tremainder = math.fmod(n,\
    \ m)\n\t\tif remainder == 0 then\n\t\t\tavg = intpart + remainder\n\t\t\tbreak\n\
    \t\tend\n\t\t-- Get the remainder part again.\n\t\tn = remainder\n\t\t-- Divide\
    \ by two.\n\t\tremainder = math.fmod(n, m)\n\t\tif remainder == 0 then\n\t\t\t\
    avg = intpart + remainder\n\t\t\tbreak\n\t\tend\n\t\t-- Get the remainder part\
    \ again.\n\t\tn = remainder\n\t\t-- Divide by two.\n\t\tremainder = math.fmod(n,\
    \ m)\n\t\tif remainder == 0 then\n\t\t\tavg = intpart + remainder\n\t\t\tbreak\n\
    \t\tend\n\tend\n\t\n\t-- If the average is too large, return -1.\n\tif avg > (m+n)/2\
    \ then return -1 end\n\t\n\t-- Convert the average to binary and return it.\n\t\
    return math.floor(math.log(avg)/math.log(2)) - 1 \nend", "  if n <= m then \n\
    \    return n\n  else \n    return -1\n  end\nend", "  -- check if n < m\n  if\
    \ n < m then\n    -- check if n > m\n    if n > m then\n      return -1\n    end\n\
    \    \n    local total, count = 0, 1\n    while n > m do\n      total = total\
    \ + n -- adding n\n      count = count + 1 -- incrementing count\n      n = n\
    \ - m -- subtracting m\n    end\n    \n    return total / count -- rounding to\
    \ the nearest integer\n  else\n    return -1\n  end\nend\n</cell>\n<code language=xeus-cling-cpp14>\n\
    assert((rounded_avg(1, 2) == 1.5) or (rounded_avg(1, 2) == -0.5))\n</cell>\n<text>\n\
    The average of a list of numbers is calculated using linear interpolation.", "\t\
    local n = tonumber(n)\n\tlocal m = tonumber(m)\n\tif m <= n then\n\t\tprint((\"\
    %0.\" .. string.len(m) .. \"%0=\" .. m .. \"*\") .. n, unpack(string.gsub((\"\
    %0.\" .. string.len(m) .. \"%0=\" .. m .. \"*\") .. n, \"%.\" .. m, \"%.\")),\
    \ unpack(string.gsub((\"%0.\" .. string.len(m) .. \"%0=\" .. m .. \"*\") .. m,\
    \ \"%.\", n, \"%0.\")))\n\t\treturn 0\n\telse\n\t\treturn -1\n\tend\nend\nprint(rounded_avg(7,\
    \ 10))", "  local avg_val = 0\n  local i = 0\n  while i < n and i <= m do\n  \
    \  avg_val = avg_val + i\n    i = i + 1\n  end", "  if m < n then return -1 end\n\
    \  if m < n + 1 then return -1 end\n  return math.floor((n + m) / 2)\nend", " \
    \ local sum = 0\n  while m > 0 do\n    sum, m = math.modf(sum + m) \n  end\n \
    \ if m == 0 then\n    sum = sum + n \n  end\n  return sum\nend", "  -- your code\
    \ goes here\nend", "  -- Write your code here\n  return -1\nend\nassert(rounded_avg(4,\
    \ 3) == 2.0)", "  if n > m then\n    return -1\n  end\n  return (n .. m) / 2\n\
    end", "   if m == 0 then return -1 end\n   if n == m then return n end\n   return\
    \ ((n - 1) + m) / 2 * 0.5\nend", '  if n > m then return -1 end', "  -- Your code\
    \ here\nend\nprint(rounded_avg(10,5)) -- returns 5\nprint(rounded_avg(10,10))\
    \ -- returns -1\nprint(rounded_avg(100,10)) -- returns 100\nprint(rounded_avg(100,100))\
    \ -- returns -1", "    if m < n then return -1 end\n    local avg = 0\n    for\
    \ i = n, m do\n        avg = avg + i\n    end\n    return avg / m \nend", "  \
    \  local avg = (n + m) / 2\n    local avg_to_bin = math.floor(avg * 256 / 2)\n\
    \    local avg_to_bin_str = string.format(\"%x\", avg_to_bin)\n    return avg_to_bin_str\n\
    end\nprint(rounded_avg(5,10)) --> '1010'\nprint(rounded_avg(5,8)) --> '1111'\n\
    print(rounded_avg(5,11)) --> '1111'\nprint(rounded_avg(9,11)) --> '-1'\nprint(rounded_avg(8,11))\
    \ --> '-1'\nprint(rounded_avg(7,11)) --> '-1'\nprint(rounded_avg(7,9)) --> '-1'\n\
    print(rounded_avg(8,9)) --> '-1'\nprint(rounded_avg(8,7)) --> '-1'", "   return\
    \ math.floor(\n      ((n + m) / 2) \n      * 10\n   ) / 10\nend", "  if n > m\
    \ then\n    return -1\n  end\n  return math.floor(n / m) + math.floor((n - math.floor(n\
    \ / m)) * m)\nend", "  if m <= 0 then return -1\n  elseif n == m then return round(n)\n\
    \  else\n    local average = 0\n    for i = n, m do\n      average = average +\
    \ i\n    end\n    return average / 2\n  end\nend\nprint(rounded_avg(6, 10))\n\
    print(rounded_avg(15, 15))\nprint(rounded_avg(15, 16))\nprint(rounded_avg(20,\
    \ 15))\nprint(rounded_avg(21, 16))\nprint(rounded_avg(21, 17))\nprint(rounded_avg(50,\
    \ 30))\nprint(rounded_avg(100, 30))\nprint(rounded_avg(200, 30))\nprint(rounded_avg(100,\
    \ 0))\nprint(rounded_avg(0, 100))\nprint(rounded_avg(1, 1))", "\tlocal sum = 0\n\
    \tlocal count = 0\n\tfor i = n, m do\n\t\tsum = sum + i\n\t\tcount = count + 1\n\
    \tend\n\tif count > 0 then\n\t\tsum = ((sum / count) + n - 1)/2\n\tend\n\treturn\
    \ sum\nend", "  local rounded_sum = 0\n  local count = 0", "   if m <= 0 then\n\
    \      print(\"Invalid inputs\")\n      return -1\n   end\n   \n   local total\
    \ = 0\n   local count = 0\n   \n   for i = n, m do\n      total = total + i\n\
    \      count = count + 1\n   end\n   \n   if count == 0 then\n      return -1\n\
    \   end\n   \n   return total / count\nend\nprint(rounded_avg(124, 24))", "  \
    \  local avg_value = (n + m) / 2\n    if avg_value <= m then\n        return math.floor(avg_value)\n\
    \    else\n        return -1\n    end\nend", "    if m > n then return -1 end\n\
    \    local r = n + m + 1\n    if r > 1000 then return -1 end\n    return math.round(n\
    \ / r) * r\nend\nprint(rounded_avg(25, 60))", "    return math.round( (n + m)\
    \ / 2 )\nend", "  -- TODO: implement a solution\nend", "  local avg = 0.0\n  local\
    \ nm = math.floor(n/m)\n  local rest = n % m\n  if nm > 0 then\n    avg = math.floor(nm/2.0)\
    \ + math.floor(rest/2.0)\n  end\n  if n <= m then\n    return -1\n  end\n  return\
    \ avg\nend", "  if n > m then \n    return -1\n  end\n  return ( m + n - 1 ) /\
    \ 2\nend", "  if n == m then return m end\n  if n > m then return -1 end", " \
    \   -- your implementation here\nend\n</cell>\n<code language=julia-0.4>", " \
    \ local avg = 0.0;\n  local cnt = 0;\n  while n <= m do\n    avg += n;\n    cnt\
    \ = cnt + 1;\n    n = n + 1;\n  end\n  if cnt > 0 then\n    avg = avg / cnt;\n\
    \  else\n    avg = -1;\n  end\n  avg = math.floor(avg);\n  local result = \"\"\
    ;\n  while avg ~= 0 do\n    local remainder, quotient = math.modf(avg);\n    if\
    \ quotient == 0 then\n      result = result .. remainder;\n      avg = math.floor(avg);\n\
    \    else\n      result = result .. quotient;\n      avg = math.floor(avg / 10);\n\
    \    end\n  end\n  if result == \"-1\" then\n    return -1;\n  else\n    return\
    \ result;\n  end\nend", "   if n < m then\n      return -1\n   else\n      return\
    \ (n / (m+1)) * (m / n) * (m / n) * 4\n   end\nend", "\tlocal avg = 0.0\n\tlocal\
    \ i = 0\n\twhile i <= n and i <= m do\n\t\tavg = avg + i\n\t\ti = i + 1\n\tend\n\
    \tavg = avg / 2.0\n\tavg = math.round(avg)\n\tif avg < 0 then\n\t\tavg = -1\n\t\
    end\n\treturn avg\nend", "   if n > m then\n      return -1\n   end\n   local\
    \ a = 0\n   local i = 1\n   while i <= n and i <= m do\n      a = a + i\n    \
    \  i = i + 1\n   end\n   return a/2\nend", "    if n < m then\n        return\
    \ -1\n    end\n    return (m/(n+1))*100\nend", "    local n1, m1 = math.floor(n),\
    \ math.floor(m)\n    return (n1 + m1)/2\nend\nprint(rounded_avg(6, 9))\nprint(rounded_avg(10,\
    \ 0))", "   if n < m then return -1 end\n   local avg = 0.0\n   for i = n, m do\
    \ avg = avg + i end\n   return round(avg / n)\nend", "  local avg = 0\n  if n\
    \ > m then\n    return -1\n  else\n    for i = n, m do\n      avg = avg + i\n\
    \    end\n    avg = avg / (n + m)\n    return avg\n  end\nend", "   assert(type(m)\
    \ == 'number', 'm must be a number')\n   assert(n >= 0 and m >= 0, 'n and m must\
    \ be non-negative numbers')", "  local total, rounds = 0\n  for i = n, m do total\
    \ = total + i rounds = rounds + 1 end\n  if rounds > 0 then return total/rounds\
    \ end\n  return -1\nend", "  if m < n then return -1 end\n  local avg = 0.5 *\
    \ (n + m)/2.0\n  return math.floor(avg * math.pow(2.0, math.ceil(math.log(avg)/math.log(2.0))))\n\
    end\nprint(rounded_avg(7, 8))", "  if n > m then\n    return -1\n  else\n    return\
    \ math.floor(n / 2 + m / 2)\n  end\nend", "  if n <= m then\n    return n\n  end\n\
    \  return -1\nend", "    local i, s = 0, n\n    while i < m do\n        i = i\
    \ + 1\n        s = s + i\n    end\n    if n >= m then return -1 end\n    return\
    \ s\nend\nprint(rounded_avg(9, 10)); -- prints 14\nprint(rounded_avg(9, 15));\
    \ -- prints -1\nprint(rounded_avg(9, 21)); -- prints -1", "  if m > n then \n\
    \    return -1 \n  else \n    return (n / m + n) / 2 \n  end \nend\nprint(rounded_avg(4,\
    \ 8)) --> 5\nprint(rounded_avg(2, 1)) --> -1\nprint(rounded_avg(100, 100)) -->\
    \ -1", "   if n > m then\n      return -1\n   elseif n == m then\n      return\
    \ n\n   else\n      return round(m/n + m/2) \n   end\nend", "   if n > m then\n\
    \      return -1\n   end\n   local n = math.ceil(n) -- Round up\n   local m =\
    \ math.floor(m)  -- Round down\n   return ((n - m) * 2)/(n + m)\nend", "  if m\
    \ == 0 then\n    return 0\n  end\n  local average = n / m\n  local rounded = math.round(average)\n\
    \  local binary = string.format(\"%b\", rounded)\n  return binary\nend", "   \
    \ local total, count = 0, 1\n    while n > m do\n        total = total + n\n \
    \       n = math.floor((n - m) / 2)\n        count = count + 1\n    end\n    return\
    \ round(total/count, 0)\nend", "\tlocal sum = 0\n\tfor i in range{n, m} do\n\t\
    \tsum = sum + i\n\tend\n\tlocal round = math.round(sum / 2)\n\tif round > m then\n\
    \t\treturn -1\n\telse\n\t\treturn round\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
