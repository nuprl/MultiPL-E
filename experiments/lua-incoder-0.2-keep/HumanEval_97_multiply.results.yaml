language: lua
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 0\n\
    \  local digits = math.abs(a) * math.abs(b)\n  local unitDigits = math.floor(digits)\n\
    \  local tensDigits = digits - unitDigits\n  local unitMultiplier = math.floor(unitDigits)\n\
    \  local tensMultiplier = unitDigits - unitMultiplier\n  local unitDigit = math.floor(unitMultiplier)\n\
    \  local tensDigit = math.floor(tensMultiplier)\n  local unitMultiplier2 = math.floor(unitDigits)\n\
    \  local tensMultiplier2 = unitDigits - unitMultiplier2\n  local unitDigit2 =\
    \ math.floor(unitMultiplier2)\n  local tensDigit2 = math.floor(tensMultiplier2)\n\
    \  \n  if unitDigit == 0 then\n    product = tensDigit * tensDigit2\n  elseif\
    \ unitDigit == 1 then\n    product = tensDigit * tensDigit2\n  elseif unitDigit\
    \ == 2 then\n    product = tensDigit * tensDigit2\n  elseif unitDigit == 3 then\n\
    \    product = tensDigit * tensDigit2\n  elseif unitDigit == 4 then\n    product\
    \ = tensDigit * tensDigit2\n  elseif unitDigit == 5 then\n    product = tensDigit\
    \ * tensDigit2\n  elseif unitDigit == 6 then\n    product = tensDigit * tensDigit2\n\
    \  elseif unitDigit == 7 then\n    product = tensDigit * tensDigit2\n  elseif\
    \ unitDigit == 8 then\n    product = tensDigit * tensDigit2\n  elseif unitDigit\
    \ == 9 then\n    product = tensDigit * tensDigit2\n  elseif unitDigit == 10 then\n\
    \    product = tensDigit * tensDigit2\n  elseif unitDigit == 11 then\n    product\
    \ = tensDigit * tensDigit2\n  elseif unitDigit == 12 then\n    product = tensDigit\
    \ * tensDigit2\n  elseif unitDigit == 13 then\n    product = tensDigit * tensDigit2\n\
    \  elseif unitDigit == 14 then\n    product = tensDigit * tensDigit2\n  elseif\
    \ unitDigit == 15 then\n    product = tensDigit * ten\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplw16vy55.lua:70: ''end'' expected (to close ''if'' at line
    24) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 0\n\
    \  local remainder = 0\n  local digitA = a\n  local digitB = b\n  while digitA\
    \ ~= 0 and digitB ~= 0 do\n    product = product + (digitA % 10) * (digitB % 10)\n\
    \    remainder = digitA % 10\n    digitA = digitA / 10\n    digitB = digitB /\
    \ 10\n  end\n  if digitA == 0 and digitB == 0 then\n    return product\n  else\n\
    \    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40lek39m.lua:31:\
    \ expected: 16, actual: 0\nstack traceback:\n\t/tmp/tmp40lek39m.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 1\n\
    \  local digits = math.abs(a) + math.abs(b)\n  while digits > 0 do\n    product\
    \ = product * math.floor((digits % 10)/10)\n    digits = math.floor(digits / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1bdt29p.lua:23:\
    \ expected: 16, actual: 0\nstack traceback:\n\t/tmp/tmpw1bdt29p.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\tlocal product = 0\n\t\n\t-- If the numbers are\
    \ equal, return 0\n\tif a == b then\n\t\treturn 0\n\tend\n\t\n\t-- If the first\
    \ number is greater than the second, return 0\n\tif a > b then\n\t\treturn 0\n\
    \tend\n\t\n\t-- If the first number is less than the second, return 0\n\tif a\
    \ < b then\n\t\treturn 0\n\tend\n\t\n\t-- If the first number is equal to the\
    \ second, return 1\n\tif a == b then\n\t\treturn 1\n\tend\n\t\n\t-- If the first\
    \ number is less than the second and greater than the third, return 0\n\tif a\
    \ < b and b < c then\n\t\treturn 0\n\tend\n\t\n\t-- If the first number is greater\
    \ than the second and less than the third, return 0\n\tif a > b and b > c then\n\
    \t\treturn 0\n\tend\n\t\n\t-- If the first number is greater than the second and\
    \ equal to the third, return 1\n\tif a > b and b == c then\n\t\treturn 1\n\tend\n\
    \t\n\t-- If the first number is less than the second and equal to the third, return\
    \ 1\n\tif a < b and b == c then\n\t\treturn 1\n\tend\n\t\n\t-- If the first number\
    \ is less than the second and greater than the third, return 1\n\tif a < b and\
    \ b > c then\n\t\treturn 1\n\tend\n\t\n\t-- If the first number is greater than\
    \ the second and equal to the third, return 1\n\tif a > b and b == c then\n\t\t\
    return 1\n\tend\n\t\n\t-- If the first number is less than the second and greater\
    \ than the third, return 1\n\tif a < b and b > c then\n\t\treturn 1\n\tend\n\t\
    \n\t-- If the first number is greater than the second and equal to the third,\
    \ return 1\n\tif a > b and b == c then\n\t\treturn 1\n\tend\n\t\n\t-- If the first\
    \ number is less than the second and equal to the third, return 1\n\tif a < b\
    \ and b == c then\n\t\treturn 1\n\tend\n\t\n\t-- If the first number is less than\
    \ the second and greater than the third, return 1\n\tif a < b and b > c then\n\
    \t\treturn 1\n\tend\n\t\n\t-- If the first number is greater than the second and\
    \ equal to the third, return 1\n\tif a > b and b == c then\n\t\treturn 1\n\tend\n\
    \t\n\t-- If the first number is less than the second and equal to the third, return\
    \ 1\n\tif a < b and b == c then\n\t\treturn 1\n\tend\n\t\n\t-- If the first number\
    \ is less than the second \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps1opveew.lua:107: ''end'' expected (to close ''function''
    at line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local product = 0\n  local digits = math.abs(a)\
    \ + math.abs(b)\n  if digits == 0 then\n    return 0\n  end\n  if a < 0 and b\
    \ < 0 then\n    product = product * -1\n  end\n  if a < 0 then\n    digits = digits\
    \ * -1\n    a = -a \n  end\n  if b < 0 then\n    digits = digits * -1\n    b =\
    \ -b\n  end\n  local i = 1\n  while digits > 0 do\n    product = product + (a\
    \ % 10) * (b % 10)\n    digits = digits / 10\n    a = a / 10\n    b = b / 10\n\
    \    i = i + 1\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp8w1bpo.lua:40:\
    \ expected: 16, actual: 27.919191919192\nstack traceback:\n\t/tmp/tmpxp8w1bpo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 0\n\
    \  local a = tonumber(a)\n  local b = tonumber(b)\n  if a ~= nil and b ~= nil\
    \ then\n    if a > 0 then\n      product = product + math.floor(a/10)*math.floor(b/10)\n\
    \      a = math.floor(a/10)\n      b = math.floor(b/10)\n    end\n    if a < 0\
    \ then\n      product = product + math.floor(a/10)*math.floor(b/10)\n      a =\
    \ math.floor(a/10)\n      b = math.floor(b/10)\n    end\n    if b > 0 then\n \
    \     product = product + math.floor(a/10)*math.floor(b/10)\n      a = math.floor(a/10)\n\
    \      b = math.floor(b/10)\n    end\n    if b < 0 then\n      product = product\
    \ + math.floor(a/10)*math.floor(b/10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n\
    \    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xvocp_d.lua:42:\
    \ expected: 16, actual: 578\nstack traceback:\n\t/tmp/tmp1xvocp_d.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  if b == 0 then\n    return 0\n  elseif b == 1\
    \ then\n    return a\n  else\n    return multiply(a/10, b/10)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xh16jy_.lua:22:\
    \ expected: 16, actual: 0\nstack traceback:\n\t/tmp/tmp5xh16jy_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local product = 1\n  \n  -- If the numbers are\
    \ equal, return 0.\n  if a == b then\n    return 0\n  end\n  \n  -- If the first\
    \ number is greater than the second number, return 0.\n  if a > b then\n    return\
    \ 0\n  end\n  \n  -- If the first number is less than the second number, return\
    \ 0.\n  if a < b then\n    return 0\n  end\n  \n  -- If the first number is equal\
    \ to the second number, return 1.\n  if a == b then\n    return 1\n  end\n  \n\
    \  -- If the first number is less than the second number, return 1.\n  if a <\
    \ b then\n    return 1\n  end\n  \n  -- If the first number is greater than the\
    \ second number, return 1.\n  if a > b then\n    return 1\n  end\n  \n  -- If\
    \ the first number is equal to the second number, return 1.\n  if a == b then\n\
    \    return 1\n  end\n  \n  -- If the first number is less than the second number,\
    \ return 1.\n  if a < b then\n    return 1\n  end\n  \n  -- If the first number\
    \ is greater than the second number, return 1.\n  if a > b then\n    return 1\n\
    \  end\n  \n  -- If the first number is equal to the second number, return 1.\n\
    \  if a == b then\n    return 1\n  end\n  \n  -- If the first number is less than\
    \ the second number, return 1.\n  if a < b then\n    return 1\n  end\n  \n  --\
    \ If the first number is greater than the second number, return 1.\n  if a > b\
    \ then\n    return 1\n  end\n  \n  -- If the first number is equal to the second\
    \ number, return 1.\n  if a == b then\n    return 1\n  end\n  \n  -- If the first\
    \ number is less than the second number, return 1.\n  if a < b then\n    return\
    \ 1\n  end\n  \n  -- If the first number is greater than the second number, return\
    \ 1.\n  if a > b then\n    return 1\n  end\n  \n  -- If the first number is equal\
    \ to the second number, return 1.\n  if a == b then\n    return 1\n  end\n  \n\
    \  -- If the first number is less than the second number, return 1.\n  if a <\
    \ b then\n    return 1\n  end\n  \n  -- If the first number is greater than the\
    \ second number, return 1.\n  if a > b then\n    return 1\n  end\n  \n  -- If\
    \ the first number is equal to the second number, return 1.\n  if a == b then\n\
    \    return 1\n  end\n  \n  -- If the first number is less than the second number,\
    \ return 1.\n  if a < b then\n    return 1\n  end\n  \n  -- If the first number\
    \ is greater than the second number, return 1.\n  if a > b then\n    return 1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpthb501jc.lua:115: ''end'' expected (to close ''if'' at line
    113) near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\tlocal product = 1\n\t\n\t-- Iterate through each\
    \ digit in each number\n\tfor i = 1, math.abs(a) do\n\t\t-- Get the remainder\
    \ of the division\n\t\tlocal remainder = a % 10\n\t\t\n\t\t-- Add the remainder\
    \ to the product\n\t\tproduct = product * 10 + remainder\n\t\t\n\t\t-- Divide\
    \ the number by 10\n\t\ta = a / 10\n\tend\n\t\n\t-- Add the remainder to the product\n\
    \tproduct = product * 10 + b\n\t\n\treturn product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tnhmzv7.lua:33:\
    \ expected: 16, actual: 1.8494949494949e+149\nstack traceback:\n\t/tmp/tmp8tnhmzv7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n   if a == nil or b == nil then\n      return nil\n\
    \   end\n   local product = 0\n   for i = 1, 10 do\n      product = product +\
    \ (a%10 * b%10)\n      a = math.floor(a/10)\n      b = math.floor(b/10)\n   end\n\
    \   return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldfq0r8s.lua:25:\
    \ expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpldfq0r8s.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n   if b == 0 then\n      return 0\n   end\n   local\
    \ product = 1\n   for i = 1, b do\n      product = product * a\n   end\n   return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgw7agwz.lua:23:\
    \ expected: 16, actual: 0\nstack traceback:\n\t/tmp/tmpfgw7agwz.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 0\n\
    \  local digits = math.floor(a/10)\n  local remainder = a % 10\n  product = product\
    \ + digits*(b/10)\n  product = product + remainder*(b%10)\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi94uuzq.lua:22:\
    \ expected: 16, actual: 592.8\nstack traceback:\n\t/tmp/tmpfi94uuzq.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\tlocal product = 1\n\tlocal digit1, digit2 = math.modf(a)\n\
    \tlocal digit3, digit4 = math.modf(b)\n\tlocal digit5, digit6 = math.modf(digit1\
    \ * digit2)\n\tlocal digit7, digit8 = math.modf(digit3 * digit4)\n\tlocal digit9,\
    \ digit10 = math.modf(digit5 * digit6)\n\tlocal digit11, digit12 = math.modf(digit7\
    \ * digit8)\n\tlocal digit13, digit14 = math.modf(digit9 * digit10)\n\tlocal digit15,\
    \ digit16 = math.modf(digit11 * digit12)\n\tlocal digit17, digit18 = math.modf(digit13\
    \ * digit14)\n\tlocal digit19, digit20 = math.modf(digit15 * digit16)\n\tlocal\
    \ digit21, digit22 = math.modf(digit17 * digit18)\n\tlocal digit23, digit24 =\
    \ math.modf(digit19 * digit20)\n\tlocal digit25, digit26 = math.modf(digit21 *\
    \ digit22)\n\tlocal digit27, digit28 = math.modf(digit23 * digit24)\n\tlocal digit29,\
    \ digit30 = math.modf(digit25 * digit26)\n\tlocal digit31, digit32 = math.modf(digit27\
    \ * digit28)\n\tlocal digit33, digit34 = math.modf(digit29 * digit30)\n\tlocal\
    \ digit35, digit36 = math.modf(digit31 * digit32)\n\tlocal digit37, digit38 =\
    \ math.modf(digit33 * digit34)\n\tlocal digit39, digit40 = math.modf(digit35 *\
    \ digit36)\n\tlocal digit41, digit42 = math.modf(digit37 * digit38)\n\tlocal digit43,\
    \ digit44 = math.modf(digit39 * digit40)\n\tlocal digit45, digit46 = math.modf(digit41\
    \ * digit42)\n\tlocal digit47, digit48 = math.modf(digit43 * digit44)\n\tlocal\
    \ digit49, digit50 = math.modf(digit45 * digit46)\n\tlocal digit51, digit52 =\
    \ math.modf(digit47 * digit48)\n\tlocal digit53, digit54 = math.modf(digit49 *\
    \ digit50)\n\tlocal digit55, digit56 = math.modf(digit51 * digit52)\n\tlocal digit57,\
    \ digit58 = math.modf(digit53 * digit54)\n\tlocal digit59, digit60 = math.modf(digit55\
    \ * digit56)\n\tlocal digit61, digit62 = math.modf(digit57 * digit58)\n\tlocal\
    \ digit63, digit64 = math.modf(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv60m4uep.lua:43: '')'' expected (to close ''('' at line 42)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local product = 0\n  local digits = math.abs(a)\
    \ .. math.abs(b)\n  local unitDigits = math.floor(math.log10(digits))\n  local\
    \ unitDigit = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10,\
    \ unitDigit + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits\
    \ = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit = math.mod(unitDigits,\
    \ 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit\
    \ = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit\
    \ + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10,\
    \ unitDigit + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits\
    \ = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit = math.mod(unitDigits,\
    \ 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit\
    \ = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit\
    \ + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10,\
    \ unitDigit + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits\
    \ = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit = math.mod(unitDigits,\
    \ 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit\
    \ = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit\
    \ + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10,\
    \ unitDigit + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits\
    \ = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit = math.mod(unitDigits,\
    \ 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit + 1))\n  local unitDigit\
    \ = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10, unitDigit\
    \ + 1))\n  local unitDigit = math.mod(unitDigits, 10)\n  local unitDigits = math.floor(math.pow(10,\
    \ unitDigit + 1))\n  local unitDigit = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbdppfa4m.lua:48: unexpected symbol near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  if a == 0 then\n    return 0\n  elseif b == 0\
    \ then\n    return a\n  else\n    return a % 10 * b % 10 + multiply(a / 10, b\
    \ / 10)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatu7iq2w.lua:22:\
    \ expected: 16, actual: 19.919191919192\nstack traceback:\n\t/tmp/tmpatu7iq2w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local product = 1\n  local digits = math.abs(a)\
    \ + math.abs(b)\n  local unitDigits = math.floor(digits/10)\n  if unitDigits >\
    \ 0 then\n    product = product * 10\n    product = product + unitDigits\n  end\n\
    \  digits = digits % 10\n  if digits > 0 then\n    product = product * 10\n  \
    \  product = product + digits\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0r5_zk.lua:28:\
    \ expected: 16, actual: 66\nstack traceback:\n\t/tmp/tmpdw0r5_zk.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  -- Write your code here\n  local product = 1\n\
    \  local digits = math.abs(a) + math.abs(b)\n  local unitDigits = math.floor(digits/10)\n\
    \  if unitDigits > 0 then\n    product = product * 10^unitDigits\n  end\n  digits\
    \ = digits % 10\n  unitDigits = math.floor(digits/10)\n  if unitDigits > 0 then\n\
    \    product = product * 10^unitDigits\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_epgc3x0.lua:28:\
    \ expected: 16, actual: 1e+56\nstack traceback:\n\t/tmp/tmp_epgc3x0.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\tlocal product = 1\n\t\n\twhile a ~= 0 and b ~=\
    \ 0 do\n\t\tproduct = product * a % 10 + b % 10\n\t\ta = a / 10\n\t\tb = b / 10\n\
    \tend\n\t\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0r4hf94.lua:24:\
    \ expected: 16, actual: 3.95252516673e-323\nstack traceback:\n\t/tmp/tmpa0r4hf94.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local product = 1\n  local digits = math.abs(a)\
    \ -- The absolute value of the first number\n  local unitDigits = math.abs(b)\
    \ -- The absolute value of the second number\n  \n  -- If the first number is\
    \ negative, swap it with the second number\n  if a < 0 then\n    digits, unitDigits\
    \ = unitDigits, digits\n  end\n  \n  -- If the second number is negative, swap\
    \ it with the first number\n  if b < 0 then\n    digits, unitDigits = unitDigits,\
    \ digits\n  end\n  \n  -- If the first number is 0, swap it with the second number\n\
    \  if unitDigits == 0 then\n    digits, unitDigits = unitDigits, digits\n  end\n\
    \  \n  -- If the second number is 0, swap it with the first number\n  if digits\
    \ == 0 then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  -- If the\
    \ first number is greater than the second number, swap them\n  if unitDigits >\
    \ digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  -- If\
    \ the first number is less than the second number, swap them\n  if unitDigits\
    \ < digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is equal to the second number, swap them\n  if unitDigits\
    \ == digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is greater than the second number, swap them\n  if unitDigits\
    \ > digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is less than the second number, swap them\n  if unitDigits\
    \ < digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is equal to the second number, swap them\n  if unitDigits\
    \ == digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is greater than the second number, swap them\n  if unitDigits\
    \ > digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is less than the second number, swap them\n  if unitDigits\
    \ < digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is equal to the second number, swap them\n  if unitDigits\
    \ == digits then\n    digits, unitDigits = unitDigits, digits\n  end\n  \n  --\
    \ If the first number is greater than the second number, swap them\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfp1d04id.lua:95: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\tlocal product = 0\n\tlocal carry = 0\n\tlocal\
    \ digitA = a%10\n\tlocal digitB = b%10\n\tlocal digitC = 0\n\tlocal digitD = 0\n\
    \tlocal digitE = 0\n\tlocal digitF = 0\n\tlocal digitG = 0\n\tlocal digitH = 0\n\
    \tlocal digitI = 0\n\tlocal digitJ = 0\n\tlocal digitK = 0\n\tlocal digitL = 0\n\
    \tlocal digitM = 0\n\tlocal digitN = 0\n\tlocal digitO = 0\n\tlocal digitP = 0\n\
    \tlocal digitQ = 0\n\tlocal digitR = 0\n\tlocal digitS = 0\n\tlocal digitT = 0\n\
    \tlocal digitU = 0\n\tlocal digitV = 0\n\tlocal digitW = 0\n\tlocal digitX = 0\n\
    \tlocal digitY = 0\n\tlocal digitZ = 0\n\tlocal digitA = 0\n\tlocal digitB = 0\n\
    \tlocal digitC = 0\n\tlocal digitD = 0\n\tlocal digitE = 0\n\tlocal digitF = 0\n\
    \tlocal digitG = 0\n\tlocal digitH = 0\n\tlocal digitI = 0\n\tlocal digitJ = 0\n\
    \tlocal digitK = 0\n\tlocal digitL = 0\n\tlocal digitM = 0\n\tlocal digitN = 0\n\
    \tlocal digitO = 0\n\tlocal digitP = 0\n\tlocal digitQ = 0\n\tlocal digitR = 0\n\
    \tlocal digitS = 0\n\tlocal digitT = 0\n\tlocal digitU = 0\n\tlocal digitV = 0\n\
    \tlocal digitW = 0\n\tlocal digitX = 0\n\tlocal digitY = 0\n\tlocal digitZ = 0\n\
    \tlocal digitA = 0\n\tlocal digitB = 0\n\tlocal digitC = 0\n\tlocal digitD = 0\n\
    \tlocal digitE = 0\n\tlocal digitF = 0\n\tlocal digitG = 0\n\tlocal digitH = 0\n\
    \tlocal digitI = 0\n\tlocal digitJ = 0\n\tlocal digitK = 0\n\tlocal digitL = 0\n\
    \tlocal digitM = 0\n\tlocal digitN = 0\n\tlocal digitO = 0\n\tlocal digitP = 0\n\
    \tlocal digitQ = 0\n\tlocal digitR = 0\n\tlocal digitS = 0\n\tlocal digitT = 0\n\
    \tlocal digitU = 0\n\tlocal digitV = 0\n\tlocal digitW = 0\n\tlocal digitX = 0\n\
    \tlocal digitY = 0\n\tlocal digitZ = 0\n\tlocal digitA = 0\n\tlocal digitB = 0\n\
    \tlocal digitC = 0\n\tlocal digitD = 0\n\tlocal digitE = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppb82_zun.lua:110: ''end'' expected (to close ''function''
    at line 9) near <eof>

    '
  stdout: ''
