name: HumanEval_103_rounded_avg
language: lua
results:
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc8nubey.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpfc8nubey.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  local i = 0\n  while i <= m do\n\
    \    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg =\
    \ sum / count\n  local binary = string.format(\"%b\", avg)\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h_nwl7p.lua:23:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp5h_nwl7p.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp5h_nwl7p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ local sum = 0\n  local count = 0\n  for i = n1, m2 do\n    sum = sum + i\n \
    \   count = count + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local\
    \ binary = string.format(\"0b%b\", sum / count)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs3pk3rw.lua:24:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpvs3pk3rw.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpvs3pk3rw.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ged4w1n.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp5ged4w1n.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuicix5r.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpsuicix5r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  \n  if count == 0 then\n    return -1\n  end\n  \n  local\
    \ result = sum / count\n  \n  return tostring(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz2dmv96.lua:31:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmptz2dmv96.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return string.format(\"0b%b\", sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyld59whm.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpyld59whm.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsxgg5vz.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmptsxgg5vz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local binary =\
    \ string.format(\"0b%b\", avg)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuu1nht1m.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpuu1nht1m.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = string.format(\"\
    %b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph09yk07d.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmph09yk07d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = sum / 2\n  local bin = math.floor(avg)\n  local rem = avg - bin\n  if\
    \ rem == 0 then\n    return bin\n  else\n    return bin .. \"b\" .. rem\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxa0q8tz.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpzxa0q8tz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n   \
    \ count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzvjqzl4.lua:25:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmptzvjqzl4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n/m)\n  local\
    \ n2 = n - n1*m\n  local m1 = math.floor(m/n)\n  local m2 = m - m1*n\n  if n2\
    \ > m1 then\n    return -1\n  elseif n2 < m1 then\n    return -1\n  else\n   \
    \ return n1*m + n2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28u9xg3k.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp28u9xg3k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ \"0b\" .. tostring(sum / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjqysd27.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b7.5\"\nstack traceback:\n\t/tmp/tmpdjqysd27.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu471f8t0.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpu471f8t0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m then\n    return -1\n  end\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  local sum = 0\n  local count = 0\n  for i = n1,\
    \ m1 do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xqbafey.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp7xqbafey.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  elseif nm == m then\n    return nm\n  else\n\
    \    return nm..'0'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlz0ad5w.lua:24:\
    \ expected: \"0b11\"\nactual: \"00\"\nstack traceback:\n\t/tmp/tmptlz0ad5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m+1 do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx6fz7jh.lua:24:\
    \ expected: \"0b11\"\nactual: 10.5\nstack traceback:\n\t/tmp/tmpyx6fz7jh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(n, m)\n  local\
    \ nm_to_m = n - m\n  local nm_to_n = m + n\n  local nm_to_n_to_m = nm_to_m * 2\n\
    \  local nm_to_n_to_m_to_m = nm_to_n_to_m * 2\n  local nm_to_n_to_m_to_m_to_n\
    \ = nm_to_n_to_m_to_m * 3\n  local nm_to_n_to_m_to_m_to_n_to_m = nm_to_n_to_m_to_m\
    \ * 4\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m = nm_to_n_to_m_to_m * 5\n  local\
    \ nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n = nm_to_n_to_m_to_m * 6\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m\
    \ = nm_to_n_to_m_to_m * 7\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m\
    \ = nm_to_n_to_m_to_m * 8\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n\
    \ = nm_to_n_to_m_to_m * 9\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m\
    \ = nm_to_n_to_m_to_m * 10\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m\
    \ = nm_to_n_to_m_to_m * 11\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n\
    \ = nm_to_n_to_m_to_m * 12\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m\
    \ = nm_to_n_to_m_to_m * 13\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m\
    \ = nm_to_n_to_m_to_m * 14\n  local nm_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n_to_m_to_m_to_n\
    \ = nm_to_n_to_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvx892uju.lua:47: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ if n1 < m1 then\n    return -1\n  end\n  if n2 < m2 then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  if count > 0 then\n    return sum / count\n \
    \ end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ch063ym.lua:36:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp9ch063ym.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  elseif n == m then\n    return 1\n  else\n    local sum = 0\n    local count\
    \ = 0\n    for i = n, m do\n      sum = sum + i\n      count = count + 1\n   \
    \ end\n    return sum / count\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptn84_1pz.lua:29:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmptn84_1pz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  local avg = sum / count\n\
    \  local bin = string.format(\"%b\", avg)\n  local bin = string.gsub(bin, \"0\"\
    , \"\")\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32xurdwl.lua:22:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp32xurdwl.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp32xurdwl.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(n, m)\n  local\
    \ avg = math.floor((nm + n) / 2)\n  if nm > m then\n    return -1\n  end\n  return\
    \ tostring(avg)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd695ov3e.lua:22:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpd695ov3e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65207f2b.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp65207f2b.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4a8699df.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp4a8699df.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ \"0b\" .. tostring(sum / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp657fcyc3.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp657fcyc3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgybb6dn.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdgybb6dn.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ if n1 == m1 then\n    return n\n  elseif n2 < m2 then\n    return -1\n  else\n\
    \    return n1 .. 'b' .. m1 .. 'b'\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85ttkdb.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpc85ttkdb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count +\
    \ 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local binary = string.format(\"\
    0b%b\", sum / count)\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkzxn4yz.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpzkzxn4yz.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpzkzxn4yz.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  elseif n == m then\n    return n\n  else\n    return math.floor((n + m) / 2)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm83dvtxo.lua:23:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpm83dvtxo.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor((n + m) /\
    \ 2)\n  if nm == n then\n    return nm\n  else\n    return -1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzev_u_r.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpuzev_u_r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacnkluav.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpacnkluav.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcitije8s.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpcitije8s.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = n - nn*m\n  if nn > m then return -1 end\n  return nn*m .. mm\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d4clgiw.lua:20:\
    \ expected: \"0b11\"\nactual: \"01\"\nstack traceback:\n\t/tmp/tmp2d4clgiw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  end\n  return \"0b\" .. tostring(nm)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1afln0i6.lua:21:\
    \ expected: \"0b11\"\nactual: \"0b0\"\nstack traceback:\n\t/tmp/tmp1afln0i6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25m7uryf.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp25m7uryf.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)\n  if\
    \ nm == 0 then\n    return -1\n  end\n  return \"0b\" .. tostring(nm)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08v4uer5.lua:21:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp08v4uer5.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then return -1 end\n  return string.format(\"0b%b\", math.floor(nm))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nccdweb.lua:13:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp5nccdweb.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp5nccdweb.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor(n / m) *\
    \ m\n  if n <= m then\n    return avg\n  else\n    return -1\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5bbc6b8.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpd5bbc6b8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19msiamm.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp19msiamm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ if n1 == m1 then\n    return n\n  elseif n2 == m2 then\n    return -1\n  else\n\
    \    return (n1 + n2 + m1 + m2) / 4\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0yvjo5b.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpr0yvjo5b.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n/m)\n  local\
    \ n2 = n - n1*m\n  if n2 > 0 then\n    return n1 .. \"b\" .. n2 \n  else\n   \
    \ return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinic4m3c.lua:23:\
    \ expected: \"0b11\"\nactual: \"0b1\"\nstack traceback:\n\t/tmp/tmpinic4m3c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return string.format(\"0b%b\", sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttem3ncy.lua:20:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpttem3ncy.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpttem3ncy.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ nn = math.min(n, m)\n  local sum = 0\n  local count = 0\n  for i = n, nm do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ -1\n  end\n  local result = math.floor(sum / count)\n  local bin = string.format(\"\
    %b\", result)\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rkbctxm.lua:23:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp2rkbctxm.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp2rkbctxm.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  while n > m do\n    sum = sum + n\n    n = n - 1\n    count = count + 1\n\
    \  end\n  if count > 0 then\n    sum = sum / count\n  end\n  return tostring(sum)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mjlhcj8.lua:27:\
    \ expected: \"0b11\"\nactual: \"0\"\nstack traceback:\n\t/tmp/tmp_mjlhcj8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8ycw4sw.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_8ycw4sw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor((n + m) /\
    \ 2)\n  if nm == n then\n    return nm\n  elseif nm == m + 1 then\n    return\
    \ -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqde4awj.lua:24:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmphqde4awj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  elseif nm == m then\n    return nm\n  else\n\
    \    return nm..\"b\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oe1_2v9.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b\"\nstack traceback:\n\t/tmp/tmp7oe1_2v9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vzvrg17.lua:20:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp5vzvrg17.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp5vzvrg17.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcu3e3q4.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpbcu3e3q4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  local result = math.floor(sum\
    \ / count)\n  local bin = string.char(result)\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1_nu7ne.lua:29:\
    \ expected: \"0b11\"\nactual: \"\x03\"\nstack traceback:\n\t/tmp/tmpp1_nu7ne.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then return -1 end\n  return \"0b\" .. tostring(nm)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k7t2fub.lua:19:\
    \ expected: \"0b11\"\nactual: \"0b0\"\nstack traceback:\n\t/tmp/tmp2k7t2fub.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltac5dv8.lua:20:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpltac5dv8.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpltac5dv8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor(m/n)\n  if nn > mm then\n    return -1\n  else\n    return nn\
    \ * m + (mm * m)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5aiyow1.lua:23:\
    \ expected: \"0b11\"\nactual: 25\nstack traceback:\n\t/tmp/tmpf5aiyow1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydyomxwu.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpydyomxwu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  for i = n, nm do\n    sum = sum + i\n  end\n  return \"0b\" .. tostring(sum\
    \ / nm)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0viwbqjv.lua:22:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp0viwbqjv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 > m1 then\n    return -1\n  end\n  local n2 = n1\
    \ + 1\n  local m2 = m1 + 1\n  local sum = 0\n  while n2 <= m2 do\n    sum = sum\
    \ + n2\n    n2 = n2 + 1\n  end\n  local avg = sum / m2\n  local bin = string.format(\"\
    %b\", avg)\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i6us5qz.lua:24:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp1i6us5qz.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp1i6us5qz.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g_yxa5f.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp3g_yxa5f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = n .. m\n  local nm =\
    \ tonumber(nm)\n  if nm == nil then\n    return -1\n  end\n  local nm = math.floor(nm)\n\
    \  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm / 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.abs(nm)\n  local n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr0sd55y6.lua:83: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetazcknb.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpetazcknb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  while n > m do\n    sum = sum + n\n    n = n - 1\n    count = count + 1\n\
    \  end\n  if count == 0 then\n    return -1\n  end\n  sum = sum / count\n  local\
    \ binary = string.format(\"%b\", sum)\n  binary = binary:sub(1, binary:len()-1)\n\
    \  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0f1wvtn.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpi0f1wvtn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  local n2 = math.floor((n\
    \ + m) / 2)\n  local m2 = math.floor((m + n) / 2)\n  if n2 > m1 then\n    return\
    \ -1\n  end\n  local n3 = math.floor((n + m) / 2)\n  local m3 = math.floor((m\
    \ + n) / 2)\n  if n3 == m3 then\n    return -1\n  end\n  local n4 = math.floor((n\
    \ + m) / 2)\n  local m4 = math.floor((m + n) / 2)\n  if n4 == m4 then\n    return\
    \ -1\n  end\n  local n5 = math.floor((n + m) / 2)\n  local m5 = math.floor((m\
    \ + n) / 2)\n  if n5 == m5 then\n    return -1\n  end\n  local n6 = math.floor((n\
    \ + m) / 2)\n  local m6 = math.floor((m + n) / 2)\n  if n6 == m6 then\n    return\
    \ -1\n  end\n  local n7 = math.floor((n + m) / 2)\n  local m7 = math.floor((m\
    \ + n) / 2)\n  if n7 == m7 then\n    return -1\n  end\n  local n8 = math.floor((n\
    \ + m) / 2)\n  local m8 = math.floor((m + n) / 2)\n  if n8 == m8 then\n    return\
    \ -1\n  end\n  local n9 = math.floor((n + m) / 2)\n  local m9 = math.floor((m\
    \ + n) / 2)\n  if n9 == m9 then\n    return -1\n  end\n  local n10 = math.floor((n\
    \ + m) / 2)\n  local m10 = math.floor((m + n) / 2)\n  if n10 == m10 then\n   \
    \ return -1\n  end\n  local n11 = math.floor((n + m) / 2)\n  local m11 = math.floor((m\
    \ + n) / 2)\n  if n11 == m11 then\n    return -1\n  end\n  local n12 = math.floor((n\
    \ + m) / 2)\n  local m12 = math.floor((m + n) / 2)\n  if n12 == m12 then\n   \
    \ return -1\n  end\n  local n13 = math.floor((n + m) / 2)\n  local m13 = math.floor((m\
    \ + n) / 2)\n  if n13 == m13 then\n    return -1\n  end\n  local n14 = math.floor((n\
    \ + m) / 2)\n  local m14 = math.floor((m + n) / 2)\n  if n14 == m14 then\n   \
    \ return -1\n  end\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz7prnb9_.lua:100: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyon9nf_f.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpyon9nf_f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(math.min(n,\
    \ m), -1)\n  local nm_bin = math.floor(nm * 2)\n  return \"0b\" .. tostring(nm_bin)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauqsechd.lua:19:\
    \ expected: \"0b11\"\nactual: \"0b2\"\nstack traceback:\n\t/tmp/tmpauqsechd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp017gyl5n.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp017gyl5n.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n +\
    \ 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local binary = string.format(\"\
    %b\", sum / count)\n  binary = binary:sub(1, binary:len()-1)\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcabkulzc.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpcabkulzc.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpcabkulzc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  local i = 1\n  while i <= m do\n\
    \    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg =\
    \ sum / count\n  local bin = math.floor(avg)\n  local rem = math.floor(avg - bin)\n\
    \  local bin2 = math.floor(bin)\n  local rem2 = math.floor(rem - bin2)\n  local\
    \ bin3 = math.floor(bin2)\n  local rem3 = math.floor(rem2 - bin3)\n  local bin4\
    \ = math.floor(bin3)\n  local rem4 = math.floor(rem3 - bin4)\n  local bin5 = math.floor(bin4)\n\
    \  local rem5 = math.floor(rem4 - bin5)\n  local bin6 = math.floor(bin5)\n  local\
    \ rem6 = math.floor(rem5 - bin6)\n  local bin7 = math.floor(bin6)\n  local rem7\
    \ = math.floor(rem6 - bin7)\n  local bin8 = math.floor(bin7)\n  local rem8 = math.floor(rem7\
    \ - bin8)\n  local bin9 = math.floor(bin8)\n  local rem9 = math.floor(rem8 - bin9)\n\
    \  local bin10 = math.floor(bin9)\n  local rem10 = math.floor(rem9 - bin10)\n\
    \  local bin11 = math.floor(bin10)\n  local rem11 = math.floor(rem10 - bin11)\n\
    \  local bin12 = math.floor(bin11)\n  local rem12 = math.floor(rem11 - bin12)\n\
    \  local bin13 = math.floor(bin12)\n  local rem13 = math.floor(rem12 - bin13)\n\
    \  local bin14 = math.floor(bin13)\n  local rem14 = math.floor(rem13 - bin14)\n\
    \  local bin15 = math.floor(bin14)\n  local rem15 = math.floor(rem14 - bin15)\n\
    \  local bin16 = math.floor(bin15)\n  local rem16 = math.floor(rem15 - bin16)\n\
    \  local bin17 = math.floor(bin16)\n  local rem17 = math.floor(rem16 - bin17)\n\
    \  local bin18 = math.floor(bin17)\n  local rem18 = math.floor(rem17 - bin18)\n\
    \  local bin19 = math.floor(bin18)\n  local rem19 = math.floor(rem18 - bin19)\n\
    \  local bin20 = math.floor(bin19)\n  local rem20 = math.floor(rem19 - bin20)\n\
    \  local bin21 = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfwqry84u.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  if\
    \ nn > m then return -1 end\n  return nn*m + (n%m)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2vurw2q.lua:19:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpf2vurw2q.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ if n1 < m1 then\n    return -1\n  elseif n2 < m2 then\n    return -1\n  else\n\
    \    local sum = 0\n    for i = n1, m1 do\n      sum = sum + i\n    end\n    return\
    \ sum / m\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai6zfn81.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpai6zfn81.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor(m/n)\n  local nm = math.floor((m-mm)*2)\n  local mmm = math.floor((m-mm)*4)\n\
    \  local mmmm = math.floor((m-mm)*8)\n  local mmmmm = math.floor((m-mm)*16)\n\
    \  local mmmmmm = math.floor((m-mm)*32)\n  local mmmmmmm = math.floor((m-mm)*64)\n\
    \  local mmmmmmmm = math.floor((m-mm)*128)\n  local mmmmmmmmm = math.floor((m-mm)*256)\n\
    \  local mmmmmmmmmm = math.floor((m-mm)*512)\n  local mmmmmmmmmmm = math.floor((m-mm)*1024)\n\
    \  local mmmmmmmmmmmm = math.floor((m-mm)*2048)\n  local mmmmmmmmmmmmm = math.floor((m-mm)*4096)\n\
    \  local mmmmmmmmmmmmmm = math.floor((m-mm)*8192)\n  local mmmmmmmmmmmmmmm = math.floor((m-mm)*16384)\n\
    \  local mmmmmmmmmmmmmmm = math.floor((m-mm)*32768)\n  local mmmmmmmmmmmmmmmm\
    \ = math.floor((m-mm)*65536)\n  local mmmmmmmmmmmmmmmmm = math.floor((m-mm)*131072)\n\
    \  local mmmmmmmmmmmmmmmmm = math.floor((m-mm)*262144)\n  local mmmmmmmmmmmmmmmmmm\
    \ = math.floor((m-mm)*524288)\n  local mmmmmmmmmmmmmmmmm = math.floor((m-mm)*1048576)\n\
    \  local mmmmmmmmmmmmmmmmmm = math.floor((m-mm)*2097152)\n  local mmmmmmmmmmmmmmmmmmm\
    \ = math.floor((m-mm)*4194304)\n  local mmmmmmmmmmmmmmmmmmm = math.floor((m-mm)*8388608)\n\
    \  local mmmmmmmmmmmmmmmmmmm = math.floor((m-mm)*16777216)\n  local mmmmmmmmmmmmmmmmmmmm\
    \ = math.floor((m-mm)*33554432)\n  local mmmmmmmmmmmmmmmmmmm = math.floor((m-mm)*67108864)\n\
    \  local mmmmmmmmmmmmmmmmmmmm\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6gjvmk6j.lua:58: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi14z5rjb.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpi14z5rjb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"\
    %b\", sum / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq694k352.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpq694k352.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpq694k352.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm5ompe6.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpcm5ompe6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n  \
    \  return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iw4b2nr.lua:28:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp9iw4b2nr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = bit.bor(bit.lshift(avg,\
    \ 8), bit.rshift(avg, 8))\n  return tostring(bin)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdbeoa78.lua:28:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmppdbeoa78.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfr30c7s.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpvfr30c7s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31ioknx2.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp31ioknx2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzv0dtga.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpfzv0dtga.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((n-m)/m)\n  if nn > m then return -1 end\n  return \"0b\" ..\
    \ tostring(mm) .. tostring(mm)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3cb0etp.lua:20:\
    \ expected: \"0b11\"\nactual: \"0b-1-1\"\nstack traceback:\n\t/tmp/tmpv3cb0etp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ if n1 < m1 then\n    return -1\n  elseif n2 < m2 then\n    return -1\n  else\n\
    \    return (n2 - n1 + 1) / 2 * m\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tncshca.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp6tncshca.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wilerfw.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp9wilerfw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ local n3 = n - n1\n  local m3 = m - m1\n  local n4 = n2 - n1\n  local m4 = m2\
    \ - m1\n  local n5 = n3 - n4\n  local m5 = m3 - m4\n  local n6 = n5 - n6\n  local\
    \ m6 = m5 - m6\n  local n7 = n6 - n7\n  local m7 = m6 - m7\n  local n8 = n7 -\
    \ n8\n  local m8 = m7 - m8\n  local n9 = n8 - n9\n  local m9 = m8 - m9\n  local\
    \ n10 = n9 - n10\n  local m10 = m9 - m10\n  local n11 = n10 - n11\n  local m11\
    \ = m10 - m11\n  local n12 = n11 - n12\n  local m12 = m11 - m12\n  local n13 =\
    \ n12 - n13\n  local m13 = m12 - m13\n  local n14 = n13 - n14\n  local m14 = m13\
    \ - m14\n  local n15 = n14 - n15\n  local m15 = m14 - m15\n  local n16 = n15 -\
    \ n16\n  local m16 = m15 - m16\n  local n17 = n16 - n17\n  local m17 = m16 - m17\n\
    \  local n18 = n17 - n18\n  local m18 = m17 - m18\n  local n19 = n18 - n19\n \
    \ local m19 = m18 - m19\n  local n20 = n19 - n20\n  local m20 = m19 - m20\n  local\
    \ n21 = n20 - n21\n  local m21 = m20 - m21\n  local n22 = n21 - n22\n  local m22\
    \ = m21 - m22\n  local n23 = n22 - n23\n  local m23 = m22 - m23\n  local n24 =\
    \ n23 - n24\n  local m24 = m23 - m24\n  local n25 = n24 - n25\n  local m25 = m24\
    \ - m25\n  local n26 = n25 - n26\n  local m26 = m25 - m26\n  local n27 = n26 -\
    \ n27\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmre4_tta.lua:83: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  local sum = 0\n  local count = 0\n  for i = n1,\
    \ m1 do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoiguh9g.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpwoiguh9g.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gxzyb7g.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp0gxzyb7g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  local mm = math.floor(m/2) + 1\n  if nn > m then\n    return -1\n  elseif nn\
    \ < m then\n    return -1\n  elseif mm > n then\n    return -1\n  elseif mm <\
    \ n then\n    return -1\n  else\n    return nn * 2 - mm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigh8x1wx.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpigh8x1wx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n)\n  local\
    \ mm = math.floor(m)\n  if nn <= mm then\n    return nn..\"b\"\n  else\n    return\
    \ -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvos613ko.lua:23:\
    \ expected: \"0b11\"\nactual: \"1b\"\nstack traceback:\n\t/tmp/tmpvos613ko.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5umgawkr.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp5umgawkr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if avg > m then return -1 end\n  return tostring(avg)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmis7a6sm.lua:19:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpmis7a6sm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4oi4ss4.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpt4oi4ss4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvasdei4.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpdvasdei4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca1bv32z.lua:24:\
    \ expected: \"0b11\"\nactual: 7.5\nstack traceback:\n\t/tmp/tmpca1bv32z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  local mm = math.floor(m/2) + 1\n  if nn > m then\n    return -1\n  elseif mm\
    \ > n then\n    return -1\n  else\n    return nn * 2 - mm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla1o0exk.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpla1o0exk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  local n3 = n - n1\n  local m3 = m - m1\n  local\
    \ n4 = n2 - n1\n  local m4 = m2 - m1\n  local n5 = n3 - n4\n  local m5 = m3 -\
    \ m4\n  local n6 = n5 - n4\n  local m6 = m5 - m4\n  local n7 = n6 - n5\n  local\
    \ m7 = m6 - m5\n  local n8 = n7 - n6\n  local m8 = m7 - m6\n  local n9 = n8 -\
    \ n7\n  local m9 = m8 - m7\n  local n10 = n9 - n8\n  local m10 = m9 - m8\n  local\
    \ n11 = n10 - n9\n  local m11 = m10 - m9\n  local n12 = n11 - n10\n  local m12\
    \ = m11 - m10\n  local n13 = n12 - n11\n  local m13 = m12 - m11\n  local n14 =\
    \ n13 - n12\n  local m14 = m13 - m12\n  local n15 = n14 - n13\n  local m15 = m14\
    \ - m13\n  local n16 = n15 - n14\n  local m16 = m15 - m14\n  local n17 = n16 -\
    \ n15\n  local m17 = m16 - m15\n  local n18 = n17 - n16\n  local m18 = m17 - m16\n\
    \  local n19 = n18 - n17\n  local m19 = m18 - m17\n  local n20 = n19 - n18\n \
    \ local m20 = m19 - m18\n  local n21 = n20 - n19\n  local m21 = m20 - m19\n  local\
    \ n22 = n21 - n20\n  local m22 = m21 - m20\n  local n23 = n22 - n21\n  local m23\
    \ = m22 - m21\n  local n24 = n23 - n22\n  local m24 = m23 - m22\n  local n25 =\
    \ n24 - n23\n  local m25 = m24 - m23\n  local n26 = n25 - n24\n  local m26 = m25\
    \ - m24\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzw6xv1o0.lua:85: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  if\
    \ nn > m then return -1 end\n  local mm = math.floor(m/n)\n  local result = \"\
    \"\n  for i = 1, mm do\n    result = result .. \"1\" \n  end\n  result = result\
    \ .. \"0\"\n  result = result .. \"0\"\n  result = result .. \"1\"\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zifdcmt.lua:27:\
    \ expected: \"0b11\"\nactual: \"11111001\"\nstack traceback:\n\t/tmp/tmp7zifdcmt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz04hy6f8.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpz04hy6f8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local binary =\
    \ string.format(\"0b%b\", avg)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc9tnt_8.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpzc9tnt_8.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpzc9tnt_8.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ local n3 = n - n1\n  local m3 = m - m1\n  local n4 = n2 - n1\n  local m4 = m2\
    \ - m1\n  local n5 = n3 - n4\n  local m5 = m3 - m4\n  local n6 = n5 - n6\n  local\
    \ m6 = m5 - m6\n  local n7 = n6 - n7\n  local m7 = m6 - m7\n  local n8 = n7 -\
    \ n8\n  local m8 = m7 - m8\n  local n9 = n8 - n9\n  local m9 = m8 - m9\n  local\
    \ n10 = n9 - n10\n  local m10 = m9 - m10\n  local n11 = n10 - n11\n  local m11\
    \ = m10 - m11\n  local n12 = n11 - n12\n  local m12 = m11 - m12\n  local n13 =\
    \ n12 - n13\n  local m13 = m12 - m13\n  local n14 = n13 - n14\n  local m14 = m13\
    \ - m14\n  local n15 = n14 - n15\n  local m15 = m14 - m15\n  local n16 = n15 -\
    \ n16\n  local m16 = m15 - m16\n  local n17 = n16 - n17\n  local m17 = m16 - m17\n\
    \  local n18 = n17 - n18\n  local m18 = m17 - m18\n  local n19 = n18 - n19\n \
    \ local m19 = m18 - m19\n  local n20 = n19 - n20\n  local m20 = m19 - m20\n  local\
    \ n21 = n20 - n21\n  local m21 = m20 - m21\n  local n22 = n21 - n22\n  local m22\
    \ = m21 - m22\n  local n23 = n22 - n23\n  local m23 = m22 - m23\n  local n24 =\
    \ n23 - n24\n  local m24 = m23 - m24\n  local n25 = n24 - n25\n  local m25 = m24\
    \ - m25\n  local n26 = n25 - n26\n  local m26 = m25 - m26\n  local n27 = n26 -\
    \ n27\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppaklgep1.lua:83: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ppwnqgd.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_ppwnqgd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wgi807a.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp8wgi807a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  if nn > m then return -1 end\n  local mm = math.floor(m/2) + 1\n  return string.format(\"\
    0b%b\", nn*2, mm*2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxhdtx3l.lua:14:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpwxhdtx3l.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpwxhdtx3l.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  local i = 1\n  while i <= m do\n\
    \    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg =\
    \ sum / count\n  local binary = string.format(\"0b%b\", avg)\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sggem6t.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp7sggem6t.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local avg = math.floor((n + m)\
    \ / 2)\n  if avg > m then\n    return -1\n  else\n    return tostring(avg)\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xgfyih7.lua:22:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp3xgfyih7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q4f7es7.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_q4f7es7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  local i = n\n  while i <= m do\n\
    \    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg =\
    \ sum / count\n  local binary = string.format(\"0b%b\", avg)\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0yjko_4.lua:23:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpg0yjko_4.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpg0yjko_4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return sum / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedjqqoc8.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpedjqqoc8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.max(m, n)\n  local\
    \ mm = math.max(m, n)\n  local nm = math.max(m, n)\n  local nn = math.max(m, n)\n\
    \  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\n  local nn = math.max(m,\
    \ n)\n  local mm = math.max(m, n)\n  local nn = math.max(m, n)\n  local mm = math.max(m,\
    \ n)\n  local nn = math.max(m, n)\n  local mm = math.max(m, n)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkeku2lcj.lua:86: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  while n > m do\n    sum = sum + n\n    n = n - 1\n    count = count + 1\n\
    \  end\n  if count == 0 then\n    return -1\n  end\n  sum = sum / count\n  local\
    \ binary = \"\"\n  while n >= 1 do\n    binary = binary .. \"1\" .. tostring(n)\n\
    \    n = n - 1\n  end\n  return sum and binary or -1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky10q0q0.lua:33:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpky10q0q0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  if\
    \ nn > m then return -1 end\n  return nn*m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mch6ffa.lua:19:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp1mch6ffa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5x3884c.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpe5x3884c.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_qnolmr.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmph_qnolmr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlqup4ud.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdlqup4ud.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhe802t4.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpzhe802t4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = n1\
    \ + 1\n  local m2 = m1 + 1\n  local sum = 0\n  local count = 0\n  while n2 <=\
    \ m2 do\n    sum = sum + n2\n    count = count + 1\n    n2 = n2 + 1\n  end\n \
    \ return \"0b\" .. tostring(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76oxjk5l.lua:31:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp76oxjk5l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_k419k_.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp0_k419k_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ if n1 == m1 then\n    return n\n  elseif n2 == m2 then\n    return -1\n  else\n\
    \    return (n1 + n2 + 1) / 3\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0yjbbhx.lua:27:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmpd0yjbbhx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  local avg = sum / count\n\
    \  local bin = string.format(\"%b\", avg)\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok76lpcy.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpok76lpcy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)\n  if\
    \ nm == 0 then\n    return -1\n  else\n    return math.mod(n*m + nm, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq536lxzo.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpq536lxzo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5m8jm75.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpl5m8jm75.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((m-nn*m)/m)\n  if nn > m then\n    return -1\n  end\n  return\
    \ nn*m + (mm*m)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88f19e3v.lua:22:\
    \ expected: \"0b11\"\nactual: 5\nstack traceback:\n\t/tmp/tmp88f19e3v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ nn = math.min(n, m)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn\
    \ * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local\
    \ nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm\
    \ * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local\
    \ nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn\
    \ * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local\
    \ nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm\
    \ * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local\
    \ nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn\
    \ * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local\
    \ nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm\
    \ * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local\
    \ nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn\
    \ * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local\
    \ nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm\
    \ * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local\
    \ nn = math.floor(nn * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn\
    \ * 2)\n  local nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local\
    \ nm = math.floor(nm * 2)\n  local nn = math.floor(nn * 2)\n  local nm = math.floor(nm\
    \ * 2)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprqv86opl.lua:79: 'end' expected (to close 'function' at line\
    \ 10) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 == m then\n    return n1\n  elseif n1 < m then\n\
    \    return -1\n  else\n    return (n1 + m1)/2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb70oew_w.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpb70oew_w.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  local mm = math.floor(m/2) + 1\n  if mm > n then\n    return -1\n  end\n  return\
    \ nn * 2 ^ math.ceil(math.log2(mm))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zx43tbu.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp5zx43tbu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((m-nn*m)/n)\n  if nn > m then return -1 end\n  return nn*m +\
    \ (mm*n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_ffzdua.lua:20:\
    \ expected: \"0b11\"\nactual: 5\nstack traceback:\n\t/tmp/tmp6_ffzdua.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count == 0 then\n    return -1\n  end\n  local result = math.floor(sum / count)\n\
    \  local binary = string.format(\"%b\", result)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v0weq_w.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp6v0weq_w.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp6v0weq_w.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n/m)\n  local\
    \ n2 = n - n1*m\n  local m1 = math.floor(m/n)\n  local m2 = m - m1*n\n  if n2\
    \ > m2 then\n    return -1\n  else\n    return n1*m1 + n2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshmwy0u0.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpshmwy0u0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproir3yzp.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmproir3yzp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(math.min(n,\
    \ m), -1)\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2)\
    \ / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) /\
    \ 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n\
    \  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local\
    \ nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm\
    \ = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm =\
    \ math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm\
    \ * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm *\
    \ 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2)\
    \ / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) /\
    \ 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n\
    \  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local\
    \ nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm\
    \ = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm =\
    \ math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm\
    \ * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm *\
    \ 2) / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2)\
    \ / 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) /\
    \ 2\n  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(nm * 2) / 2\n\
    \  local nm = math.floor(nm * 2) / 2\n  local nm = math.floor(n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3pr5m13l.lua:54: ')' expected (to close '(' at line 53) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)\n  if\
    \ nm == 0 then\n    return -1\n  else\n    return nm .. \"b\"\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sqfqity.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_sqfqity.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  local mm = math.floor(m/2) + 1\n  if nn > m then\n    return -1\n  end\n  return\
    \ string.format(\"0b%b\", nn * 2 + mm)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a0o0ri0.lua:16:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp3a0o0ri0.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp3a0o0ri0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95obbgnw.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp95obbgnw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  \n  local sum = 0\n  local count = 0\n  \n  for i = n, m do\n    sum\
    \ = sum + i\n    count = count + 1\n  end\n  \n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepwv69lg.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpepwv69lg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((m-nn*m)/m)\n  if nn > m then\n    return -1\n  elseif mm ==\
    \ 0 then\n    return nn\n  else\n    return nn..mm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub__bcqr.lua:25:\
    \ expected: \"0b11\"\nactual: \"01\"\nstack traceback:\n\t/tmp/tmpub__bcqr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  for i = n, nm do\n    sum = sum + i\n  end\n  return \"0b\" .. tostring(sum\
    \ / nm)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy8f4wfs.lua:22:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmppy8f4wfs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.floor(n + m)\n  local m1 = math.floor(m)\n  local m2 = math.floor(m\
    \ + n)\n  if n2 < m1 then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n1, n2 do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  local result = \"\"\n  for i = 1, count do\n    result = result .. \"1\"\n\
    \  end\n  result = sum / (count * 2)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd78w3dkn.lua:35:\
    \ expected: \"0b11\"\nactual: 1.75\nstack traceback:\n\t/tmp/tmpd78w3dkn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuofbbdie.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpuofbbdie.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  local sum = 0\n  local count = 0\n  for i = n1,\
    \ m1 do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwjmcvrg.lua:30:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpgwjmcvrg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ohmq3xs.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp6ohmq3xs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxivud5rj.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpxivud5rj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return \"0b\"\
    \ .. tostring(sum / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4xx5ev_.lua:22:\
    \ expected: \"0b11\"\nactual: \"0b7.5\"\nstack traceback:\n\t/tmp/tmpx4xx5ev_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)\n  if\
    \ nm == n then\n    return nm\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0uvs83g.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpd0uvs83g.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrp8tqmp.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpfrp8tqmp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5465rf7.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpt5465rf7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgan1z4x.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpsgan1z4x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_tvwkzr.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmp6_tvwkzr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor(m/n)\n  if nn > mm then\n    return -1\n  else\n    return nn*m\
    \ + (n-nn*m)*mm\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pjy1k_8.lua:23:\
    \ expected: \"0b11\"\nactual: 5\nstack traceback:\n\t/tmp/tmp1pjy1k_8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(n, m)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local bin\
    \ = sum / count\n  local bin = bin:bitshift(1)\n  local bin = bin:bitshift(2)\n\
    \  local bin = bin:bitshift(4)\n  local bin = bin:bitshift(8)\n  local bin = bin:bitshift(16)\n\
    \  local bin = bin:bitshift(32)\n  local bin = bin:bitshift(64)\n  return bin\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi7k16zr.lua:22:\
    \ attempt to index local 'bin' (a number value)\nstack traceback:\n\t/tmp/tmpvi7k16zr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/2) + 1\n\
    \  local mm = math.floor(m/2) + 1\n  if nn > m then\n    return -1\n  end\n  return\
    \ \"0b\" .. tostring(mm) .. tostring(nn)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_gihsto.lua:22:\
    \ expected: \"0b11\"\nactual: \"0b31\"\nstack traceback:\n\t/tmp/tmp8_gihsto.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  local i = n\n  while i <= m do\n\
    \    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg =\
    \ sum / count\n  local bin = string.format(\"%b\", avg)\n  local result = bin:sub(1,\
    \ bin:len()-1)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97y8llj2.lua:23:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp97y8llj2.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp97y8llj2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s8c5hb9.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp5s8c5hb9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08t_0y2q.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp08t_0y2q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = n1\
    \ + 1\n  local m2 = m1 + 1\n  local sum = 0\n  while n2 <= m2 do\n    sum = sum\
    \ + n2\n    n2 = n2 + 1\n  end\n  local avg = sum / m2\n  local bin = math.floor(avg)\n\
    \  local remainder = math.fmod(avg, 1)\n  if remainder == 0 then\n    return bin\n\
    \  else\n    return bin + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsykl3hx.lua:36:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpzsykl3hx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((n-m)/m)\n  if nn > m then\n    return -1\n  elseif mm > n then\n\
    \    return -1\n  else\n    return nn*m + (mm-1)*m\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzvj8d34.lua:25:\
    \ expected: \"0b11\"\nactual: -10\nstack traceback:\n\t/tmp/tmpxzvj8d34.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = string.format(\"\
    %b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a1_ot8k.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp_a1_ot8k.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp_a1_ot8k.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((m-nn*m)/n)\n  if nn > m then\n    return -1\n  end\n  return\
    \ nn*m + (mm*n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0qoibmk.lua:22:\
    \ expected: \"0b11\"\nactual: 5\nstack traceback:\n\t/tmp/tmpu0qoibmk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n\
    \  local remainder = math.fmod(avg, 1)\n  if remain == 0 then\n    return bin\n\
    \  else\n    return bin + remainder\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nzppvdj.lua:33:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp4nzppvdj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if\
    \ count > 0 then\n    return sum / count\n  else\n    return -1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfra0m57t.lua:27:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpfra0m57t.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n \
    \ local sum = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n \
    \   count = count + 1\n  end\n  if n2 > m2 then\n    return -1\n  end\n  local\
    \ bin = string.format(\"%b\", sum / count)\n  bin = string.gsub(bin, \"0\", \"\
    \")\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hcgttdw.lua:24:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp3hcgttdw.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp3hcgttdw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz36djry.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdz36djry.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jce98_r.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp8jce98_r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  elseif nm == m then\n    return nm\n  else\n\
    \    return nm..\"b\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5y8djp8.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b\"\nstack traceback:\n\t/tmp/tmpn5y8djp8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n\
    \  local rem = math.floor(avg - bin)\n  local binstr = string.format(\"0b%b\"\
    , bin)\n  if rem == 0 then\n    return binstr\n  else\n    return binstr .. string.format(\"\
    0b%b\", rem)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuercz_gt.lua:34:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpuercz_gt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka204u_s.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpka204u_s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy35_8j5h.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpy35_8j5h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8mkeq_k.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpd8mkeq_k.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 == m then\n    return n1\n  elseif n1 < m then\n\
    \    return -1\n  else\n    return (n1 - m1 + 1) / (n1 - m1 + 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsnif2na.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpdsnif2na.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = string.format(\"\
    %b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwycxck5s.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpwycxck5s.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjj8rk0t.lua:27:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpxjj8rk0t.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then return -1 end\n \
    \ local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n   \
    \ count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppp44z2qx.lua:24:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmppp44z2qx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml7nkko9.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmpml7nkko9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.max(n, m)\n  local\
    \ mm = math.min(m, n)\n  local sum = 0\n  local count = 0\n  for i = n, mm do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ -1\n  end\n  local bin = math.floor(sum / count)\n  return bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_jdufev.lua:29:\
    \ expected: \"0b11\"\nactual: 1\nstack traceback:\n\t/tmp/tmp4_jdufev.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = n1\
    \ + 1\n  local m2 = m1 + 1\n  local sum = 0\n  while n2 <= m2 do\n    sum = sum\
    \ + n2\n    n2 = n2 + 1\n  end\n  local avg = sum / m2\n  local bin = string.format(\"\
    %b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tld0ej3.lua:32:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp5tld0ej3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  local avg = sum / count\n\
    \  local bin = math.floor(avg)\n  if bin == 0 then\n    return -1\n  end\n  local\
    \ rem = avg - bin\n  local rem_bin = math.floor(rem)\n  if rem_bin == 0 then\n\
    \    return bin\n  end\n  return bin .. \"b\" .. rem_bin\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji5j_3wx.lua:37:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpji5j_3wx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local n2 = n1\
    \ + 1\n  local m2 = m1 + 1\n  local sum = 0\n  while n2 <= m2 do\n    sum = sum\
    \ + n2\n    n2 = n2 + 1\n  end\n  return \"0b\" .. tostring(sum / m1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmmx5bxy.lua:29:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpgmmx5bxy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm == n then\n    return nm\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4uvomoa.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_4uvomoa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjmck2eo.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpqjmck2eo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n <= m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6tg7jul.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmph6tg7jul.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor((n + m) /\
    \ 2)\n  if nm == n then\n    return nm\n  else\n    return -1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4kupfl3.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpn4kupfl3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  return tostring(avg)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg3zy4us.lua:27:\
    \ expected: \"0b11\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpsg3zy4us.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwukxzg9c.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpwukxzg9c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo0by_0h.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmppo0by_0h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 == m then\n    return n1\n  elseif n1 < m then\n\
    \    return -1\n  else\n    return (n1 - m1 + 1) / (n1 - m1 + 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttthwqhj.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpttthwqhj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n\
    \  local rem = math.fmod(avg, 1)\n  if rem == 0 then\n    return bin\n  else\n\
    \    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofl_psye.lua:33:\
    \ expected: \"0b11\"\nactual: 3\nstack traceback:\n\t/tmp/tmpofl_psye.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm780oe1y.lua:24:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpm780oe1y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7hgefrp.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpu7hgefrp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor(m/n)\n  if nn > m then return -1 end\n  return nn * m + (n -\
    \ nn * m) * mm\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8llstwf.lua:20:\
    \ expected: \"0b11\"\nactual: 5\nstack traceback:\n\t/tmp/tmpp8llstwf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local result\
    \ = math.floor(sum / count)\n  local bin = string.format(\"%b\", result)\n  local\
    \ zeros = #bin - #result + 1\n  if zeros > 0 then\n    return bin:sub(1, zeros)\n\
    \  end\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasgz7m4n.lua:22:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpasgz7m4n.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpasgz7m4n.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n < m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau_hi7si.lua:26:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpau_hi7si.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm == n then\n    return nm\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnc9ud2j.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpjnc9ud2j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then return -1 end\n \
    \ local sum = 0\n  for i = n, m, -1 do\n    sum = sum + i\n  end\n  return \"\
    0b\" .. tostring(sum / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsugywzh.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpcsugywzh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89915s3i.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp89915s3i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor((m-nn)/2)\n  if nn > m then return -1 end\n  return nn..mm\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7eklkop.lua:20:\
    \ expected: \"0b11\"\nactual: \"02\"\nstack traceback:\n\t/tmp/tmpz7eklkop.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)\n  if\
    \ nm == 0 then\n    return -1\n  else\n    return nm ^ m\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x1emct8.lua:22:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmp_x1emct8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  elseif n1 == m1 then\n\
    \    return n\n  else\n    return (n1 + m1)/2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplky1ik8d.lua:25:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmplky1ik8d.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55utl2rl.lua:22:\
    \ expected: \"0b11\"\nactual: 0\nstack traceback:\n\t/tmp/tmp55utl2rl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nn = math.floor(n)\n  local\
    \ mm = math.floor(m)\n  if nn > mm then\n    return -1\n  end\n  local sum = 0\n\
    \  local count = 0\n  for i = nn + 1, mm do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpen0ks0ew.lua:28:\
    \ expected: \"0b11\"\nactual: \"0b3.5\"\nstack traceback:\n\t/tmp/tmpen0ks0ew.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  local avg = sum / count\n  local binary =\
    \ string.format(\"0b%b\", avg)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rounded_avg\n    lu.assertEquals(candidate(1,\
    \ 5), '0b11')\n    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbfz6b5m.lua:21:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpmbfz6b5m.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpmbfz6b5m.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ local sum = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n \
    \   count = count + 1\n  end\n  if n2 > m2 then\n    return -1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n\
    \    lu.assertEquals(candidate(7, 13), '0b1010')\n    lu.assertEquals(candidate(964,\
    \ 977), '0b1111001010')\n    lu.assertEquals(candidate(996, 997), '0b1111100100')\n\
    \    lu.assertEquals(candidate(560, 851), '0b1011000010')\n    lu.assertEquals(candidate(185,\
    \ 546), '0b101101110')\n    lu.assertEquals(candidate(362, 496), '0b110101101')\n\
    \    lu.assertEquals(candidate(350, 902), '0b1001110010')\n    lu.assertEquals(candidate(197,\
    \ 233), '0b11010111')\n    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5,\
    \ 1), -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhaiw3bn.lua:30:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmpbhaiw3bn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m == 0 then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
    \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89jrpggd.lua:26:\
    \ expected: \"0b11\"\nactual: \"0b3\"\nstack traceback:\n\t/tmp/tmp89jrpggd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    count = count + 1\n    n = n + 1\n  end\n  return string.format(\"0b%b\"\
    , sum / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiry5hv6q.lua:27:\
    \ expected: \"0b11\"\nactual: -1\nstack traceback:\n\t/tmp/tmpiry5hv6q.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given two positive integers n and m, and your task is to compute\
    \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
    \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
    \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
    \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"\
    0b11010\"\nlocal function rounded_avg(n, m)\n  local nm = math.max(m, n)\n  local\
    \ nn = math.min(n, m)\n  local sum = 0\n  local count = 0\n  for i = n, nm do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ -1\n  end\n  local result = \"\"\n  local i = 0\n  while i < count do\n    local\
    \ digit = math.floor(sum / math.pow(2, i))\n    sum = sum - math.pow(2, i) * digit\n\
    \    result = result .. string.format(\"%b\", digit)\n    i = i + 1\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rounded_avg\n    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
    \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n \
    \   lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
    \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
    \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
    \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
    \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
    \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxv6thkw9.lua:27:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpxv6thkw9.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmpxv6thkw9.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
