language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_xg7nj8.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg_xg7nj8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- If q is a palindromic list, then it must be balanced.\n  if is_palindromic(q)\
    \ then\n    -- The sum of its elements is less than or equal to the maximum possible\
    \ weight.\n    return is_balanced(q, w)\n  end\n  -- If q is not a palindromic\
    \ list, then it must be unbalanced.\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfldqka1.lua:18:\
    \ attempt to call a nil value (global 'is_palindromic')\nstack traceback:\n\t\
    /tmp/tmpvfldqka1.lua:18: in local 'candidate'\n\t/tmp/tmpvfldqka1.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      return q[1] == w\n   end\n   if #q == 2 then\n      return q[1]\
    \ == w and q[2] == w\n   end\n   if #q == 3 then\n      return q[1] == w and q[2]\
    \ == w and q[3] == w\n   end\n   if #q == 4 then\n      return q[1] == w and q[2]\
    \ == w and q[3] == w and q[4] == w\n   end\n   if #q == 5 then\n      return q[1]\
    \ == w and q[2] == w and q[3] == w and q[4] == w and q[5] == w\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65c3l6el.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp65c3l6el.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ed3l3k7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ed3l3k7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then\n    \
    \  local max_weight = w\n      for i = 2, #q do\n         max_weight = max_weight\
    \ + q[i]\n      end\n      return max_weight <= w\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjeni3nv.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyjeni3nv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ed3l3k7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ed3l3k7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_xg7nj8.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg_xg7nj8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local bal = 0\n    local sum = 0\n    for i = 1, #q do\n\
    \        sum = sum + q[i]\n        if sum > w then\n            bal = bal + 1\n\
    \        end\n    end\n    return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1pg4380.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv1pg4380.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if q == nil then\n    return true\n  end\n\
    \  -- base case\n  if w == 0 then\n    return false\n  end\n  -- base case\n \
    \ if w[#w] == nil then\n    return false\n  end\n  -- base case\n  if w[#w] ==\
    \ 1 then\n    return true\n  end\n  -- base case\n  if w[#w] == 2 then\n    return\
    \ true\n  end\n  -- base case\n  if w[#w] == 3 then\n    return true\n  end\n\
    \  -- base case\n  if w[#w] == 4 then\n    return true\n  end\n  -- base case\n\
    \  if w[#w] == 5 then\n    return true\n  end\n  -- base case\n  if w[#w] == 6\
    \ then\n    return true\n  end\n  -- base case\n  if w[#w] == 7 then\n    return\
    \ true\n  end\n  -- base case\n  if w[#w] == 8 then\n    return true\n  end\n\
    \  -- base case\n  if w[#w] == 9 then\n    return true\n  end\n  -- base case\n\
    \  if w[#w] == 10 then\n    return true\n  end\n  -- base case\n  if w[#w] ==\
    \ 11 then\n    return true\n  end\n  -- base case\n  if w[#w] == 12 then\n   \
    \ return true\n  end\n  -- base case\n  if w[#w] == 13 then\n    return true\n\
    \  end\n  -- base case\n  if w[#w] == 14 then\n    return true\n  end\n  -- base\
    \ case\n  if w[#w] == 15 then\n    return true\n  end\n  -- base case\n  if w[#w]\
    \ == 16 then\n    return true\n  end\n  -- base case\n  if w[#w] == 17 then\n\
    \    return true\n  end\n  -- base case\n  if w[#w] == 18 then\n    return true\n\
    \  end\n  -- base case\n  if w[#w] == 19 then\n    return true\n  end\n  -- base\
    \ case\n  if w[#w] == 20 then\n    return true\n  end\n  -- base case\n  if w[#w]\
    \ == 21 then\n    return true\n  end\n  -- base case\n  if w[#w] == 22 then\n\
    \    return true\n  end\n  -- base case\n  if w[#w] == 23 then\n    return true\n\
    \  end\n  -- base case\n  if w[#w] == 24 then\n    return true\n  end\n  -- base\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw4_ruqxg.lua:134: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- write your code in Lua 5.1\n  -- return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw66dh6y.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpmw66dh6y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w and is_balanced(q) and is_palindromic(q)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gouwq8s.lua:17:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp8gouwq8s.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp8gouwq8s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a3uj31x.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3a3uj31x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_xg7nj8.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg_xg7nj8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ed3l3k7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ed3l3k7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8vv0ei2.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8vv0ei2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if q == nil then\n    return true\n  end\n\
    \  -- If q is a palindrome\n  if is_palindrome(q) then\n    -- If the sum of its\
    \ elements is less than or equal the maximum possible weight\n    if sum(q) <=\
    \ w then\n      return true\n    end\n  end\n  -- If q is a list\n  if is_list(q)\
    \ then\n    -- If the sum of its elements is less than or equal the maximum possible\
    \ weight\n    if sum(q) <= w then\n      -- If the sum of its elements is less\
    \ than or equal the maximum possible weight\n      if will_it_fly(sum(q, 1), w)\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_05pmxyy.lua:18:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp_05pmxyy.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp_05pmxyy.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33ippjai.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp33ippjai.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    \
    \  break\n    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g8o1rjz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1g8o1rjz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then\n    \
    \  local max = 0\n      for i = 2, #q do\n         if q[i] > max then max = q[i]\
    \ end\n      end\n      return q[1] == w and q[2] == max and q[3] == w\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsgu9nrg.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvsgu9nrg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ true end\n   if #q == 2 then return true end\n   if #q == 3 then return true\
    \ end\n   if #q > 3 then return false end\n   if #q > w then return false end\n\
    \   if #q < w then return false end\n   if #q == w then return true end\n   if\
    \ #q == w-1 then return true end\n   if #q == w-2 then return true end\n   if\
    \ #q == w-3 then return true end\n   if #q == w-4 then return true end\n   if\
    \ #q == w-5 then return true end\n   if #q == w-6 then return true end\n   if\
    \ #q == w-7 then return true end\n   if #q == w-8 then return true end\n   if\
    \ #q == w-9 then return true end\n   if #q == w-10 then return true end\n   if\
    \ #q == w-11 then return true end\n   if #q == w-12 then return true end\n   if\
    \ #q == w-13 then return true end\n   if #q == w-14 then return true end\n   if\
    \ #q == w-15 then return true end\n   if #q == w-16 then return true end\n   if\
    \ #q == w-17 then return true end\n   if #q == w-18 then return true end\n   if\
    \ #q == w-19 then return true end\n   if #q == w-20 then return true end\n   if\
    \ #q == w-21 then return true end\n   if #q == w-22 then return true end\n   if\
    \ #q == w-23 then return true end\n   if #q == w-24 then return true end\n   if\
    \ #q == w-25 then return true end\n   if #q == w-26 then return true end\n   if\
    \ #q == w-27 then return true end\n   if #q == w-28 then return true end\n   if\
    \ #q == w-29 then return true end\n   if #q == w-30 then return true end\n   if\
    \ #q == w-31 then return true end\n   if #q == w-32 then return true end\n   if\
    \ #q == w-33 then return true \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzi8v09f_.lua:54: ''end'' expected (to close ''if'' at line
    53) near ''lu''

    '
  stdout: ''
