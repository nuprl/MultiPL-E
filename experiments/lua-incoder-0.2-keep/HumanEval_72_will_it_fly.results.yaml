name: HumanEval_72_will_it_fly
language: lua
results:
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   local max_weight\
    \ = w\n   local sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n      if\
    \ sum > max_weight then\n         max_weight = sum\n      end\n   end\n   return\
    \ max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpextx0rol.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpextx0rol.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8syvdrn.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc8syvdrn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kp0x_9j.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3kp0x_9j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcde62o8p.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcde62o8p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Write your solution below:\n  local function is_balanced(list)\n\
    \    local sum = 0\n    for _, v in pairs(list) do\n      sum = sum + v\n    end\n\
    \    return sum == w\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzus2rj2_.lua:33: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh1jztvr.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh1jztvr.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55l5ovd7.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp55l5ovd7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84c4k7ak.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp84c4k7ak.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqi5iep7.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdqi5iep7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then\n    \
    \  local max = 0\n      for i = 1, #q do\n         if q[i] > max then max = q[i]\
    \ end\n      end\n      return q[1] == w and max <= w\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcteohkj_.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcteohkj_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0wgl9q6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx0wgl9q6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- If the first element of the list is less than or equal to w, then it won't\
    \ fly.\n  if q[1] < w then\n    return false\n  end\n  -- If the last element\
    \ of the list is less than or equal to w, then it won't fly.\n  if q[#q] < w then\n\
    \    return false\n  end\n  -- If the sum of all the elements of the list is less\
    \ than or equal to w, then it won't fly.\n  if #q == 0 then\n    return false\n\
    \  end\n  -- If the last element of the list is greater than w, then it won't\
    \ fly.\n  if q[#q] > w then\n    return false\n  end\n  -- If the first element\
    \ of the list is greater than w, then it won't fly.\n  if q[1] > w then\n    return\
    \ false\n  end\n  -- If the sum of all the elements of the list is greater than\
    \ w, then it won't fly.\n  if #q == 1 then\n    return false\n  end\n  -- If the\
    \ first element of the list is equal to the last element of the list, then it\
    \ won't fly.\n  if q[1] == q[#q] then\n    return false\n  end\n  -- If the first\
    \ element of the list is equal to the last element of the list, then it won't\
    \ fly.\n  if q[1] == q[#q] then\n    return false\n  end\n  -- If the first element\
    \ of the list is equal to the last element of the list, then it won't fly.\n \
    \ if q[1] == q[#q] then\n    return false\n  end\n  -- If the first element of\
    \ the list is equal to the last element of the list, then it won't fly.\n  if\
    \ q[1] == q[#q] then\n    return false\n  end\n  -- If the first element of the\
    \ list is equal to the last element of the list, then it won't fly.\n  if q[1]\
    \ == q[#q] then\n    return false\n  end\n  -- If the first element of the list\
    \ is equal to the last element of the list, then it won't fly.\n  if q[1] == q[#q]\
    \ then\n    return false\n  end\n  -- If the first element of the list is equal\
    \ to the last element of the list, then it won't fly.\n  if q[1] == q[#q] then\n\
    \    return false\n  end\n  -- If the first element of the list is equal to the\
    \ last element of the list, then it won't fly.\n  if q[1] == q[#q] then\n    return\
    \ false\n  end\n  -- If the first element of the list is equal to the last element\
    \ of the list, then it won't fly.\n  if q[1] == q[#q] then\n    return false\n\
    \  end\n  -- If the first element of the list is equal to the last element of\
    \ the list, then it won't fly.\n  if q[1] == q[#q] \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_q9t1_my.lua:79: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxf2hhrh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnxf2hhrh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_7frc9s.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_7frc9s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06qc5xq5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp06qc5xq5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ulkk0l3.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0ulkk0l3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\n  local balanced = true\n  local sum\
    \ = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > w then\n      balanced\
    \ = false\n    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcarcgn6d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcarcgn6d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if q == nil then\n    return true\n  end\n\
    \  -- Base case\n  if w == 0 then\n    return false\n  end\n  -- Base case\n \
    \ if w==1 then\n    return true\n  end\n  -- Base case\n  if w==2 then\n    return\
    \ true\n  end\n  -- Base case\n  if w==3 then\n    return true\n  end\n  -- Base\
    \ case\n  if w==4 then\n    return true\n  end\n  -- Base case\n  if w==5 then\n\
    \    return true\n  end\n  -- Base case\n  if w==6 then\n    return true\n  end\n\
    \  -- Base case\n  if w==7 then\n    return true\n  end\n  -- Base case\n  if\
    \ w==8 then\n    return true\n  end\n  -- Base case\n  if w==9 then\n    return\
    \ true\n  end\n  -- Base case\n  if w==10 then\n    return true\n  end\n  -- Base\
    \ case\n  if w==11 then\n    return true\n  end\n  -- Base case\n  if w==12 then\n\
    \    return true\n  end\n  -- Base case\n  if w==13 then\n    return true\n  end\n\
    \  -- Base case\n  if w==14 then\n    return true\n  end\n  -- Base case\n  if\
    \ w==15 then\n    return true\n  end\n  -- Base case\n  if w==16 then\n    return\
    \ true\n  end\n  -- Base case\n  if w==17 then\n    return true\n  end\n  -- Base\
    \ case\n  if w==18 then\n    return true\n  end\n  -- Base case\n  if w==19 then\n\
    \    return true\n  end\n  -- Base case\n  if w==20 then\n    return true\n  end\n\
    \  -- Base case\n  if w==21 then\n    return true\n  end\n  -- Base case\n  if\
    \ w==22 then\n    return true\n  end\n  -- Base case\n  if w==23 then\n    return\
    \ true\n  end\n  -- Base case\n  if w==24 then\n    return true\n  end\n  -- Base\
    \ case\n  if w==25 then\n    return true\n  end\n  -- Base case\n  if w==26 then\n\
    \    return true\n  end\n  -- Base case\n  if w==27 then\n    return true\n  end\n\
    \  -- Base case\n  if w==28 then\n    return true\n  end\n  -- Base case\n  if\
    \ w==29 then\n    return true\n  end\n  -- Base case\n  if w==30 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpydugxxpc.lua:153: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      return will_it_fly(q[1], w) and q[1] == w\n   end\n   if #q >\
    \ 1 and will_it_fly(q[#q/2], w) and q[#q/2] == w then\n      return true\n   end\n\
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0ri7lp1.lua:13:\
    \ attempt to get length of local 'q' (a nil value)\nstack traceback:\n\t/tmp/tmpx0ri7lp1.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx0ri7lp1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2402yg6w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2402yg6w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51lwstmg.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp51lwstmg.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if q == nil then return false end\n  --\
    \ Base case\n  if w == 0 then return true end\n  -- Base case\n  if w==1 then\
    \ return true end\n  -- Base case\n  if w==2 then return true end\n  -- Base case\n\
    \  if w==3 then return true end\n  -- Base case\n  if w==4 then return true end\n\
    \  -- Base case\n  if w==5 then return true end\n  -- Base case\n  if w==6 then\
    \ return true end\n  -- Base case\n  if w==7 then return true end\n  -- Base case\n\
    \  if w==8 then return true end\n  -- Base case\n  if w==9 then return true end\n\
    \  -- Base case\n  if w==10 then return true end\n  -- Base case\n  if w==11 then\
    \ return true end\n  -- Base case\n  if w==12 then return true end\n  -- Base\
    \ case\n  if w==13 then return true end\n  -- Base case\n  if w==14 then return\
    \ true end\n  -- Base case\n  if w==15 then return true end\n  -- Base case\n\
    \  if w==16 then return true end\n  -- Base case\n  if w==17 then return true\
    \ end\n  -- Base case\n  if w==18 then return true end\n  -- Base case\n  if w==19\
    \ then return true end\n  -- Base case\n  if w==20 then return true end\n  --\
    \ Base case\n  if w==21 then return true end\n  -- Base case\n  if w==22 then\
    \ return true end\n  -- Base case\n  if w==23 then return true end\n  -- Base\
    \ case\n  if w==24 then return true end\n  -- Base case\n  if w==25 then return\
    \ true end\n  -- Base case\n  if w==26 then return true end\n  -- Base case\n\
    \  if w==27 then return true end\n  -- Base case\n  if w==28 then return true\
    \ end\n  -- Base case\n  if w==29 then return true end\n  -- Base case\n  if w==30\
    \ then return true end\n  -- Base case\n  if w==31 then return true end\n  --\
    \ Base case\n  if w==32 then return true end\n  -- Base case\n  if w==33 then\
    \ return true end\n  -- Base case\n  if w==34 then return true end\n  -- Base\
    \ case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkbnvf4md.lua:87: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgku9boug.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgku9boug.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1v5tqip.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf1v5tqip.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujgzw3a6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpujgzw3a6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in ipairs(q) do sum = sum + v\
    \ end\n  return sum <= w and is_balanced(q)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfuw4uts.lua:15:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpxfuw4uts.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- base case\n  if w == 1 then\n    return true\n  end\n  -- base case\n  if\
    \ w == 2 then\n    return true\n  end\n  -- base case\n  if w == 3 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 4 then\n    return true\n  end\n  --\
    \ base case\n  if w == 5 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 6 then\n    return true\n  end\n  -- base case\n  if w == 7 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 8 then\n    return true\n  end\n  --\
    \ base case\n  if w == 9 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 10 then\n    return true\n  end\n  -- base case\n  if w == 11 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 12 then\n    return true\n  end\n  --\
    \ base case\n  if w == 13 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 14 then\n    return true\n  end\n  -- base case\n  if w == 15 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 16 then\n    return true\n  end\n  --\
    \ base case\n  if w == 17 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 18 then\n    return true\n  end\n  -- base case\n  if w == 19 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 20 then\n    return true\n  end\n  --\
    \ base case\n  if w == 21 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 22 then\n    return true\n  end\n  -- base case\n  if w == 23 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 24 then\n    return true\n  end\n  --\
    \ base case\n  if w == 25 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 26 then\n    return true\n  end\n  -- base case\n  if w == 27 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 28 then\n    return true\n  end\n  --\
    \ base case\n  if w == 29 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 30 then\n    return true\n  end\n  -- base case\n  if w == 31 then\n    return\
    \ true\n  end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb4fwhejn.lua:154: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizoxdmuk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpizoxdmuk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhl1jdhk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuhl1jdhk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ezb0gc6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ezb0gc6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjwsfys_.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphjwsfys_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Write your code here.\n  local max_weight = w\n  local\
    \ balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > max_weight then\n      balanced = false\n    end\n  end\n  return\
    \ balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjoqzqo6w.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjoqzqo6w.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      return q[1] == w\n   end\n   local max_weight = w\n   local max_sum\
    \ = 0\n   for i = 1, #q do\n      local sum = 0\n      for j = 1, #q[i] do\n \
    \        sum = sum + q[i][j]\n      end\n      if sum > max_sum then\n       \
    \  max_sum = sum\n         max_weight = w\n      end\n   end\n   return max_sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1bqmk4h.lua:23:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpi1bqmk4h.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ba0mnt4.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gnzarzw.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0gnzarzw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryleszjn.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpryleszjn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsywxvuz9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsywxvuz9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm_jsmsi.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmm_jsmsi.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrbqj6o8.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxrbqj6o8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy8xi6h_.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmy8xi6h_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- write your code in Lua 5.1\n  local max_weight = w\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      max_weight = sum\n    end\n  end\n  return max_weight <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pkq8npc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7pkq8npc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ will_it_fly(q[#q/2], w) and will_it_fly(q[#q/2], w) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplym4xoeo.lua:13:\
    \ attempt to get length of local 'q' (a nil value)\nstack traceback:\n\t/tmp/tmplym4xoeo.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmplym4xoeo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k0jxd8j.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1k0jxd8j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if q == nil then return false end\n  if w == nil then return\
    \ false end\n  if #q == 0 then return true end\n  if #q == 1 then return will_it_fly(q[1],\
    \ w) end\n  if #q == 2 then return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) end\n  if #q == 3 then return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) and will_it_fly(q[3], w) end\n  if #q == 4 then return will_it_fly(q[1],\
    \ w) and will_it_fly(q[2], w) and will_it_fly(q[3], w) and will_it_fly(q[4], w)\
    \ end\n  if #q == 5 then return will_it_fly(q[1], w) and will_it_fly(q[2], w)\
    \ and will_it_fly(q[3], w) and will_it_fly(q[4], w) and will_it_fly(q[5], w) end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7eakbk91.lua:15:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmp7eakbk91.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp7eakbk91.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx2mja1l.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvx2mja1l.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy50wbkjc.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy50wbkjc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwzl5p0d.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwwzl5p0d.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      return will_it_fly(q[1], w)\n   end\n   if #q == 2 then\n    \
    \  return will_it_fly(q[1], w) and will_it_fly(q[2], w)\n   end\n   if #q == 3\
    \ then\n      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w)\n   end\n   if #q > 3 then\n      return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) and will_it_fly(q[3], w) and will_it_fly(q[4], w)\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1v7c6c.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmp3f1v7c6c.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp3f1v7c6c.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 then return will_it_fly(q[#q\
    \ - 1], w) end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h94b95a.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmp5h94b95a.lua:23: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w and is_balanced(q) and is_palindromic(q)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_9chdhp.lua:17:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpr_9chdhp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gz9s760.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6gz9s760.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 then\n    local\
    \ max_weight = w\n    for i = 2, #q do\n      max_weight = max_weight + q[i]\n\
    \      if max_weight > w then return false end\n    end\n    return true\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4qnx98m.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq4qnx98m.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return true end\n  if #q > 2 then return false\
    \ end\n  local max_weight = w\n  local max_sum = 0\n  for i = 1, #q do\n    local\
    \ sum = 0\n    for j = 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if\
    \ sum > max_sum then\n      max_sum = sum\n      max_weight = w\n    end\n  end\n\
    \  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw1zzg44.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzw1zzg44.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 then\n    local\
    \ max_weight = w\n    for i = 2, #q do\n      max_weight = max_weight + q[i]\n\
    \    end\n    return max_weight <= w\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67ca5mcb.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp67ca5mcb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then\n    return true\n  end\n  local max_weight\
    \ = w\n  local max_sum = 0\n  for i = 1, #q do\n    local sum = 0\n    for j =\
    \ 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if sum > max_sum then\n\
    \      max_sum = sum\n      max_weight = w\n    end\n  end\n  return max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnahbkmu.lua:20:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpnnahbkmu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   local max_weight\
    \ = w\n   local sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n      if\
    \ sum > max_weight then\n         max_weight = sum\n      end\n   end\n   return\
    \ max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeby9bs4.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkeby9bs4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7uwqqf9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd7uwqqf9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if q == nil then return false end\n  --\
    \ Base case\n  if w == 0 then return true end\n  -- Base case\n  if #q == 0 then\
    \ return false end\n  -- Base case\n  if #q == 1 then return true end\n  -- Base\
    \ case\n  if w == 1 then return true end\n  -- Base case\n  if #q == 2 then return\
    \ false end\n  -- Base case\n  if #q == 3 then return true end\n  -- Base case\n\
    \  if w == 2 then return false end\n  -- Base case\n  if #q == 4 then return true\
    \ end\n  -- Base case\n  if w == 3 then return false end\n  -- Base case\n  if\
    \ #q == 5 then return true end\n  -- Base case\n  if w == 4 then return false\
    \ end\n  -- Base case\n  if #q == 6 then return true end\n  -- Base case\n  if\
    \ w == 5 then return false end\n  -- Base case\n  if #q == 7 then return true\
    \ end\n  -- Base case\n  if w == 6 then return false end\n  -- Base case\n  if\
    \ #q == 8 then return true end\n  -- Base case\n  if w == 7 then return false\
    \ end\n  -- Base case\n  if #q == 9 then return true end\n  -- Base case\n  if\
    \ w == 8 then return false end\n  -- Base case\n  if #q == 10 then return true\
    \ end\n  -- Base case\n  if w == 9 then return false end\n  -- Base case\n  if\
    \ #q == 11 then return true end\n  -- Base case\n  if w == 10 then return false\
    \ end\n  -- Base case\n  if #q == 12 then return true end\n  -- Base case\n  if\
    \ w == 11 then return false end\n  -- Base case\n  if #q == 13 then return true\
    \ end\n  -- Base case\n  if w == 12 then return false end\n  -- Base case\n  if\
    \ #q == 14 then return true end\n  -- Base case\n  if w == 13 then return false\
    \ end\n  -- Base case\n  if #q == 15 then return true end\n  -- Base case\n  if\
    \ w == 14 then return false end\n  -- Base case\n  if #q == 16 then return true\
    \ end\n  -- Base case\n  if w == 15 then return false end\n  -- Base case\n  if\
    \ #q == 17 then return true end\n  -- Base case\n  if w == 16 then return false\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn_v22g9s.lua:85: 'end' expected (to close 'if' at line 84)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ q[1] == w and will_it_fly(q[#q-2], w) end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss1hahq5.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpss1hahq5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- If q is balanced, then its sum must be less than or equal to w\n  if is_balanced(q)\
    \ then\n    return q:sum() <= w\n  end\n  -- If q is not balanced, then its sum\
    \ must be less than or equal to w\n  return q:sum() <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_xst9k5.lua:18:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpe_xst9k5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_30ltrp.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4_30ltrp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qgl_ead.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7qgl_ead.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5kp6u5q.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn5kp6u5q.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  local max_weight = w\n\
    \  local balanced = true\n  for i = 1, #q do\n    if q[i] ~= q[#q] then\n    \
    \  balanced = false\n    end\n    max_weight = max_weight - q[i]\n    if max_weight\
    \ < 0 then return false end\n  end\n  return balanced and max_weight <= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxt6hk4b.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqxt6hk4b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpods6vyp5.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpods6vyp5.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in pairs(q) do sum = sum + v\
    \ end\n  return sum <= w and is_balanced(q) and is_palindromic(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbvtm7tb.lua:15:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpnbvtm7tb.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnjbusi2.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvnjbusi2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum < w then\n    return false\n  end\n  local max_weight = w\n \
    \ local max_weight_index = 0\n  for i = 1, #q do\n    if q[i] > max_weight then\n\
    \      max_weight = q[i]\n      max_weight_index = i\n    end\n  end\n  local\
    \ reversed_q = table.copy(q)\n  table.insert(reversed_q, max_weight_index)\n \
    \ local reversed_w = w\n  local reversed_w_index = #q\n  for i = #q, 1, -1 do\n\
    \    if q[i] > reversed_w then\n      reversed_w = q[i]\n      reversed_w_index\
    \ = i\n    end\n  end\n  if reversed_w == w then\n    return true\n  end\n  return\
    \ will_it_fly(reversed_q, reversed_w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdli_uc7x.lua:47:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdli_uc7x.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95no6kph.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp95no6kph.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   local max_weight\
    \ = w\n   local sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n      if\
    \ sum > max_weight then\n         max_weight = sum\n      end\n   end\n   return\
    \ max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfmq2v24.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsfmq2v24.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ewnesef.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7ewnesef.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfx6z0fq.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplfx6z0fq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8rf_ot1.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo8rf_ot1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ukp53i.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt9ukp53i.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if q == nil then return false end\n  --\
    \ base case\n  if w == 0 then return true end\n  -- base case\n  if w == 1 then\
    \ return false end\n  -- base case\n  if w == 2 then return true end\n  -- base\
    \ case\n  if w == 3 then return false end\n  -- base case\n  if w == 4 then return\
    \ true end\n  -- base case\n  if w == 5 then return false end\n  -- base case\n\
    \  if w == 6 then return true end\n  -- base case\n  if w == 7 then return false\
    \ end\n  -- base case\n  if w == 8 then return true end\n  -- base case\n  if\
    \ w == 9 then return false end\n  -- base case\n  if w == 10 then return true\
    \ end\n  -- base case\n  if w == 11 then return false end\n  -- base case\n  if\
    \ w == 12 then return true end\n  -- base case\n  if w == 13 then return false\
    \ end\n  -- base case\n  if w == 14 then return true end\n  -- base case\n  if\
    \ w == 15 then return false end\n  -- base case\n  if w == 16 then return true\
    \ end\n  -- base case\n  if w == 17 then return false end\n  -- base case\n  if\
    \ w == 18 then return true end\n  -- base case\n  if w == 19 then return false\
    \ end\n  -- base case\n  if w == 20 then return true end\n  -- base case\n  if\
    \ w == 21 then return false end\n  -- base case\n  if w == 22 then return true\
    \ end\n  -- base case\n  if w == 23 then return false end\n  -- base case\n  if\
    \ w == 24 then return true end\n  -- base case\n  if w == 25 then return false\
    \ end\n  -- base case\n  if w == 26 then return true end\n  -- base case\n  if\
    \ w == 27 then return false end\n  -- base case\n  if w == 28 then return true\
    \ end\n  -- base case\n  if w == 29 then return false end\n  -- base case\n  if\
    \ w == 30 then return true end\n  -- base case\n  if w == 31 then return false\
    \ end\n  -- base case\n  if w == 32 then return true end\n  -- base case\n  if\
    \ w == 33 then return false end\n  -- base case\n  if w == 34 then return true\
    \ end\n  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxn9n5nll.lua:87: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpziq7zozq.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpziq7zozq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r4hoiqu.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3r4hoiqu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp100piapr.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp100piapr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8iz5bdy6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8iz5bdy6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58ljzpcw.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp58ljzpcw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2f_cmcmo.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2f_cmcmo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 then return will_it_fly(q[#q\
    \ - 1], w) end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61oht1nl.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmp61oht1nl.lua:23: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vs_cz77.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3vs_cz77.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2skxn7g.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy2skxn7g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- write your code in Lua 5.1\n  local sum = 0\n  for i\
    \ = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum < w then\n    return false\n\
    \  else\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1mwo02h.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt1mwo02h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\n  local balanced = true\n  local sum\
    \ = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > w then\n      balanced\
    \ = false\n    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmubych3u.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmubych3u.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpio39h_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbpio39h_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_c6guiq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw_c6guiq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then\n    return true\n  end\n  if #q == 1 then\n\
    \    return q[1] == w\n  end\n  local max_weight = w\n  local max_sum = 0\n  for\
    \ i = 1, #q do\n    local sum = q[i] + q[i - 1]\n    if sum > max_sum then\n \
    \     max_sum = sum\n      max_weight = w\n    end\n  end\n  return max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lem1wnb.lua:22:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0lem1wnb.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzaezqh6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzaezqh6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyh1bjtj.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnyh1bjtj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bnk4af0.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2bnk4af0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vknk4cz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6vknk4cz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfv79i4bc.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfv79i4bc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhzunjh3.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxhzunjh3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- write your code in Lua 5.1\n  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max then\n \
    \     max = sum\n    end\n  end\n  return sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjwu6o6b.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvjwu6o6b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uhh7muq.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4uhh7muq.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   local max\
    \ = 0\n   for i = 1, #q do\n      if max < q[i] then\n         max = q[i]\n  \
    \    end\n   end\n   return max <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyk9n0ix.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcyk9n0ix.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxictpe_5.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxictpe_5.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > max_weight then\n      max_weight = sum\n\
    \    end\n  end\n  return max_weight <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptw_cyzbe.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptw_cyzbe.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  local is_balanced\
    \ = true\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      is_balanced = false\n      break\n    end\n  end\n  return is_balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopkczj6u.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpopkczj6u.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in pairs(q) do sum = sum + v\
    \ end\n  return sum <= w and is_balanced(q)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb9acbi0.lua:15:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpkb9acbi0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamd_ooz2.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpamd_ooz2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v1rv1fx.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v1rv1fx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if q == nil then return false end\n  --\
    \ base case\n  if w == 0 then return true end\n  -- base case\n  if #q == 1 then\
    \ return true end\n  -- base case\n  if #q == 2 then return false end\n  -- base\
    \ case\n  if #q > w then return false end\n  -- base case\n  if #q < w then return\
    \ false end\n  -- base case\n  if #q == w then return true end\n  -- base case\n\
    \  if #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n  if\
    \ #q > w then return false end\n  -- base case\n  if #q < w then return false\
    \ end\n  -- base case\n  if #q == w then return true end\n  -- base case\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9zgqu7zz.lua:95: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgteaq561.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgteaq561.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppguodbfk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppguodbfk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwolcybpq.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwolcybpq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohjl0md_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpohjl0md_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Write your solution below:\n  local function is_balanced(l)\n\
    \    local function is_palindrome(l)\n      local function reverse(l)\n      \
    \  local function reverse(l)\n          local function reverse(l)\n          \
    \  local function reverse(l)\n              return l\n            end\n      \
    \      return reverse(l)\n          end\n          return reverse(l)\n       \
    \ end\n        return reverse(l)\n      end\n      return reverse(l)\n    end\n\
    \    return is_palindrome(l)\n  end\n  local function is_less_than_or_equal_to_max(l)\n\
    \    local function is_less_than_or_equal_to_max(l)\n      local function is_less_than_or_equal_to_max(l)\n\
    \        local function is_less_than_or_equal_to_max(l)\n          local function\
    \ is_less_than_or_equal_to_max(l)\n            local function is_less_than_or_equal_to_max(l)\n\
    \              local function is_less_than_or_equal_to_max(l)\n              \
    \  local function is_less_than_or_equal_to_max(l)\n                  local function\
    \ is_less_than_or_equal_to_max(l)\n                    local function is_less_than_or_equal_to_max(l)\n\
    \                      local function is_less_than_or_equal_to_max(l)\n      \
    \                  local function is_less_than_or_equal_to_max(l)\n          \
    \                local function is_less_than_or_equal_to_max(l)\n            \
    \                local function is_less_than_or_equal_to_max(l)\n            \
    \                  local function is_less_than_or_equal_to_max(l)\n          \
    \                      local function is_less_than_or_equal_to_max(l)\n      \
    \                            local function is_less_than_or_equal_to_max(l)\n\
    \                                    local function is_less_than_or_equal_to_max(l)\n\
    \                                      local function is_less_than_or_equal_to_max(l)\n\
    \                                        local function is_less_than_or_equal_to_max(l)\n\
    \                                          local function is_less_than_or_equal_to_max(l)\n\
    \                                            local function is_less_than_or_equal_to_max(l)\n\
    \                                              return true\n                 \
    \                           end\n                                            return\
    \ is_less_than_or_equal_to_max(l)\n                                          end\n\
    \                                          return is_less_than_or_equal_to_max(l)\n\
    \                                        end\n                               \
    \         return is_less_than_or_equal_to_max(l)\n                           \
    \           end\n                                      return is_less_than_or_equal_to_max(l)\n\
    \                                    end\n                                   \
    \ return is_less_than_or_equal_to_max(l)\n                                  end\n\
    \                                  return is_less_than_or_equal_to_max(l)\n  \
    \                              end\n                                return is_less_than_or_equal_to_max(l)\n\
    \                              end\n                              return is_less_than_or_equal_to_max(l)\n\
    \                            end\n                            return is_less_than_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxrj7kiit.lua:73: 'end' expected (to close 'function' at line\
    \ 44) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j9b8lew.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7j9b8lew.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07crrjkh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp07crrjkh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5exypi27.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5exypi27.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6_s5f86.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq6_s5f86.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qt_khnw.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0qt_khnw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs0hcwhi.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxs0hcwhi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjjf8g7u.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxjjf8g7u.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24m31zva.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24m31zva.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98o6kp_f.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp98o6kp_f.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi8p13ia.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqi8p13ia.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ false end\n   if #q > 1 then return q[1] == w end\n   if #q > 0 then return\
    \ true end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_0bey1x.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu_0bey1x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 and will_it_fly(q[#q\
    \ - 1], w) then return true end\n  if #q > 2 and will_it_fly(q[#q - 2], w) then\
    \ return true end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_9vdrci.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmpa_9vdrci.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpa_9vdrci.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- If q is balanced, then q is palindromic and its sum is less than or equal\
    \ to w\n  if is_balanced(q) then\n    return is_palindromic(q) and q:sum(w) <=\
    \ w\n  end\n  -- If q is unbalanced, then q is palindromic and its sum is less\
    \ than or equal to w\n  return is_palindromic(q) and q:sum(w) <= w\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph46d9_wt.lua:18:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmph46d9_wt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in ipairs(q) do sum = sum + v\
    \ end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q35ltlr.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1q35ltlr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvoaw3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsbsvoaw3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5i3h_a0g.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5i3h_a0g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Write your code here.\n  local sum = 0\n  for i = 1,\
    \ #q do\n    sum = sum + q[i]\n  end\n  if sum < w then\n    return false\n  else\n\
    \    local max = 0\n    for i = 1, #q do\n      if max < w then\n        max =\
    \ w + q[i]\n      else\n        if q[i] > max then\n          max = q[i]\n   \
    \     end\n      end\n    end\n    return true\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbxn_tvn.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdbxn_tvn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwr9mfbs.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgwr9mfbs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfb570tc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwfb570tc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e93ppre.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1e93ppre.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      if q[1] == w then\n         return true\n      else\n        \
    \ return false\n      end\n   end\n   local max_weight = w\n   local max_sum =\
    \ 0\n   for i = 1, #q do\n      local s = q[i]\n      local w = q[i - 1]\n   \
    \   if w > max_weight then\n         max_weight = w\n      end\n      local sum\
    \ = 0\n      for j = 1, #s do\n         sum = sum + s[j]\n      end\n      if\
    \ sum > max_sum then\n         max_sum = sum\n      end\n   end\n   return max_sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0i34h3v.lua:28:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf0i34h3v.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0rn28sf.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg0rn28sf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42576wlf.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp42576wlf.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ true end\n   if #q == 2 then return true end\n   if #q == 3 then return true\
    \ end\n   if #q == 4 then return true end\n   if #q == 5 then return true end\n\
    \   if #q == 6 then return true end\n   if #q == 7 then return true end\n   if\
    \ #q == 8 then return true end\n   if #q == 9 or #q == 10 then return true end\n\
    \   if #q == 11 or #q == 12 then return true end\n   if #q == 13 or #q == 14 then\
    \ return true end\n   if #q == 15 or #q == 16 then return true end\n   if #q ==\
    \ 17 or #q == 18 then return true end\n   if #q == 19 or #q == 20 then return\
    \ true end\n   if #q == 21 or #q == 22 then return true end\n   if #q == 23 or\
    \ #q == 24 then return true end\n   if #q == 25 or #q == 26 then return true end\n\
    \   if #q == 27 or #q == 28 then return true end\n   if #q == 29 or #q == 30 then\
    \ return true end\n   if #q == 31 or #q == 32 then return true end\n   if #q ==\
    \ 33 or #q == 34 then return true end\n   if #q == 35 or #q == 36 or #q == 37\
    \ or #q == 38 or #q == 39 or #q == 40 or #q == 41 or #q == 42 or #q == 43\n  \
    \ or #q == 44 or #q == 45 or #q == 46 or #q == 47 or #q == 48 or #q == 49 or #q\
    \ == 50 or #q == 51 or #q == 52 or #q\n   == 53 or #q == 54 or #q == 55 or #q\
    \ == 56 or #q == 57 or #q == 58 or #q == 59 or #q == 60 or #q == 61 or #q == 62\n\
    \   or #q == 63\n   then return true\n   end\n   if #q > w then return false end\n\
    \   if #q < w then return false end\n   if #q == w then return true end\n   if\
    \ #q == w - 1 then return true end\n   if #q == w - 2 then return true end\n \
    \  if #q == w - 3 then return \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzz9hpuy_.lua:47: 'end' expected (to close 'if' at line 46)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsn7ad4n.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmsn7ad4n.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in pairs(q) do sum = sum + v\
    \ end\n  return sum <= w and is_palindromic(q) and is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn3nz_gv.lua:15:\
    \ attempt to call global 'is_palindromic' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpqn3nz_gv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- base case\n  if w == 1 then\n    return true\n  end\n  -- base case\n  if\
    \ w == 2 then\n    return true\n  end\n  -- base case\n  if w == 3 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 4 then\n    return true\n  end\n  --\
    \ base case\n  if w == 5 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 6 then\n    return true\n  end\n  -- base case\n  if w == 7 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 8 then\n    return true\n  end\n  --\
    \ base case\n  if w == 9 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 10 then\n    return true\n  end\n  -- base case\n  if w == 11 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 12 then\n    return true\n  end\n  --\
    \ base case\n  if w == 13 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 14 then\n    return true\n  end\n  -- base case\n  if w == 15 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 16 then\n    return true\n  end\n  --\
    \ base case\n  if w == 17 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 18 then\n    return true\n  end\n  -- base case\n  if w == 19 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 20 then\n    return true\n  end\n  --\
    \ base case\n  if w == 21 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 22 then\n    return true\n  end\n  -- base case\n  if w == 23 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 24 then\n    return true\n  end\n  --\
    \ base case\n  if w == 25 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 26 then\n    return true\n  end\n  -- base case\n  if w == 27 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 28 then\n    return true\n  end\n  --\
    \ base case\n  if w == 29 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 30 then\n    return true\n  end\n  -- base case\n  if w == 31 then\n    return\
    \ true\n  end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4wul4o53.lua:154: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3tomwva.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_3tomwva.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local max_weight = w\n    local balanced = true\n   \
    \ local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n        if sum\
    \ > max_weight then\n            balanced = false\n        end\n    end\n    return\
    \ balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1z9a1ec.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1z9a1ec.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case: empty list or empty list.\n  if q == nil\
    \ or q == {} then\n    return true\n  end\n  -- Base case: palindromic list.\n\
    \  if is_palindromic(q) then\n    return true\n  end\n  -- Base case: sum of elements\
    \ is less than or equal to weight.\n  if #q < w then\n    return false\n  end\n\
    \  -- Recursive case: sum of elements is less than or equal to weight and it's\
    \ balanced.\n  if #q < w and is_balanced(q) then\n    return true\n  end\n  --\
    \ Recursive case: sum of elements is less than or equal to weight and it's unbalanced.\n\
    \  if #q < w and not is_balanced(q) then\n    return false\n  end\n  -- Recursive\
    \ case: sum of elements is greater than weight and it's balanced.\n  if #q > w\
    \ and is_balanced(q) then\n    return true\n  end\n  -- Recursive case: sum of\
    \ elements is greater than weight and it's unbalanced.\n  if #q > w and not is_balanced(q)\
    \ then\n    return false\n  end\n  -- Recursive case: sum of elements is equal\
    \ to weight and it's balanced.\n  if #q == w and is_balanced(q) then\n    return\
    \ true\n  end\n  -- Recursive case: sum of elements is equal to weight and it's\
    \ unbalanced.\n  if #q == w and not is_balanced(q) then\n    return false\n  end\n\
    \  -- Recursive case: sum of elements is greater than weight and it's balanced.\n\
    \  if #q > w and is_balanced(q) then\n    return true\n  end\n  -- Recursive case:\
    \ sum of elements is greater than weight and it's unbalanced.\n  if #q > w and\
    \ not is_balanced(q) then\n    return false\n  end\n  -- Recursive case: sum of\
    \ elements is less than or equal to weight and it's balanced.\n  if #q < w and\
    \ is_balanced(q) then\n    return true\n  end\n  -- Recursive case: sum of elements\
    \ is less than or equal to weight and it's unbalanced.\n  if #q < w and not is_balanced(q)\
    \ then\n    return false\n  end\n  -- Recursive case: sum of elements is equal\
    \ to weight and it's balanced.\n  if #q == w and is_balanced(q) then\n    return\
    \ true\n  end\n  -- Recursive case: sum of elements is equal to weight and it's\
    \ unbalanced.\n  if #q == w and not is_balanced(q) then\n    return false\n  end\n\
    \  -- Recursive case: sum of elements is greater than weight and it's \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58_g3xom.lua:86: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52nw4szd.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp52nw4szd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uyxkm4f.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8uyxkm4f.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfbbn_g3.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzfbbn_g3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxym958tt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxym958tt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  local max_weight = w\n\
    \  local max_sum = 0\n  for i = 1, #q do\n    local s = q[i]\n    if s > max_weight\
    \ then max_weight = s end\n    max_sum = max_sum + s\n  end\n  return max_sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhooo4ac.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmhooo4ac.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv4ekaw1.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphv4ekaw1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zie0zbn.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4zie0zbn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoml1y7_b.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoml1y7_b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlz3xosd.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqlz3xosd.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ will_it_fly(q[#q - 1], w) end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyf3dk4p.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmpzyf3dk4p.lua:23: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   local max_weight\
    \ = w\n   local sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n      if\
    \ sum > max_weight then\n         max_weight = sum\n      end\n   end\n   return\
    \ max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eys2m3l.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0eys2m3l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return true\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpii_smk8_.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n      break\n    end\n  end\n  return balanced and sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi7vlh14.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbi7vlh14.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7z7hodp.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa7z7hodp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbb31yca.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxbb31yca.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ugxnubn.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3ugxnubn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case: empty list or list with one element.\n  if\
    \ #q == 0 or w == 0 then\n    return true\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1qwdnfhx.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  if #q == 2 then return q[1] == w end\n  if #q > 2 then\n    local\
    \ max_weight = w\n    for i = 2, #q do\n      max_weight = max_weight + q[i]\n\
    \      if max_weight > w then return false end\n    end\n    return true\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlfrauo9.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjlfrauo9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if #q == 0 then\n    return true\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgych1041.lua:29: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local max_weight = w\n    local balanced = true\n   \
    \ local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n        if sum\
    \ > max_weight then\n            balanced = false\n            break\n       \
    \ end\n    end\n    return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lkhx4m7.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6lkhx4m7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 and w == q[2]\
    \ then return true end\n   if #q > 2 and w == q[1] then return false end\n   if\
    \ #q > 2 and w == q[3] then return will_it_fly(q[2:], w) end\n   return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2fnd2_9q.lua:18: ']' expected near ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pvdcba_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8pvdcba_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if q == nil then return false end\n  --\
    \ base case\n  if w == 0 then return true end\n  -- base case\n  if will_it_fly(q[1],\
    \ w) == true then return true end\n  -- base case\n  if will_it_fly(q[2], w) ==\
    \ true then return true end\n  -- base case\n  if will_it_fly(q[3], w) == true\
    \ then return true end\n  -- base case\n  if will_it_fly(q[4], w) == true then\
    \ return true end\n  -- base case\n  if will_it_fly(q[5], w) == true then return\
    \ true end\n  -- base case\n  if will_it_fly(q[6], w) == true then return true\
    \ end\n  -- base case\n  if will_it_fly(q[7], w) == true then return true end\n\
    \  -- base case\n  if will_it_fly(q[8], w) == true then return true end\n  --\
    \ base case\n  if will_it_fly(q[9], w) == true then return true end\n  -- base\
    \ case\n  if will_it_fly(q[10], w) == true then return true end\n  -- base case\n\
    \  if will_it_fly(q[11], w) == true then return true end\n  -- base case\n  if\
    \ will_it_fly(q[12], w) == true then return true end\n  -- base case\n  if will_it_fly(q[13],\
    \ w) == true then return true end\n  -- base case\n  if will_it_fly(q[14], w)\
    \ == true then return true end\n  -- base case\n  if will_it_fly(q[15], w) ==\
    \ true then return true end\n  -- base case\n  if will_it_fly(q[16], w) == true\
    \ then return true end\n  -- base case\n  if will_it_fly(q[17], w) == true then\
    \ return true end\n  -- base case\n  if will_it_fly(q[18], w) == true then return\
    \ true end\n  -- base case\n  if will_it_fly(q[19], w) == true then return true\
    \ end\n  -- base case\n  if will_it_fly(q[20], w) == true then return true end\n\
    \  -- base case\n  if will_it_fly(q[21], w) == true then return true end\n  --\
    \ base case\n  if will_it_fly(q[22], \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyxq05w6f.lua:61: ')' expected (to close '(' at line 60) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if w == 0 then\n    return true\n  end\n\
    \  -- base case\n  if w == 1 then\n    return false\n  end\n  -- base case\n \
    \ if w == 2 then\n    return true\n  end\n  -- base case\n  if w == 3 then\n \
    \   return true\n  end\n  -- base case\n  if w == 4 then\n    return true\n  end\n\
    \  -- base case\n  if w == 5 then\n    return true\n  end\n  -- base case\n  if\
    \ w == 6 then\n    return true\n  end\n  -- base case\n  if w == 7 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 8 then\n    return true\n  end\n  --\
    \ base case\n  if w == 9 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 10 then\n    return true\n  end\n  -- base case\n  if w == 11 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 12 then\n    return true\n  end\n  --\
    \ base case\n  if w == 13 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 14 then\n    return true\n  end\n  -- base case\n  if w == 15 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 16 then\n    return true\n  end\n  --\
    \ base case\n  if w == 17 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 18 then\n    return true\n  end\n  -- base case\n  if w == 19 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 20 then\n    return true\n  end\n  --\
    \ base case\n  if w == 21 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 22 then\n    return true\n  end\n  -- base case\n  if w == 23 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 24 then\n    return true\n  end\n  --\
    \ base case\n  if w == 25 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 26 then\n    return true\n  end\n  -- base case\n  if w == 27 then\n    return\
    \ true\n  end\n  -- base case\n  if w == 28 then\n    return true\n  end\n  --\
    \ base case\n  if w == 29 then\n    return true\n  end\n  -- base case\n  if w\
    \ == 30 then\n    return true\n  end\n  -- base case\n  if w == 31 then\n    return\
    \ true\n  end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjj0ukydw.lua:154: 'end' expected (to close 'function' at line\
    \ 12) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ will_it_fly(q[#q - 1], w) end\n   if #q > 1 then return q[#q - 1] == w end\n\
    \   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9znlqt5j.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmp9znlqt5j.lua:24: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if #q == 0 then return true end\n  -- Base\
    \ case\n  if w == 0 then return false end\n  -- Base case\n  if w == 1 then return\
    \ true end\n  -- Base case\n  if w == 2 then return true end\n  -- Base case\n\
    \  if w == 3 then return true end\n  -- Base case\n  if w == 4 then return true\
    \ end\n  -- Base case\n  if w == 5 then return true end\n  -- Base case\n  if\
    \ w == 6 then return true end\n  -- Base case\n  if w == 7 then return true end\n\
    \  -- Base case\n  if w == 8 then return true end\n  -- Base case\n  if w == 9\
    \ then return true end\n  -- Base case\n  if w == 10 then return true end\n  --\
    \ Base case\n  if w == 11 then return true end\n  -- Base case\n  if w == 12 then\
    \ return true end\n  -- Base case\n  if w == 13 then return true end\n  -- Base\
    \ case\n  if w == 14 then return true end\n  -- Base case\n  if w == 15 then return\
    \ true end\n  -- Base case\n  if w == 16 then return true end\n  -- Base case\n\
    \  if w == 17 then return true end\n  -- Base case\n  if w == 18 then return true\
    \ end\n  -- Base case\n  if w == 19 then return true end\n  -- Base case\n  if\
    \ w == 20 then return true end\n  -- Base case\n  if w == 21 then return true\
    \ end\n  -- Base case\n  if w == 22 then return true end\n  -- Base case\n  if\
    \ w == 23 then return true end\n  -- Base case\n  if w == 24 then return true\
    \ end\n  -- Base case\n  if w == 25 then return true end\n  -- Base case\n  if\
    \ w == 26 then return true end\n  -- Base case\n  if w == 27 then return true\
    \ end\n  -- Base case\n  if w == 28 then return true end\n  -- Base case\n  if\
    \ w == 29 then return true end\n  -- Base case\n  if w == 30 then return true\
    \ end\n  -- Base case\n  if w == 31 then return true end\n  -- Base case\n  if\
    \ w == 32 then return true end\n  -- Base case\n  if w == 33 then return true\
    \ end\n  -- Base case\n  if w == 34 then return true end\n  -- Base case\n  if\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpletp3rg1.lua:87: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local max_weight = w\n    local balanced = true\n   \
    \ local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n        if sum\
    \ > max_weight then\n            balanced = false\n            break\n       \
    \ end\n    end\n    return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8ifkzi2.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe8ifkzi2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ will_it_fly(q[#q - 1], w) end\n   if #q == 1 and q[1] == w then return true\
    \ end\n   if #q == 1 and q[1] == w and #q > 1 then return will_it_fly(q[#q - 2],\
    \ w) end\n   return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzafnr5dz.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmpzafnr5dz.lua:25: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj4vicsd.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgj4vicsd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Write your code here.\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > w then\n   \
    \   balanced = false\n    end\n  end\n  return balanced and sum <= w\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdsqs3hv.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppdsqs3hv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then\n    \
    \  local max = 0\n      for i = 1, #q do\n         if max < q[i] then max = q[i]\
    \ end\n      end\n      return max <= w\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69kh0zms.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp69kh0zms.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    end\n\
    \  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb133kz3c.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb133kz3c.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu9e_2gv.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzu9e_2gv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Your code here\n  local sum = 0\n  for i = 1, #q do\n\
    \    sum = sum + q[i]\n  end\n  if sum < w then\n    return false\n  else\n  \
    \  return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkfpqp3n.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmkfpqp3n.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- write your code in Lua 5.1\n  -- return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbpe9nd_.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppbpe9nd_.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_tcc52k.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm_tcc52k.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4u0_5r5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn4u0_5r5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e8qup_7.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9e8qup_7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n    local max_weight = w\n    local sum = 0\n    for i =\
    \ 1, #q do\n        sum = sum + q[i]\n        if sum > max_weight then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ku24yh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj7ku24yh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if q == nil then return false end\n  --\
    \ base case\n  if w == 0 then return true end\n  -- base case\n  if w == 1 then\
    \ return true end\n  -- base case\n  if w == 2 then return true end\n  -- base\
    \ case\n  if w == 3 then return true end\n  -- base case\n  if w == 4 then return\
    \ true end\n  -- base case\n  if w == 5 then return true end\n  -- base case\n\
    \  if w == 6 then return true end\n  -- base case\n  if w == 7 then return true\
    \ end\n  -- base case\n  if w == 8 then return true end\n  -- base case\n  if\
    \ w == 9 then return true end\n  -- base case\n  if w == 10 then return true end\n\
    \  -- base case\n  if w == 11 then return true end\n  -- base case\n  if w ==\
    \ 12 then return true end\n  -- base case\n  if w == 13 then return true end\n\
    \  -- base case\n  if w == 14 then return true end\n  -- base case\n  if w ==\
    \ 15 then return true end\n  -- base case\n  if w == 16 then return true end\n\
    \  -- base case\n  if w == 17 then return true end\n  -- base case\n  if w ==\
    \ 18 then return true end\n  -- base case\n  if w == 19 then return true end\n\
    \  -- base case\n  if w == 20 then return true end\n  -- base case\n  if w ==\
    \ 21 then return true end\n  -- base case\n  if w == 22 then return true end\n\
    \  -- base case\n  if w == 23 then return true end\n  -- base case\n  if w ==\
    \ 24 then return true end\n  -- base case\n  if w == 25 then return true end\n\
    \  -- base case\n  if w == 26 then return true end\n  -- base case\n  if w ==\
    \ 27 then return true end\n  -- base case\n  if w == 28 then return true end\n\
    \  -- base case\n  if w == 29 then return true end\n  -- base case\n  if w ==\
    \ 30 then return true end\n  -- base case\n  if w == 31 then return true end\n\
    \  -- base case\n  if w == 32 then return true end\n  -- base case\n  if w ==\
    \ 33 then return true end\n  -- base case\n  if w == 34 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjsq_e1fv.lua:87: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r2zia07.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6r2zia07.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7f4gkvo.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi7f4gkvo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8ncskac.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps8ncskac.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2xkotu3.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn2xkotu3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if #q == 0 then return true end\n  -- Base\
    \ case\n  if w == 0 then return false end\n  -- Base case\n  if #q == 1 then return\
    \ true end\n  -- Base case\n  if w == 1 then return false end\n  -- Base case\n\
    \  if #q == 2 then return true end\n  -- Base case\n  if w == 2 then return false\
    \ end\n  -- Base case\n  if #q == 3 then return true end\n  -- Base case\n  if\
    \ w == 3 then return false end\n  -- Base case\n  if #q == 4 then return true\
    \ end\n  -- Base case\n  if w == 4 then return false end\n  -- Base case\n  if\
    \ #q == 5 then return true end\n  -- Base case\n  if w == 5 then return false\
    \ end\n  -- Base case\n  if #q == 6 then return true end\n  -- Base case\n  if\
    \ w == 6 then return false end\n  -- Base case\n  if #q == 7 then return true\
    \ end\n  -- Base case\n  if w == 7 then return false end\n  -- Base case\n  if\
    \ #q == 8 then return true end\n  -- Base case\n  if w == 8 then return false\
    \ end\n  -- Base case\n  if #q == 9 or w == 9 then return true end\n  -- Base\
    \ case\n  if w == 9 then return false end\n  -- Base case\n  if #q == 10 then\
    \ return true end\n  -- Base case\n  if w == 10 then return false end\n  -- Base\
    \ case\n  if #q == 11 then return true end\n  -- Base case\n  if w == 11 then\
    \ return false end\n  -- Base case\n  if #q == 12 then return true end\n  -- Base\
    \ case\n  if w == 12 then return false end\n  -- Base case\n  if #q == 13 then\
    \ return true end\n  -- Base case\n  if w == 13 then return false end\n  -- Base\
    \ case\n  if #q == 14 then return true end\n  -- Base case\n  if w == 14 then\
    \ return false end\n  -- Base case\n  if #q == 15 then return true end\n  -- Base\
    \ case\n  if w == 15 then return false end\n  -- Base case\n  if #q == 16 then\
    \ return true end\n  -- Base case\n  if w == 16 then return false end\n  -- Base\
    \ case\n  if #q == 17 then return true end\n  -- Base case\n  if w == 17 then\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr2e4x_j5.lua:97: 'end' expected (to close 'if' at line 84)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  if #q == 0 then return true end\n  if #q == 1 then return\
    \ false end\n  local max_weight = w\n  local max_sum = 0\n  for i = 1, #q do\n\
    \    local s = q[i]\n    if s == 0 then return false end\n    max_sum = max_sum\
    \ + s\n    if max_sum > max_weight then max_sum = max_weight end\n  end\n  return\
    \ max_sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73wn8_1f.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp73wn8_1f.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8c3wkny.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8c3wkny.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- base case\n  if #q == 0 then return true end\n  -- base\
    \ case\n  if w == 0 then return false end\n  -- base case\n  if w == 1 then return\
    \ true end\n  -- base case\n  if w == 2 then return true end\n  -- base case\n\
    \  if w == 3 then return true end\n  -- base case\n  if w == 4 then return true\
    \ end\n  -- base case\n  if w == 5 then return true end\n  -- base case\n  if\
    \ w == 6 then return true end\n  -- base case\n  if w == 7 then return true end\n\
    \  -- base case\n  if w == 8 then return true end\n  -- base case\n  if w == 9\
    \ then return true end\n  -- base case\n  if w == 10 then return true end\n  --\
    \ base case\n  if w == 11 then return true end\n  -- base case\n  if w == 12 then\
    \ return true end\n  -- base case\n  if w == 13 then return true end\n  -- base\
    \ case\n  if w == 14 then return true end\n  -- base case\n  if w == 15 then return\
    \ true end\n  -- base case\n  if w == 16 then return true end\n  -- base case\n\
    \  if w == 17 then return true end\n  -- base case\n  if w == 18 then return true\
    \ end\n  -- base case\n  if w == 19 then return true end\n  -- base case\n  if\
    \ w == 20 then return true end\n  -- base case\n  if w == 21 then return true\
    \ end\n  -- base case\n  if w == 22 then return true end\n  -- base case\n  if\
    \ w == 23 then return true end\n  -- base case\n  if w == 24 then return true\
    \ end\n  -- base case\n  if w == 25 then return true end\n  -- base case\n  if\
    \ w == 26 then return true end\n  -- base case\n  if w == 27 then return true\
    \ end\n  -- base case\n  if w == 28 then return true end\n  -- base case\n  if\
    \ w == 29 then return true end\n  -- base case\n  if w == 30 then return true\
    \ end\n  -- base case\n  if w == 31 then return true end\n  -- base case\n  if\
    \ w == 32 then return true end\n  -- base case\n  if w == 33 then return true\
    \ end\n  -- base case\n  if w == 34 then return true end\n  -- base case\n  if\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6a3iubq6.lua:87: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return will_it_fly(q[1], w) end\n   if #q > 2\
    \ and will_it_fly(q[1], w) and will_it_fly(q[#q - 1], w) then\n      return true\n\
    \   else\n      return false\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1_xr2gh.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmpd1_xr2gh.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpd1_xr2gh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local sum = 0\n  for _, v in pairs(q) do sum = sum + v\
    \ end\n  return sum <= w and is_palindromic(q) and is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdfd0v6q.lua:15:\
    \ attempt to call global 'is_palindromic' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpxdfd0v6q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkv5d50_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkkv5d50_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > w then\n      balanced = false\n    \
    \  break\n    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2i1utoh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz2i1utoh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      return will_it_fly(q[1], w)\n   end\n   if #q == 2 then\n    \
    \  return will_it_fly(q[1], w) and will_it_fly(q[2], w)\n   end\n   if #q == 3\
    \ then\n      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w)\n   end\n   if #q == 4 then\n      return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) and will_it_fly(q[3], w) and will_it_fly(q[4], w)\n   end\n   if #q == 5\
    \ then\n      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w) and will_it_fly(q[4], w) and will_it_fly(q[5], w)\n   end\n   if #q == 6\
    \ then\n      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w) and will_it_fly(q[4], w) and will_it_fly(q[5], w) and will_it_fly(q[6], w)\n\
    \   end\n   if #q == 7 then\n      return will_it_fly(q[1], w) and will_it_fly(q[2],\
    \ w) and will_it_fly(q[3], w) and will_it_fly(q[4], w) and will_it_fly(q[5], w)\
    \ and will_it_fly(q[6], w) and will_it_fly(q[7], w)\n   end\n   if #q == 8 then\n\
    \      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and will_it_fly(q[3],\
    \ w) and will_it_fly(q[4], w) and will_it_fly(q[5], w) and will_it_fly(q[6], w)\
    \ and will_it_fly(q[7], w) and will_it_fly(q[8], w)\n   end\n   if #q == 9 or\
    \ #q == 10 then\n      return will_it_fly(q[1], w) and will_it_fly(q[2], w) and\
    \ will_it_fly(q[3], w) and will_it_fly(q[4], w) and will_it_fly(q[5], w) and will_it_fly(q[6],\
    \ w) and will_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9_rs5and.lua:42: 'end' expected (to close 'if' at line 40)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3a2cm7d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt3a2cm7d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for i = 1, #q\
    \ do\n    sum = sum + q[i]\n    if sum > max_weight then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vrqsjkt.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2vrqsjkt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  -- Base case\n  if #q == 0 then\n    return true\n  end\n\
    \  -- If the first element of q is greater than the maximum possible weight, then\
    \ the object q will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If\
    \ the first element of q is less than the maximum possible weight, then the object\
    \ q will fly.\n  if q[1] < w then\n    return false\n  end\n  -- If the first\
    \ element of q is equal to the maximum possible weight, then the object q will\
    \ fly.\n  if q[1] == w then\n    return will_it_fly(q[#q], w)\n  end\n  -- If\
    \ the first element of q is less than the maximum possible weight, then the object\
    \ q will fly.\n  if q[1] < w then\n    return false\n  end\n  -- If the first\
    \ element of q is greater than the maximum possible weight, then the object q\
    \ will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If the first element\
    \ of q is equal to the maximum possible weight, then the object q will fly.\n\
    \  if q[1] == w then\n    return will_it_fly(q[#q], w)\n  end\n  -- If the first\
    \ element of q is greater than the maximum possible weight, then the object q\
    \ will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If the first element\
    \ of q is equal to the maximum possible weight, then the object q will fly.\n\
    \  if q[1] == w then\n    return will_it_fly(q[#q], w)\n  end\n  -- If the first\
    \ element of q is greater than the maximum possible weight, then the object q\
    \ will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If the first element\
    \ of q is equal to the maximum possible weight, then the object q will fly.\n\
    \  if q[1] == w then\n    return will_it_fly(q[#q], w)\n  end\n  -- If the first\
    \ element of q is greater than the maximum possible weight, then the object q\
    \ will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If the first element\
    \ of q is equal to the maximum possible weight, then the object q will fly.\n\
    \  if q[1] == w then\n    return will_it_fly(q[#q], w)\n  end\n  -- If the first\
    \ element of q is greater than the maximum possible weight, then the object q\
    \ will fly.\n  if q[1] > w then\n    return true\n  end\n  -- If the first element\
    \ of q is equal to the maximum possible weight, then the object q will fly.\n\
    \  if q[1] == w then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpexf96up1.lua:84: 'end' expected (to close 'if' at line 70)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then return true end\n   if #q == 1 then return\
    \ false end\n   if #q == 2 then return q[1] == w end\n   if #q > 2 then return\
    \ will_it_fly(q[#q - 1], w) end\n   local max_weight = w\n   for i = #q - 1, 1,\
    \ -1 do\n      max_weight = max_weight - q[i]\n      if max_weight < 0 then return\
    \ false end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dfeyn6a.lua:13:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmp5dfeyn6a.lua:28: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n\
    \      max_weight = sum\n      balanced = false\n    end\n  end\n  return balanced\
    \ and max_weight <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqdoxm10.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkqdoxm10.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i = 1, #q do\n  \
    \  sum = sum + q[i]\n    if sum > w then\n      bal = bal + 1\n      sum = 0\n\
    \    end\n  end\n  return bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p1fh6ox.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8p1fh6ox.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- will_it_fly([1, 2], 5) \u279E False \n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- will_it_fly([3, 2, 3],\
    \ 1) \u279E False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- will_it_fly([3, 2, 3], 9) \u279E True\n-- # 3+2+3 is less than the\
    \ maximum possible weight, and it's balanced.\n-- will_it_fly([3], 5) \u279E True\n\
    -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
    \ will_it_fly(q, w)\n   if #q == 0 then\n      return true\n   end\n   if #q ==\
    \ 1 then\n      if q[1] == w then\n         return true\n      else\n        \
    \ return false\n      end\n   end\n   if #q == 2 then\n      if q[1] == w and\
    \ q[2] == w then\n         return true\n      else\n         return false\n  \
    \    end\n   end\n   if #q == 3 then\n      if q[1] == w and q[2] == w and q[3]\
    \ == w then\n         return true\n      else\n         return false\n      end\n\
    \   end\n   if #q == 4 then\n      if q[1] == w and q[2] == w and q[3] == w and\
    \ q[4] == w then\n         return true\n      else\n         return false\n  \
    \    end\n   end\n   if #q == 5 then\n      if q[1] == w and q[2] == w and q[3]\
    \ == w and q[4] == w and q[5] == w then\n         return true\n      else\n  \
    \       return false\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm79nt54g.lua:56:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm79nt54g.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
