language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %2$3')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$2 %2$3')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$3 %2$1')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %2$2')\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hp8c2oq.lua:20:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmp6hp8c2oq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphe9g5k7_.lua:17: function arguments expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits, number)\n    local digits = tonumber(digits)\n    if digits\
    \ == nil then\n      digits = 0\n    end\n    local number = tonumber(number)\n\
    \    if number == nil then\n      number = 0\n    end\n    if digits > number\
    \ then\n      return number\n    else\n      return digits\n    end\n  end)\n\
    \  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4ljpwaw.lua:22:\
    \ bad argument #1 to 'concat' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpu4ljpwaw.lua:22: in local 'candidate'\n\t/tmp/tmpu4ljpwaw.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxe2k4v98.lua:7: unfinished string near ''''(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6_3183bh.lua:24: function arguments expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp401tqg0g.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)',\
    \ '\\2\\1')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([^%z]|$)', '\\1\\3')\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw5_r6vlo.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d%d+', ''):gsub('%d%d%d+', ''):gsub('%d%d%d%d+', ''):gsub('%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3zpj_ulm.lua:7: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwnxa5ej5.lua:30: function arguments expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ or number\n    sorted_numbers = sorted_numbers or number\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphe9g5k7_.lua:17: function arguments expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #sorted_numbers - 1\n  local num_digits = #sorted_numbers[num_spaces]\n  local\
    \ num_zeros = #sorted_numbers[num_spaces - 1]\n  local num_ones = #sorted_numbers[num_spaces\
    \ - 2]\n  local num_twos = #sorted_numbers[num_spaces - 3]\n  local num_threes\
    \ = #sorted_numbers[num_spaces - 4]\n  local num_fours = #sorted_numbers[num_spaces\
    \ - 5]\n  local num_fives = #sorted_numbers[num_spaces - 6]\n  local num_sixes\
    \ = #sorted_numbers[num_spaces - 7]\n  local num_sevens = #sorted_numbers[num_spaces\
    \ - 8]\n  local num_eights = #sorted_numbers[num_spaces - 9]\n  local num_nines\
    \ = #sorted_numbers[num_spaces - 10]\n  local num_tens = #sorted_numbers[num_spaces\
    \ - 11]\n  local num_elevens = #sorted_numbers[num_spaces - 12]\n  local num_twelves\
    \ = #sorted_numbers[num_spaces - 13]\n  local num_thirteens = #sorted_numbers[num_spaces\
    \ - 14]\n  local num_fourteens = #sorted_numbers[num_spaces - 15]\n  local num_fifteens\
    \ = #sorted_numbers[num_spaces - 16]\n  local num_sixteens = #sorted_numbers[num_spaces\
    \ - 17]\n  local num_seventeens = #sorted_numbers[num_spaces - 18]\n  local num_eighteens\
    \ = #sorted_numbers[num_spaces - 19]\n  local num_nineteens = #sorted_numbers[num_spaces\
    \ - 20]\n  local num_twenty = #sorted_numbers[num_spaces - 21]\n  local num_twenty_ones\
    \ = #sorted_numbers[num_spaces - 22]\n  local num_twenty_twos = #sorted_numbers[num_spaces\
    \ - 23]\n  local num_twenty_threes = #sorted_numbers[num_spaces - 24]\n  local\
    \ num_twenty_fours = #sorted_numbers[num_spaces - 25]\n  local num_twenty_fives\
    \ = #sorted_numbers[num_spaces - 26]\n  local num_twenty_sixes = #sorted_numbers[num_spaces\
    \ - 27]\n  local num_twenty_sevens = #sorted_numbers[num_spaces - 28]\n  local\
    \ num_twenty_eights = #sorted_numbers[num_spaces - 29]\n  local num_twenty_nines\
    \ = #sorted_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppqg0h6c2.lua:51: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk683vrtc.lua:7: unfinished string near ''''%d+%d+%w+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxek3idh.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgxek3idh.lua:8: in local 'candidate'\n\t/tmp/tmpgxek3idh.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%1'):gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%1'):gsub('(^|\
    \ )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%1'):gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%1'):gsub('(^|\
    \ )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%2'):gsub('(^|\
    \ )(.-)( |$)','%1'):gsub('(^| )(.-)( |$)','%3'):gsub('(^| )(.-)( |$)','%1'):gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('(^| )(.-)( |$)','%1'):gsub('\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7cmwbwut.lua:7: unfinished string near ''''''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fplfw4p.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1fplfw4p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1fplfw4p.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a7r_k09.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2a7r_k09.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2a7r_k09.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%a+)( +%a+)',\
    \ '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local\
    \ numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n\
    \  local numbers = numbers:gsub('(%a+)( +%a+)', '\\2\\1')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)', '\\2\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjzdartxh.lua:30: function arguments expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2uwfg60e.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph3dn8nnf.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4_mqnloc.lua:7: unfinished string near ''''%d+%d+''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8cozow9y.lua:7: unfinished string near ''''(%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)(
    +%w+)( +%w''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    local first = tonumber(first)\n    local second\
    \ = tonumber(second)\n    if first > second then\n      return first..' '..second\n\
    \    else\n      return second..' '..first\n    end\n  end)\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi_u5fju.lua:25:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpfi_u5fju.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfne3497.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqfne3497.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjww5_dlo.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzdv2qcfg.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwnxa5ej5.lua:30: function arguments expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)', 'tonumber(\"\
    \\\\1\")'):gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers\
    \ = numbers:gsub('%w+', '\"\\\\1\"')\n  local numbers = numbers:gsub('%w+', '\"\
    \\\\1\"')\n  local numbers = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpci7qjf9j.lua:37: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpybt15779.lua:23: unfinished string near ''''(^| )([%z''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, value\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + value .. \" \"\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbito82s.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmbito82s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits)\n    local digits = tonumber(digits)\n    if digits == nil\
    \ then\n      error('Invalid number: ' .. digits)\n    end\n    return digits\n\
    \  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n  \
    \  local digits = tonumber(digits)\n    if digits == nil then\n      error('Invalid\
    \ number: ' .. digits)\n    end\n    return digits\n  end)\n  local numbers =\
    \ numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits = tonumber(digits)\n\
    \    if digits == nil then\n      error('Invalid number: ' .. digits)\n    end\n\
    \    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_,\
    \ digits)\n    local digits = tonumber(digits)\n    if digits == nil then\n  \
    \    error('Invalid number: ' .. digits)\n    end\n    return digits\n  end)\n\
    \  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits\
    \ = tonumber(digits)\n    if digits == nil then\n      error('Invalid number:\
    \ ' .. digits)\n    end\n    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, digits)\n    local digits = tonumber(digits)\n    if digits == nil\
    \ then\n      error('Invalid number: ' .. digits)\n    end\n    return digits\n\
    \  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, digits)\n  \
    \  local digits = tonumber(digits)\n    if digits == nil then\n      error('Invalid\
    \ number: ' .. digits)\n    end\n    return digits\n  end)\n  local numbers =\
    \ numbers:gsub('(%w+)(%d+)', function(_, digits)\n    local digits = tonumber(digits)\n\
    \    if digits == nil then\n      error('Invalid number: ' .. digits)\n    end\n\
    \    return digits\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_,\
    \ digits)\n    local digits = tonumber(digits)\n    if digits == nil then\n  \
    \    error('Invalid number: ' .. digits)\n    end\n    return digits\n  end)\n\
    \  local numbers = numbers:gsub('(%w+)(%d+)', function(_, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp55ay8qi4.lua:71: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfne3497.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqfne3497.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp43o6pxd7.lua:27: unfinished string near ''''(%w+)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp43o6pxd7.lua:27: unfinished string near ''''(%w+)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = \"\"\n    for _,\
    \ number in ipairs(string.gmatch(numbers, \"%d+\")) do\n        sorted_numbers\
    \ = sorted_numbers + number .. \" \"\n    end\n    return sorted_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(' ')\n\
    \  local sorted_numbers = ''\n  for _, number in ipairs(numbers_array) do\n  \
    \  sorted_numbers = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18u_oag2.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp18u_oag2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp18u_oag2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)($| )', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)($| )', '\\\
    \\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers =\
    \ numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )(.+)', '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^| )(.+)', '\\\\2\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9c6gjni.lua:32: unfinished string near ''''\2''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1\
    \ ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1\
    \ ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1\
    \ ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub(' %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1\
    \ ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub(' %w+', '%1 ')\n  local numbers =\
    \ numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpew1qorqt.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvasjg5p.lua:24: unfinished string near ''''(^| )([0-9]+)(
    |$)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_9p0n8h.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpf_9p0n8h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpf_9p0n8h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 %2')\n  sorted_numbers = sorted_numbers:gsub('%w+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnzrtt1f0.lua:37: unfinished string near ''''%w+''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyow3uqpi.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp401tqg0g.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]+\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu35y3mmu.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpu35y3mmu.lua:8: in local 'candidate'\n\t/tmp/tmpu35y3mmu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkcu1teq6.lua:23: unfinished string near ''''(^| )%w+( ''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv3ogws0.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpyv3ogws0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local sorted_numbers_length\
    \ = #sorted_numbers\n  local sorted_numbers_index = 0\n  local sorted_numbers_string\
    \ = ''\n  local sorted_numbers_string_length = 0\n  local sorted_numbers_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string = ''\n  local sorted_numbers_string_length_string_index\
    \ = 0\n  local sorted_numbers_string_length_string_length = 0\n  local sorted_numbers_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string = ''\n  local\
    \ sorted_numbers_string_length_string_length_string_index = 0\n  local sorted_numbers_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string\
    \ = ''\n  local sorted_numbers_string_length_string_length_string_length_string_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local sorted_numbers_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_9kohyxk.lua:53: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps1qqvig.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps1qqvig.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%2%3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%2%3')\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6jvvv6z0.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_sorted, tonumber(number))\n\
    \  end\n  table.sort(numbers_sorted)\n  return table.concat(numbers_sorted)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt23bujn.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptt23bujn.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxe2k4v98.lua:7: unfinished string near ''''(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdlsmfwr.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpwdlsmfwr.lua:11: in local 'candidate'\n\t/tmp/tmpwdlsmfwr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf3p_61h.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdf3p_61h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+',\
    \ '%0'):gsub('%d', '%0')\n  local numbers = numbers:gsub('%d+', '%0'):gsub('%d',\
    \ '%0'):gsub('%d+', '%0'):gsub('%d', '%0'):gsub('%d+', '%0'):gsub('%d', '%0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxprthnej.lua:14: unfinished string near ''''%0''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)',\
    \ '')\n  local numbers = numbers:gsub('([%z]+)$', '')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '0')\n  local numbers = numbers:gsub('(%z)', '9')\n  local numbers = numbers:gsub('(%z)',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptphn_qia.lua:39: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  sorted_numbers = sorted_numbers:gsub('(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjj8jzow0.lua:12: unfinished string near ''''(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(%S+)%s*(''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local numbers_array\
    \ = numbers.split(\" \")\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fplfw4p.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp1fplfw4p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1fplfw4p.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %2$3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %2$3')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp458cp4zu.lua:22: unfinished string near ''''(^| )([%z]+)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8g1764po.lua:36: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for i = 1,\
    \ #numbers do\n    local number = tonumber(numbers[i])\n    if number == nil then\n\
    \      error(\"Invalid number '\" .. numbers[i] .. \"'\")\n    end\n    if number\
    \ < 10 then\n      sorted_numbers = sorted_numbers .. number\n    else\n     \
    \ local digits = math.floor(math.log(number) / math.log(10))\n      local digits_string\
    \ = string.format(\"%0*d\", digits, number)\n      local digits_string_reversed\
    \ = string.reverse(digits_string)\n      sorted_numbers = sorted_numbers .. digits_string_reversed\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1cj86ta.lua:11:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpi1cj86ta.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi1cj86ta.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1%3 %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3\
    \ %2%1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1%3 %2%1')\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa7v944q9.lua:34: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeaj0gv45.lua:9: unfinished string near ''''(%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%d]+)(\
    \ |$)', function(_, digits, end)\n    return tonumber(digits)\n  end)\n  table.sort(numbers)\n\
    \  return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp26gelcp6.lua:7: <name> or ''...'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnztd1ef4.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_table,\
    \ tonumber(number))\n  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6efoeptq.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps1qqvig.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprovwt2_h.lua:16: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvkt_kzb.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpsvkt_kzb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsvkt_kzb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$1 %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %3 %2$2')\n  local numbers = numbers:gsub('(^| )%w+( \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkcu1teq6.lua:23: unfinished string near ''''(^| )%w+( ''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3b0ew365.lua:51: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd1obw3cu.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzx56sdho.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%a+)', '\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2'):gsub('(^|%s):(%\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_2r58jin.lua:20: unfinished string near ''''(^|%s):(%''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd1obw3cu.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvc_fx6_t.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdusb5ym.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpkdusb5ym.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkdusb5ym.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfne3497.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqfne3497.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a7r_k09.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2a7r_k09.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2a7r_k09.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4t4ohm7u.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  sorted_numbers = table.sort(table.unpack(sorted_numbers))\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16bkimge.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp16bkimge.lua:11: in local 'candidate'\n\t/tmp/tmp16bkimge.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)', '\\2\\3')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt5ve2jo_.lua:26: unfinished string near ''''(^| )([^ ]+)(
    |$''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #numbers - 1\n  local num_digits = #sorted_numbers - 1\n  local num_zeros\
    \ = #sorted_numbers - num_digits + 1\n  local num_ones = #sorted_numbers - num_zeros\
    \ - 1\n  local num_twos = #sorted_numbers - num_ones - 1\n  local num_threes =\
    \ #sorted_numbers - num_twos - 1\n  local num_fours = #sorted_numbers - num_threes\
    \ - 1\n  local num_fives = #sorted_numbers - num_fours - 1\n  local num_sixes\
    \ = #sorted_numbers - num_fives - 1\n  local num_sevens = #sorted_numbers - num_sixes\
    \ - 1\n  local num_eights = #sorted_numbers - num_sevens - 1\n  local num_nines\
    \ = #sorted_numbers - num_eights - 1\n  local num_tens = #sorted_numbers - num_nines\
    \ - 1\n  local num_elevens = #sorted_numbers - num_tens - 1\n  local num_twelves\
    \ = #sorted_numbers - num_elevens - 1\n  local num_thirteens = #sorted_numbers\
    \ - num_twelves - 1\n  local num_fourteens = #sorted_numbers - num_thirteens -\
    \ 1\n  local num_fifteens = #sorted_numbers - num_fourteens - 1\n  local num_sixteens\
    \ = #sorted_numbers - num_fifteens - 1\n  local num_seventeens = #sorted_numbers\
    \ - num_sixteens - 1\n  local num_eighteens = #sorted_numbers - num_seventeens\
    \ - 1\n  local num_nineteens = #sorted_numbers - num_eighteens - 1\n  local num_twentys\
    \ = #sorted_numbers - num_nineteens - 1\n  local num_thirtys = #sorted_numbers\
    \ - num_twentys - 1\n  local num_fortys = #sorted_numbers - num_thirtys - 1\n\
    \  local num_fiftys = #sorted_numbers - num_fortys - 1\n  local num_sixtys = #sorted_numbers\
    \ - num_fiftys - 1\n  local num_seventys = #sorted_numbers - num_sixtys - 1\n\
    \  local num_eightys = #sorted_numbers - num_seventys - 1\n  local num_ninetys\
    \ = #sorted_numbers - num_eightys - 1\n  local num_hundreds = #sorted_numbers\
    \ - num_ninetys - 1\n  local num_thousands = #sorted_numbers - num_hundreds -\
    \ 1\n  local num_milli\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvin_359r.lua:52: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- Remove spaces\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\2') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\1') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus sign\n  local numbers = numbers:gsub('(^|-)([0-9]+)$',\
    \ '\\\\2') -- Add leading minus \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzm6xlqtb.lua:38: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local\
    \ numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local\
    \ numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n    local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6nv4f2_.lua:36: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv351ldve.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(\
    \ )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxe2k4v98.lua:7: unfinished string near ''''(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)(
    )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w+)( )(%w''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_array = numbers.split(' ')\n\
    \    local sorted_numbers = ''\n    local number_length = numbers_array:len()\n\
    \    for i = 1, number_length do\n        local current_number = numbers_array[i]\n\
    \        local current_number_length = current_number:len()\n        if current_number_length\
    \ == 1 then\n            sorted_numbers = sorted_numbers + current_number\n  \
    \      else\n            local current_number_array = current_number:gsub('%d+',\
    \ '%%d'):gsub('%d', '%%d'):gsub('%d', '%d+'):gsub('%d+', '%d')\n            local\
    \ current_number_array_length = current_number_array:len()\n            if current_number_array_length\
    \ == 1 then\n                sorted_numbers = sorted_numbers + current_number_array\n\
    \            else\n                local current_number_array_sorted = current_number_array:sort()\n\
    \                local current_number_array_sorted_length = current_number_array_sorted:len()\n\
    \                if current_number_array_sorted_length == 1 then\n           \
    \         sorted_numbers = sorted_numbers + current_number_array_sorted\n    \
    \            else\n                    local current_number_array_sorted_sorted\
    \ = current_number_array_sorted:sort()\n                    local current_number_array_sorted_sorted_length\
    \ = current_number_array_sorted_sorted:len()\n                    if current_number_array_sorted_sorted_length\
    \ == 1 then\n                        sorted_numbers = sorted_numbers + current_number_array_sorted_sorted\n\
    \                    else\n                        local current_number_array_sorted_sorted_sorted\
    \ = current_number_array_sorted_sorted:sort()\n                        local current_number_array_sorted_sorted_sorted_length\
    \ = current_number_array_sorted_sorted_sorted:len()\n                        if\
    \ current_number_array_sorted_sorted_sorted_length == 1 then\n               \
    \             sorted_numbers = sorted_numbers + current_number_array_sorted_sorted_sorted\n\
    \                        else\n                            local current_number_array_sorted_sorted_sorted_sorted\
    \ = current_number_array_sorted_sorted_sorted:sort()\n                       \
    \     local current_number_array_sorted_sorted_sorted_sorted_length = current_number_array_sorted_sorted_sorted_sorted:len()\n\
    \                            if current_number_array_sorted_sorted_sorted_length\
    \ == 1 then\n                                sorted_numbers = sorted_numbers +\
    \ current_number_array_sorted_sorted_sorted_sorted\n                         \
    \   else\n                                local current_number_array_sorted_sorted_sorted_sorted\
    \ = current_number_array_sorted_sorted_sorted_sorted:sort()\n                \
    \                local current_number_array_sorted_sorted_sorted_sorted_length\
    \ = current_number_array_sorted_sorted_sorted_sorted_sorted:len()\n          \
    \                      if current_number_array_sorted_sorted_sorted_sorted_length\
    \ == 1 then\n                                    sorted_numbers = sorted_numbers\
    \ + current_number_array_sorted_sorted_sorted_sorted_sorted\n                \
    \                else\n                                    local current_number_array_sorted_sorted_sorted_sorted_sorted\
    \ = current_number_array_sorted_sorted_sorted_sorted_sorted:sort()\n         \
    \                           local current_number_array_sorted_sorted_sorted_sorted_sorted_length\
    \ = current_number_array_sorted_sorted_sorted_sorted_sorted_sorted:len()\n   \
    \                                 if current_number_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgo_72his.lua:49: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)',\
    \ '\\\\2\\\\3') -- Replace all numbers with their sorted equivalents\n  local\
    \ numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\\
    2') -- Replace all numbers with their sorted equivalents\n  local numbers = string.gsub(numbers,\
    \ '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\2') -- Replace all numbers with\
    \ their sorted equivalents\n  local numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)',\
    \ '\\\\1\\\\2') -- Replace all numbers with their sorted equivalents\n  local\
    \ numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\\
    2') -- Replace all numbers with their sorted equivalents\n  local numbers = string.gsub(numbers,\
    \ '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\2') -- Replace all numbers with\
    \ their sorted equivalents\n  local numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)',\
    \ '\\\\1\\\\2') -- Replace all numbers with their sorted equivalents\n  local\
    \ numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\\
    2') -- Replace all numbers with their sorted equivalents\n  local numbers = string.gsub(numbers,\
    \ '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\2') -- Replace all numbers with\
    \ their sorted equivalents\n  local numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)',\
    \ '\\\\1\\\\2') -- Replace all numbers with their sorted equivalents\n  local\
    \ numbers = string.gsub(numbers, '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\\
    2') -- Replace all numbers with their sorted equivalents\n  local numbers = string.gsub(numbers,\
    \ '(^|[^0-9])(%d%d%d%d)([^0-9]|$)', '\\\\1\\\\2') -- Replace all numbers with\
    \ their sorted equivalents\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpha38h7s0.lua:32: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]+\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu35y3mmu.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpu35y3mmu.lua:8: in local 'candidate'\n\t/tmp/tmpu35y3mmu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, value\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', value)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fp0zfdv.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2fp0zfdv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    sorted_numbers\
    \ = sorted_numbers + numbers_array[i]\n  end\n  return sorted_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaknjo7bb.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpaknjo7bb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaknjo7bb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt6ydjixk.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n  local numbers = string.gsub(numbers, '[^0-9]', '') --\
    \ remove non-numbers\n  local numbers = string.gsub(numbers, '^0', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^', '') -- remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '$', '') -- remove trailing zeroes\n\
    \  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n \
    \ local numbers = string.gsub(numbers, '^', '') -- remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '$', '') -- remove trailing zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '$', '') -- remove trailing zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^', '')\
    \ -- remove leading zeroes\n  local numbers = string.gsub(numbers, '$', '') --\
    \ remove trailing zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ remove leading zeroes\n  local numbers = string.gsub(numbers, '^', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '$', '') -- remove trailing\
    \ zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n\
    \  local numbers = string.gsub(numbers, '^', '') -- remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '$', '') -- remove trailing zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '$', '') -- remove trailing zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^', '')\
    \ -- remove leading zeroes\n  local numbers = string.gsub(numbers, '$', '') --\
    \ remove trailing zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ remove leading zeroes\n  local numbers = string.gsub(numbers, '^', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6kdp8lnn.lua:35: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('( %z+)( %z+)','%2$1 %3\
    \ %2$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3')\n\
    \  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3\
    \ %5$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1\
    \ %3 %2$3 %4$3 %5$3 %6$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)(\
    \ %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3')\n  local numbers = numbers:gsub('(\
    \ %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3\
    \ %8$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)(\
    \ %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3 %8$3 %9$3')\n  local numbers =\
    \ numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1\
    \ %3 %2$3 %4$3 %5$3 %6$3 %7$3 %8$3 %9$3 %10$3')\n  local numbers = numbers:gsub('(\
    \ %z+)( %z+)( %z+)( %\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc7ysdnnx.lua:16: unfinished string near ''''( %z+)( %z+)(
    %z+)( %''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n  local\
    \ numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('( |$)', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2j9hjl5e.lua:31: unfinished string near ''''(^| )%w+( |''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    local\
    \ number_as_number = tonumber(number)\n    if number_as_number ~= nil then\n \
    \     sorted_numbers = sorted_numbers + tostring(number_as_number)\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngmarly9.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpngmarly9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpngmarly9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\\
    1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\\
    1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\\
    1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\\
    1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers\
    \ = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\\
    1')\n  local numbers = numbers:gsub('(^|)([0-9]+)( |$)', '\\2 \\1')\n  local numbers\
    \ = numbers:gsub('(^\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpolhzxb7t.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 ')\n  local numbers = numbers:gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1 ', ''):gsub('%1\
    \ ', ''):gsub('%1 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdb_urzjk.lua:8: unfinished string near ''''%1 ''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_4h72e4m.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|[%z]+)([%w]+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjd9u4eih.lua:27: unfinished string near ''''(^|''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( +)(%w+)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(%w+)( +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ +)(%w+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfnxt9s9c.lua:27: unfinished string near ''''(%w''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\
    \\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp4ht3vu3.lua:22: unfinished string near ''''(^|[%z])(''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1 \\\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnzaskibh.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%+', '') -- Remove plus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percent signs\n  local numbers = string.gsub(numbers,\
    \ '%+%+', '') -- Remove double plus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local number\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp233c_sx.lua:45: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv3ogws0.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpyv3ogws0.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf3p_61h.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdf3p_61h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%w+', ' '):gsub(' ',\
    \ ' '):gsub('%w+$', '')\n  local numbers = numbers:gsub('%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2e1h0c_9.lua:25: unfinished string near ''''%''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppocx6_o5.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnk8q8_ti.lua:22: unfinished string near ''''(^|[%z])(''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpox74n9wh.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number then\n      sorted_numbers = sorted_numbers\
    \ + numbers_array[i]\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplydp4v7z.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmplydp4v7z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplydp4v7z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_parts\
    \ = #sorted_numbers\n  local num_digits = #sorted_numbers[1]\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local num_digits\n  local num_digits\n  local num_digits\n  local num_digits\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpykrh4mg5.lua:119: ''end'' expected (to close ''function''
    at line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdlsmfwr.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpwdlsmfwr.lua:11: in local 'candidate'\n\t/tmp/tmpwdlsmfwr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%a+)', '%d'):gsub('(%b+)',\
    \ '%d'):gsub('(%c+)', '%d'):gsub('(%w+)', '%d'):gsub('(%u+)', '%d'):gsub('(%x+)',\
    \ '%d'):gsub('(%o+)', '%d'):gsub('(%e+)', '%d'):gsub('(%A+)', '%d'):gsub('(%B+)',\
    \ '%d'):gsub('(%C+)', '%d'):gsub('(%D+)', '%d'):gsub('(%F+)', '%d'):gsub('(%G+)',\
    \ '%d'):gsub('(%h+)', '%d'):gsub('(%I+)', '%d'):gsub('(%j+)', '%d'):gsub('(%k+)',\
    \ '%d'):gsub('(%l+)', '%d'):gsub('(%m+)', '%d'):gsub('(%M+)', '%d'):gsub('(%n+)',\
    \ '%d'):gsub('(%p+)', '%d'):gsub('(%q+)', '%d'):gsub('(%r+)', '%d'):gsub('(%s+)',\
    \ '%d'):gsub('(%t+)', '%d'):gsub('(%u+)', '%d'):gsub('(%v+)', '%d'):gsub('(%w+)',\
    \ '%d'):gsub('(%x+)', '%d'):gsub('(%y+)', '%d'):gsub('(%z+)', '%d'):gsub('(%A+)',\
    \ '%d'):gsub('(%B+)', '%d'):gsub('(%C+)', '%d'):gsub('(%D+)', '%d'):gsub('(%F+)',\
    \ '%d'):gsub('(%G+)', '%d'):gsub('(%h+)', '%d'):gsub('(%I+)', '%d'):gsub('(%j+)',\
    \ '%d'):gsub('(%k+)', '%d'):gsub('(%l+)', '%d'):gsub('(%m+)', '%d'):gsub('(%M+)',\
    \ '%d'):gsub('(%n+)', '%d'):gsub('(%p+)', '%d'):gsub('(%q+)', '%d'):gsub('(%r+)',\
    \ '%d'):gsub('(%s+)', '%d'):gsub('(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq6gz9s4j.lua:7: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpybt15779.lua:23: unfinished string near ''''(^| )([%z''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjy2bzg6_.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd20xym11.lua:36: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  sorted_numbers = table.sort(table.unpack(sorted_numbers))\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vcmfnyw.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5vcmfnyw.lua:11: in local 'candidate'\n\t/tmp/tmp5vcmfnyw.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. ' '\n\
    \  end\n  return sorted_numbers:gsub('(^|[ -])%w+', '\\1 '):gsub('%w+( |$)', '\\\
    1')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l975ag8.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4l975ag8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(string.gmatch(numbers, \"%d+\")) do\n    sorted_numbers = sorted_numbers\
    \ + number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers .. number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cnz4v9q.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5cnz4v9q.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = numbers_array[i]\n\
    \    local number_as_int = tonumber(number)\n    if number_as_int then\n     \
    \ sorted_numbers = sorted_numbers + number .. ' '\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wxkygmn.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp4wxkygmn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4wxkygmn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n  local\
    \ numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\\
    2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\\
    1')\n  local numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^| )%w+(\
    \ |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n \
    \ local numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^| )%w+(\
    \ |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n \
    \ local numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^| )%w+(\
    \ |$)', '\\\\1\\\\2')\n  local numbers = numbers:gsub('(^| )%w+', '\\\\1')\n \
    \ local numbers = numbers:gsub('(^| )%w+( |$)', '\\\\1\\\\2')\n  local numbers\
    \ = numbers:gsub('(^| )%w+', '\\\\1')\n  local numbers = numbers:gsub('(^| )%w+(\
    \ |$\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpswuh40pp.lua:29: unfinished string near ''''(^| )%w+( |$''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdf3p_61h.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdf3p_61h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  sorted_numbers = sorted_numbers:gsub('(%S+)(\
    \ +)', '\\\\2')\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsysrrwti.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpsysrrwti.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsysrrwti.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1\
    \ %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1\
    \ %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1 %2 %3')\n    local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%w+%d+', '%1\
    \ %2 %3')\n    local numbers = numbers:gsub('%d+', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0qwjnrk7.lua:20: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps1qqvig.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    2')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\n  local numbers = numbers:gsub('(%w+)( )', '\\1')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\1')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\1')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpma5co7me.lua:45: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrxq3dw7.lua:31: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1\
    \ %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1\
    \ %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1\
    \ %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1\
    \ %3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1 %3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp221uizwm.lua:22: unfinished string near ''''(^|[%z])(''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1\
    \ %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers\
    \ = numbers:gsub('( )%w+','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+(\
    \ )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local\
    \ numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n\
    \  local numbers = numbers:gsub('( )%w+( )','%2$1 %1')\n  local numbers = numbers:gsub('(\
    \ )%w+( )','%2$1 %1')\n  local numbers = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptd9ms87i.lua:30: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_9p0n8h.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpf_9p0n8h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpf_9p0n8h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo8mvz98o.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  local numbers_sorted_string\
    \ = ''\n  for _, number in ipairs(numbers) do\n    table.insert(numbers_sorted,\
    \ tonumber(number))\n  end\n  table.sort(numbers_sorted)\n  for _, number in ipairs(numbers_sorted)\
    \ do\n    table.insert(numbers_sorted_string, tostring(number))\n  end\n  return\
    \ numbers_sorted_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq81zxkf.lua:23:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcq81zxkf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers .. ' ' .. number\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsepo4o_1.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsepo4o_1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\2 \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2\
    \ \\1')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\2 \\1')\n  local\
    \ numbers = numbers:gsub('(^\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuxtn5r6b.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67mpusnk.lua:7: unfinished string near ''''%d+%d+%w+%d+''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. valid_numbers_string\
    \ .. '( |$)','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2')\n  local\
    \ numbers_array = numbers:gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('(\
    \ )' .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string\
    \ .. '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )'\
    \ .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string ..\
    \ '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )' ..\
    \ valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string .. '(\
    \ )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string\
    \ .. '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )'\
    \ .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string ..\
    \ '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )' ..\
    \ valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string .. '(\
    \ )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string\
    \ .. '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )'\
    \ .. valid_numbers_string .. '( )','%2'):gsub('( )' .. valid_numbers_string ..\
    \ '( )','%2'):gsub('( )' .. valid_numbers_string .. '( )','%2'):gsub('( )' ..\
    \ valid_numbers_string .. '( )','%2'):g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk9_loyvx.lua:9: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a7r_k09.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2a7r_k09.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2a7r_k09.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%w+')) do\n    sorted_numbers = sorted_numbers\
    \ .. number\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 ')\n  local numbers\
    \ = numbers:gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 ')\n  local numbers = numbers:gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 ')\n  local numbers = numbers:gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 ')\n  local numbers\
    \ = numbers:gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 ')\n  local numbers = numbers:gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 ')\n  local numbers = numbers:gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%d+', '%1 '):gsub('\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9kk6w7un.lua:16: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + numbers_array[i]\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvkt_kzb.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpsvkt_kzb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsvkt_kzb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_table,\
    \ tonumber(number))\n  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"[^0-9]\"\
    , \"\")\n  local numbers = table.sort(numbers)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxek3idh.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpgxek3idh.lua:8: in local 'candidate'\n\t/tmp/tmpgxek3idh.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number ~= nil then\n      if number < 10\
    \ then\n        sorted_numbers = sorted_numbers + string.format(\"%d\\0\", number)\n\
    \      else\n        sorted_numbers = sorted_numbers + string.format(\"%d\\0\"\
    , number - 10)\n      end\n    end\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjwc8nt4w.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpjwc8nt4w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjwc8nt4w.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local num_list\
    \ = numbers.split(' ')\n  for _, num in ipairs(num_list) do\n    local num_as_int\
    \ = tonumber(num)\n    if num_as_int then\n      sorted_numbers = sorted_numbers\
    \ + tostring(num_as_int)\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadprjv8m.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpadprjv8m.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpadprjv8m.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_parts\
    \ = string.gsub(numbers, ' ', '').. ' '\n  local num_parts = string.gsub(num_parts,\
    \ '-', ' ')\n  local num_parts = string.gsub(num_parts, '.', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '0', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '1', ' ')\n  local num_parts = string.gsub(num_parts, '2', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '3', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '4', ' ')\n  local num_parts = string.gsub(num_parts, '5', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '6', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '7', ' ')\n  local num_parts = string.gsub(num_parts, '8', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '9', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ ' ', ' ')\n  local num_parts = string.gsub(num_parts, '-', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '.', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '0', ' ')\n  local num_parts = string.gsub(num_parts, '1', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '2', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '3', ' ')\n  local num_parts = string.gsub(num_parts, '4', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '5', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '6', ' ')\n  local num_parts = string.gsub(num_parts, '7', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '8', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '9', ' ')\n  local num_parts = string.gsub(num_parts, ' ', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '-', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '.', ' ')\n  local num_parts = string.gsub(num_parts, '0', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '1', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '2', ' ')\n  local num_parts = string.gsub(num_parts, '3', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '4', ' ')\n  local num_parts = string.gsub(num_parts,\
    \ '5', ' ')\n  local num_parts = string.gsub(num_parts, '6', ' ')\n  local num_parts\
    \ = string.gsub(num_parts, '7', ' ')\n  local num_parts = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt3q8yk3u.lua:46: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4t4ohm7u.lua:35: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\3\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfo1u521.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub(' ',\
    \ ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('\
    \ ', ' ')\n  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp37kgnml2.lua:50: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- remove\
    \ hyphens\n    local numbers = string.gsub(numbers, '0', '') -- remove leading\
    \ zeros\n    local numbers = string.gsub(numbers, '1', '') -- remove leading zeros\n\
    \    local numbers = string.gsub(numbers, '2', '') -- remove leading zeros\n \
    \   local numbers = string.gsub(numbers, '3', '') -- remove leading zeros\n  \
    \  local numbers = string.gsub(numbers, '4', '') -- remove leading zeros\n   \
    \ local numbers = string.gsub(numbers, '5', '') -- remove leading zeros\n    local\
    \ numbers = string.gsub(numbers, '6', '') -- remove leading zeros\n    local numbers\
    \ = string.gsub(numbers, '7', '') -- remove leading zeros\n    local numbers =\
    \ string.gsub(numbers, '8', '') -- remove leading zeros\n    local numbers = string.gsub(numbers,\
    \ '9', '') -- remove leading zeros\n    local numbers = string.gsub(numbers, ',',\
    \ '') -- remove commas\n    local numbers = string.gsub(numbers, 'and', '') --\
    \ remove commas\n    local numbers = string.gsub(numbers, 'and', '') -- remove\
    \ commas\n    local numbers = string.gsub(numbers, 'and', '') -- remove commas\n\
    \    local numbers = string.gsub(numbers, 'and', '') -- remove commas\n    local\
    \ numbers = string.gsub(numbers, 'and', '') -- remove commas\n    local numbers\
    \ = string.gsub(numbers, 'and', '') -- remove commas\n    local numbers = string.gsub(numbers,\
    \ 'and', '') -- remove commas\n    local numbers = string.gsub(numbers, 'and',\
    \ '') -- remove commas\n    local numbers = string.gsub(numbers, 'and', '') --\
    \ remove commas\n    local numbers = string.gsub(numbers, 'and', '') -- remove\
    \ commas\n    local numbers = string.gsub(numbers, 'and', '') -- remove commas\n\
    \    local numbers = string.gsub(numbers, 'and', '') -- remove commas\n    local\
    \ numbers = string.gsub(numbers, 'and', '') -- remove commas\n    local numbers\
    \ = string.gsub(numbers, 'and', '') -- remove commas\n    local numbers = string.gsub(numbers,\
    \ 'and', '') -- remove commas\n    local numbers = string.gsub(numbers, 'and',\
    \ '') -- remove commas\n    local numbers = string.gsub(numbers, 'and', '') --\
    \ remove commas\n    local numbers = string.gsub(numbers, 'and', '') -- remove\
    \ commas\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyaxippuj.lua:50: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%S', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq58ebbtv.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq58ebbtv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%w+%d+', ''):gsub('%d+%w+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%w+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%w+%d+', ''):gsub('%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%d+%w+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpro4nx7gl.lua:7: unfinished string near ''''%d+%d+%d+%w+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', '')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpds1c9e4t.lua:31: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, '') --\
    \ Join back together with spaces.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3vng7ox.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq3vng7ox.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvasjg5p.lua:24: unfinished string near ''''(^| )([0-9]+)(
    |$)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprrecqhu3.lua:36: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpti3hnypr.lua:19:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpti3hnypr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp03jrtfch.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp02p_3qr_.lua:27: unfinished string near ''''(^| ''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    sorted_numbers = sorted_numbers\
    \ + numbers_array[i]\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_xrufyy.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp6_xrufyy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6_xrufyy.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdlsmfwr.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpwdlsmfwr.lua:11: in local 'candidate'\n\t/tmp/tmpwdlsmfwr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    \\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg66c4nl3.lua:32: unfinished string near ''''(%w''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvasjg5p.lua:24: unfinished string near ''''(^| )([0-9]+)(
    |$)''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgopc52xa.lua:19: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ', '\\\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    \\1 ')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdkw31nr0.lua:36: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]+', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9]+)([^0-9\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfhfo8gpu.lua:9: unfinished string near ''''(^|

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers .. ' ' .. number\n\
    \  end\n  table.sort(table.unpack(sorted_numbers))\n  return table.unpack(sorted_numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssiz77le.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpssiz77le.lua:11: in local 'candidate'\n\t/tmp/tmpssiz77le.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n  local numbers = numbers:gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpav7m0k36.lua:8: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevx26ksl.lua:8: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\1\\\\2')\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34205z_1.lua:18:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp34205z_1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local numbers_sorted = {}\n  for i = 1, #numbers_array do\n    table.insert(numbers_sorted,\
    \ numbers_array[i])\n  end\n  table.sort(numbers_sorted)\n  local result = \"\"\
    \n  for i = 1, #numbers_sorted do\n    result = result .. numbers_sorted[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpitp80s_z.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpitp80s_z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpitp80s_z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwnxa5ej5.lua:30: function arguments expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps1qqvig.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$2')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$3')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$4')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$5')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$6')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$7')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$8')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$9')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$0')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$1')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$2')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$3')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$4')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$5')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$6')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$7')\n  local numbers = numbers:gsub('(^|\
    \ )%w+( |$)','%2$8')\n  local numbers = numbers:gsub('(^| )%w+( |$)','%2$9')\n\
    \  local numbers = numbers:gsub('(^| )%w+( |$)','%2$0')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8sy5vn4.lua:39: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\2'):gsub('(^|%s):(%a+)$', '\\1\\\
    2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\2'):gsub('(^|%s):(%a+)$', '\\1\\\
    2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\2'):gsub('(^|%s):(%a+)$', '\\1\\\
    2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\2'):gsub('(^|%s):(%a+)$', '\\1\\\
    2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqh_l0vkb.lua:16: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798077
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdlsmfwr.lua:11:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpwdlsmfwr.lua:11: in local 'candidate'\n\t/tmp/tmpwdlsmfwr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9o5zmi6.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpt9o5zmi6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt9o5zmi6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798076
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for i = 1, #numbers_array do\n    local number = tonumber(numbers_array[i])\n\
    \    if number ~= nil then\n      sorted_numbers = sorted_numbers + tostring(number)\n\
    \    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmm0xf11e.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpmm0xf11e.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpmm0xf11e.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798077
