name: HumanEval_131_digits
language: lua
results:
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaos0u6y.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnaos0u6y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zx8kq1v.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp2zx8kq1v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuwlzlbr.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpfuwlzlbr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb787s73q.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb787s73q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  local digit\n  for digit = 2, #n do\n\
    \    if n % digit == 0 then\n      product = product * digit\n    end\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r186pvs.lua:13:\
    \ attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmp_r186pvs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppezf9me1.lua:21:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmppezf9me1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxj51x72.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpkxj51x72.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nstr = tostring(n)\n\
    \  local digits = nstr:match(\"^%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcsf2xgso.lua:9: unfinished string near '\"^%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjazm8th.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpqjazm8th.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpns3si2.lua:15:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpkpns3si2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2_e_atp.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa2_e_atp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4exvycqd.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp4exvycqd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then return\
    \ 0 end\n  local nstr = tostring(n)\n  local digits = {}\n  for i = 1, #nstr do\n\
    \    local d = tonumber(nstr:sub(i,i))\n    if d > 0 then\n      digits[#digits+1]\
    \ = d\n    end\n  end\n  if #digits == 0 then return 0 end\n  local product =\
    \ 1\n  for i = 1, #digits do\n    product = product * digits[i]\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uz3bb1b.lua:29:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmp6uz3bb1b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local n1 = math.floor(n)\n  local n2 = n - n1\n  local product\
    \ = 1\n  while n2 > 0 do\n    product = product * 10 + n2\n    n2 = n2 - (n2 %\
    \ 2)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm3j8ckk.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpdm3j8ckk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41zb66rq.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp41zb66rq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local digits = 1\n\
    \  while n > 0 do\n    digits = digits * n % 10\n    n = math.floor(n/10)\n  end\n\
    \  return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe81dnfdb.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpe81dnfdb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nstr = tostring(n)\n\
    \  local digits = nstr:match(\"^%d%d*$\")\n  if digits == nil then\n    return\
    \ 0\n  end\n  local digits = tonumber(digits)\n  if digits == nil then\n    return\
    \ 0\n  end\n  local product = 1\n  for i = 1, digits do\n    product = product\
    \ * 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx98_kqeq.lua:27:\
    \ expected: 5, actual: 32\nstack traceback:\n\t/tmp/tmpx98_kqeq.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = 0\n\
    \  while n > 0 do\n    local digit = n % 10\n    local remainder = n / 10\n  \
    \  if remainder == 0 then\n      nDigits = nDigits + 1\n    else\n      nDigits\
    \ = nDigits + 1\n      n = remainder\n    end\n  end\n  return nDigits\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local n1 = math.floor(n)\n\
    \  local n2 = math.floor(n/10)\n  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n\
    \  local n5 = math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local\
    \ n7 = math.floor(n/1000000)\n  local n8 = math.floor(n/10000000)\n  local n9\
    \ = math.floor(n/100000000)\n  local n10 = math.floor(n/1000000000)\n  local n11\
    \ = math.floor(n/10000000000)\n  local n12 = math.floor(n/100000000000)\n  local\
    \ n13 = math.floor(n/1000000000000)\n  local n14 = math.floor(n/10000000000000)\n\
    \  local n15 = math.floor(n/100000000000000)\n  local n16 = math.floor(n/1000000000000000)\n\
    \  local n17 = math.floor(n/10000000000000000)\n  local n18 = math.floor(n/100000000000000000)\n\
    \  local n19 = math.floor(n/100000000000000001)\n  local n20 = math.floor(n/100000000000000002)\n\
    \  local n21 = math.floor(n/100000000000000003)\n  local n22 = math.floor(n/100000000000000004)\n\
    \  local n23 = math.floor(n/100000000000000005)\n  local n24 = math.floor(n/100000000000000006)\n\
    \  local n25 = math.floor(n/100000000000000007)\n  local n26 = math.floor(n/100000000000000008)\n\
    \  local n27 = math.floor(n/100000000000000009)\n  local n28 = math.floor(n/100000000000000010)\n\
    \  local n29 = math.floor(n/100000000000000011)\n  local n30 = math.floor(n/100000000000000012)\n\
    \  local n31 = math.floor(n/100000000000000013)\n  local n32 = math.floor(n/100000000000000014)\n\
    \  local n33 = math.floor(n/100000000000000015)\n  local n34 = math.floor(n/100000000000000016)\n\
    \  local n35 = math.floor(n/100000000000000017)\n  local n36 = math.floor(n/100000000000000018)\n\
    \  local n37 = math.floor(n/100000000000000019)\n  local n38 = math.floor(n/100000000000000020)\n\
    \  local n39 = math.floor(n/100000000000000021)\n  local n40 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5vts8eue.lua:48: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaqtd8rx.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbaqtd8rx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzapld3v2.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzapld3v2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,\
    \ i))\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0fsxgey.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpp0fsxgey.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o45ra79.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0o45ra79.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sv_m_oc.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp5sv_m_oc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 10 then\n  \
    \  return n\n  else\n    local digits = math.floor(math.log(n, 10))\n    return\
    \ digits and digits(n / 10) or 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvswr55_a.lua:12:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpvswr55_a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = digit * 10\
    \ + n % 10\n    n = math.floor(n/10)\n  end\n  return digit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n51fy5k.lua:23:\
    \ expected: 5, actual: 45\nstack traceback:\n\t/tmp/tmp2n51fy5k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp151b5ipy.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp151b5ipy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22dgpjeo.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp22dgpjeo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp3b_b8j.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpjp3b_b8j.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5nbeh364.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp5nbeh364.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp5zi8o_.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmptp5zi8o_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz24uvc57.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpz24uvc57.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt490nz1.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnt490nz1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nDigits = 1\n  while n > 0 do\n    local digit = n\
    \ % 10\n    n = math.floor(n / 10)\n    nDigits = nDigits * 10 + digit\n  end\n\
    \  return nDigits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yrpzusu.lua:23:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmp3yrpzusu.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  local digit\n  for digit = 1, n do\n\
    \    product = product * digit\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2vbf_yx.lua:22:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpw2vbf_yx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qwzjnzm.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_qwzjnzm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit = 1\n  while n > 0 do\n    digit = n % 10\n    product = product\
    \ * digit\n    n = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb44dpv2l.lua:22:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmpb44dpv2l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7uyy1_0.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpg7uyy1_0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzedxo5a2.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzedxo5a2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nstr = tostring(n)\n  local digits = {}\n  for i =\
    \ 1, #nstr do\n    local digit = nstr:sub(i,i)\n    if digit == \"0\" then\n \
    \     table.insert(digits, 0)\n    else\n      table.insert(digits, tonumber(digit))\n\
    \    end\n  end\n  return table.product(digits)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0mcqs2i.lua:21:\
    \ attempt to call field 'product' (a nil value)\nstack traceback:\n\t/tmp/tmpv0mcqs2i.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local digits = math.floor(n/10)\n\
    \  if n % 10 ~= 0 then\n    digits = digits + 1\n  end\n  return digits\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtcat0tb.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpdtcat0tb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0rrrcj6.lua:21:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmpo0rrrcj6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n\
    \    n = math.floor(n/math.pow(10,i+1))\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks_03bxa.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpks_03bxa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6kei81i.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpy6kei81i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(n/10)\n\
    \  if nDigits == 0 then\n    return 0\n  end\n  local nOddDigits = n % 10\n  if\
    \ nOddDigits == 0 then\n    return 1\n  end\n  return digits(nDigits) * digits(nOddDigits)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67fcf_f1.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp67fcf_f1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc39rc2ks.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpc39rc2ks.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local nDigits = nDigits - 1\n\
    \    local product = 1\n    while n > 0 do\n      product = product * 10\n   \
    \   n = math.floor(n/10)\n    end\n    return product\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajbqll17.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpajbqll17.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdguwu7m.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpqdguwu7m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bvpdnao.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp8bvpdnao.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpkca15g.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzpkca15g.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjvko5o1.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpyjvko5o1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digits = math.floor(n/10)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(n/10)\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaklj9g0n.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpaklj9g0n.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digits = math.floor(n/10)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(n/10)\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxgm8aut.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpxxgm8aut.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz771uouh.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpz771uouh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_zurcpr.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb_zurcpr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit = 1\n  while n > 0 do\n    digit = n % 10\n    product = product\
    \ * digit\n    n = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pbs3l7q.lua:22:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmp9pbs3l7q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor((n % 10) + 0.5)\n    n\
    \ = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kgs9_g2.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3kgs9_g2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm3rhu5h.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmplm3rhu5h.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblzfe6za.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpblzfe6za.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = math.floor(n/2)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ot3nxyn.lua:22:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp2ot3nxyn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0_7ne6x.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb0_7ne6x.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxuhjxop.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppxuhjxop.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local n1 = math.floor(n)\n  local n2 = math.floor(n/10)\n\
    \  if n2 > 0 then\n    return (n1 * 10) + digits(n2)\n  end\n  return n1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj5xhmg4.lua:23:\
    \ expected: 5, actual: 545\nstack traceback:\n\t/tmp/tmpzj5xhmg4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufzdhmth.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpufzdhmth.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,\
    \ i))\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj5krjq9.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpjj5krjq9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcwzohbe.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppcwzohbe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local product = 1\n\
    \    for i = 1, n do\n      product = product * i % 10\n    end\n    return product\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kdstmwy.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0kdstmwy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps90h1_ar.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps90h1_ar.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then\n\
    \    return digits\n  end\n  return digits*10 + digits(math.floor(n/10))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc08375zf.lua:15:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpc08375zf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3cr9dll.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps3cr9dll.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 10 then\n  \
    \  return n\n  else\n    local digits = math.floor(math.log(n, 10))\n    return\
    \ digits and digits(n / 10) or 0\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37aok8_z.lua:12:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmp37aok8_z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphesh10i3.lua:21:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmphesh10i3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  local digit\n  for digit = 1, n do\n\
    \    product = product * digit\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq1n8hvm.lua:22:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmplq1n8hvm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nstr = tostring(n)\n  local digits = {}\n  for i =\
    \ 1, #nstr do\n    local digit = tonumber(string.sub(nstr, i, i))\n    if digit\
    \ ~= nil then\n      digits[#digits+1] = digit\n    end\n  end\n  if #digits ==\
    \ 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, #digits do\n\
    \    product = product * digits[i]\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4zwwgc9.lua:33:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmpk4zwwgc9.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then return\
    \ 0 end\n  local digits = 1\n  while n > 0 do\n    digits = digits * n % 10\n\
    \    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmysra6wi.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmysra6wi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(n/10)\n\
    \  if nDigits % 2 == 1 then\n    return 0\n  else\n    return nDigits\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2sbo1nt.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpn2sbo1nt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor((n % 10) + 0.5)\n    n\
    \ = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p8tlsuh.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp4p8tlsuh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyaq2538.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpqyaq2538.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvu4fg4b.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpbvu4fg4b.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digits = math.floor(n/10)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(digits/10)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfalb4bfr.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpfalb4bfr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcuer4us.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpxcuer4us.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  for i = 1, n do\n    product = product\
    \ * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8ch0mxb.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpe8ch0mxb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n/10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bdrqxic.lua:14:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmp8bdrqxic.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8welip6x.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8welip6x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor((n - i) / 2)\n  end\n \
    \ return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2u26mdb.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpn2u26mdb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gjaq_ih.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp9gjaq_ih.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp776l0xrv.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp776l0xrv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf23v86qd.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpf23v86qd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then return\
    \ 0 end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then return digits\
    \ * digits else return digits * digits + digits(n % 10) end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxlknj0v.lua:10:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmprxlknj0v.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nDigits = math.floor(math.log10(n))\n  if nDigits ==\
    \ 0 then\n    return 1\n  end\n  local product = 1\n  for i = 1, nDigits do\n\
    \    product = product * math.floor(n/math.pow(10, i))\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jh90sj6.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp9jh90sj6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm1437o7.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppm1437o7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return\
    \ n * 10\n  elseif n < 1000 then\n    return n * 100\n  elseif n < 10000 then\n\
    \    return n * 1000\n  elseif n < 100000 then\n    return n * 10000\n  elseif\
    \ n < 1000000 then\n    return n * 100000\n  elseif n < 10000000 then\n    return\
    \ n * 1000000\n  elseif n < 100000000 then\n    return n * 10000000\n  elseif\
    \ n < 1000000000 then\n    return n * 100000000\n  elseif n < 10000000000 then\n\
    \    return n * 1000000000\n  elseif n < 100000000000 then\n    return n * 10000000000\n\
    \  else\n    return n * 100000000000\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkigagb_.lua:41:\
    \ expected: 5, actual: 540\nstack traceback:\n\t/tmp/tmpdkigagb_.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor((n % 10) + 0.5)\n    n\
    \ = math.floor((n / 10) + 0.5)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd82rn0gb.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpd82rn0gb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszo9xkry.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpszo9xkry.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyihb9pcf.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpyihb9pcf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2arah0q6.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp2arah0q6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4ttxawm.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa4ttxawm.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1zci3h0.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpk1zci3h0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauul2has.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpauul2has.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = n / 2\n  end\n  return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooxiaq7e.lua:22:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpooxiaq7e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64lh3pce.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmp64lh3pce.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeclxj4gs.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpeclxj4gs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk0r5hu3.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmk0r5hu3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphz4wgpuh.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphz4wgpuh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = math.floor(n/10)\n  if digits == 0 then\n\
    \    return 0\n  end\n  local remainder = n % 10\n  return digits*10 + remainder\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ye_3uqf.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_ye_3uqf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx0h6are.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbx0h6are.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 10 then\n  \
    \  return n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tdonwmx.lua:19:\
    \ expected: 5, actual: 270\nstack traceback:\n\t/tmp/tmp8tdonwmx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7khqr06n.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7khqr06n.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nDigits = math.floor(math.log10(n))\n  if nDigits ==\
    \ 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n\
    \    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n  end\n \
    \ return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzpl1dr8.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnzpl1dr8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqs0cz7.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpspqs0cz7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local product = 1\n  local digit\n  for digit = 1, n do\n\
    \    if n % 2 == 1 then\n      product = product * digit\n    end\n    n = n /\
    \ 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kdpqkc6.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8kdpqkc6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxl1brmg.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpyxl1brmg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digits = math.floor(n/10)\n  while digits > 0 do\n    product = product\
    \ * math.floor(n/10)\n    n = math.floor(n/10)\n    digits = digits - 1\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8yz5fax.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpv8yz5fax.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf8bp5bp.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpsf8bp5bp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local n1 = n % 10\n  local n2 = n % 10\n  if n1 == 0 then\n\
    \    return n2\n  else\n    return n1 * 10 + n2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00dqg85p.lua:23:\
    \ expected: 5, actual: 55\nstack traceback:\n\t/tmp/tmp00dqg85p.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local digits = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return 0\n  else\n    return digits * 10 + n % 10\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph65t55cy.lua:20:\
    \ expected: 5, actual: 54\nstack traceback:\n\t/tmp/tmph65t55cy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiisb2fot.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpiisb2fot.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n\
    \    n = math.floor(n/math.pow(10,i+1))\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64donzc7.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp64donzc7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,\
    \ i))\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpraox_djc.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpraox_djc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppl86t3o_.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppl86t3o_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzdgun4c.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpnzdgun4c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w134u0c.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3w134u0c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjul3efq.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwjul3efq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(math.log10(n))\n\
    \    return digits and digits(n / 10) * 10 or 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pq2qjci.lua:14:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmp_pq2qjci.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfp3cqlt.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbfp3cqlt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51gkuq5n.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp51gkuq5n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91b8ps68.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp91b8ps68.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tb2tfb3.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_tb2tfb3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = n * 10 + digit\n\
    \    n = math.floor(n/10)\n  end\n  return digit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe6kpg_k.lua:22:\
    \ expected: 5, actual: 50\nstack traceback:\n\t/tmp/tmpbe6kpg_k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps94_3rnr.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps94_3rnr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3178g0b.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpr3178g0b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykdree4g.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpykdree4g.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log(n,\
    \ 2))\n  if nDigits == 0 then\n    return 0\n  else\n    return n % 10 * math.pow(10,\
    \ nDigits - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5by78l8.lua:20:\
    \ expected: 5, actual: 400\nstack traceback:\n\t/tmp/tmpw5by78l8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local n1 = math.floor(n)\n  local n2 = n - n1\n  local product\
    \ = 1\n  while n2 > 0 do\n    product = product * 10 + n2\n    n2 = n2 % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4o64qw9.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpm4o64qw9.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local n1 = math.floor(n)\n  local n2 = n - n1\n  local product\
    \ = 1\n  for i = 1, n2 do\n    product = product * 10 + i % 2\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry6kkz2g.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpry6kkz2g.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nDigits = 1\n  while n > 0 do\n    local digit = n\
    \ % 10\n    n = math.floor(n / 10)\n    nDigits = nDigits * 10 + digit\n  end\n\
    \  return nDigits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqq4zkpe.lua:23:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmppqq4zkpe.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local ndigits = math.floor(n/10)\n  if ndigits == 0 then\n\
    \    return 0\n  end\n  local ndigits2 = math.floor(n/10)\n  if ndigits2 ~= 0\
    \ then\n    return ndigits*10 + ndigits2\n  end\n  return ndigits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2zg_uos.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpq2zg_uos.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzt1pkxo.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmzt1pkxo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt1x0j_t.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzt1x0j_t.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxj_32hr.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphxj_32hr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * math.floor(n/10) % 10\n      n\
    \ = math.floor(n/10)\n    end\n    return product\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ween_pn.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3ween_pn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = n / 2\n  end\n  return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiicwc16.lua:22:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpbiicwc16.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z_c2o52.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7z_c2o52.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwkr2aak.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpfwkr2aak.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakdtt_kt.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpakdtt_kt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86dfmplr.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp86dfmplr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6lwwoiw.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpq6lwwoiw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local ndigits = 1\n  while n > 0 do\n    local digit = n\
    \ % 10\n    n = math.floor(n / 10)\n    ndigits = ndigits * 10 + digit\n  end\n\
    \  return ndigits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_1enefs.lua:23:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmpb_1enefs.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local ndigits = 1\n  while n > 0 do\n    local digit = n\
    \ % 10\n    local remainder = n / 10\n    if remainder == 0 then\n      return\
    \ digit\n    end\n    digit = digit * 10 + remainder\n    ndigits = ndigits +\
    \ 1\n    n = remainder\n  end\n  return ndigits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm44pi36.lua:28:\
    \ expected: 5, actual: 4.9406564584125e-324\nstack traceback:\n\t/tmp/tmpcm44pi36.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma_3h8tj.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpma_3h8tj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nstr = tostring(n)\n  local digits = {}\n  for i =\
    \ 1, #nstr do\n    local digit = nstr:sub(i,i)\n    if digit == \"0\" then\n \
    \     digits[i] = 0\n    else\n      digits[i] = tonumber(digit)\n    end\n  end\n\
    \  return product( digits )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_9mvqxa.lua:21:\
    \ attempt to call global 'product' (a nil value)\nstack traceback:\n\t/tmp/tmpt_9mvqxa.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lx2k4ju.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7lx2k4ju.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local digits = 1\n\
    \  while n > 0 do\n    digits = digits * n % 10\n    n = math.floor(n/10)\n  end\n\
    \  return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3g0bf5b.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb3g0bf5b.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(n/10)\n\
    \  if nDigits == 0 then\n    return 0\n  end\n  local nDigits2 = math.floor(n/10)\n\
    \  if nDigits2 ~= 0 then\n    return nDigits2 * 10 + nDigits % 10\n  end\n  return\
    \ nDigits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj51dkqf.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpcj51dkqf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5ijagpp.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpc5ijagpp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc62qqvx.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwc62qqvx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmlachqe.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwmlachqe.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nDigits = math.floor(math.log10(n))\n  if nDigits ==\
    \ 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n\
    \    product = product * math.floor(n/math.pow(10, i))\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxq7mv5m.lua:25:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpbxq7mv5m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nstr = tostring(n)\n\
    \  local digits = nstr:gsub(\"%d+\", \"\")\n  return tonumber(digits)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fl6fjhy.lua:16:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp4fl6fjhy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zbc1cjy.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8zbc1cjy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yg09pv5.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp9yg09pv5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel190f_q.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpel190f_q.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h9f6k3d.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_h9f6k3d.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2dux47d.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb2dux47d.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42ggzdc4.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp42ggzdc4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k40nchz.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp1k40nchz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ncezq_k.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp0ncezq_k.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = n / 2\n  end\n  return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmzkro54.lua:22:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpvmzkro54.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digits = math.floor(n/10)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(n/10)\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog7irx8s.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpog7irx8s.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = digit * 10\
    \ + n % 10\n    n = n / 10\n  end\n  return digit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndc1dcl4.lua:22:\
    \ expected: 5, actual: #Inf\nstack traceback:\n\t/tmp/tmpndc1dcl4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_z_j0w9.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpx_z_j0w9.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor((n\
    \ % 10) + 0.5)\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f8n1oro.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp3f8n1oro.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbj4bd9s.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpvbj4bd9s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaq1m4whg.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpaq1m4whg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkm0venr6.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpkm0venr6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n == 0 then\n  \
    \  return 0\n  end\n  local n1 = math.floor(n)\n  local n2 = n - n1\n  local product\
    \ = 1\n  while n2 > 0 do\n    product = product * 10 + n2 % 2\n    n2 = n2 //\
    \ 2\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ricpam_.lua:16: unexpected symbol near '/'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq3lo07z.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpcq3lo07z.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local n1 = math.floor(n)\n\
    \  local n2 = math.floor(n/10)\n  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n\
    \  local n5 = math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local\
    \ n7 = math.floor(n/1000000)\n  local n8 = math.floor(n/10000000)\n  local n9\
    \ = math.floor(n/100000000)\n  local n10 = math.floor(n/1000000000)\n  local n11\
    \ = math.floor(n/10000000000)\n  local n12 = math.floor(n/100000000000)\n  local\
    \ n13 = math.floor(n/1000000000000)\n  local n14 = math.floor(n/10000000000000)\n\
    \  local n15 = math.floor(n/100000000000000)\n  local n16 = math.floor(n/1000000000000000)\n\
    \  local n17 = math.floor(n/10000000000000000)\n  local n18 = math.floor(n/100000000000000000)\n\
    \  local n19 = math.floor(n/100000000000000001)\n  local n20 = math.floor(n/1000000000000000010)\n\
    \  local n21 = math.floor(n/1000000000000000011)\n  local n22 = math.floor(n/1000000000000000012)\n\
    \  local n23 = math.floor(n/1000000000000000013)\n  local n24 = math.floor(n/1000000000000000014)\n\
    \  local n25 = math.floor(n/1000000000000000015)\n  local n26 = math.floor(n/1000000000000000016)\n\
    \  local n27 = math.floor(n/1000000000000000017)\n  local n28 = math.floor(n/1000000000000000018)\n\
    \  local n29 = math.floor(n/1000000000000000019)\n  local n30 = math.floor(n/1000000000000000020)\n\
    \  local n31 = math.floor(n/1000000000000000021)\n  local n32 = math.floor(n/1000000000000000022)\n\
    \  local n33 = math.floor(n/1000000000000000023)\n  local n34 = math.floor(n/1000000000000000024)\n\
    \  local n35 = math.floor(n/1000000000000000025)\n  local n36 = math.floor(n/1000000000000000026)\n\
    \  local n37 = math.floor(n/1000000000000000027)\n  local n38 = math.floor(n/1000000000000000028)\n\
    \  local n39 = math.floor(n/1000000000000000029)\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps9rpf3qd.lua:61: 'end' expected (to close 'function' at line\
    \ 7) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_othtw4.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpb_othtw4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then return\
    \ 0 end\n  local product = 1\n  local digit\n  for digit = 1, n do\n    product\
    \ = product * digit\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxewmphum.lua:20:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpxewmphum.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjrgzsxc.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpkjrgzsxc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then return\
    \ 0 end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then\n    return\
    \ digits\n  else\n    return digits * 10 + n % 10\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprivze3ve.lua:21:\
    \ expected: 5, actual: 54\nstack traceback:\n\t/tmp/tmprivze3ve.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local nstr = tostring(n)\n  local digits = {}\n  for i =\
    \ 1, #nstr do\n    local digit = nstr:sub(i, i)\n    if digit == \"0\" then\n\
    \      table.insert(digits, 0)\n    else\n      table.insert(digits, tonumber(digit))\n\
    \    end\n  end\n  return table.product(digits)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporsn8byr.lua:21:\
    \ attempt to call field 'product' (a nil value)\nstack traceback:\n\t/tmp/tmporsn8byr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphna_h69y.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphna_h69y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = math.mod(n,\
    \ 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6un298v.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpx6un298v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwa7h8a8.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpvwa7h8a8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0mlhizz.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa0mlhizz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi7sm4zd.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmpdi7sm4zd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvo76qo4.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpqvo76qo4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local n1 = math.floor(n)\n\
    \  local n2 = math.floor(n/10)\n  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n\
    \  local n5 = math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local\
    \ n7 = math.floor(n/1000000)\n  local n8 = math.floor(n/10000000)\n  local n9\
    \ = math.floor(n/100000000)\n  local n10 = math.floor(n/1000000000)\n  local n11\
    \ = math.floor(n/10000000000)\n  local n12 = math.floor(n/100000000000)\n  local\
    \ n13 = math.floor(n/1000000000000)\n  local n14 = math.floor(n/10000000000000)\n\
    \  local n15 = math.floor(n/100000000000000)\n  local n16 = math.floor(n/1000000000000000)\n\
    \  local n17 = math.floor(n/10000000000000000)\n  local n18 = math.floor(n/100000000000000000)\n\
    \  local n19 = math.floor(n/100000000000000001)\n  local n20 = math.floor(n/100000000000000002)\n\
    \  local n21 = math.floor(n/100000000000000003)\n  local n22 = math.floor(n/100000000000000004)\n\
    \  local n23 = math.floor(n/100000000000000005)\n  local n24 = math.floor(n/100000000000000006)\n\
    \  local n25 = math.floor(n/100000000000000007)\n  local n26 = math.floor(n/100000000000000008)\n\
    \  local n27 = math.floor(n/100000000000000009)\n  local n28 = math.floor(n/100000000000000010)\n\
    \  local n29 = math.floor(n/100000000000000011)\n  local n30 = math.floor(n/100000000000000012)\n\
    \  local n31 = math.floor(n/100000000000000013)\n  local n32 = math.floor(n/100000000000000014)\n\
    \  local n33 = math.floor(n/100000000000000015)\n  local n34 = math.floor(n/100000000000000016)\n\
    \  local n35 = math.floor(n/100000000000000017)\n  local n36 = math.floor(n/100000000000000018)\n\
    \  local n37 = math.floor(n/100000000000000019)\n  local n38 = math.floor(n/100000000000000020)\n\
    \  local n39 = math.floor(n/100000000000000021)\n  local n40 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwgqp6t94.lua:48: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 10 then\n  \
    \  return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  else\n    return digits(n / 100) * 100 + digits(n % 100)\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6eyxc70c.lua:21:\
    \ expected: 5, actual: 58\nstack traceback:\n\t/tmp/tmp6eyxc70c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * math.floor(n/math.pow(10, i))\n\
    \      n = math.floor(n/math.pow(10, i))\n    end\n    return product\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l46w0c3.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3l46w0c3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    product = product * digit\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f9v91d7.lua:19:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmp6f9v91d7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local i = 1\n  while n > 0 do\n    product = product * i % 10\n    i = i +\
    \ 1\n    n = n / 10\n  end\n  return product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0mdr1wt.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmph0mdr1wt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nstr = tostring(n)\n\
    \  local digits = nstr:match(\"^%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp52_rkxua.lua:9: unfinished string near '\"^%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local result = 0\n  while n > 0 do\n    local digit = n %\
    \ 10\n    local remainder = n / 10\n    if remainder == 0 then\n      result =\
    \ result + digit\n    end\n    n = remainder\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s8iqkh5.lua:26:\
    \ expected: 5, actual: 4.9406564584125e-324\nstack traceback:\n\t/tmp/tmp6s8iqkh5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9ex37xx.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpn9ex37xx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = math.floor(n/2)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vcdnvzh.lua:22:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp7vcdnvzh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ n % 10\n    n = n / 10\n  end\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnbl4hvc.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmptnbl4hvc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
    \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * n % 10\n      n = n / 10\n    end\n\
    \    return product\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_hgoirr.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpq_hgoirr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
