language: lua
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local y = 1\n  while y < n do\n    if x % n\
    \ == 0 then\n      return false\n    end\n    y = y * n\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5hef30h.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_5hef30h.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 2\n  while i <= n do\n    if x %\
    \ i == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdbqmi7i.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprdbqmi7i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x,\
    \ n / 2) or is_simple_power(x, n / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gp8_6e3.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5gp8_6e3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (is_simple_power(x, n-1) and is_simple_power(x, n-1))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k2nhyvr.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1k2nhyvr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1z6evz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3f1z6evz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  elseif x == 0 then\n\
    \    return false\n  elseif n == 0 then\n    return false\n  elseif n == 1 then\n\
    \    return x == n\n  else\n    return is_simple_power(x, n-1) and is_simple_power(x*n,\
    \ n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebr9hbsj.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpebr9hbsj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if x ~= n then\n    return is_simple_power(x,\
    \ n-1)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x == 0 then\n    return false\n  end\n \
    \ if n == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokbpna54.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpokbpna54.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 0
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  elseif x == n then\n\
    \    return true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x\
    \ / n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x * x, n)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq3ufij2.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuq3ufij2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    local tmp = n\n    n = n / 2\n    if tmp == n then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1c492x2.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg1c492x2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  else\n    return is_simple_power(x^n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i < n do\n    i = i *\
    \ 2\n  end\n  return x == i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x_ssmqm.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1x_ssmqm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n < 0 then\n    return false\n  end\n  if\
    \ x < 1 then\n    return false\n  end\n  if x == 1 then\n    return true\n  end\n\
    \  if x == 0 then\n    return false\n  end\n  if x == -1 then\n    return false\n\
    \  end\n  if x == -2 then\n    return false\n  end\n  if x == -3 then\n    return\
    \ false\n  end\n  if x == -4 then\n    return false\n  end\n  if x == -5 then\n\
    \    return false\n  end\n  if x == -6 then\n    return false\n  end\n  if x ==\
    \ -7 then\n    return false\n  end\n  if x == -8 then\n    return false\n  end\n\
    \  if x == -9 then\n    return false\n  end\n  if x == -10 then\n    return false\n\
    \  end\n  if x == -11 then\n    return false\n  end\n  if x == -12 then\n    return\
    \ false\n  end\n  if x == -13 then\n    return false\n  end\n  if x == -14 then\n\
    \    return false\n  end\n  if x == -15 then\n    return false\n  end\n  if x\
    \ == -16 then\n    return false\n  end\n  if x == -17 then\n    return false\n\
    \  end\n  if x == -18 then\n    return false\n  end\n  if x == -19 then\n    return\
    \ false\n  end\n  if x == -20 then\n    return false\n  end\n  if x == -21 then\n\
    \    return false\n  end\n  if x == -22 then\n    return false\n  end\n  if x\
    \ == -23 then\n    return false\n  end\n  if x == -24 then\n    return false\n\
    \  end\n  if x == -25 then\n    return false\n  end\n  if x == -26 then\n    return\
    \ false\n  end\n  if x == -27 then\n    return false\n  end\n  if x == -28 then\n\
    \    return false\n  end\n  if x == -29 then\n    return false\n  end\n  if x\
    \ == -30 then\n    return false\n  end\n  if x == -31 then\n    return false\n\
    \  end\n  if x == -32 then\n    return false\n  end\n  if x == -33 then\n    return\
    \ false\n  end\n  if x == -34 then\n    return false\n  end\n  if x == -35 then\n\
    \    return false\n  end\n  if x == -36 then\n    return false\n  end\n  if x\
    \ == -37 then\n    return false\n  end\n  if x == -38 then\n    return false\n\
    \  end\n  if x == -39 then\n    return false\n  end\n  if x == -40 then\n    return\
    \ false\n  end\n  if x == -41 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfn_jg2ki.lua:169: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n == 1\n  else\n    return\
    \ x ~= n and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and\
    \ x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x)\
    \ and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~=\
    \ math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x)\
    \ and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~=\
    \ math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x)\
    \ and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~=\
    \ math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x)\
    \ and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~=\
    \ math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x)\
    \ and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~=\
    \ math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x)\
    \ and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~=\
    \ math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x)\
    \ and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~=\
    \ math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x)\
    \ and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~=\
    \ math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x)\
    \ and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x) and x ~=\
    \ math.floor(x) and x ~= math.ceil(x) and x ~= math.floor(x) and x ~= math.ceil(x)\
    \ and x ~= math.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnvt9u7ug.lua:16: ''end'' expected (to close ''if'' at line
    12) near ''=''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return n == 1 or (x % n == 0 and is_simple_power(x,\
    \ n-1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tqc2ng2.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8tqc2ng2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x == 0 then\n    return false\n  end\n \
    \ if n == 0 then\n    return false\n  end\n  if n % 2 == 1 then\n    return false\n\
    \  end\n  local i = 1\n  while i <= n do\n    if x % n == 0 then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10bpohcs.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp10bpohcs.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1z6evz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3f1z6evz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x == 0 then\n    return false\n  end\n \
    \ if n == 0 then\n    return false\n  end\n  if n == -1 then\n    return false\n\
    \  end\n  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return\
    \ false\n  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n\
    \    return false\n  end\n  if n == -6 then\n    return false\n  end\n  if n ==\
    \ -7 then\n    return false\n  end\n  if n == -8 then\n    return false\n  end\n\
    \  if n == -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n\
    \  end\n  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return\
    \ false\n  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n\
    \    return false\n  end\n  if n == -15 then\n    return false\n  end\n  if n\
    \ == -16 then\n    return false\n  end\n  if n == -17 then\n    return false\n\
    \  end\n  if n == -18 then\n    return false\n  end\n  if n == -19 then\n    return\
    \ false\n  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n\
    \    return false\n  end\n  if n == -22 then\n    return false\n  end\n  if n\
    \ == -23 then\n    return false\n  end\n  if n == -24 then\n    return false\n\
    \  end\n  if n == -25 then\n    return false\n  end\n  if n == -26 then\n    return\
    \ false\n  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n\
    \    return false\n  end\n  if n == -29 then\n    return false\n  end\n  if n\
    \ == -30 then\n    return false\n  end\n  if n == -31 then\n    return false\n\
    \  end\n  if n == -32 then\n    return false\n  end\n  if n == -33 then\n    return\
    \ false\n  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n\
    \    return false\n  end\n  if n == -36 then\n    return false\n  end\n  if n\
    \ == -37 then\n    return false\n  end\n  if n == -38 then\n    return false\n\
    \  end\n  if n == -39 then\n    return false\n  end\n  if n == -40 then\n    return\
    \ false\n  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n\
    \    return false\n  end\n  if n == -43 then\n    return false\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwg975wu8.lua:152: ''end'' expected (to close ''if'' at line
    150) near ''lu''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x\
    \ * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht4j2w37.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpht4j2w37.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n % x == 0 then\n    return false\n  end\n\
    \  local i = 1\n  while i * i <= n do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpak2zg2xg.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpak2zg2xg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv98fxhri.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv98fxhri.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ n\n    n = n / 2\n  end\n  return x == r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoqdgs2g.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuoqdgs2g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == -1 then return false end\n  if n == -2 then return false\
    \ end\n  if n == -3 then return false end\n  if n == -4 then return false end\n\
    \  if n == -5 then return false end\n  if n == -6 then return false end\n  if\
    \ n == -7 then return false end\n  if n == -8 then return false end\n  if n ==\
    \ -9 then return false end\n  if n == -10 then return false end\n  if n == -11\
    \ then return false end\n  if n == -12 then return false end\n  if n == -13 then\
    \ return false end\n  if n == -14 then return false end\n  if n == -15 then return\
    \ false end\n  if n == -16 then return false end\n  if n == -17 then return false\
    \ end\n  if n == -18 then return false end\n  if n == -19 then return false end\n\
    \  if n == -20 then return false end\n  if n == -21 then return false end\n  if\
    \ n == -22 then return false end\n  if n == -23 then return false end\n  if n\
    \ == -24 then return false end\n  if n == -25 then return false end\n  if n ==\
    \ -26 then return false end\n  if n == -27 then return false end\n  if n == -28\
    \ then return false end\n  if n == -29 then return false end\n  if n == -30 then\
    \ return false end\n  if n == -31 then return false end\n  if n == -32 then return\
    \ false end\n  if n == -33 then return false end\n  if n == -34 then return false\
    \ end\n  if n == -35 then return false end\n  if n == -36 then return false end\n\
    \  if n == -37 then return false end\n  if n == -38 then return false end\n  if\
    \ n == -39 then return false end\n  if n == -40 then return false end\n  if n\
    \ == -41 then return false end\n  if n == -42 then return false end\n  if n ==\
    \ -43 then return false end\n  if n == -44 then return false end\n  if n == -45\
    \ then return false end\n  if n == -46 then return false end\n  if n == -47 then\
    \ return false end\n  if n == -48 then return false end\n  if n == -49 then return\
    \ false end\n  if n == -50 then return false end\n  if n == -51 then return false\
    \ end\n  if n == -52 then return false end\n  if n == -53 then return false end\n\
    \  if n == -54 then return false end\n  if n == -\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp45iyqy5j.lua:69: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x//n, n) or is_simple_power(x,\
    \ n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw42wq80p.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpw42wq80p.lua:17:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpw42wq80p.lua:17:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpw42wq80p.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpw42wq80p.lua:17:\
    \ in upvalue 'is_simple_power'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpw42wq80p.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpw42wq80p.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x//n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8zsdh9w.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8zsdh9w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x * x, n)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq3ufij2.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuq3ufij2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n <= 1 then\n    return false\n  end\n \
    \ local i = 1\n  while i <= n do\n    if x ~= n and x % n == 0 then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8flruafx.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8flruafx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ x == n^int(x)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy71admox.lua:15:\
    \ attempt to call a nil value (global 'int')\nstack traceback:\n\t/tmp/tmpy71admox.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpy71admox.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ x == n^x\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy177nx.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfiy177nx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == -1 then return false end\n  if n == -2 then return false\
    \ end\n  if n == -3 then return false end\n  if n == -4 then return false end\n\
    \  if n == -5 then return false end\n  if n == -6 then return false end\n  if\
    \ n == -7 then return false end\n  if n == -8 then return false end\n  if n ==\
    \ -9 then return false end\n  if n == -10 then return false end\n  if n == -11\
    \ then return false end\n  if n == -12 then return false end\n  if n == -13 then\
    \ return false end\n  if n == -14 then return false end\n  if n == -15 then return\
    \ false end\n  if n == -16 then return false end\n  if n == -17 then return false\
    \ end\n  if n == -18 then return false end\n  if n == -19 then return false end\n\
    \  if n == -20 then return false end\n  if n == -21 then return false end\n  if\
    \ n == -22 then return false end\n  if n == -23 then return false end\n  if n\
    \ == -24 then return false end\n  if n == -25 then return false end\n  if n ==\
    \ -26 then return false end\n  if n == -27 then return false end\n  if n == -28\
    \ then return false end\n  if n == -29 then return false end\n  if n == -30 then\
    \ return false end\n  if n == -31 then return false end\n  if n == -32 then return\
    \ false end\n  if n == -33 then return false end\n  if n == -34 then return false\
    \ end\n  if n == -35 then return false end\n  if n == -36 then return false end\n\
    \  if n == -37 then return false end\n  if n == -38 then return false end\n  if\
    \ n == -39 then return false end\n  if n == -40 then return false end\n  if n\
    \ == -41 then return false end\n  if n == -42 then return false end\n  if n ==\
    \ -43 then return false end\n  if n == -44 then return false end\n  if n == -45\
    \ then return false end\n  if n == -46 then return false end\n  if n == -47 then\
    \ return false end\n  if n == -48 then return false end\n  if n == -49 then return\
    \ false end\n  if n == -50 then return false end\n  if n == -51 then return false\
    \ end\n  if n == -52 then return false end\n  if n == -53 then return false end\n\
    \  if n == -54 then return false end\n  if n == -\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp45iyqy5j.lua:69: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgqkx_lge.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == 1 then return x == n end\n  if n % 2 == 0 then\n    return\
    \ is_simple_power(x * x, n / 2)\n  else\n    return is_simple_power(x * x, (n\
    \ - 1) / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2skc90d.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_2skc90d.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 0 do\n    r = r *\
    \ x\n    local tmp = n\n    n = n / 2\n    if tmp == n then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5avg21wj.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5avg21wj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  else\n    return\
    \ ((x % n) == 0 and is_simple_power(x / n, n)) or (x ~= 1 and is_simple_power(x,\
    \ n))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcfv8ifr.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\t/tmp/tmpfcfv8ifr.lua:15:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\t/tmp/tmpfcfv8ifr.lua:15:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpfcfv8ifr.lua:15: in upvalue 'is_simple_power'\n\t/tmp/tmpfcfv8ifr.lua:15:\
    \ in upvalue 'is_simple_power'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpfcfv8ifr.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfcfv8ifr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.290 seconds, 0 successes, 1 error\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x %\
    \ n == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbolcugqi.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbolcugqi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ true end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  if n\
    \ % 3 == 0 then return is_simple_power(x, n / 3) end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i4c0mok.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3i4c0mok.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n > 1 do\n    r = r *\
    \ x\n    n = n - 1\n  end\n  return r == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi21jvlv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgi21jvlv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n == -1 then return false end\n  if n % 2 == 0 then return is_simple_power(x,\
    \ n / 2) end\n  if x % n == 0 then return true end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcotyzgx.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplcotyzgx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ x == n^x\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiy177nx.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfiy177nx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii8jad5w.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii8jad5w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n == 2 then\n    return x == 1\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x, (n - 1) / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8c99wpyr.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8c99wpyr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ x == 1 end\n  if n % 2 == 0 then\n    return is_simple_power(x, n / 2) or is_simple_power(x\
    \ * x, n / 2)\n  else\n    return is_simple_power(x * x, n / 2)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrgj87qq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjrgj87qq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ * x, n / 2)\n  end\n  return is_simple_power(x * x, (n - 1) / 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0u8js46.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm0u8js46.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return x == n\
    \ end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9by77x3b.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9by77x3b.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n % 2 == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x,\
    \ n / 2) or is_simple_power(x, n / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gp8_6e3.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5gp8_6e3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    x = n / n\n    n = x\n  end\n  return r == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg1lm6a_.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyg1lm6a_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1z6evz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3f1z6evz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ true end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9slbc6wf.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9slbc6wf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n ~= x then\n    return false\n  end\n \
    \ local result = 1\n  while n ~= 1 do\n    if n % 2 == 1 then\n      result =\
    \ result * n\n    end\n    n = n / 2\n  end\n  return result == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2ech4yt.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn2ech4yt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgqkx_lge.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii8jad5w.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii8jad5w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then return true end\n \
    \ if x == 0 then return false end\n  if n == 0 then return false end\n  if n ==\
    \ 1 then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1y14r993.lua:33: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (is_simple_power(x, n-1) and is_simple_power(x, n-1))\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k2nhyvr.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1k2nhyvr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return math.pow(x, n) == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplk_2ei5o.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplk_2ei5o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == 1) or (x == n) or (x%n == 0)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygz1i97v.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpygz1i97v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjivinhev.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjivinhev.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n > 1 do\n    r = r *\
    \ x\n    n = n - 1\n  end\n  return r == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi21jvlv.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgi21jvlv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x^n, n-1)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw43kftq.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnw43kftq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1z6evz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3f1z6evz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ x == 1 end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk8o7r4o.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbk8o7r4o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return true\n \
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqgmyg6ed.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x < n then\n    return false\n  else\n    return\
    \ is_simple_power(x%n, n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7usbo8n.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa7usbo8n.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    x = n / x\n    n = x\n  end\n  return r == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8on1zt0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo8on1zt0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x%n, n-1) or is_simple_power(x,\
    \ n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn3i2ykp.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzn3i2ykp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return power == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f1z6evz.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3f1z6evz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return true end\n  if n == 1 then return\
    \ x == 1 end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4ivuy9x.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4ivuy9x.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x^n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x\
    \ * x, n / 2)\n  else\n    return is_simple_power(x * x, (n - 1) / 2)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc9x5u6w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsc9x5u6w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if x == 1 then\n    return n == 1\n\
    \  else\n    -- Recursive case\n    return is_simple_power(x%n, n) or is_simple_power(x,\
    \ n-1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7k0lrki.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpu7k0lrki.lua:17:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpu7k0lrki.lua:17:\
    \ in upvalue 'is_simple_power'\n\t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\
    \t/tmp/tmpu7k0lrki.lua:17: in upvalue 'is_simple_power'\n\t/tmp/tmpu7k0lrki.lua:17:\
    \ in upvalue 'is_simple_power'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpu7k0lrki.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpu7k0lrki.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return is_simple_power(x\
    \ / n, n)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbbtm486.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprbbtm486.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if x == 1 then\n    return true\n  end\n  if\
    \ x == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8m9v22o.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn8m9v22o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return true end\n  if n == 1 then return\
    \ x == 1 end\n  if n == -1 then return x == -1 end\n  if n == -2 then return x\
    \ == -2 end\n  if n == -3 then return x == -3 end\n  if n == -4 then return x\
    \ == -4 end\n  if n == -5 then return x == -5 end\n  if n == -6 then return x\
    \ == -6 end\n  if n == -7 then return x == -7 end\n  if n == -8 then return x\
    \ == -8 end\n  if n == -9 then return x == -9 end\n  if n == -10 then return x\
    \ == -10 end\n  if n == -11 then return x == -11 end\n  if n == -12 then return\
    \ x == -12 end\n  if n == -13 then return x == -13 end\n  if n == -14 then return\
    \ x == -14 end\n  if n == -15 then return x == -15 end\n  if n == -16 then return\
    \ x == -16 end\n  if n == -17 then return x == -17 end\n  if n == -18 then return\
    \ x == -18 end\n  if n == -19 then return x == -19 end\n  if n == -20 then return\
    \ x == -20 end\n  if n == -21 then return x == -21 end\n  if n == -22 then return\
    \ x == -22 end\n  if n == -23 then return x == -23 end\n  if n == -24 then return\
    \ x == -24 end\n  if n == -25 then return x == -25 end\n  if n == -26 then return\
    \ x == -26 end\n  if n == -27 then return x == -27 end\n  if n == -28 then return\
    \ x == -28 end\n  if n == -29 then return x == -29 end\n  if n == -30 then return\
    \ x == -30 end\n  if n == -31 then return x == -31 end\n  if n == -32 then return\
    \ x == -32 end\n  if n == -33 then return x == -33 end\n  if n == -34 then return\
    \ x == -34 end\n  if n == -35 then return x == -35 end\n  if n == -36 then return\
    \ x == -36 end\n  if n == -37 then return x == -37 end\n  if n == -38 then return\
    \ x == -38 end\n  if n == -39 then return x == -39 end\n  if n == -40 then return\
    \ x == -40 end\n  if n == -41 then return x == -41 end\n  if n == -42 then return\
    \ x == -42 end\n  if n == -43 then return x == -43 end\n  if n == -44 then return\
    \ x == -44 end\n  if n == -45 then return x == \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpys4g6p2f.lua:59: ''end'' expected (to close ''if'' at line
    58) near ''=''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if x == n then return\
    \ true end\n  if x ~= n then return false end\n  local power = 1\n  while n ~=\
    \ 1 do\n    power = power * n\n    n = math.floor(n/n)\n    if n == 1 then return\
    \ true end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur3mwwam.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpur3mwwam.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x == n^int(x)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7p76xh_x.lua:15:\
    \ attempt to call a nil value (global 'int')\nstack traceback:\n\t/tmp/tmp7p76xh_x.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7p76xh_x.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgeshf4sm.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    local t\
    \ = x\n    x = x * x\n    if x == t then\n      return true\n    end\n    i =\
    \ i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xfhx6lm.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4xfhx6lm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return x == n\
    \ end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  if n % 3 ==\
    \ 0 then return is_simple_power(x, n / 3) end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmnr97v9.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqmnr97v9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  elseif n == 0 then\n    return false\n  else\n    return\
    \ is_simple_power(x^n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x//n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8zsdh9w.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8zsdh9w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while n > power do\n   \
    \ power = power * 2\n  end\n  local result = true\n  for i = 1, power do\n   \
    \ if x % i == 0 then\n      result = false\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9enlbrv.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk9enlbrv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv98fxhri.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv98fxhri.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i * i <= n do\n    if\
    \ x * i == n then\n      return true\n    end\n    i = i + 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rga09ye.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5rga09ye.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf96431sj.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf96431sj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if x == 1 then return\
    \ false end\n  if x == 0 then return false end\n  if n % 2 == 0 then return is_simple_power(x\
    \ / 2, n) end\n  if n % 3 == 0 then return is_simple_power(x / 3, n) end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluiek0re.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpluiek0re.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x == n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf69egb8q.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf69egb8q.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    local r\
    \ = x\n    x = r * x\n    i = i + 1\n  end\n  return x == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2absr39r.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2absr39r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\n  -- Recursive case\n  if x % n == 0 then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjivinhev.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjivinhev.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i * i <= n do\n    if\
    \ x%i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u8v79qo.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7u8v79qo.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii8jad5w.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii8jad5w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return n == 1\n  else\n    return\
    \ ((n % 2) == 0 and (x % n) == 0) or\n           ((n % 2) == 1 and (x % n) ==\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_zm_h7w.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz_zm_h7w.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then\n    return true\n  end\n  if x == 0\
    \ then\n    return false\n  end\n  if n == 0 then\n    return false\n  end\n \
    \ if n == 1 then\n    return x == n\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ua7wtio.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ua7wtio.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ true end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9slbc6wf.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9slbc6wf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  if x % n == 0 then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvs8cd42.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkvs8cd42.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x == n*n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsawzom78.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsawzom78.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  else\n    return\
    \ (x == n) or (x % n == 0)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh12p3ua.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeh12p3ua.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 0 then return false end\n  if n == 1 then return\
    \ true end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9slbc6wf.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9slbc6wf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if x == 1\
    \ then\n    return false\n  end\n  if x ~= n then\n    return false\n  end\n \
    \ return is_simple_power(x / n, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55a7q042.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp55a7q042.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local power = 1\n  while power < n do\n   \
    \ power = power * x\n  end\n  return x == power\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaomhkth9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaomhkth9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n ~= math.floor(n) then\n    return false\n\
    \  end\n  local r = 1\n  while n > 1 do\n    r = r * x\n    n = n - 1\n  end\n\
    \  return r == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs392gx_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxs392gx_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif n < 0 then\n\
    \    return false\n  elseif n == 0 then\n    return false\n  else\n    return\
    \ is_simple_power(x^n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base case\n  if n == 1 then\n    return x == 1\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgeshf4sm.lua:32: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n ~= 1 do\n    r = r *\
    \ x\n    x = n / x\n    n = x\n  end\n  return r == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8on1zt0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo8on1zt0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x%i\
    \ == 0 then\n      return false\n    end\n    i = i * 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii8jad5w.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii8jad5w.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n == -1 then\n    return false\n  end\n\
    \  if n == -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n\
    \  end\n  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return\
    \ false\n  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n\
    \    return false\n  end\n  if n == -8 then\n    return false\n  end\n  if n ==\
    \ -9 then\n    return false\n  end\n  if n == -10 then\n    return false\n  end\n\
    \  if n == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4bd_y7a2.lua:168: ''end'' expected (to close ''if'' at line
    150) near <eof>

    '
  stdout: ''
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return n == 1\n\
    \  elseif x == 0 then\n    return false\n  elseif n == 0 then\n    return false\n\
    \  elseif n == 1 then\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4zw1thqw.lua:38: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  -- Base cases\n  if x == 1 then\n    return n == 1\n\
    \  elseif x == n then\n    return true\n  else\n    -- Recursion\n    return is_simple_power(x\
    \ % n, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local i = 1\n  while i <= n do\n    if x %\
    \ n == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbolcugqi.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbolcugqi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x//n, n)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8zsdh9w.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8zsdh9w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ata9553.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ata9553.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == 1 then return true end\n  if x == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n == 1 then return x == n\
    \ end\n  if n == -1 then return x == n end\n  if n == -2 then return x == n end\n\
    \  if n == -3 then return x == n end\n  if n == -4 then return x == n end\n  if\
    \ n == -5 then return x == n end\n  if n == -6 then return x == n end\n  if n\
    \ == -7 then return x == n end\n  if n == -8 then return x == n end\n  if n ==\
    \ -9 then return x == n end\n  if n == -10 then return x == n end\n  if n == -11\
    \ then return x == n end\n  if n == -12 then return x == n end\n  if n == -13\
    \ then return x == n end\n  if n == -14 then return x == n end\n  if n == -15\
    \ then return x == n end\n  if n == -16 then return x == n end\n  if n == -17\
    \ then return x == n end\n  if n == -18 then return x == n end\n  if n == -19\
    \ then return x == n end\n  if n == -20 then return x == n end\n  if n == -21\
    \ then return x == n end\n  if n == -22 then return x == n end\n  if n == -23\
    \ then return x == n end\n  if n == -24 then return x == n end\n  if n == -25\
    \ then return x == n end\n  if n == -26 then return x == n end\n  if n == -27\
    \ then return x == n end\n  if n == -28 then return x == n end\n  if n == -29\
    \ then return x == n end\n  if n == -30 then return x == n end\n  if n == -31\
    \ then return x == n end\n  if n == -32 then return x == n end\n  if n == -33\
    \ then return x == n end\n  if n == -34 then return x == n end\n  if n == -35\
    \ then return x == n end\n  if n == -36 then return x == n end\n  if n == -37\
    \ then return x == n end\n  if n == -38 then return x == n end\n  if n == -39\
    \ then return x == n end\n  if n == -40 then return x == n end\n  if n == -41\
    \ then return x == n end\n  if n == -42 then return x == n end\n  if n == -43\
    \ then return x == n end\n  if n == -44 then return x == n end\n  if n == -45\
    \ then return x == n end\n  if n == -46 then return x == n end\n  if n == -47\
    \ then return x == n end\n  if n == -48 \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg4gfi_ew.lua:64: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return true\n  end\n  if n == 0\
    \ then\n    return false\n  end\n  if n ~= 1 then\n    return is_simple_power(x^n,\
    \ n)\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659793884
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  end\n  if x ~= n\
    \ then\n    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if\
    \ n == 0 then\n    return false\n  end\n  if n < 0 then\n    return false\n  end\n\
    \  local i = 1\n  while i <= n do\n    if x % n == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxdhyghh.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprxdhyghh.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then return true end\n  if n == 0 then return\
    \ false end\n  if n % 2 == 0 then return is_simple_power(x, n / 2) end\n  return\
    \ is_simple_power(x * x, n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n\
    \    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67ab5xvt.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp67ab5xvt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  return (x == 1) or (x == n) or (x == n*n)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfspljyeh.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfspljyeh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoky5i.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0uoky5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_simple_power\n    lu.assertEquals(candidate(16,\
    \ 2), true)\n    lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2xc9nl8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm2xc9nl8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x == n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_simple_power\n    lu.assertEquals(candidate(16, 2), true)\n \
    \   lu.assertEquals(candidate(143214, 16), false)\n    lu.assertEquals(candidate(4,\
    \ 2), true)\n    lu.assertEquals(candidate(9, 3), true)\n    lu.assertEquals(candidate(16,\
    \ 4), true)\n    lu.assertEquals(candidate(24, 2), false)\n    lu.assertEquals(candidate(128,\
    \ 4), false)\n    lu.assertEquals(candidate(12, 6), false)\n    lu.assertEquals(candidate(1,\
    \ 1), true)\n    lu.assertEquals(candidate(1, 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf69egb8q.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf69egb8q.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793879
- exit_code: -1
  program: "-- Your task is to write a function that returns true if a number x is\
    \ a simple\n-- power of n and false in other cases.\n-- x is a simple power of\
    \ n if n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
    \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
    -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
    \ is_simple_power(x, n)\n  if x == n then\n    return true\n  elseif x < n then\n\
    \    return false\n  else\n    return is_simple_power(x, n-1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
    \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
    \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
    \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
    \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
    \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
    \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
