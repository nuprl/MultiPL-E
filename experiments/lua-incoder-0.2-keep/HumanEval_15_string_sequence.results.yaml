language: lua
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. tostring(i)\n  end\n  return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwq0ursf.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptwq0ursf.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. tostring(i)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey2etz8d.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpey2etz8d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. tostring(i) .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto0uv7xe.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpto0uv7xe.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. tostring(i)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey2etz8d.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpey2etz8d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. tostring(i)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp836a4dpu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp836a4dpu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. tostring(i) .. ' '\n  end\n  return str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgupta7qb.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgupta7qb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. tostring(i) .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto0uv7xe.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpto0uv7xe.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local s = ''\n  for i =\
    \ 1, n do\n    s = s .. ' ' .. i\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2srhy22g.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp2srhy22g.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n-- >>> string_sequence(0)\n-- '0'\n-- >>> string_sequence(5)\n\
    -- '0 1 2 3 4 5'\nlocal function string_sequence(n)\n  local str = ''\n  for i\
    \ = 1, n do\n    str = str .. ' ' .. i\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h9uvcfu.lua:17:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4h9uvcfu.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
