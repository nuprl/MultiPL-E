language: lua
name: HumanEval_159_eat
results:
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMeals\
    \ = 0\n    while carrotsLeft > 0 do\n        carrotsLeftAfterMeals = carrotsLeft\
    \ - carrots\n        carrotsLeftAfterMealsAfterMeals = carrotsLeftAfterMeals -\
    \ carrotsLeftAfterMeals\n        carrots = carrots - carrotsLeft\n        carrotsLeft\
    \ = carrotsLeft - carrotsLeftAfterMeals\n    end\n    if carrotsLeftAfterMeals\
    \ > 0 then\n        carrotsLeftAfterMeals = carrotsLeftAfterMeals - carrotsLeftAfterMealsAfterMeals\n\
    \    end\n    return carrotsLeftAfterMeals, carrotsLeftAfterMealsAfterMeals\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk3a2_q2.lua:43:\
    \ expected: {11, 4}\nactual: 6\nstack traceback:\n\t/tmp/tmpnk3a2_q2.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftToEat = 0\n    local carrotsLeftToEatArray = {}\n\
    \    local carrotsLeftToEatArrayIndex = 0\n    local carrotsLeftToEatArrayLength\
    \ = 0\n    while carrotsLeft > 0 do\n        carrotsLeftToEatArray[carrotsLeftToEatArrayIndex]\
    \ = carrotsLeft\n        carrotsLeftToEatArrayIndex = carrotsLeftToEatArrayIndex\
    \ + 1\n        carrotsLeftToEatArrayLength = carrotsLeftToEatArrayLength + 1\n\
    \        carrotsLeft = carrotsLeft - 1\n    end\n    local carrotsLeftToEatArrayLength\
    \ = carrotsLeftToEatArrayLength - 1\n    local carrotsLeftToEatArray = carrotsLeftToEatArray[carrotsLeftToEatArrayLength]\n\
    \    while carrotsLeftToEatArray > 0 do\n        carrotsLeft = carrotsLeft - 1\n\
    \        carrotsLeftToEat = carrotsLeftToEat + 1\n    end\n    local carrotsLeftToEat\
    \ = carrotsLeftToEat - 1\n    local carrotsLeftToEatArrayIndex = carrotsLeftToEatArrayIndex\
    \ - 1\n    local carrotsLeftToEatArray = carrotsLeftToEatArray[carrotsLeftToEatArrayIndex]\n\
    \    local carrotsLeftToEatArrayLength = carrotsLeftToEatArrayLength - 1\n   \
    \ local carrotsLeftToEatArray = carrotsLeftToEatArray[carrotsLeftToEatArrayLength]\n\
    \    local carrotsLeftToEatArrayIndex = carrotsLeftToEatArrayIndex - 1\n    local\
    \ carrotsLeftToEatArray = carrotsLeftToEatArray[carrotsLeftToEatArrayIndex]\n\
    \    local carrotsLeftToEatArrayLength = carrotsLeftToEatArrayLength - 1\n   \
    \ local carrotsLeftToEatArray = carrotsLeftToEatArray[carrotsLeftToEatArrayLength]\n\
    \    local carrotsLeftToEatArrayIndex = carrotsLeftToEatArrayIndex - 1\n    local\
    \ carrotsLeftToEatArray = carro\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp09lx3r7p.lua:65: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMe\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk33e4e57.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local needs =\
    \ need\n    local remaining = remaining\n    local carrotsLeft = 0\n    local\
    \ carrotsTaken = 0\n    local carrotsTakenLeft = 0\n    local carrotsTakenRight\
    \ = 0\n    local carrotsTakenRightLeft = 0\n    local carrotsTakenLeftRight =\
    \ 0\n    local carrotsTakenRightLeftLeft = 0\n    local carrotsTakenLeftRightLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeft = 0\n    local\
    \ carrotsTakenLeftRightLeftLeftLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeft = 0\n    local\
    \ carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n \
    \   local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local\
    \ carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n \
    \   local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local\
    \ carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n \
    \   local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local\
    \ carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeftLeft\
    \ = 0\n    local carrotsTakenLeftRightLeftLeftLeftLeftLeftLeftLeft\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpco56vy7m.lua:70: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = carrots\n    local carrotsLeftAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMeals = carrots\n  \
    \  local carrotsLeftAfterMealsRemainingAfterMealsRemaining = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMeals = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining = carrots\n\
    \    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemain\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjp72vvp8.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local meals =\
    \ need\n    local carrotsLeft = remaining\n    local carrotsLeftAfterMeals = 0\n\
    \    local carrotsLeftAfterMealsAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMeals = 0\n   \
    \ local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals = 0\n  \
    \  local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfter\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe1m2o_58.lua:55: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local remaining\
    \ = remaining\n    local meals = 0\n    while carrots > 0 and remaining > 0 and\
    \ meals < 1000 and meals < remaining do\n        carrots = carrots - 1\n     \
    \   remaining = remaining - 1\n        meals = meals + 1\n    end\n    if carrots\
    \ > 0 and meals < 1000 and meals < remaining then\n        carrots = carrots -\
    \ 1\n        remaining = remaining - 1\n        meals = meals + 1\n    end\n \
    \   if carrots > 0 and meals < 1000 and meals < remaining then\n        carrots\
    \ = carrots - 1\n        remaining = remaining - 1\n        meals = meals + 1\n\
    \    end\n    if carrots > 0 and meals < 1000 and meals < remaining then\n   \
    \     carrots = carrots - 1\n        remaining = remaining - 1\n        meals\
    \ = meals + 1\n    end\n    if carrots > 0 and meals < 1000 and meals < remaining\
    \ then\n        carrots = carrots - 1\n        remaining = remaining - 1\n   \
    \     meals = meals + 1\n    end\n    if carrots > 0 and meals < 1000 and meals\
    \ < remaining then\n        carrots = carrots - 1\n        remaining = remaining\
    \ - 1\n        meals = meals + 1\n    end\n    if carrots > 0 and meals < 1000\
    \ and meals < remaining then\n        carrots = carrots - 1\n        remaining\
    \ = remaining - 1\n        meals = meals + 1\n    end\n    if carrots > 0 and\
    \ meals < 1000 and meals < remaining then\n        carrots = carrots - 1\n   \
    \     remaining = remaining - 1\n        meals = meals + 1\n    end\n    if carrots\
    \ > 0 and meals < 1000 and meals < remaining then\n        carrots = carrots -\
    \ 1\n        remaining = remaining - 1\n        meals = meals + 1\n    end\n \
    \   if carrots > 0 and meals < 1000 and meals < remaining then\n        carrots\
    \ = carrots - 1\n        remaining = remaining - 1\n        meals = meals + 1\n\
    \    end\n    if carrots > 0 and meals < 1000 and meals < remaining then\n   \
    \     carrots = carrots - 1\n        remaining = remaining - 1\n        meals\
    \ = meals + 1\n    end\n    if carrots > 0 and meals < 1000 and meals < remaining\
    \ then\n        carrots = carrots - 1\n        remaining = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpygdeu0z2.lua:85: unexpected symbol near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMe\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxrfasau5.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMeals\
    \ = 0\n    local carrotsLeftAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMealsAfterMe\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk33e4e57.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = carrots\n    local carrotsLeftAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMeals = carrots\n  \
    \  local carrotsLeftAfterMealsRemainingAfterMealsRemaining = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMeals = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining = carrots\n\
    \    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemain\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjp72vvp8.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local meals =\
    \ need\n    local remaining = remaining\n    local carrots_left = remaining\n\
    \    local carrots_eaten = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local carrots_left = 0\n    local carrots_left = 0\n    local carrots_left\
    \ = 0\n    local car\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9p080u77.lua:101: ''end'' expected (to close ''function''
    at line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local result = {}\n    if number > 1000 then\n\
    \        number = 1000\n    end\n    if need > 1000 then\n        need = 1000\n\
    \    end\n    if remaining > 1000 then\n        remaining = 1000\n    end\n  \
    \  local carrots = number\n    local carrots_left = remaining\n    while carrots\
    \ > 0 do\n        if carrots_left == 0 then\n            result[1] = carrots\n\
    \            result[2] = carrots_left\n            carrots = number\n        \
    \    carrots_left = remaining\n        else\n            carrots = carrots - 1\n\
    \            carrots_left = carrots_left - 1\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9cuy7_q.lua:53:\
    \ expected: {11, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpr9cuy7_q.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local total = 0\n    local left = 0\n    for\
    \ i = 1, number do\n        total = total + i\n        if total >= need then\n\
    \            total = total - need\n            left = left + 1\n        end\n\
    \    end\n    if left > 0 then\n        total = total + left\n    end\n    return\
    \ total, left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjnnrk87.lua:42:\
    \ expected: {11, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmptjnnrk87.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = 0\n    local carrotsLeftAfterMealsAfterMeals\
    \ = 0\n    while carrots > 0 do\n        if carrotsLeft > 0 then\n           \
    \ carrotsLeftAfterMeals = carrotsLeft\n            carrotsLeftAfterMealsAfterMeals\
    \ = carrotsLeftAfterMeals + carrotsLeft\n            carrots = carrots - 1\n \
    \       else\n            carrotsLeftAfterMeals = carrotsLeft\n            carrotsLeftAfterMealsAfterMeals\
    \ = carrotsLeftAfterMeals + carrotsLeft\n            carrots = carrots - 1\n \
    \       end\n    end\n    if carrotsLeftAfterMeals > 0 then\n        carrotsLeftAfterMeals\
    \ = carrotsLeftAfterMeals + carrotsLeftAfterMealsAfterMeals\n    end\n    return\
    \ carrotsLeftAfterMeals, carrotsLeftAfterMeals\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjlxk2q4.lua:48:\
    \ expected: {11, 4}\nactual: 18\nstack traceback:\n\t/tmp/tmpkjlxk2q4.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local remaining\
    \ = remaining\n    local meals = 0\n    local mealsleft = 0\n    while carrots\
    \ > 0 and remaining > 0 and mealsleft < need do\n        carrots = carrots - 1\n\
    \        remaining = remaining - 1\n        meals = meals + 1\n        mealsleft\
    \ = mealsleft + carrots\n    end\n    if carrots > 0 then\n        carrots = carrots\
    \ - 1\n    end\n    if remaining > 0 then\n        remaining = remaining - 1\n\
    \    end\n    return meals, carrots\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9x6l1e2.lua:46:\
    \ expected: {11, 4}\nactual: 2\nstack traceback:\n\t/tmp/tmps9x6l1e2.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = carrots\n    local carrotsLeftAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMeals = carrots\n  \
    \  local carrotsLeftAfterMealsRemainingAfterMealsRemaining = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMeals = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining = carrots\n\
    \    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemain\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjp72vvp8.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsNeeded\
    \ = need\n    local carrotsRemaining = remaining\n    local carrotsLeft = 0\n\
    \    local carrotsTaken = 0\n    local carrotsTakenBefore = 0\n    local carrotsTakenAfter\
    \ = 0\n    local carrotsTakenAfterLeft = 0\n    local carrotsTakenAfterRight =\
    \ 0\n    local carrotsTakenBeforeLeft = 0\n    local carrotsTakenBeforeRight =\
    \ 0\n    local carrotsTakenBeforeLeftRight = 0\n    local carrotsTakenAfterLeft\
    \ = 0\n    local carrotsTakenAfterRight = 0\n    local carrotsTakenBeforeLeft\
    \ = 0\n    local carrotsTakenBeforeRight = 0\n    local carrotsTakenBeforeLeftRight\
    \ = 0\n    local carrotsTakenAfterLeft = 0\n    local carrotsTakenAfterRight =\
    \ 0\n    local carrotsTakenBeforeLeft = 0\n    local carrotsTakenBeforeRight =\
    \ 0\n    local carrotsTakenBeforeLeftRight = 0\n    local carrotsTakenAfterLeft\
    \ = 0\n    local carrotsTakenAfterRight = 0\n    local carrotsTakenBeforeLeft\
    \ = 0\n    local carrotsTakenBeforeRight = 0\n    local carrotsTakenBeforeLeftRight\
    \ = 0\n    local carrotsTakenAfterLeft = 0\n    local carrotsTakenAfterRight =\
    \ 0\n    local carrotsTakenBeforeLeft = 0\n    local carrotsTakenBeforeRight =\
    \ 0\n    local carrotsTakenBeforeLeftRight = 0\n    local carrotsTakenAfterLeft\
    \ = 0\n    local carrotsTakenAfterRight = 0\n    local carrotsTakenBeforeLeft\
    \ = 0\n    local carrotsTakenBeforeRight = 0\n    local carrotsTakenBeforeLeftRight\
    \ = 0\n    local carrotsTakenAfterLeft = 0\n    local carrotsTakenAfterRight =\
    \ 0\n    local carrotsTakenBeforeLeft = 0\n    local carrotsTakenBeforeRight =\
    \ 0\n    local carrotsTakenBeforeLeftRight = 0\n    local carrotsTakenAfterLeft\
    \ = 0\n    local carrotsTakenAfterRight = 0\n    local carrotsTakenBeforeLeft\
    \ = 0\n    local carrotsTakenBeforeRight = 0\n    local carrotsTakenBeforeLeftRight\
    \ = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1se6nq4u.lua:84: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local carrotsLeft\
    \ = need\n    local carrotsLeftAfterMeals = carrots\n    local carrotsLeftAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMeals = carrots\n  \
    \  local carrotsLeftAfterMealsRemainingAfterMealsRemaining = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMeals = carrots\n    local\
    \ carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining = carrots\n\
    \    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemaining\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMeals\
    \ = carrots\n    local carrotsLeftAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemainingAfterMealsRemain\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjp72vvp8.lua:54: ''end'' expected (to close ''function'' at
    line 23) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n    local carrots = number\n    local remaining\
    \ = remaining\n    local meals = 0\n    while carrots > 0 do\n        if remaining\
    \ > 0 then\n            carrots = carrots - 1\n            remaining = remaining\
    \ - 1\n        else\n            carrots = carrots + 1\n            remaining\
    \ = need\n            meals = meals + 1\n        end\n    end\n    return meals,\
    \ remaining\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglvbml82.lua:43:\
    \ expected: {11, 4}\nactual: 0\nstack traceback:\n\t/tmp/tmpglvbml82.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return an array of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
    \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
    -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
    \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of\
    \ remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n\
    -- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function\
    \ eat(number, need, remaining)\n  local result = {}\n  local carrots = number\n\
    \  local remaining = remaining\n  while carrots > 0 do\n    local carrots_left\
    \ = math.min(need, carrots)\n    local carrots_eaten = math.min(math.floor(carrots_left\
    \ / 2), carrots)\n    carrots = carrots - carrots_eaten\n    need = need - carrots_eaten\n\
    \    remaining = remaining + carrots_eaten\n    result[#result + 1] = carrots_eaten\n\
    \  end\n  if remaining > 0 then\n    result[#result + 1] = remaining\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
