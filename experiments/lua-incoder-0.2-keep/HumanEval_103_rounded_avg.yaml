name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- rounded_avg(1, 5) => \"0b11\"\n-- rounded_avg(7,\
  \ 5) => -1\n-- rounded_avg(10, 20) => \"0b1111\"\n-- rounded_avg(20, 33) => \"0b11010\"\
  \nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ string.format(\"0b%b\", sum / count)\nend", "  local nm = math.max(m, n)\n \
    \ local nn = math.min(n, m)\n  local sum = 0\n  local count = 0\n  for i = n,\
    \ nm do\n    sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n\
    \    return -1\n  end\n  local bin = string.format(\"%b\", sum)\n  local bin =\
    \ bin:sub(1, bin:len()-1)\n  local bin = bin:gsub(\"0\", \"\")\n  return bin\n\
    end", "  local nm = math.floor(n/m)\n  if nm == 0 then\n    return -1\n  end\n\
    \  return \"0b\" .. tostring(nm) .. \"0\"\nend", "  local nm = n .. m\n  local\
    \ nm_bin = tonumber(string.format(\"%b\", nm))\n  if nm_bin == nil then\n    return\
    \ -1\n  else\n    return string.format(\"0b%b\", nm_bin)\n  end\nend", "  if n\
    \ > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  if m > n then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  if n < m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  local\
    \ avg = sum / count\n  local bin = math.floor(avg * 2) / 2\n  return bin\nend",
  "  if n <= m then\n    return n\n  else\n    return -1\n  end\nend", "  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\n   \
    \ return -1\n  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n  \
    \  sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n\
    \ > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  if n > m then return -1 end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local\
    \ avg = sum / 2\n  local bin = string.format(\"%b\", avg)\n  local result = bin:sub(1,\
    \ bin:len()-1)\n  return result\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n    n = n\
    \ + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend", "  local nn = math.floor(n/2) + 1\n \
    \ local mm = math.floor(m/2) + 1\n  if nn > m then return -1 end\n  return nn\
    \ * 2 ^ mm - nn * mm + 1\nend", "  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n\
    \  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n  local sum = 0\n  local\
    \ count = 0\n  local result = 0\n  while n1 <= m1 do\n    sum = sum + n1\n   \
    \ count = count + 1\n    n1 = n1 + 1\n  end\n  while n2 <= m2 do\n    sum = sum\
    \ + n2\n    count = count + 1\n    n2 = n2 + 1\n  end\n  if count > 0 then\n \
    \   result = sum / count\n  else\n    result = -1\n  end\n  return tostring(result)\n\
    end", "  if m == 0 then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. string.format(\"%b\", sum / count)\nend", "  if m == 0 then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  local avg = sum / count\n  return tostring(avg)\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  while n > m do\n    sum = sum + n\n    n = n - 1\n    count = count + 1\n\
    \  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  else\n    return nm\n  end\nend", "  if n\
    \ > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local n1 = math.floor(n)\n\
    \  local n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n\
    \  local sum = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local\
    \ result = math.floor(sum / count)\n  local bin = string.format(\"%b\", result)\n\
    \  return bin\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n\
    \  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count +\
    \ 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nn = math.floor(n)\n\
    \  local mm = math.floor(m)\n  if nn > mm then\n    return -1\n  end\n  local\
    \ nn = nn + 1\n  local mm = mm + 1\n  local sum = 0\n  while nn <= mm do\n   \
    \ sum = sum + nn\n    nn = (nn + 1) >> 1\n  end\n  local sum = (sum + mm) / 2\n\
    \  local bin = string.rep(\"0\", math.ceil(math.log2(sum)))\n  bin = bin:sub(1,\
    \ bin:len()-1)\n  bin = bin .. string.rep(\"1\", sum - bin:len() * math.pow(2,\
    \ math.ceil(math.log2(sum))))\n  return bin\nend", "  local nm = n .. m\n  local\
    \ nm_bin = tonumber(string.format(\"%b\", nm))\n  if nm_bin == nil then\n    return\
    \ -1\n  end\n  local nm_bin = math.floor(nm_bin)\n  local nm_bin = string.format(\"\
    %b\", nm_bin)\n  local nm_bin = string.format(\"%0*d\", math.ceil(nm_bin), nm_bin)\n\
    \  return nm_bin\nend", "  local nm = math.floor((n + m) / 2)\n  if nm == n then\n\
    \    return nm\n  else\n    return -1\n  end\nend", "  local nm = n .. m\n  local\
    \ nm = tonumber(nm)\n  if nm == nil then\n    return -1\n  end\n  local nm = math.floor(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.floor(nm / 2)\n  local nm\
    \ = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm\
    \ / 2)\n  local nm = math.floor(nm / 2)\n  local nm = math.floor(nm / 2)\n  local\
    \ nm = math.floor(nm / 2)", "  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n\
    \  if n1 < m1 then\n    return -1\n  end\n  local n2 = n1 + 1\n  local m2 = m1\
    \ + 1\n  local n3 = n2 + 1\n  local m3 = m2 + 1\n  local n4 = n3 + 1\n  local\
    \ m4 = m3 + 1\n  local n5 = n4 + 1\n  local m5 = m4 + 1\n  local n6 = n5 + 1\n\
    \  local m6 = m5 + 1\n  local n7 = n6 + 1\n  local m7 = m6 + 1\n  local n8 = n7\
    \ + 1\n  local m8 = m7 + 1\n  local n9 = n8 + 1\n  local m9 = m8 + 1\n  local\
    \ n10 = n9 + 1\n  local m10 = m9 + 1\n  local n11 = n10 + 1\n  local m11 = m10\
    \ + 1\n  local n12 = n11 + 1\n  local m12 = m11 + 1\n  local n13 = n12 + 1\n \
    \ local m13 = m12 + 1\n  local n14 = n13 + 1\n  local m14 = m13 + 1\n  local n15\
    \ = n14 + 1\n  local m15 = m14 + 1\n  local n16 = n15 + 1\n  local m16 = m15 +\
    \ 1\n  local n17 = n16 + 1\n  local m17 = m16 + 1\n  local n18 = n17 + 1\n  local\
    \ m18 = m17 + 1\n  local n19 = n18 + 1\n  local m19 = m18 + 1\n  local n20 = n19\
    \ + 1\n  local m20 = m19 + 1\n  local n21 = n20 + 1\n  local m21 = m20 + 1\n \
    \ local n22 = n21 + 1\n  local m22 = m21 + 1\n  local n23 = n22 + 1\n  local m23\
    \ = m22 + 1\n  local n24 = n23 + 1\n  local m24 = m23 + 1\n  local n25 = n24 +\
    \ 1\n  local m25 = m24 + 1\n  local n26 = n25 + 1\n  local m26 = m25 + 1\n  local\
    \ n27 = n26 + 1\n  local m27 = m26 + 1\n  local n28 = n27 + 1\n  local m28 = m27\
    \ + 1\n  local n29 = n28 + 1\n  local m29 = m28 + 1\n  local n30 = n29 + 1\n \
    \ local m30 = m29 + 1\n  local n31 = n30 + 1\n  local m31 = m30 + 1\n  ", "  local\
    \ n1 = math.floor(n)\n  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  local sum = 0\n  local count = 0\n  while n1 <=\
    \ m1 do\n    sum = sum + n1\n    count = count + 1\n    n1 = n1 + 1\n  end\n \
    \ while n2 <= m2 do\n    sum = sum + n2\n    count = count + 1\n    n2 = n2 +\
    \ 1\n  end\n  if count == 0 then\n    return -1\n  end\n  return sum / count\n\
    end", "  local nn = math.max(math.min(n, m), -1)\n  local mm = math.max(math.min(m,\
    \ n), -1)\n  local sum = 0\n  local count = 0\n  for i = n, mm do\n    sum = sum\
    \ + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local nn = math.floor(n/2) + 1\n  local mm = math.floor(m/2) + 1\n  if\
    \ nn > m then return -1 end\n  return nn * 2 ^ mm - nn * mm + 1\nend", "  local\
    \ nm = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  else\n    return\
    \ nm\n  end\nend", "  local nn = math.floor(n/m)\n  local mm = math.floor((m-nn)/2)\n\
    \  if nn > m then return -1 end\n  return \"0b\" .. tostring(mm) .. tostring(mm+nn)\n\
    end", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n +\
    \ 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum / count)\nend", "  local\
    \ nn = math.floor(n)\n  local mm = math.floor(m)\n  if mm > n then\n    return\
    \ -1\n  end\n  return nn * 2 + mm\nend", "  if n > m then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n  \
    \  count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", " \
    \ local nm = n .. m\n  local nm_int = tonumber(nm)\n  if nm_int == nil then\n\
    \    return -1\n  end\n  local nm_bin = bit.bor(nm_int, bit.rshift(nm_int, 1))\n\
    \  local m_int = tonumber(m)\n  if m_int == nil then\n    return -1\n  end\n \
    \ local m_bin = bit.bor(m_int, bit.rshift(m_int, 1))\n  local avg_int = bit.lshift(nm_bin,\
    \ 1) + bit.lshift(m_bin, 1)\n  local avg_bin = bit.bor(avg_int, bit.rshift(avg_int,\
    \ 1))\n  return bit.rshift(avg_bin, 1)\nend", "  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum\
    \ / count)\nend", "  local nn = math.floor(n/m)\n  local mm = math.floor((n-nn*m)/m)\n\
    \  return nn*m + (mm*m or 0)\nend", "  local nm = math.max(m, n)\n  local nn =\
    \ math.min(n, m)\n  local nm = math.max(nm, 1)\n  local nn = math.min(nn, 1)\n\
    \  local sum = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n \
    \   count = count + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n\
    \    return -1\n  end\nend", "  if m > n then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  end\n  return nm\nend", "  local sum = 0\n\
    \  local count = 0\n  local i = 1\n  while i <= m do\n    sum = sum + i\n    count\
    \ = count + 1\n    i = i + 1\n  end\n  if n <= m then\n    return -1\n  end\n\
    \  local result = math.floor(sum / count)\n  local binary = \"\"\n  while result\
    \ > 1 do\n    binary = binary + \"1\"\n    result = result / 2\n  end\n  return\
    \ binary\nend", "  local nm = math.floor(n/m)\n  if nm == 0 then\n    return -1\n\
    \  else\n    return nm ^ 1\n  end\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local\
    \ nm = n .. m\n  local nm = tonumber(nm)\n  if nm == nil then\n    return -1\n\
    \  else\n    local nm = math.floor(nm)\n    local nm = math.floor(nm * 2)\n  \
    \  local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n\
    \    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n\
    \    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n\
    \    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n\
    \    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n\
    \    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local\
    \ nm = math.floor(nm / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm\
    \ / 2)\n    local nm = math.floor(nm / 2)\n    local nm = math.floor(nm / ", " \
    \ if n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. string.format(\"%b\", sum / count)\nend", "  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ sum / 2\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n   \
    \ n = n + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm\
    \ = n .. m\n  local nm_bin = tonumber(string.format(\"%b\", nm))\n  local nm_int\
    \ = tonumber(nm)\n  if nm_int == nm then\n    return nm_int\n  elseif nm_bin ==\
    \ nm then\n    return -1\n  else\n    return nm_int + nm_bin / 2\n  end\nend",
  "  local n1 = math.floor(n)\n  local n2 = math.ceil(n)\n  local m1 = math.floor(m)\n\
    \  local m2 = math.ceil(m)\n  if n1 == m1 then\n    return n\n  elseif n2 == m2\
    \ then\n    return -1\n  else\n    return (n1 + n2 + 1) / (m1 - m2)\n  end\nend",
  "  local nm = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  else\n    return\
    \ nm\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  return string.format(\"0b%b\", sum / count)\nend", "  if m > n then\n\
    \    return -1\n  end\n  local sum = 0\n  local count = 0\n  local i = 1\n  while\
    \ i <= m do\n    sum = sum + i\n    count = count + 1\n    i = i + 1\n  end\n\
    \  local avg = sum / count\n  local bin = math.floor(avg)\n  local remainder =\
    \ math.fmod(avg, 1)\n  if remain == 0 then\n    return bin\n  else\n    return\
    \ bin + remainder\n  end\nend", "  if m > n then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  local i = 0\n  while i < n do\n    sum = sum +\
    \ i\n    count = count + 1\n    i = i + 1\n  end\n  local avg = sum / count\n\
    \  local bin = math.floor(avg)\n  local rem = math.floor(avg - bin)\n  local result\
    \ = \"\"\n  while rem > 0 do\n    result = bin .. result\n    rem = rem - 1\n\
    \  end\n  return result\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n    n = n\
    \ + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local nm = math.floor((n + m) / 2)\n  if nm == n then\n    return nm\n\
    \  elseif nm == m then\n    return -1\n  else\n    return nm\n  end\nend", " \
    \ if n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n\
    \ > m then return -1 end\n  local s = \"\"\n  for i = n, m, 1 do\n    local t\
    \ = math.floor(i/2) + 1\n    s = s .. \"b\"\n    for j = 1, t do\n      s = s\
    \ .. \"0\"\n    end\n  end\n  return s\nend", "  local nn = math.floor(n/m)\n\
    \  local mm = math.floor((n-nn*m)/m)\n  return nn*m + (mm*m or 0)\nend", "  if\
    \ m > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  if n >= m then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local nm = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  else\n\
    \    return nm\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n\
    \    count = count + 1\n  end\n  local result = math.floor(sum / count)\n  return\
    \ tostring(result)\nend", "  if m > n then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\
    \ return -1 end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n    count = count + 1\n  end\n  return string.format(\"0b%b\", sum\
    \ / count)\nend", "  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  local\
    \ n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n  local sum = 0\n  local count\
    \ = 0\n  while n1 <= m1 do\n    sum = sum + n1\n    count = count + 1\n    n1\
    \ = n1 + 1\n  end\n  while n2 <= m2 do\n    sum = sum + n2\n    count = count\
    \ + 1\n    n2 = n2 + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  sum\
    \ = sum / count\n  local binary = string.format(\"0b%b\", sum)\n  return binary\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  local i = 0\n  while i < n do\n    sum = sum + i\n    count = count + 1\n\
    \    i = i + 1\n  end\n  local avg = sum / count\n  local binary = string.format(\"\
    0b%b\", avg)\n  return binary\nend", "  if n > m then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  local i = n\n  while i <= m do\n    sum\
    \ = sum + i\n    count = count + 1\n    i = i + 1\n  end\n  local avg = sum /\
    \ count\n  local bin = string.format(\"%b\", avg)\n  local result = bin:sub(1,\
    \ bin:len()-1)\n  return result\nend", "  local nn = math.floor(n/m)\n  local\
    \ mm = math.floor(m/n)\n  local result = nn*m + (n-m*mm)\n  return result:tostring()\n\
    end", "  if m > n then\n    return -1\n  end\n  \n  local sum = 0\n  local count\
    \ = 0\n  \n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  \n  return \"0b\" .. tostring(sum / count)\nend", "  if m > n then return -1\
    \ end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum\
    \ / count)\nend", "  if n > m then return -1 end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)*m\n  if\
    \ nm > m then return -1 end\n  return \"0b\" .. tostring(nm)\nend", "  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while n\
    \ <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n  local\
    \ avg = sum / count\n  return tostring(avg)\nend", "  if n <= m then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. string.format(\"%b\"\
    , sum / count)\nend", "  local nm = math.floor(n/m)*m\n  if nm > m then\n    return\
    \ -1\n  elseif nm == m then\n    return nm\n  else\n    return nm..\"b\"\n  end\n\
    end", "  local nn = math.floor(n)\n  local mm = math.floor(m)\n  local nm = math.min(nn,\
    \ mm)\n  local nn = nn + nm\n  local mm = mm + nm\n  local nn = nn + mm\n  local\
    \ mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn +\
    \ mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local\
    \ nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm +\
    \ nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local\
    \ mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn +\
    \ mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local\
    \ nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm +\
    \ nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local\
    \ mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn +\
    \ mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local\
    \ nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm +\
    \ nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local\
    \ mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn +\
    \ mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local\
    \ nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local mm = mm +\
    \ nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn + mm\n  local\
    \ mm = mm + nn\n  local nn = nn + mm\n  local mm = mm + nn\n  local nn = nn +\
    \ mm\n  local mm = mm + nn\n  local nn = nn", "  local nm = n .. m\n  local nm_int\
    \ = tonumber(nm)\n  if nm_int == nil then\n    return -1\n  end\n  local nm_bin\
    \ = string.format(\"%b\", nm_int)\n  local m_int = tonumber(m)\n  if m_int ==\
    \ nil then\n    return -1\n  end\n  local m_bin = string.format(\"%b\", m_int)\n\
    \  local nm_len = #nm_bin\n  local m_len = #m_bin\n  local nm_avg = tonumber(string.rep(\"\
    0\", nm_len))\n  local m_avg = tonumber(string.rep(\"0\", m_len))\n  local nm_len\
    \ = nm_len + m_len\n  local m_len = nm_len + m_len\n  local i = 0\n  while i <\
    \ nm_len do\n    nm_avg = (nm_avg + tonumber(nm_bin[i])) / nm_len\n    m_avg =\
    \ (m_avg + tonumber(m_bin[i])) / m_len\n    i = i + 1\n  end\n  nm_avg = string.format(\"\
    %b\", nm_avg)\n  m_avg = string.format(\"%b\", m_avg)\n  if nm_len > m_len then\n\
    \    return -1\n  end\n  return nm_avg\nend", "  local sum = 0\n  local count\
    \ = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\n\
    \    return -1\n  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n\
    \    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  local n1 = math.floor(n)\n  local n2 = math.ceil(n)\n\
    \  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n  local sum = 0\n  local\
    \ count = 0\n  for i = n1, m1 do\n    sum = sum + i\n    count = count + 1\n \
    \ end\n  if count == 0 then\n    return -1\n  end\n  local avg = sum / count\n\
    \  local bin = bit.bor(bit.lshift(avg, 8), bit.rshift(avg, 8))\n  return bin\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  while n > m do\n    sum = sum + n\n    n = n - 1\n    count = count + 1\n\
    \  end\n  sum = sum + m\n  count = count + 1\n  local binary = string.format(\"\
    0b%b\", sum / count)\n  return binary\nend", "  local n1 = math.floor(n)\n  local\
    \ m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n \
    \ if n1 < m1 then\n    return -1\n  end\n  if n2 < m2 then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local\
    \ binary = string.format(\"0b%b\", sum / count)\n  return binary\nend", "  local\
    \ n1 = math.floor(n)\n  local m1 = math.floor(m)\n  if n1 < m1 then\n    return\
    \ -1\n  end\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n1, m1 do\n    sum = sum + i\n    count =\
    \ count + 1\n  end\n  local result = tostring(sum / count)\n  result = result:sub(1,\
    \ -2)\n  return result\nend", "  local n1 = math.floor(n)\n  local n2 = math.ceil(n)\n\
    \  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n  local sum = 0\n  local\
    \ count = 0\n  for i = n1, m1 do\n    sum = sum + i\n    count = count + 1\n \
    \ end\n  if count == 0 then\n    return -1\n  end\n  local result = sum / count\n\
    \  local bin = string.format(\"%b\", result)\n  return bin\nend", "  if n < m\
    \ then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n,\
    \ m do\n    sum = sum + i\n    count = count + 1\n  end\n  local avg = sum / count\n\
    \  local bin = string.format(\"%b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n\
    \  return result\nend", "  if m > n then\n    return -1\n  end\n  local sum =\
    \ 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n    count = count\
    \ + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", " \
    \ if n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local sum = 0\n  local count\
    \ = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count\
    \ + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n > m then\n   \
    \ return -1\n  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n  \
    \  sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  local sum = 0\n  local count = 0\n  local\
    \ i = n\n  while i <= m do\n    sum = sum + i\n    count = count + 1\n    i =\
    \ i + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return\
    \ -1\n  end\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n  local remainder\
    \ = math.fmod(avg, 1)\n  if remain == 0 then\n    return bin\n  else\n    return\
    \ bin + remainder\n  end\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n    n = n\
    \ + 1\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local nn = math.floor(n/m)\n  local mm = math.floor((m-nn)/2)\n  if nn\
    \ > m then\n    return -1\n  elseif mm == 0 then\n    return nn\n  else\n    return\
    \ nn..mm\n  end\nend", "  local nm = math.floor(n/m)*m\n  if nm > m then\n   \
    \ return -1\n  end\n  return \"0b\" .. string.sub(tostring(nm), 2)\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if m == 0 then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return string.format(\"0b%b\", sum / count)\nend", " \
    \ if n < m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n\
    \  return string.format(\"0b%b\", sum / count)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum +\
    \ n\n    n = n + 1\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ -1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)\n\
    \  if nm == 0 then\n    return -1\n  end\n  return \"0b\" .. string.sub(tostring(nm),\
    \ -2)\nend", "  local avg = math.floor((n + m) / 2)\n  if avg > m then\n    return\
    \ -1\n  elseif avg < n then\n    return -1\n  else\n    return tostring(avg)\n\
    \  end\nend", "  if m == 0 then\n    return -1\n  end\n  local n1 = math.floor(n)\n\
    \  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n\
    \  local n3 = n - n1\n  local m3 = m - m1\n  local n4 = n2 - n1\n  local m4 =\
    \ m2 - m1\n  local n5 = n3 - n4\n  local m5 = m3 - m4\n  local n6 = n5 - n3\n\
    \  local m6 = m5 - m4\n  local n7 = n6 - n5\n  local m7 = m6 - m5\n  local n8\
    \ = n7 - n6\n  local m8 = m7 - m6\n  local n9 = n8 - n7\n  local m9 = m8 - m7\n\
    \  local n10 = n9 - n8\n  local m10 = m9 - m8\n  local n11 = n10 - n9\n  local\
    \ m11 = m10 - m9\n  local n12 = n11 - n10\n  local m12 = m11 - m10\n  local n13\
    \ = n12 - n11\n  local m13 = m12 - m11\n  local n14 = n13 - n12\n  local m14 =\
    \ m13 - m12\n  local n15 = n14 - n13\n  local m15 = m14 - m13\n  local n16 = n15\
    \ - n14\n  local m16 = m15 - m14\n  local n17 = n16 - n15\n  local m17 = m16 -\
    \ m15\n  local n18 = n17 - n16\n  local m18 = m17 - m16\n  local n19 = n18 - n17\n\
    \  local m19 = m18 - m17\n  local n20 = n19 - n18\n  local m20 = m19 - m18\n \
    \ local n21 = n20 - n19\n  local m21 = m20 - m19\n  local n22 = n21 - n20\n  local\
    \ m22 = m21 - m20\n  local n23 = n22 - n21\n  local m23 = m22 - m21\n  local n24\
    \ = n23 - n22\n  local m24 = m23 - m22\n  local n25 = n24 - n23\n  local m25 =\
    \ m24 - m23\n  local n26 = n25 - n24\n  local m26 = m25 - m24\n  ", "  local nm\
    \ = math.max(m, n)\n  local sum = 0\n  local count = 0\n  for i = n, nm do\n \
    \   sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ -1\n  end\n  local result = sum / count\n  local bin = string.format(\"%b\"\
    , result)\n  local zeros = #bin - #result + 1\n  return bin:sub(1, zeros)\nend",
  "  local avg = math.floor((n + m) / 2)\n  if avg > m then return -1 end\n  local\
    \ bin = string.format(\"%b\", avg)\n  return bin\nend", "  local nm = math.floor(n/m)*m\n\
    \  if nm > m then return -1 end\n  return bin(nm)\nend", "  local nn = math.max(n,\
    \ m)\n  local mm = math.min(m, n)\n  local sum = 0\n  local count = 0\n  for i\
    \ = n, mm do\n    sum = sum + i\n    count = count + 1\n  end\n  local avg = sum\
    \ / count\n  local bin = string.format(\"%b\", avg)\n  if #bin == 1 then\n   \
    \ return bin\n  else\n    return -1\n  end\nend", "  local nn = math.floor(n)\n\
    \  local mm = math.floor(m)\n  if mm > n then\n    return -1\n  end\n  local result\
    \ = \"\"\n  local i = 0\n  while i <= mm do\n    local c = math.floor((n - nn)\
    \ / 2)\n    local d = math.floor((m - mm) / 2)\n    local a = math.floor((n -\
    \ nn + c + d) / 2)\n    local b = math.floor((m - mm + c + d) / 2)\n    local\
    \ c = math.floor((n - nn + c + d) / 2)\n    local d = math.floor((m - mm + c +\
    \ d) / 2)\n    local a = math.floor((n - nn + c + d) / 2)\n    local b = math.floor((m\
    \ - mm + c + d) / 2)\n    local c = math.floor((n - nn + c + d) / 2)\n    local\
    \ d = math.floor((m - mm + c + d) / 2)\n    local a = math.floor((n - nn + c +\
    \ d) / 2)\n    local b = math.floor((m - mm + c + d) / 2)\n    local c = math.floor((n\
    \ - nn + c + d) / 2)\n    local d = math.floor((m - mm + c + d) / 2)\n    local\
    \ a = math.floor((n - nn + c + d) / 2)\n    local b = math.floor((m - mm + c +\
    \ d) / 2)\n    local c = math.floor((n - nn + c + d) / 2)\n    local d = math.floor((m\
    \ - mm + c + d) / 2)\n    local a = math.floor((n - nn + c + d) / 2)\n    local\
    \ b = math.floor((m - mm + c + d) / 2)\n    local c = math.floor((n - nn + c +\
    \ d) / 2)\n    local d = math.floor((m - mm + c + d) / 2)\n    local a = math.floor((n\
    \ - nn + c + d) / 2)\n    local b = math.floor((m - mm + c + d) / 2)\n    local\
    \ c = math.floor((n - nn + c + d) / 2)\n    local d = math.floor((m - mm + c +\
    \ d) / 2)\n    local a = math.floor((n - nn + c + d) / 2)\n    local b = math.floor((m\
    \ - mm + c + d) / 2)\n    local c = math.floor((n - nn + c + d) / 2)\n    local\
    \ d = math.floor((m - mm + c + d) / 2)\n    local a = math.floor((n - nn + c +\
    \ d) / 2)\n    local b = math.floor((m - mm + c + d) / 2)\n    local c = math.floor((n\
    \ - nn + c + d) / 2)\n    local d = math.floor((m - mm + c + d) / 2)\n", "  if\
    \ m > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.max(m, n)\n\
    \  local nn = math.min(n, m)\n  local sum = 0\n  local count = 0\n  for i = n,\
    \ nm do\n    sum = sum + i\n    count = count + 1\n  end\n  if count == 0 then\n\
    \    return -1\n  end\n  local result = math.floor(sum / count)\n  local binary\
    \ = string.format(\"%b\", result)\n  return binary\nend", "  if n > m then\n \
    \   return -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  local avg = sum / count\n\
    \  local bin = bit.bor(bit.lshift(bit.rshift(avg, 8), 8), avg, 8)\n  return bin\n\
    end", "  local nn = math.floor(n/m)\n  local mm = math.floor((m-nn*m)/n)\n  return\
    \ nn*m + (mm*(n-nn*m))\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n  \
    \  return -1\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local sum = 0\n\
    \  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count +\
    \ 1\n  end\n  if count > 0 then\n    return sum / count\n  else\n    return -1\n\
    \  end\nend", "  local nn = math.floor(n/2) + 1\n  local mm = math.floor(m/2)\
    \ + 1\n  if nn > m then return -1 end\n  return \"0b\" .. math.floor((nn-mm)*2^(math.floor(math.log(nn,\
    \ 2))+1))\nend", "  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n    count = count + 1\n  end\n  if count > 0 then\n    return sum\
    \ / count\n  else\n    return -1\n  end\nend", "  if n > m then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  if n1 < m then\n\
    \    return -1\n  end\n  local n2 = n1 + 1\n  local m2 = m1 + 1\n  local sum =\
    \ 0\n  while n2 <= m2 do\n    sum = sum + n2\n    n2 = n2 + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / m1)\nend", "  local nm = math.max(m, n)\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, nm do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local result = math.floor(sum\
    \ / count)\n  local bin = string.format(\"%b\", result)\n  return bin\nend", " \
    \ if n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local n1 = math.floor(n)\n\
    \  local m1 = math.floor(m)\n  if n1 < m1 then\n    return -1\n  end\n  local\
    \ n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n  local sum = 0\n  local count\
    \ = 0\n  for i = n1, m1 do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)*m\n\
    \  if nm > m then return -1 end\n  return bin(nm)\nend", "  local nn = math.floor(n/m)\n\
    \  if nn > m then\n    return -1\n  else\n    return nn*m\n  end\nend", "  local\
    \ avg = math.floor((n + m) / 2)\n  if avg > m then return -1 end\n  return tostring(avg)\n\
    end", "  if n < m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  local i = n\n  while i <= m do\n    sum = sum + i\n    count = count +\
    \ 1\n    i = i + 1\n  end\n  local avg = sum / count\n  local bin = string.format(\"\
    %b\", avg)\n  local result = bin:sub(1, bin:len()-1)\n  return result\nend", " \
    \ local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n\
    \  local m2 = math.ceil(m)\n  if n1 == m1 then\n    return n\n  elseif n2 <= m2\
    \ then\n    return -1\n  else\n    return (n1 + m2) / 2\n  end\nend", "  if m\
    \ > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)*m\n  if nm > m\
    \ then\n    return -1\n  else\n    return nm\n  end\nend", "  if n > m then\n\
    \    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  return \"0b\" .. tostring(sum / 2)\nend", "  local n1 = math.floor(n)\n\
    \  local n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local m2 = math.ceil(m)\n\
    \  if n1 == m1 then\n    return n\n  elseif n2 == m2 then\n    return -1\n  else\n\
    \    return (n1 + n2 + 1) / 2 * 2\n  end\nend", "  local nm = math.floor(n/m)\n\
    \  if nm == 0 then\n    return -1\n  else\n    return nm ~= 0 and \"0b\" .. math.floor(nm/2)\
    \ or -1\n  end\nend", "  local nm = math.floor(n/m)\n  if nm == 0 then\n    return\
    \ -1\n  end\n  local bin = math.floor(nm*2)\n  bin = bin:bit(bin:len()-bin:len()%2)\n\
    \  return bin\nend", "  local nm = math.floor(n/m)*m\n  if nm > m then return\
    \ -1 end\n  return \"0b\" .. tostring(nm)\nend", "  local nm = n .. m\n  local\
    \ nm_int = tonumber(nm)\n  if nm_int == nil then\n    return -1\n  end\n  local\
    \ nm_bin = string.format(\"%b\", nm_int)\n  local m_int = tonumber(m)\n  if m_int\
    \ == nil then\n    return -1\n  end\n  local m_bin = string.format(\"%b\", m_int)\n\
    \  local sum = 0\n  for i = 1, #nm_bin do\n    sum = sum + tonumber(nm_bin[i])\n\
    \  end\n  local avg = sum / #nm_bin\n  local rounded_avg = string.format(\"%b\"\
    , avg)\n  return rounded_avg\nend", "  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  if count > 0\
    \ then\n    return sum / count\n  else\n    return -1\n  end\nend", "  if m >\
    \ n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  local i\
    \ = 1\n  while i <= m do\n    sum = sum + i\n    count = count + 1\n    i = i\
    \ + 1\n  end\n  local avg = sum / count\n  local bin = math.floor(avg)\n  local\
    \ remainder = math.fmod(avg, 1)\n  if remain == 0 then\n    return bin\n  else\n\
    \    return bin .. \"b\"\n  end\nend", "  local sum = 0\n  local count = 0\n \
    \ while n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n \
    \ end\n  if count > 0 then\n    return sum / count\n  else\n    return -1\n  end\n\
    end", "  local n1 = math.floor(n/2) + 1\n  local n2 = math.floor(n/2) + 2\n  local\
    \ m1 = math.floor(m/2) + 1\n  local m2 = math.floor(m/2) + 2\n  if n1 <= m and\
    \ n2 <= m then\n    return n1 .. \"b\" .. n2\n  elseif n1 <= m then\n    return\
    \ -1\n  elseif n2 <= m then\n    return -1\n  elseif n1 > m then\n    return -1\n\
    \  elseif m1 > m then\n    return -1\n  elseif n1 == m then\n    return n1 ..\
    \ \"b\"\n  elseif n2 == m then\n    return n2 .. \"b\"\n  else\n    return -1\n\
    \  end\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n   \
    \ n = n + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" ..\
    \ tostring(sum / count)\nend", "  local nn = math.floor(n/2) + 1\n  local mm =\
    \ math.floor(m/2) + 1\n  if nn > m then\n    return -1\n  end\n  return string.format(\"\
    0b%b\", nn * 2 + mm)\nend", "  local avg = math.floor((n + m) / 2)\n  if avg >\
    \ m then\n    return -1\n  else\n    return tostring(avg)\n  end\nend", "  local\
    \ nn = math.max(n, m)\n  local mm = math.min(m, n)\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, mm do\n    sum = sum + i\n    count = count + 1\n  end\n \
    \ if mm > n then\n    return -1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n +\
    \ 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm = math.max(m,\
    \ n)\n  local nn = math.min(n, m)\n  local sum = 0\n  local count = 0\n  for i\
    \ = n, nm do\n    sum = sum + i\n    count = count + 1\n  end\n  if count == 0\
    \ then\n    return -1\n  end\n  local bin = string.format(\"%b\", sum / count)\n\
    \  local result = bin:sub(1, bin:len())\n  return result\nend", "  local n1 =\
    \ math.floor(n)\n  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local\
    \ m2 = math.ceil(m)\n  if n1 == m1 then\n    return n\n  elseif n1 < m1 then\n\
    \    return -1\n  elseif n2 < m2 then\n    return -1\n  else\n    return (n2 -\
    \ n1 + 1) / 2 * m1 + n1 + 1\n  end\nend", "  if n > m then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n  \
    \  count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. tostring(sum /\
    \ count)\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  local avg = sum / count\n  return tostring(avg)\nend", "  local n1 = math.floor(n)\n\
    \  local m1 = math.floor(m)\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n\
    \  local n3 = n - n1\n  local m3 = m - m1\n  local n4 = n2 - n1\n  local m4 =\
    \ m2 - m1\n  local n5 = n3 - n4\n  local m5 = m3 - m4\n  local n6 = n4 - n5\n\
    \  local m6 = m4 - m5\n  local n7 = n5 - n6\n  local m7 = m5 - m6\n  local n8\
    \ = n6 - n7\n  local m8 = m6 - m7\n  local n9 = n7 - n8\n  local m9 = m7 - m8\n\
    \  local n10 = n8 - n9\n  local m10 = m8 - m9\n  local n11 = n9 - n10\n  local\
    \ m11 = m9 - m10\n  local n12 = n10 - n11\n  local m12 = m10 - m11\n  local n13\
    \ = n11 - n12\n  local m13 = m11 - m12\n  local n14 = n12 - n13\n  local m14 =\
    \ m12 - m13\n  local n15 = n13 - n14\n  local m15 = m13 - m14\n  local n16 = n14\
    \ - n15\n  local m16 = m14 - m15\n  local n17 = n15 - n16\n  local m17 = m15 -\
    \ m16\n  local n18 = n16 - n17\n  local m18 = m16 - m17\n  local n19 = n17 - n18\n\
    \  local m19 = m17 - m18\n  local n20 = n18 - n19\n  local m20 = m18 - m19\n \
    \ local n21 = n19 - n20\n  local m21 = m19 - m20\n  local n22 = n20 - n21\n  local\
    \ m22 = m20 - m21\n  local n23 = n21 - n22\n  local m23 = m21 - m22\n  local n24\
    \ = n22 - n23\n  local m24 = m22 - m23\n  local n25 = n23 - n24\n  local m25 =\
    \ m23 - m24\n  local n26 = n24 - n25\n  local m26 = m24 - m25\n  local n27 = n25\
    \ - n26\n  local m27", "  if m > n then return -1 end\n  local sum = 0\n  local\
    \ count = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count =\
    \ count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local nm\
    \ = math.floor((n + m) / 2)\n  if nm == n then\n    return nm\n  else\n    return\
    \ -1\n  end\nend", "  if n < m then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  while n <= m do\n    sum = sum + n\n    count = count + 1\n\
    \    n = n + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if m\
    \ > n then return -1 end\n  local sum = 0\n  local count = 0\n  while n <= m do\n\
    \    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  local nm = math.floor(n/m)\n  if nm == 0\
    \ then\n    return -1\n  else\n    return (nm * m) + n - nm * m\n  end\nend",
  "  if m > n then return -1 end\n  local sum = 0\n  local count = 0\n  for i = n,\
    \ m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend", "  if n >= m then\n    return -1\n  end\n  local sum = 0\n \
    \ local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n\
    \  end\n  local avg = sum / count\n  local bin = string.format(\"%b\", avg)\n\
    \  local result = bin:sub(1, bin:len()-1)\n  return result\nend", "  local n1\
    \ = math.floor(n)\n  local n2 = math.ceil(n)\n  local m1 = math.floor(m)\n  local\
    \ m2 = math.ceil(m)\n  local sum = 0\n  local count = 0\n  while n1 <= m1 do\n\
    \    sum = sum + n1\n    count = count + 1\n    n1 = n1 + 1\n  end\n  while n2\
    \ >= m2 do\n    sum = sum + n2\n    count = count + 1\n    n2 = n2 + 1\n  end\n\
    \  if count > 0 then\n    sum = sum / count\n    return tostring(sum)\n  else\n\
    \    return -1\n  end\nend", "  local nn = math.max(n, m)\n  local mm = math.min(m,\
    \ n)\n  local sum = 0\n  local count = 0\n  for i = n, mm do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local n1 = math.floor(n)\n  local m1 = math.floor(m)\n  if n1 < m1 then\n\
    \    return -1\n  end\n  local n2 = math.ceil(n)\n  local m2 = math.ceil(m)\n\
    \  local sum = 0\n  local count = 0\n  for i = n1, m2 do\n    sum = sum + i\n\
    \    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend",
  "  local avg = math.floor((n + m) / 2)\n  if avg > m then return -1 end\n  return\
    \ tostring(avg)\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n\
    \  local count = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  local\
    \ nm = n .. m\n  local nm_int = tonumber(nm)\n  if nm_int == nil then\n    return\
    \ -1\n  end\n  local nm_bin = string.format(\"%b\", nm_int)\n  local nm_len =\
    \ #nm_bin\n  local m_int = tonumber(m)\n  if m_int == nil then\n    return -1\n\
    \  end\n  local m_bin = string.format(\"%b\", m_int)\n  local m_len = #m_bin\n\
    \  if nm_len > m_len then\n    return -1\n  end\n  local sum = 0\n  for i = 1,\
    \ nm_len do\n    sum = sum + tonumber(nm_bin[i])\n  end\n  local avg = sum / m_len\n\
    \  local avg_bin = string.format(\"%b\", avg)\n  local avg_len = #avg_bin\n  return\
    \ avg_bin\nend", "  if n > m then return -1 end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n  \
    \  count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", " \
    \ if m > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  if m > n then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  local nn = math.floor(n/m)\n  local mm = math.floor(m/n)\n  if nn > mm\
    \ then\n    return -1\n  end\n  return nn * m + (n - nn) * mm\nend", "  local\
    \ n1 = math.floor(n)\n  local m1 = math.floor(m)\n  if n1 == m then\n    return\
    \ n1\n  else\n    return -1\n  end\nend", "  if m > n then\n    return -1\n  end\n\
    \  local sum = 0\n  local count = 0\n  while n <= m do\n    sum = sum + n\n  \
    \  count = count + 1\n    n = n + 1\n  end\n  return \"0b\" .. string.format(\"\
    %b\", sum / count)\nend", "  if m > n then return -1 end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  return \"0b\" .. tostring(sum / count)\nend", "  local nm = n .. m\n  local\
    \ nm = tonumber(nm)\n  if nm == nil then\n    return -1\n  end\n  local nm = math.floor(nm)\n\
    \  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm\
    \ = math.abs(nm)\n  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n\
    \  local nm = math.floor(nm * 2)\n  local nm = math.abs(nm)\n  local nm = math.floor(nm\
    \ * 2)\n  local nm = math.abs(nm)\n  local n", "  local nm = math.floor(n/m)*m\n\
    \  if nm > m then\n    return -1\n  end\n  local bin = string.format(\"%b\", nm)\n\
    \  local bin = bin:sub(1, bin:len()-1)\n  return bin\nend", "  if m == 0 then\n\
    \    return -1\n  end\n  local sum = 0\n  local count = 0\n  while n <= m do\n\
    \    sum = sum + n\n    count = count + 1\n    n = n + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  local avg = sum / count\n  local binary = string.format(\"\
    0b%b\", avg)\n  return binary\nend", "  local nm = math.floor(n/m)*m\n  if nm\
    \ > m then\n    return -1\n  else\n    return nm\n  end\nend", "  local n1 = math.floor(n)\n\
    \  local m1 = math.floor(m)\n  if n1 == m then\n    return n1\n  elseif n1 < m\
    \ then\n    return -1\n  else\n    return (n1 - m1 + 1) * (\"0b\" .. math.floor((n1\
    \ - m1 + 1) / 2))\n  end\nend", "  local nn = math.floor(n/2) + 1\n  local mm\
    \ = math.floor(m/2) + 1\n  if nn > m then return -1 end\n  return \"0b\" .. string.format(\"\
    %b\", nn) .. string.format(\"%b\", mm)\nend", "  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return string.format(\"0b%b\", sum / count)\n\
    end", "  local nm = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  else\n\
    \    return nm\n  end\nend", "  if n > m then\n    return -1\n  end\n  local sum\
    \ = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  return \"0b\" .. string.format(\"%b\", sum / count)\nend", " \
    \ if n > m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n\
    \ < m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return \"0b\" .. string.format(\"%b\", sum / count)\nend", "  if m > n then\n\
    \    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  while n <= m do\n    sum = sum + n\n    n = n + 1\n    count =\
    \ count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if n >\
    \ m then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i =\
    \ n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return sum / count\n\
    end", "  local nm = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  else\n\
    \    return nm\n  end\nend", "  if n > m then return -1 end\n  local sum = 0\n\
    \  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count +\
    \ 1\n  end\n  return \"0b\" .. tostring(sum / count)\nend", "  if m > n then\n\
    \    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n\
    \    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum\
    \ / count)\nend", "  if m > n then return -1 end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ \"0b\" .. tostring(sum / count)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
