name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the list.\n-- >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n-- [2, 5, 6]\n-- >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n-- [5, 3, 2, 3, 9, 123, 1]\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for i\
    \ = 1, #l do\n    if l[i] > 0 then\n      table.insert(positive, l[i])\n    end\n\
    \  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local positive = {}\n  for _, v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for _,\
    \ v in ipairs(l) do\n    if v ~= 0 then\n      table.insert(positive, v)\n   \
    \ end\n  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(positive, v)\n    end\n  end\n  return positive\nend", " \
    \ local positive = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "  local positive = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n\
    \  end\n  return positive\nend", "  local positive = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return\
    \ positive\nend", "  local positive = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(positive, v)\n    end\n  end\n  return positive\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
