name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n-- 'a'\n\
  -- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  local\
    \ longest_len = -1\n  local longest_string\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest_len = len\n\
    \      longest_string = str\n    end\n  end\n  return longest_string\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #longest < #strings[i] then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      break\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1],\
    \ 1\n  for i = 2, #strings do\n    if longest_len > #strings[i] then\n      longest,\
    \ longest_len = strings[i], #strings[i]\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == strings[#strings]\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
