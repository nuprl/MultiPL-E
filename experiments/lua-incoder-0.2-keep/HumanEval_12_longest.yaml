name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n-- 'a'\n\
  -- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  local\
    \ longest_len = -1\n  local longest_string\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest_len = len\n\
    \      longest_string = str\n    end\n  end\n  return longest_string\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #longest < #strings[i] then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      break\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1],\
    \ 1\n  for i = 2, #strings do\n    if longest_len > #strings[i] then\n      longest,\
    \ longest_len = strings[i], #strings[i]\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == strings[#strings]\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longest_len = strings[1], 1\n  for i\
    \ = 2, #strings do\n    if strings[i] == strings[longest_len] then\n      longest_len\
    \ = i\n    else\n      if longest_len > #strings then\n        return strings[longest_len]\n\
    \      else\n        longest, longest_len = strings[i], longest_len\n      end\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest = nil\n  local longest_len = -1\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest, longest_len\
    \ = str, len\n    end\n  end\n  return longest or strings[1]\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #longest < #strings[i] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #longest < #strings[i] then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == strings[1]\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    local len = strings[i]:len()\n\
    \    if len > longest_len then\n      longest_len = len\n    end\n  end\n  return\
    \ strings[#strings]\nend", "  if #strings == 0 then\n    return nil\n  end\n \
    \ local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  local longest_str = strings[1]\n  for\
    \ i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_str = strings[i]\n    end\n  end\n\
    \  return longest_str\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  local longest_string = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n      longest_string = strings[i]\n    end\n  end\n  return\
    \ longest_string\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longestLength = strings[1], 1\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longestLength then\n      longest, longestLength = strings[i], strings[i]:len()\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = strings[1], 1\n  for i = 2, #strings\
    \ do\n    if strings[i] == strings[longestLength] then\n      longestLength =\
    \ longestLength + 1\n    else\n      longest = strings[longestLength]\n      longestLength\
    \ = longestLength + 1\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n \
    \ local longest_string = strings[1]\n  for i = 2, #strings do\n    local len =\
    \ strings[i]:len()\n    if len > longest_len then\n      longest_len = len\n \
    \     longest_string = strings[i]\n    end\n  end\n  return longest_string\nend",
  "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  local longest, longestLength, longestString\n  for _, str in ipairs(strings)\
    \ do\n    if longestLength == nil then\n      longest, longestLength, longestString\
    \ = str, 1, str\n    elseif longestLength > #str then\n      longest, longestLength,\
    \ longestString = str, #str, str\n    end\n  end\n  return longest\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longestLength = strings[1], 1\n  for i = 2, #strings do\n    local\
    \ length = strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == strings[i-1] then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      longest = strings[i]\n    else\n      break\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = strings[1], 1\n  for i = 2, #strings\
    \ do\n    if strings[i] == strings[longestLength] then\n      longestLength =\
    \ longestLength + 1\n    else\n      if longestLength > longest:len() then\n \
    \       longest, longestLength = strings[i], longestLength\n      end\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n      -- Empty\
    \ strings are ignored\n      continue\n    end\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      longest = strings[i]\n    else\n      break\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n\
    \    local length = string.len(strings[i])\n    if length > longestLength then\n\
    \      longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == strings[i] then\n      longest = strings[i]\n\
    \    else\n      break\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, string in ipairs(strings) do\n    local length\
    \ = #string\n    if length > longestLength then\n      longest, longestLength\
    \ = string, length\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == strings[i] then\n      longest = strings[i]\n    else\n\
    \      break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_length = strings[1]:len()\n  for i = 2,\
    \ #strings do\n    if strings[i]:len() > longest_length then\n      longest_length\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  local\
    \ longest = nil\n  local length = 0\n  for _, str in ipairs(strings) do\n    length\
    \ = length + #str\n    if length > #longest then\n      longest = str\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest then\n      longest = strings[i]\n    else\n      return longest\n \
    \   end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, s in ipairs(strings) do\n    if longestLength < #s then\n      longest,\
    \ longestLength = s, #s\n    end\n  end\n  return longest or strings[1]\nend",
  "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  local longest_string = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == strings[i-1] then\n      longest = strings[i]\n    else\n\
    \      break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  local longest = strings[1]\n  for i\
    \ = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n\
    \  for i = 2, #strings do\n    local len = #strings[i]\n    if len > longest_len\
    \ then\n      longest, longest_len = strings[i], len\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = strings[1]:len()\n  for i = 2, #strings do\n    local len = strings[i]:len()\n\
    \    if len > longest_len then\n      longest_len = len\n    end\n  end\n  return\
    \ strings[#strings]\nend", "  if #strings == 0 then\n    return nil\n  end\n \
    \ local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[i] then\n      longest\
    \ = strings[i]\n    else\n      break\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == nil\
    \ then break end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = strings[1], 1\n  for i = 2, #strings do\n    local length = strings[i]\n \
    \   if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n\
    \  for i = 2, #strings do\n    local len = #strings[i]\n    if len > longest_len\
    \ then\n      longest, longest_len = strings[i], len\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == strings[1] then\n      longest = strings[i]\n\
    \    else\n      break\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1],\
    \ #strings[1]\n  for i = 2, #strings do\n    if #strings[i] == longest_len then\n\
    \      longest = strings[i]\n      longest_len = #strings[i]\n    else\n     \
    \ break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return longest_len == strings[1]:len() and strings[1] or nil\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[#strings] then\n      longest = strings[i]\n    else\n      break\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longest_len = strings[1], 1\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[longest_len] then\n      longest_len = i\n    else\n      if longest_len\
    \ > #longest then\n        longest, longest_len = strings[i], longest_len\n  \
    \    end\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest\nend", "  local longest = nil\n  local longest_len\
    \ = -1\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n   \
    \ if len > longest_len then\n      longest = strings[i]\n      longest_len = len\n\
    \    end\n  end\n  return longest or strings[1]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n\
    \  for i = 2, #strings do\n    local len = #strings[i]\n    if len > longest_len\
    \ then\n      longest, longest_len = strings[i], len\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  local longest_len = -1\n  for i = 1, #strings\
    \ do\n    local len = #strings[i]\n    if len > longest_len then\n      longest\
    \ = strings[i]\n      longest_len = len\n    end\n  end\n  return longest or strings[1]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[#strings] then\n     \
    \ longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest = nil\n  local longest_len = -1\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest, longest_len\
    \ = str, len\n    end\n  end\n  return longest or strings[1]\nend", "  local longest,\
    \ longestLength, longestString = nil, 0, nil\n  for _, string in ipairs(strings)\
    \ do\n    if longestLength == nil then\n      longest, longestLength, longestString\
    \ = string, #string, string\n    else\n      if #string > longestLength then\n\
    \        longest, longestLength, longestString = string, #string, string\n   \
    \   end\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  local longest = nil\n  local longest_len\
    \ = -1\n  for _, str in ipairs(strings) do\n    local len = #str\n    if len >\
    \ longest_len then\n      longest = str\n      longest_len = len\n    end\n  end\n\
    \  return longest or strings[1]\nend", "  local longest = strings[1]\n  for i\
    \ = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  local longest_string = strings[1]\n  for i = 2, #strings do\n    local len\
    \ = strings[i]:len()\n    if len > longest_len then\n      longest_len = len\n\
    \      longest_string = strings[i]\n    end\n  end\n  return longest_string\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == longest_len then\n      longest\
    \ = strings[i]\n      longest_len = #strings[i]\n    else\n      break\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longest_len = strings[1], #strings[1]\n  for i\
    \ = 2, #strings do\n    if #strings[i] == longest_len then\n      longest = strings[i]\n\
    \      longest_len = #strings[i]\n    else\n      break\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  local\
    \ longest_len = -1\n  local longest_string\n  for _, str in ipairs(strings) do\n\
    \    local len = #str\n    if len > longest_len then\n      longest_len = len\n\
    \      longest_string = str\n    end\n  end\n  return longest_string\nend", " \
    \ local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    if str and str:len() > longestLength then\n      longest, longestLength =\
    \ str, str:len()\n    end\n  end\n  return longest or strings[1]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #longest\
    \ < #strings[i] then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], #strings[1]\n  for i = 2, #strings do\n    if #strings[i] == longest_len\
    \ then\n      longest = strings[i]\n      longest_len = #strings[i]\n    else\n\
    \      break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings\
    \ do\n    local len = strings[i]:len()\n    if len > longest_len then\n      longest_len\
    \ = len\n    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == strings[#strings] then\n      longest = strings[i]\n   \
    \ else\n      break\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\nend", "  local longest, longestLength =\
    \ nil, 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest or strings[1]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest, longestLength = strings[1], 1\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[longestLength] then\n      longestLength = i\n    else\n      if\
    \ longestLength > longest:len() then\n        longest, longestLength = strings[i],\
    \ longestLength\n      end\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      break\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longest_len = strings[1],\
    \ 1\n  for i = 2, #strings do\n    if strings[i] == strings[longest_len] then\n\
    \      longest_len = i\n    else\n      if longest_len > #strings then\n     \
    \   return strings[longest_len]\n      else\n        longest = strings[i]\n  \
    \      longest_len = i\n      end\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] == strings[longestLength]\
    \ then\n      longestLength = i\n    else\n      if longestLength > longest:len()\
    \ then\n        longest, longestLength = strings[i], longestLength\n      end\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest_len = strings[1]:len()\n  local longest_string = strings[1]\n  for i\
    \ = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = strings[i]\n    end\n\
    \  end\n  return longest_string\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n    \
    \  break\n    end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] == strings[longest_len]\
    \ then\n      longest_len = i\n    else\n      if longest_len > #longest then\n\
    \        longest, longest_len = strings[longest_len], longest_len\n      end\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  local longest_string =\
    \ strings[1]\n  for i = 2, #strings do\n    local len = strings[i]:len()\n   \
    \ if len > longest_len then\n      longest_len = len\n      longest_string = strings[i]\n\
    \    end\n  end\n  return longest_string\nend", "  if #strings == 0 then\n   \
    \ return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      break\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest_len then\n      longest_len = strings[i]:len()\n    end\n  end\n \
    \ return longest_len == strings[1]:len() and strings[1] or nil\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n \
    \ for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest_len then\n      longest_len\
    \ = strings[i]:len()\n    end\n  end\n  return strings[#strings]\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      longest = strings[i]\n    else\n      return longest\n    end\n\
    \  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return strings[#strings]\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n  \
    \  local length = string.len(strings[i])\n    if length > longestLength then\n\
    \      longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == strings[1] then\n      longest = strings[i]\n    else\n      break\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n    local len\
    \ = strings[i]:len()\n    if len > longest_len then\n      longest_len = len\n\
    \    end\n  end\n  return strings[#strings]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\
    \" then\n      continue\n    end\n    local length = #str\n    if length > longestLength\
    \ then\n      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] == strings[longest_len]\
    \ then\n      longest_len = i\n    else\n      if longest_len > #strings then\n\
    \        return strings[longest_len]\n      else\n        return strings[longest_len\
    \ + 1]\n      end\n    end\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
