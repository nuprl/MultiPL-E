name: HumanEval_116_sort_array
language: lua
results:
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(arr)\n\
    \    local counts = {}\n    for i = 1, #arr do\n      local v = arr[i]\n     \
    \ if v ~= 0 then\n        counts[v] = counts[v] + 1 or 1\n      end\n    end\n\
    \    return counts\n  end\n  local counts = count_ones(arr)\n  local sorted =\
    \ {}\n  for i = 1, #arr do\n    local v = arr[i]\n    sorted[v] = counts[v]\n\
    \  end\n  table.sort(sorted, function(a, b)\n    return counts[a] > counts[b]\
    \ or tonumber(a) > tonumber(b)\n  end)\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3ifcc3l.lua:14:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpe3ifcc3l.lua:19: in function 'candidate'\n\t/tmp/tmpe3ifcc3l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_search(arr,\
    \ num)\n    local low = 0\n    local high = #arr\n    while low < high do\n  \
    \    local mid = math.floor((low + high) / 2)\n      local midval = arr[mid]\n\
    \      if midval == num then\n        return mid\n      elseif midval > num then\n\
    \        high = mid\n      else\n        low = mid\n      end\n    end\n    return\
    \ nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfh5au_8.lua:39: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function compare(lhs, rhs)\n    if lhs == 0 then\n\
    \      return 0\n    end\n    if lhs == -1 then\n      return 1\n    end\n   \
    \ if lhs == 1 then\n      if rhs == 0 then\n        return -1\n      elseif rhs\
    \ == 1 then\n        return 0\n      else\n        return lhs - rhs\n      end\n\
    \    end\n    if rhs == 0 then\n      return -1\n    end\n    if rhs == 1 then\n\
    \      return 0\n    end\n    return lhs - rhs\n  end\n  -- Sort arr based on\
    \ number of ones in their binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  table.sort(arr, compare)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjup7v0h6.lua:37:\
    \ attempt to perform arithmetic on local 'lhs' (a nil value)\nstack traceback:\n\
    \t[C]: in function 'sort'\n\t/tmp/tmpjup7v0h6.lua:45: in function 'candidate'\n\
    \t/tmp/tmpjup7v0h6.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of the\
    \ array is always sorted ascending.\n  -- The second element of the array is sorted\
    \ based on number of ones in its binary representation.\n  -- The third element\
    \ of the array is sorted based on decimal value.\n  -- The fourth element of the\
    \ array is sorted ascending based on its decimal value.\n  -- The fifth element\
    \ of the array is sorted ascending based on its binary representation.\n  -- The\
    \ sixth element of the array is sorted ascending based on its binary representation.\n\
    \  -- The seventh element of the array is sorted ascending based on its decimal\
    \ value.\n  -- The eighth element of the array is sorted ascending based on its\
    \ decimal value.\n  -- The ninth element of the array is sorted ascending based\
    \ on its binary representation.\n  -- The tenth element of the array is sorted\
    \ ascending based on its binary representation.\n  -- The eleventh element of\
    \ the array is sorted ascending based on its decimal value.\n  -- The twelfth\
    \ element of the array is sorted ascending based on its decimal value.\n  -- The\
    \ thirteenth element of the array is sorted ascending based on its binary representation.\n\
    \  -- The fourteenth element of the array is sorted ascending based on its decimal\
    \ value.\n  -- The fifteenth element of the array is sorted ascending based on\
    \ its binary representation.\n  -- The sixteenth element of the array is sorted\
    \ ascending based on its binary representation.\n  -- The seventeenth element\
    \ of the array is sorted ascending based on its decimal value.\n  -- The eighteenth\
    \ element of the array is sorted ascending based on its decimal value.\n  -- The\
    \ nineteenth element of the array is sorted ascending based on its binary representation.\n\
    \  -- The twentieth element of the array is sorted ascending based on its decimal\
    \ value.\n  -- The twenty-first element of the array is sorted ascending based\
    \ on its binary representation.\n  -- The twenty-second element of the array is\
    \ sorted ascending based on its decimal value.\n  -- The twenty-third element\
    \ of the array is sorted ascending based on its binary representation.\n  -- The\
    \ twenty-fourth element of the array is sorted ascending based on its decimal\
    \ value.\n  -- The twenty-fifth element of the array is sorted ascending based\
    \ on its binary representation.\n  -- The twenty-sixth element of the array is\
    \ sorted ascending based on its binary representation.\n  -- The twenty-seventh\
    \ element of the array is sorted ascending based on its decimal value.\n  -- The\
    \ twenty-eighth element of the array is sorted ascending based on its binary representation.\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpp4foo227.lua:52: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all non-negative integers to binary string.\n  -- Then sort them in ascending\
    \ order according to their binary representation.\n  -- Finally, convert them\
    \ back to integers.\n  -- The binary representation is like \"0111001\" for \"\
    4\".\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function bin2dec(bin)\n    local dec = 0\n    for i\
    \ = 1, #bin do\n      dec = dec + bin:sub(i, i) * 2^i\n    end\n    return dec\n\
    \  end\n  -- The second step is to convert all non-negative integers to decimal\
    \ string.\n  -- Then sort them in ascending order according to their decimal representation.\n\
    \  -- Finally, convert them back to integers.\n  -- The decimal representation\
    \ is like \"011001\" for \"4\".\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  local function dec2bin(dec)\n\
    \    local bin = \"\"\n    local i = 0\n    while dec > 0 do\n      bin = dec:sub(i,\
    \ i) + bin\n      dec = dec - 2^i\n      i = i + 1\n    end\n    return bin\n\
    \  end\n  -- The third step is to convert all non-negative integers to binary\
    \ string.\n  -- Then sort them in ascending order according to their binary representation.\n\
    \  -- Finally, convert them back to integers.\n  -- The binary representation\
    \ is like \"0111001\" for \"4\".\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  local function bin2dec2(bin)\n\
    \    local dec = 0\n    for i = 1, #bin do\n      dec = dec + bin:sub(i, i) *\
    \ 2^i\n    end\n    return dec\n  end\n  -- The fourth step is to convert all\
    \ non-negative integers to decimal string.\n  -- Then sort them in ascending order\
    \ according to their decimal representation.\n  -- Finally, convert them back\
    \ to integers.\n  -- The decimal representation is like \"011001\" for \"4\".\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpikhx_zv0.lua:73: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if rhs == 0 then\n\
    \      return 1\n    end\n    return lhs < rhs and -1 or 1\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5krkq7o7.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp5krkq7o7.lua:18: in function 'candidate'\n\t/tmp/tmp5krkq7o7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphiu6nzeh.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort by number of ones\n\
    \  local function count_ones(arr)\n    local counts = {}\n    for i = 1, #arr\
    \ do\n      local n = math.floor(math.log2(arr[i]))\n      if counts[n] == nil\
    \ then\n        counts[n] = 0\n      end\n      counts[n] = counts[n] + 1\n  \
    \  end\n    return counts\n  end\n  -- sort by decimal value\n  local function\
    \ sort_by_decimal(arr)\n    local counts = count_ones(arr)\n    local sorted_arr\
    \ = {}\n    for i = 1, #arr do\n      local n = counts[i]\n      -- sort by decimal\
    \ value\n      local decimal_value = math.floor(math.log2(arr[i]))\n      -- sort\
    \ by number of ones\n      if n > 1 then\n        local tmp = arr[i]\n       \
    \ arr[i] = arr[n]\n        arr[n] = tmp\n      end\n      -- sort by decimal value\n\
    \      local tmp = decimal_value\n      decimal_value = decimal_value - n\n  \
    \    -- sort by decimal value\n      local tmp = arr[i]\n      arr[i] = arr[n]\n\
    \      arr[n] = tmp\n      -- sort by decimal value\n      local tmp = decimal_value\n\
    \      decimal_value = decimal_value - n\n      -- sort by decimal value\n   \
    \   local tmp = arr[i]\n      arr[i] = arr[n]\n      arr[n] = tmp\n      -- sort\
    \ by decimal value\n      local tmp = decimal_value\n      decimal_value = decimal_value\
    \ - n\n      -- sort by decimal value\n      local tmp = arr[i]\n      arr[i]\
    \ = arr[n]\n      arr[n] = tmp\n      -- sort by decimal value\n      local tmp\
    \ = decimal_value\n      decimal_value = decimal_value - n\n      -- sort by decimal\
    \ value\n      local tmp = arr[i]\n      arr[i] = arr[n]\n      arr[n] = tmp\n\
    \      -- sort by decimal value\n      local tmp = decimal_value\n      decimal_value\
    \ = decimal_value - n\n      -- sort by decimal value\n      local tmp = arr[i]\n\
    \      arr[i] = arr[n]\n      arr[n] = tmp\n      -- sort by decimal value\n \
    \     local tmp = decimal_value\n      decimal_value = decimal_value - n\n   \
    \   -- sort by decimal value\n      local tmp = arr[i]\n      arr[i] = arr[n]\n\
    \      arr[n] = tmp\n      -- sort by decimal value\n      local tmp = decimal_value\n\
    \      decimal_value = decimal_value - n\n      -- sort by decimal value\n   \
    \   local tmp = arr[i]\n      arr[i] = arr[n]\n      arr[n] = tmp\n      -- sort\
    \ by decimal value\n      local tmp = decimal_value\n      decimal_value = decimal_value\
    \ - n\n      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyacxh5ne.lua:102: 'end' expected (to close 'for' at line 25)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, count)\n    if count == 0 then\n      arr[i] = arr[i]\n      return\n   \
    \ end\n    if arr[i] == 1 then\n      helper(arr, i + 1, count - 1)\n    else\n\
    \      helper(arr, i, count - 1)\n      helper(arr, i + 1, count)\n    end\n \
    \ end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws3zesr5.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpws3zesr5.lua:18: in function 'helper'\n\
    \t/tmp/tmpws3zesr5.lua:18: in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18: in\
    \ function 'helper'\n\t/tmp/tmpws3zesr5.lua:18: in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18:\
    \ in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18: in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18:\
    \ in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18: in function 'helper'\n\t/tmp/tmpws3zesr5.lua:18:\
    \ in function 'helper'\n\t...\n\nRan 1 tests in 0.183 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each number.\n  -- For this purpose, use bitwise operations.\n\
    \  local function count_ones(x)\n    local count = 0\n    for i = 1, 8 do\n  \
    \    if x % 2^i == 0 then\n        count = count + 1\n      end\n    end\n   \
    \ return count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg2p61p9g.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and sort by decimal value\n  -- if number of ones is equal.\n  -- We sort by\
    \ binary representation and sort by decimal value\n  -- if number of ones is equal.\n\
    \  -- We sort by binary representation and sort by decimal value\n  -- if number\
    \ of ones is equal.\n  -- We sort by binary representation and sort by decimal\
    \ value\n  -- if number of ones is equal.\n  -- We sort by binary representation\
    \ and \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppu1wlcu6.lua:72: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for counting number of ones.\n  -- This representation is easy to convert to\
    \ decimal and sort by it.\n  local function bin2dec(bin)\n    local dec = 0\n\
    \    for i = 1, 8 do\n      dec = dec + bin:sub(i, i) * 2^i\n    end\n    return\
    \ dec\n  end\n  -- We use decimal representation for sorting numbers with same\
    \ number of ones.\n  -- This representation is easy to convert to binary and sort\
    \ by it.\n  local function dec2bin(dec)\n    local bin = \"\"\n    local i = 0\n\
    \    while dec > 0 do\n      bin = string.sub(bin, i, i-1) + dec:mod(2):tostring()\n\
    \      dec = dec:div(2)\n      i = i + 1\n    end\n    return bin\n  end\n  --\
    \ We use decimal representation for counting number of ones.\n  -- This representation\
    \ is easy to convert to binary and sort by it.\n  local function dec2bin2(dec)\n\
    \    local bin = \"\"\n    local i = 0\n    while dec > 0 do\n      bin = string.sub(bin,\
    \ i, i-1) + dec:mod(2):tostring()\n      dec = dec:div(2)\n      i = i + 1\n \
    \   end\n    return bin\n  end\n  -- We use decimal representation for counting\
    \ number of ones.\n  -- This representation is easy to convert to binary and sort\
    \ by it.\n  local function dec2bin3(dec)\n    local bin = \"\"\n    local i =\
    \ 0\n    while dec > 0 do\n      bin = string.sub(bin, i, i-1) + dec:mod(2):tostring()\n\
    \      dec = dec:div(2)\n      i = i + 1\n    end\n    return bin\n  end\n  --\
    \ We use decimal representation for counting number of ones.\n  -- This representation\
    \ is easy to convert to binary and sort by it.\n  local function dec2bin4(dec)\n\
    \    local bin = \"\"\n    local i = 0\n    while dec > 0 do\n      bin = string.sub(bin,\
    \ i, i-1) + dec:mod(2):tostring()\n      dec = dec:div(2)\n      i = i + 1\n \
    \   end\n    return bin\n  end\n  -- We use decimal representation for counting\
    \ number of ones.\n  -- This representation is easy to convert to binary and sort\
    \ by it.\n  local function dec2bin5(dec)\n    local bin = \"\"\n    local i =\
    \ 0\n    while dec > 0 do\n      bin = string.sub(bin, i, i-1) + dec:mod(2):tostring()\n\
    \      dec = dec:div(2)\n      i = i + 1\n    end\n    return bin\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpurz0g37f.lua:78: 'end' expected (to close 'function' at line\
    \ 68) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ each element of arr to binary string.\n  -- The binary string has length of\
    \ 2^n. For example, for n=3, the binary\n  -- representation of 3 is \"11\", which\
    \ has length 3.\n  -- The binary string can be converted to decimal string by\
    \ adding \"0\"\n  -- at the beginning.\n  -- >>> bin(sort_array([1]))\n  -- >>>\
    \ '0b1'\n  -- >>> bin(sort_array([2]))\n  -- >>> '0b10'\n  -- >>> bin(sort_array([3]))\n\
    \  -- >>> '0b11'\n  -- >>> bin(sort_array([4]))\n  -- >>> '0b100'\n  -- >>> bin(sort_array([5]))\n\
    \  -- >>> '0b101'\n  -- >>> bin(sort_array([6]))\n  -- >>> '0b110'\n  -- >>> bin(sort_array([7]))\n\
    \  -- >>> '0b111'\n  -- >>> bin(sort_array([8]))\n  -- >>> '0b1000'\n  -- >>>\
    \ bin(sort_array([9]))\n  -- >>> '0b1001'\n  -- >>> bin(sort_array([10]))\n  --\
    \ >>> '0b1010'\n  -- >>> bin(sort_array([11]))\n  -- >>> '0b1011'\n  -- >>> bin(sort_array([12]))\n\
    \  -- >>> '0b1100'\n  -- >>> bin(sort_array([13]))\n  -- >>> '0b1101'\n  -- >>>\
    \ bin(sort_array([14]))\n  -- >>> '0b1110'\n  -- >>> bin(sort_array([15]))\n \
    \ -- >>> '0b1111'\n  -- >>> bin(sort_array([16]))\n  -- >>> '0b10000'\n  -- >>>\
    \ bin(sort_array([17]))\n  -- >>> '0b10001'\n  -- >>> bin(sort_array([18]))\n\
    \  -- >>> '0b10010'\n  -- >>> bin(sort_array([19]))\n  -- >>> '0b10011'\n  --\
    \ >>> bin(sort_array([20]))\n  -- >>> '0b10100'\n  -- >>> bin(sort_array([21]))\n\
    \  -- >>> '0b10101'\n  -- >>> bin(sort_array([22]))\n  -- >>> '0b10110'\n  --\
    \ >>> bin(sort_array([23]))\n  -- >>> '0b10111'\n  -- >>> bin(sort_array([24]))\n\
    \  -- >>> '0b11000'\n  -- >>> bin(sort_array([25]))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk_ie8rx0.lua:77: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs == -1 then\n\
    \      return 1\n    end\n    if lhs == 1 then\n      if rhs == 0 then\n     \
    \   return -1\n      elseif rhs == 1 then\n        return lhs\n      else\n  \
    \      return lhs - rhs\n      end\n    end\n    if rhs == 0 then\n      return\
    \ 1\n    end\n    if rhs == -1 then\n      return -1\n    end\n    if rhs == 1\
    \ then\n      return lhs\n    end\n    return lhs - rhs\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4eon802r.lua:34:\
    \ attempt to perform arithmetic on local 'lhs' (a nil value)\nstack traceback:\n\
    \t[C]: in function 'sort'\n\t/tmp/tmp4eon802r.lua:36: in function 'candidate'\n\
    \t/tmp/tmp4eon802r.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      return arr[i]\n    end\n    if arr[i] == 1\
    \ then\n      return helper(arr, i + 1, j)\n    end\n    if arr[j] == 1 then\n\
    \      return helper(arr, i, j - 1)\n    end\n    return helper(arr, i + 1, j\
    \ - 1)\n  end\n  return helper(arr, 1, #arr)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(n)\n      local s = ''\n      while n ~= 0\
    \ do\n        s = string.format('%s%d', s, n*2)\n        n = math.floor(n/2)\n\
    \      end\n      return tonumber(s)\n    end\n    local function dec2bin(n)\n\
    \      local s = ''\n      while n ~= 0 do\n        s = string.format('%s%d',\
    \ s, n*2)\n        n = math.floor(n/2)\n      end\n      return s\n    end\n \
    \   local function dec2hex(n)\n      local s = ''\n      while n ~= 0 do\n   \
    \     s = string.format('%s%x', s, n*16)\n        n = math.floor(n/16)\n     \
    \ end\n      return s\n    end\n    local function hex2dec(n)\n      local s =\
    \ ''\n      while n ~= 0 do\n        s = string.format('%s%x', s, n*16)\n    \
    \    n = math.floor(n/16)\n      end\n      return tonumber(s)\n    end\n    local\
    \ function hex2bin(n)\n      local s = ''\n      while n ~= 0 do\n        s =\
    \ string.format('%s%x', s, n*16)\n        n = math.floor(n/16)\n      end\n  \
    \    return s\n    end\n    local function bin2hex(n)\n      local s = ''\n  \
    \    while n ~= 0 do\n        s = string.format('%s%d', s, n*2)\n        n = math.floor(n/2)\n\
    \      end\n      return s\n    end\n    local function bin2dec(n)\n      local\
    \ s = ''\n      while n ~= 0 do\n        s = string.format('%s%d', s, n*2)\n \
    \       n = math.floor(n/2)\n      end\n      return tonumber(s)\n    end\n  \
    \  local function dec2bin(n)\n      local s = ''\n      while n ~= 0 do\n    \
    \    s = string.format('%s%d', s, n*2)\n        n = math.floor(n/2)\n      end\n\
    \      return s\n    end\n    local function dec2hex(n)\n      local s = ''\n\
    \      while n ~= 0 do\n        s = string.format('%s%x', s, n*16)\n        n\
    \ = math.floor(n/16)\n      end\n      return s\n    end\n    local function hex2dec(n)\n\
    \      local s = ''\n      while n ~= 0 do\n        s = string.format('%s%x',\
    \ s, n*16)\n        n = math.floor(n/16)\n      end\n      return tonumber(s)\n\
    \    end\n    local function hex2bin(n)\n      local s = ''\n      while n ~=\
    \ 0 do\n        s = string.format('%s%x', s, n*16)\n        n = math.floor(n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg4zkke9y.lua:95: ')' expected (to close '(' at line 94) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order according to number of ones in binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order according to decimal value\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in descending order according to number of ones in binary representation\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order according\
    \ to decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2,\
    \ 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array\
    \ in descending order according to number of ones in binary representation\n \
    \ -- >>> sort_array([1, 5, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0,\
    \ 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order according\
    \ to decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], false) == [5, 4, 3, 2,\
    \ 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], false) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort array\
    \ in descending order according to number of ones in binary representation\n \
    \ -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order according\
    \ to decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2,\
    \ 1]\n  -- >>> sort_array([\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbzpx2ek1.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by multiplying\
    \ all numbers by -1 and adding 1.\n  -- This can be done by subtracting all numbers\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all numbers by -1\
    \ and adding 1.\n  -- This can be done by subtracting all numbers by -1 and adding\
    \ 1.\n  -- This can be done by multiplying all numbers by -1 and adding 1.\n \
    \ -- This can be done by subtracting all numbers by -1 and adding 1.\n  -- This\
    \ can be done by multiplying all numbers by -1 and adding 1.\n  -- This can be\
    \ done by subtracting all numbers by -1 and adding 1.\n  -- This can be done by\
    \ multiplying all numbers by -1 and adding 1.\n  -- This can be done by subtracting\
    \ all numbers by -1 and adding 1.\n  -- This can be done by multiplying all numbers\
    \ by -1 and adding 1.\n  -- This can be done by subtracting all numbers by -1\
    \ and adding 1.\n  -- This can be done by multiplying all numbers by -1 and adding\
    \ 1.\n  -- This can be done by subtracting all numbers by -1 and adding 1.\n \
    \ -- This can be done by multiplying all numbers by -1 and adding 1.\n  -- This\
    \ can be done by subtracting all numbers by -1 and adding 1.\n  -- This can be\
    \ done by multiplying all numbers by -1 and adding 1.\n  -- This can be done by\
    \ subtracting all numbers by -1 and adding 1.\n  -- This can be done by multiplying\
    \ all numbers by -1 and adding 1.\n  -- This can be done by subtracting all numbers\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all numbers by -1\
    \ and adding 1.\n  -- This can be done by subtracting all numbers by -1 and adding\
    \ 1.\n  -- This can be done by multiplying all numbers by -1 and adding 1.\n \
    \ -- This can be done by subtracting all numbers by -1 and adding 1.\n  -- This\
    \ can be done by multiplying all numbers by -1 and adding 1.\n  -- This can be\
    \ done by subtracting all numbers by -1 and adding 1.\n  -- This can be done by\
    \ multiplying all numbers by -1 and adding 1.\n  -- This can be done by subtracting\
    \ all numbers by -1 and adding 1.\n  -- This can be done by multiplying all numbers\
    \ by -1 and adding 1.\n  -- This can be done by subtracting all numbers by -1\
    \ and adding 1.\n  -- This can be done by multiplying all numbers by -1 and adding\
    \ 1.\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjzdv5oer.lua:56: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2p_pvnv0.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by multiplying\
    \ all numbers by -1 and adding 1.\n  -- This can be done in O(n) time using bit\
    \ operations.\n  -- >>> sort_array([-1, -2, -3]) == [-3, -2, -1]\n  -- >>> sort_array([-100,\
    \ -200, -300]) == [-100, -200, -300]\n  -- >>> sort_array([-100, -200, -300, -400,\
    \ -500]) == [-100, -200, -300, -500, -400]\n  -- >>> sort_array([-100, -200, -300,\
    \ -400, -500, -600]) == [-100, -200, -300, -400, -500, -600]\n  -- >>> sort_array([-100,\
    \ -200, -300, -400, -500, -600, -700]) == [-100, -200, -300, -400, -500, -600,\
    \ -700]\n  -- >>> sort_array([-100, -200, -300, -400, -500, -600, -700, -800])\
    \ == [-100, -200, -300, -400, -500, -600, -700, -800]\n  -- >>> sort_array([-100,\
    \ -200, -300, -400, -500, -600, -700, -800, -900]) == [-100, -200, -300, -400,\
    \ -500, -600, -700, -800, -900]\n  -- >>> sort_array([-100, -200, -300, -400,\
    \ -500, -600, -700, -800, -900, -1000]) == [-100, -200, -300, -400, -500, -600,\
    \ -700, -800, -900, -1000]\n  -- >>> sort_array([-100, -200, -300, -400, -500,\
    \ -600, -700, -800, -900, -1000, -2000]) == [-100, -200, -300, -400, -500, -600,\
    \ -700, -800, -900, -1000, -2000]\n  -- >>> sort_array([-100, -200, -300, -400,\
    \ -500, -600, -700, -800, -900, -1000, -2000, -3000]) == [-100, -200, -300, -400,\
    \ -500, -600, -700, -800, -900, -1000, -2000, -3000]\n  -- >>> sort_array([-100,\
    \ -200, -300, -400, -500, -600, -700, -800, -900, -1000, -2000, -3000, -4000])\
    \ == [-100, -200, -300, -400, -500, -600, -700, -800, -900, -1000, -2000, -3000,\
    \ -4000]\n  -- >>> sort_array([-100, -\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgrp2obue.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all non-negative integers to binary strings:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == \"0101 0111 1011 1111 1110\"\n  -- >>> sort_array([-2, -3, -4, -5,\
    \ -6]) == \"-0001 -0010 -0100 -1000 -1001 -1000 -1111 -1110 -1111 -1101 -1101\
    \ -1100 -1100 -1101 -1110 -1110\"\n  -- >>> sort_array([1, 0, 2, 3, 4]) == \"\
    0010 0011 0100 0101 0110 0111 0111 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001\
    \ 1001 1001 1001 1001 1001 1001 1001 1001 1001 \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvr9eypy4.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\n  -- Recursive case\n  local pivot = arr[1]\n\
    \  local less, greater = {}, {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n\
    \      table.insert(less, arr[i])\n    elseif arr[i] > pivot then\n      table.insert(greater,\
    \ arr[i])\n    end\n  end\n  return sort_array(less) + pivot + sort_array(greater)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbk2rhux.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\
    \t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\t/tmp/tmprbk2rhux.lua:23:\
    \ in function 'sort_array'\n\t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\
    \t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\t/tmp/tmprbk2rhux.lua:23:\
    \ in function 'sort_array'\n\t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\
    \t/tmp/tmprbk2rhux.lua:23: in function 'sort_array'\n\t/tmp/tmprbk2rhux.lua:23:\
    \ in function 'sort_array'\n\t...\n\nRan 1 tests in 0.245 seconds, 0 successes,\
    \ 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  local function count_ones(arr)\n    local counts = {}\n    for i = 1, #arr\
    \ do\n      local count = 0\n      local x = arr[i]\n      while x ~= 0 do\n \
    \       if x % 2 == 1 then\n          count = count + 1\n        end\n       \
    \ x = x >> 1\n      end\n      counts[i] = count\n    end\n    return counts\n\
    \  end\n  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp293nxs6f.lua:22: unexpected symbol near '>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left == 0 then\n      return right\n    end\n    if right ==\
    \ 0 then\n      return left\n    end\n    if left > right then\n      return 1\n\
    \    end\n    return -1\n  end\n  table.sort(arr, compare)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qymfkid.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp4qymfkid.lua:21: in function 'candidate'\n\t/tmp/tmp4qymfkid.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Initialize result array\n\
    \  local result = {}\n  -- Iterate through all elements in array\n  for i = 1,\
    \ #arr do\n    -- Initialize number of ones in current element\n    local num_ones\
    \ = 0\n    -- Iterate through all bits in current element\n    for j = 1, #arr[i]\
    \ do\n      -- If bit is one, increment number of ones\n      if arr[i][j] ==\
    \ 1 then\n        num_ones = num_ones + 1\n      end\n    end\n    -- If number\
    \ of ones is equal, sort based on decimal value\n    if num_ones == #arr[i] then\n\
    \      table.insert(result, arr[i])\n    end\n  end\n  -- Return sorted array\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rj4pkd5.lua:16:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp5rj4pkd5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      return arr\n    end\n    local m = math.floor(i\
    \ / 2)\n    local left = helper(arr, i, m)\n    local right = helper(arr, m +\
    \ 1, n)\n    local left_count = count_ones(left)\n    local right_count = count_ones(right)\n\
    \    if left_count > right_count then\n      return right\n    else\n      return\
    \ left\n    end\n  end\n  return helper(arr, 1, #arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoitqsb4.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpwoitqsb4.lua:14: in function 'helper'\n\
    \t/tmp/tmpwoitqsb4.lua:14: in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14: in\
    \ function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14: in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14:\
    \ in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14: in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14:\
    \ in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14: in function 'helper'\n\t/tmp/tmpwoitqsb4.lua:14:\
    \ in function 'helper'\n\t...\n\nRan 1 tests in 0.217 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- The result will be a table with one\
    \ element for each element in the input array.\n  local counts = {}\n  for _,\
    \ elem in ipairs(arr) do\n    local count = counts[elem] or 0\n    count = count\
    \ + 1\n    counts[elem] = count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpucifvabz.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- This can be done by converting each\
    \ element to binary string and\n  -- counting the number of 1s in each binary\
    \ string.\n  -- The result is a table where each element has a binary string as\
    \ its\n  -- key and its number of ones as its value.\n  local counts = {}\n  for\
    \ i = 1, #arr do\n    local bin = bit.bor(bit.lshift(bit.rshift(arr[i], 32), 24),\
    \ 32)\n    counts[bin] = counts[bin] or 1\n  end\n  -- The second step is to sort\
    \ the elements by number of ones.\n  -- This can be done by converting each binary\
    \ string to a decimal number\n  -- and sorting by its value.\n  -- The result\
    \ is a table where each element has a decimal number as its\n  -- key and its\
    \ number of ones as its value.\n  local sorted_counts = {}\n  for bin, count in\
    \ pairs(counts) do\n    sorted_counts[tonumber(bin, 2)] = count\n  end\n  -- The\
    \ third step is to sort the elements by decimal value.\n  -- This can be done\
    \ by converting each decimal number to binary string\n  -- and sorting by its\
    \ value.\n  -- The result is a table where each element has a binary string as\
    \ its\n  -- key and its decimal number as its value.\n  local sorted_sorted_counts\
    \ = {}\n  for bin, count in pairs(sorted_counts) do\n    sorted_sorted_counts[tonumber(bin,\
    \ 10)] = count\n  end\n  -- The fourth step is to merge the two sorted tables.\n\
    \  -- This can be done by iterating over each element in the sorted table\n  --\
    \ and comparing it with the element in the sorted table with its key.\n  -- If\
    \ the elements are equal, add the element to the result table.\n  -- The result\
    \ is a table where each element has a binary string as its\n  -- key and its decimal\
    \ number as its value.\n  local result = {}\n  for bin, count in pairs(sorted_sorted_counts)\
    \ do\n    for bin2, count2 in pairs(sorted_sorted_counts) do\n      if bin ==\
    \ bin2 then\n        result[bin] = count\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pywmya7.lua:16:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmp3pywmya7.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2rdkrz3.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpm2rdkrz3.lua:18: in function 'candidate'\n\t/tmp/tmpm2rdkrz3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else if lhs > rhs then return 1 else return\
    \ 0 end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7zzhe3n.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    local function bin2dec(bin)\n      local dec = 0\n      for i =\
    \ 1, 8 do\n        local bin = bin:sub(1, i)\n        dec = (dec + bin2dec[bin])\
    \ % 10\n      end\n      return dec\n    end\n    local function dec2bin(dec)\n\
    \      local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec:div(10)\n\
    \        bin = dec:add(bin)\n      end\n      return bin\n    end\n    local function\
    \ bin2bin(bin)\n      local dec = 0\n      for i = 1, 8 do\n        local bin\
    \ = bin:sub(1, i)\n        dec = (dec + bin2dec[bin]) % 2\n      end\n      return\
    \ dec\n    end\n    local bins = {}\n    local dec = 0\n    for i = 1, #arr do\n\
    \      local bin = dec2bin(dec)\n      bins[#bins+1] = bin\n      dec = dec +\
    \ bin2dec[bin]\n    end\n    table.sort(bins, compare)\n    local dec = 0\n  \
    \  for i = 1, #arr do\n      local bin = dec2bin(dec)\n      arr[#arr + 1] = bin2bin(bin)\n\
    \      dec = dec + bin2dec[bin]\n    end\n    return arr\n  end\n  return sort_array(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of arr\
    \ is already sorted\n  -- The rest are sorted based on their binary representation\n\
    \  -- The first element of arr is already sorted\n  -- The rest are sorted based\
    \ on their decimal representation\n  -- The first element of arr is already sorted\n\
    \  -- The rest are sorted based on their binary representation\n  -- The first\
    \ element of arr is already sorted\n  -- The rest are sorted based on their decimal\
    \ representation\n  -- The first element of arr is already sorted\n  -- The rest\
    \ are sorted based on their binary representation\n  -- The first element of arr\
    \ is already sorted\n  -- The rest are sorted based on their decimal representation\n\
    \  -- The first element of arr is already sorted\n  -- The rest are sorted based\
    \ on their binary representation\n  -- The first element of arr is already sorted\n\
    \  -- The rest are sorted based on their decimal representation\n  -- The first\
    \ element of arr is already sorted\n  -- The rest are sorted based on their binary\
    \ representation\n  -- The first element of arr is already sorted\n  -- The rest\
    \ are sorted based on their decimal representation\n  -- The first element of\
    \ arr is already sorted\n  -- The rest are sorted based on their binary representation\n\
    \  -- The first element of arr is already sorted\n  -- The rest are sorted based\
    \ on their decimal representation\n  -- The first element of arr is already sorted\n\
    \  -- The rest are sorted based on their binary representation\n  -- The first\
    \ element of arr is already sorted\n  -- The rest are sorted based on their decimal\
    \ representation\n  -- The first element of arr is already sorted\n  -- The rest\
    \ are sorted based on their binary representation\n  -- The first element of arr\
    \ is already sorted\n  -- The rest are sorted based on their decimal representation\n\
    \  -- The first element of arr is already sorted\n  -- The rest are sorted based\
    \ on their binary representation\n  -- The first element of arr is already sorted\n\
    \  -- The rest are sorted based on their decimal representation\n  -- The first\
    \ element of arr is already sorted\n  -- The rest are sorted based on their binary\
    \ representation\n  -- The first element of arr is already sorted\n  -- The rest\
    \ are sorted based on their decimal representation\n  -- The first element of\
    \ arr is already sorted\n  -- The rest are sorted based on their binary representation\n\
    \  -- The first element of arr is already sorted\n  -- The rest are sorted based\
    \ on their decimal representation\n  -- The first element of arr is already sorted\n\
    \  -- The rest are sorted based on their binary representation\n  -- The first\
    \ element of \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2v3ctyqw.lua:70: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal ~= 0 do\n      binary\
    \ = binary .. string.format('%010b', decimal % 2)\n      decimal = decimal >>\
    \ 1\n      i = i + 1\n    end\n    return binary\n  end\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal ~= 0 do\n      binary\
    \ = binary .. string.format('%010b', decimal % 2)\n      decimal = decimal >>\
    \ 1\n      i = i + 1\n    end\n    return binary\n  end\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal ~= 0 do\n      binary\
    \ = binary .. string.format('%010b', decimal % 2)\n      decimal = decimal >>\
    \ 1\n      i = i + 1\n    end\n    return binary\n  end\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal ~= 0 do\n      binary\
    \ = binary .. string.format('%010b', decimal % 2)\n      decimal = decimal >>\
    \ 1\n      i = i + 1\n    end\n    return binary\n  end\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal ~= 0 do\n      binary\
    \ = binary .. string.format('%010b', decimal % 2)\n      decimal = decimal >>\
    \ 1\n      i = i + 1\n    end\n    return binary\n  end\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpflip3apx.lua:21: unexpected symbol near '>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j, k)\n    if i == j then\n      arr[k] = arr[i]\n      return\n    end\n\
    \    if arr[i] == 0 then\n      arr[k] = arr[j]\n      helper(arr, i, j, k + 1)\n\
    \      return\n    end\n    if arr[j] == 0 then\n      arr[k] = arr[i]\n     \
    \ helper(arr, i + 1, j, k + 1)\n      return\n    end\n    if arr[i] > arr[j]\
    \ then\n      arr[k] = arr[j]\n      helper(arr, i, j, k + 1)\n    else\n    \
    \  arr[k] = arr[i]\n      helper(arr, i + 1, j, k + 1)\n    end\n  end\n  helper(arr,\
    \ 0, arr.length - 1, 0)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mfzzb6x.lua:32:\
    \ attempt to perform arithmetic on field 'length' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1mfzzb6x.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by multiplying\
    \ all elements by -1 and adding 1.\n  -- This can be done by multiplying all elements\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all elements by -1\
    \ and adding 1.\n  -- This can be done by multiplying all elements by -1 and adding\
    \ 1.\n  -- This can be done by multiplying all elements by -1 and adding 1.\n\
    \  -- This can be done by multiplying all elements by -1 and adding 1.\n  -- This\
    \ can be done by multiplying all elements by -1 and adding 1.\n  -- This can be\
    \ done by multiplying all elements by -1 and adding 1.\n  -- This can be done\
    \ by multiplying all elements by -1 and adding 1.\n  -- This can be done by multiplying\
    \ all elements by -1 and adding 1.\n  -- This can be done by multiplying all elements\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all elements by -1\
    \ and adding 1.\n  -- This can be done by multiplying all elements by -1 and adding\
    \ 1.\n  -- This can be done by multiplying all elements by -1 and adding 1.\n\
    \  -- This can be done by multiplying all elements by -1 and adding 1.\n  -- This\
    \ can be done by multiplying all elements by -1 and adding 1.\n  -- This can be\
    \ done by multiplying all elements by -1 and adding 1.\n  -- This can be done\
    \ by multiplying all elements by -1 and adding 1.\n  -- This can be done by multiplying\
    \ all elements by -1 and adding 1.\n  -- This can be done by multiplying all elements\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all elements by -1\
    \ and adding 1.\n  -- This can be done by multiplying all elements by -1 and adding\
    \ 1.\n  -- This can be done by multiplying all elements by -1 and adding 1.\n\
    \  -- This can be done by multiplying all elements by -1 and adding 1.\n  -- This\
    \ can be done by multiplying all elements by -1 and adding 1.\n  -- This can be\
    \ done by multiplying all elements by -1 and adding 1.\n  -- This can be done\
    \ by multiplying all elements by -1 and adding 1.\n  -- This can be done by multiplying\
    \ all elements by -1 and adding 1.\n  -- This can be done by multiplying all elements\
    \ by -1 and adding 1.\n  -- This can be done by multiplying all elements by -1\
    \ and adding 1.\n  -- This can be done by multiplying all elements by -1 and adding\
    \ 1.\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6e23onj2.lua:56: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cghkzbc.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp1cghkzbc.lua:18: in function 'candidate'\n\t/tmp/tmp1cghkzbc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y) -- Compare function\n    if x == y then return 0 end\n    if x < y then return\
    \ -1 end\n    return 1\n  end\n  table.sort(arr, compare)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z3nfdm2.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp_z3nfdm2.lua:14: in function 'candidate'\n\t/tmp/tmp_z3nfdm2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use bitwise operators\
    \ to extract each binary digit from arr\n  -- >>> bin(sort_array([1, 0, 2, 3,\
    \ 4])) == '0b100110100'\n  -- >>> bin(sort_array([-2, -3, -4, -5, -6])) == '0b111111010'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n\
    \  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == '0b100110100'\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) ==\
    \ '0b100110100'\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjozooa8l.lua:53: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort based on number of\
    \ ones in their binary representation\n  local function count_ones(arr)\n    local\
    \ ones = 0\n    for i = 1, #arr do\n      if arr[i] > 0 then\n        ones = ones\
    \ + 1\n      end\n    end\n    return ones\n  end\n  -- sort based on decimal\
    \ value\n  local function sort_by_decimal(arr)\n    local decimal = 0\n    for\
    \ i = 1, #arr do\n      decimal = decimal + arr[i]\n    end\n    return decimal\n\
    \  end\n  -- sort based on number of ones in their binary representation\n  if\
    \ #arr == 1 then\n    return arr\n  end\n  -- sort based on decimal value\n  if\
    \ count_ones(arr) == 1 then\n    return sort_by_decimal(arr)\n  end\n  -- sort\
    \ based on number of ones in their binary representation\n  local ones = count_ones(arr)\n\
    \  -- sort based on decimal value\n  local decimal = sort_by_decimal(arr)\n  --\
    \ sort based on number of ones in their binary representation\n  local sorted_arr\
    \ = {}\n  for i = 1, #arr do\n    if ones > 1 then\n      -- sort based on decimal\
    \ value\n      if decimal > 0 then\n        if arr[i] > 0 then\n          table.insert(sorted_arr,\
    \ arr[i])\n        end\n      end\n      -- sort based on number of ones in their\
    \ binary representation\n      if ones == 1 then\n        table.insert(sorted_arr,\
    \ arr[i])\n      end\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2k1vm86.lua:61:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpy2k1vm86.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  local function count_ones(arr)\n    local result = {}\n    for i = 1, #arr\
    \ do\n      local count = 0\n      local pos = i\n      while pos > 0 do\n   \
    \     pos = math.floor(pos / 2)\n        count = count + 1\n      end\n      result[count]\
    \ = arr[pos]\n    end\n    return result\n  end\n  -- Sort array in ascending\
    \ order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpezw8wyi2.lua:70: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooeag2zs.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpooeag2zs.lua:18: in function 'candidate'\n\t/tmp/tmpooeag2zs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ of numbers to sort them.\n  -- We use bitwise operators to do this.\n  -- We\
    \ use bitwise operators to do this.\n  -- We use bitwise operators to do this.\n\
    \  -- We use bitwise operators to do this.\n  -- We use bitwise operators to do\
    \ this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise operators\
    \ to do this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise\
    \ operators to do this.\n  -- We use bitwise operators to do this.\n  -- We use\
    \ bitwise operators to do this.\n  -- We use bitwise operators to do this.\n \
    \ -- We use bitwise operators to do this.\n  -- We use bitwise operators to do\
    \ this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise operators\
    \ to do this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise\
    \ operators to do this.\n  -- We use bitwise operators to do this.\n  -- We use\
    \ bitwise operators to do this.\n  -- We use bitwise operators to do this.\n \
    \ -- We use bitwise operators to do this.\n  -- We use bitwise operators to do\
    \ this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise operators\
    \ to do this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise\
    \ operators to do this.\n  -- We use bitwise operators to do this.\n  -- We use\
    \ bitwise operators to do this.\n  -- We use bitwise operators to do this.\n \
    \ -- We use bitwise operators to do this.\n  -- We use bitwise operators to do\
    \ this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise operators\
    \ to do this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise\
    \ operators to do this.\n  -- We use bitwise operators to do this.\n  -- We use\
    \ bitwise operators to do this.\n  -- We use bitwise operators to do this.\n \
    \ -- We use bitwise operators to do this.\n  -- We use bitwise operators to do\
    \ this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise operators\
    \ to do this.\n  -- We use bitwise operators to do this.\n  -- We use bitwise\
    \ operators to do this.\n  -- We use bitwise \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxkppflwu.lua:70: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use bitwise operators\
    \ to extract each binary digit from arr\n  -- Then we sort them in ascending order\
    \ and concatenate them back\n  -- Finally, we convert them back to an array\n\
    \  local binary = bit.bor(bit.band(arr[1], 1), bit.band(arr[2], 1), bit.band(arr[3],\
    \ 1), bit.band(arr[4], 1), bit.band(arr[5], 1))\n  local decimal = bit.band(binary,\
    \ 1)\n  local ones = bit.band(binary, 2)\n  local twos = bit.band(binary, 4)\n\
    \  local threes = bit.band(binary, 8)\n  local fours = bit.band(binary, 16)\n\
    \  local fives = bit.band(binary, 32)\n  local sixes = bit.band(binary, 64)\n\
    \  -- We use bitwise operators to extract each binary digit from arr\n  -- Then\
    \ we sort them in ascending order and concatenate them back\n  -- Finally, we\
    \ convert them back to an array\n  local sorted_arr = bit.bor(bit.band(arr[1],\
    \ 1), bit.band(arr[2], 1), bit.band(arr[3], 1), bit.band(arr[4], 1), bit.band(arr[5],\
    \ 1), bit.band(arr[6], 1), bit.band(arr[7], 1), bit.band(arr[8], 1), bit.band(arr[9],\
    \ 1), bit.band(arr[10], 1), bit.band(arr[11], 1), bit.band(arr[12], 1), bit.band(arr[13],\
    \ 1), bit.band(arr[14], 1), bit.band(arr[15], 1), ones, twos, threes, fours, fives,\
    \ sixes)\n  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftz43d6y.lua:12:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmpftz43d6y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymxb58fy.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpymxb58fy.lua:14: in function 'candidate'\n\t/tmp/tmpymxb58fy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use two auxiliary arrays\
    \ to sort arr\n  local aux1 = {}\n  local aux2 = {}\n  for i = 1, #arr do\n  \
    \  local bin = bit.rshift(tostring(arr[i]), 8)\n    local num = tonumber(bin)\n\
    \    if num then\n      table.insert(aux1, num)\n      table.insert(aux2, bin)\n\
    \    end\n  end\n  -- Sort aux2\n  table.sort(aux2)\n  -- Sort aux1\n  table.sort(aux1)\n\
    \  -- Merge aux2 to arr\n  for i = 1, #arr do\n    local bin = aux2[i]\n    local\
    \ num = aux1[i]\n    arr[i] = tonumber(bin) or num\n  end\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperq0j1s5.lua:13:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmperq0j1s5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This is done by multiplying all\
    \ numbers by -1 and adding 1.\n  -- The result will be a positive number if all\
    \ numbers are positive.\n  -- If any number is negative, it is replaced by its\
    \ absolute value.\n  -- The second step is to sort the array based on the number\
    \ of ones.\n  -- The result will be a sorted array where all zeros are at the\
    \ end.\n  -- The third step is to reverse the order of the array.\n  -- The result\
    \ will be a sorted array where all negative numbers are at the beginning.\n  --\
    \ The fourth step is to reverse the order of the array.\n  -- The result will\
    \ be a sorted array where all positive numbers are at the beginning.\n  -- The\
    \ fifth step is to reverse the order of the array.\n  -- The result will be a\
    \ sorted array where all numbers are sorted in ascending order.\n  -- The sixth\
    \ step is to reverse the order of the array.\n  -- The result will be a sorted\
    \ array where all numbers are sorted in descending order.\n  -- The seventh step\
    \ is to reverse the order of the array.\n  -- The result will be a sorted array\
    \ where all numbers are sorted in ascending order.\n  -- The eighth step is to\
    \ reverse the order of the array.\n  -- The result will be a sorted array where\
    \ all numbers are sorted in descending order.\n  -- The ninth step is to reverse\
    \ the order of the array.\n  -- The result will be a sorted array where all numbers\
    \ are sorted in ascending order.\n  -- The tenth step is to reverse the order\
    \ of the array.\n  -- The result will be a sorted array where all numbers are\
    \ sorted in descending order.\n  -- The eleventh step is to reverse the order\
    \ of the array.\n  -- The result will be a sorted array where all numbers are\
    \ sorted in ascending order.\n  -- The twelfth step is to reverse the order of\
    \ the array.\n  -- The result will be a sorted array where all numbers are sorted\
    \ in descending order.\n  -- The thirteenth step is to reverse the order of the\
    \ array.\n  -- The result will be a sorted array where all numbers are sorted\
    \ in ascending order.\n  -- The fourteenth step is to reverse the order of the\
    \ array.\n  -- The result will be a sorted array where all numbers are sorted\
    \ in descending order.\n  -- The fifteenth step is to reverse the order of the\
    \ array.\n  -- The result will be a sorted array where all numbers are sorted\
    \ in ascending order.\n  -- The sixteenth step is to reverse the order of the\
    \ array.\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu1exw5ps.lua:57: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpary6vh2y.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpary6vh2y.lua:18: in function 'candidate'\n\t/tmp/tmpary6vh2y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y) -- Compare function\n    if x > y then return 1 end\n    if x < y then return\
    \ -1 end\n    return 0 -- Equal\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke8y4h9j.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpke8y4h9j.lua:14: in function 'candidate'\n\t/tmp/tmpke8y4h9j.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We sort array in place\n\
    \  -- We use binary search to find position of first 1\n  -- We use binary search\
    \ to find position of first 0\n  -- We use binary search to find position of last\
    \ 1\n  -- We use binary search to find position of last 0\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use binary search to find position of middle\
    \ of array\n  -- We use binary search to find position of middle of array\n  --\
    \ We use binary search to find position of middle of array\n  -- We use binary\
    \ search to find position of middle of array\n  -- We use binary search to find\
    \ position of middle of array\n  -- We use \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1an2jqty.lua:61: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for sorting purposes.\n  -- This way we get O(log(n)) time complexity instead\
    \ of O(n).\n  -- The binary representation is also more compact than decimal one.\n\
    \  -- See https://en.wikipedia.org/wiki/Binary_number#Advantages\n  local bin\
    \ = arr:map(function(x) return bit.rshift(x, 1) end):concat()\n  local counts\
    \ = bin:map(function(x) return #x end):concat():reverse()\n  local sorted = {}\n\
    \  local pos = 1\n  for i = 1, #counts do\n    sorted[#sorted+1] = arr[pos]\n\
    \    pos = pos + counts[i]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg89mce2.lua:13:\
    \ attempt to call method 'map' (a nil value)\nstack traceback:\n\t/tmp/tmpeg89mce2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation.\n  -- This array has O(n)\
    \ time complexity, where n is the number of elements in the input array.\n  local\
    \ bincount = {}\n  for i = 1, #arr do\n    bincount[tostring(arr[i])] = bincount[tostring(arr[i])]\
    \ or 0\n    bincount[tostring(arr[i])] = bincount[tostring(arr[i])] + 1\n  end\n\
    \  -- The auxiliary array is sorted in descending order according to number of\
    \ ones in binary representation.\n  -- The sorted array is then sorted in ascending\
    \ order according to decimal value.\n  -- The auxiliary array is then discarded.\n\
    \  -- The time complexity is O(nlogn).\n  local auxarray = {}\n  for i = #bincount,\
    \ 2, -1 do\n    auxarray[i] = bincount[i]\n  end\n  table.sort(auxarray, function(a,\
    \ b)\n    return b - a\n  end)\n  -- The sorted array is then sorted in ascending\
    \ order according to decimal value.\n  -- The auxiliary array is then discarded.\n\
    \  -- The time complexity is O(nlogn).\n  for i = #auxarray, 2, -1 do\n    table.insert(arr,\
    \ auxarray[i])\n  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtn1w6vj.lua:39:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpdtn1w6vj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for counting number of ones in binary representation\n  -- of the numbers in\
    \ arr. For example, for arr = [1, 5, 2, 3, 4], binary representation of\n  --\
    \ each number is \"10101\".\n  local bins = {}\n  for i = 1, #arr do\n    local\
    \ bin = string.format(\"%b\", arr[i])\n    bins[bin] = bins[bin] or 0\n    bins[bin]\
    \ = bins[bin] + 1\n  end\n  -- We sort arr based on number of ones in binary representation\
    \ of arr\n  -- This way, we get ascending order for similar number of ones\n \
    \ -- For example, for arr = [1, 5, 2, 3, 4], binary representation of each number\
    \ is\n  -- 10101 (1 followed by 5 zeros). Since there are 5 ones in binary representation\n\
    \  -- of the number, we sort arr based on decimal value of number of ones in binary\n\
    \  -- representation of arr. For example, for arr = [1, 5, 2, 3, 4], binary representation\
    \ of\n  -- each number is \"10101\" (1 followed by 5 zeros). Since there are 5\
    \ ones in binary\n  -- representation of arr, we sort arr based on decimal value\
    \ of number of ones in\n  -- binary representation of arr. Thus, we get ascending\
    \ order for similar number of\n  -- ones. For example, for arr = [1, 5, 2, 3,\
    \ 4], binary representation of each number is\n  -- 10101 (1 followed by 5 zeros).\
    \ Since there are 5 ones in binary representation of arr,\n  -- we sort arr based\
    \ on decimal value of number of ones in binary representation of arr.\n  -- Thus,\
    \ we get ascending order for similar number of ones.\n  -- For example, [1, 0,\
    \ 2, 3, 4] has binary representation \"10101\" (1 followed by 5 zeros),\n  --\
    \ which has 5 ones. Thus, we sort arr based on decimal value of number of ones\
    \ in\n  -- binary representation of arr. Thus, we get ascending order for similar\
    \ number of\n  -- ones.\n  -- For example, [1, 0, 2, 3, 4] has binary representation\
    \ \"10101\" (1 followed by 5 zeros),\n  -- which has 5 ones. Thus, we sort arr\
    \ based on decimal value of number of ones in\n  -- binary representation of arr.\
    \ Thus, we get ascending order for similar number of\n  -- ones.\n  -- For example,\
    \ [1, 0, 2, 3, 4] has binary representation \"10101\" (1 followed by 5 zeros),\n\
    \  -- which has 5 ones. Thus, we sort arr based on decimal value of number of\
    \ ones in\n  -- binary representation of arr. Thus, we get ascending order for\
    \ similar number of\n  -- ones.\n  -- For example, [1, 0, 2, 3, 4] has binary\
    \ representation \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpck28tyan.lua:58: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_search(arr,\
    \ val)\n    local start = 1\n    local end = #arr\n    while start <= end do\n\
    \      local mid = start + (end - start) / 2\n      if arr[mid] == val then\n\
    \        return mid\n      elseif arr[mid] > val then\n        start = mid + 1\n\
    \      else\n        end = mid - 1\n      end\n    end\n    return start\n  end\n\
    \  local function decimal_search(arr, val)\n    local start = 1\n    local end\
    \ = #arr\n    while start <= end do\n      local mid = start + (end - start) /\
    \ 2\n      if arr[mid] == val then\n        return mid\n      elseif arr[mid]\
    \ > val then\n        start = mid + 1\n      else\n        end = mid - 1\n   \
    \   end\n    end\n    return end\n  end\n  local function binary_sort_array(arr)\n\
    \    local sorted_arr = {}\n    local max_ones = -1\n    for i = 1, #arr do\n\
    \      local ones = arr[i]\n      if max_ones == -1 or max_ones < ones then\n\
    \        max_ones = ones\n      end\n    end\n    for i = 1, #arr do\n      local\
    \ ones = arr[i]\n      local index = binary_search(arr, ones)\n      local decimal\
    \ = decimal_search(arr, ones)\n      sorted_arr[index] = decimal\n    end\n  \
    \  return sorted_arr\n  end\n  local decimal_sort_array = binary_sort_array(arr)\n\
    \  local decimal_arr = {}\n  for i = 1, #arr do\n    decimal_arr[i] = decimal_sort_array[i]\n\
    \  end\n  return decimal_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkj9d1_03.lua:11: '<name>' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort the array in ascending\
    \ order based on number of ones in their binary representation\n  -- For similar\
    \ number of ones, sort based on decimal value\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function compare(lhs, rhs)\n    local function bin2dec(bin)\n\
    \      local dec = 0\n      for i = 1, 8 do\n        local bin = bin:sub(1, i)\n\
    \        dec = (dec + bin2dec[bin]) % 10\n      end\n      return dec\n    end\n\
    \    local function dec2bin(dec)\n      local bin = \"\"\n      for i = 1, 8 do\n\
    \        local dec = dec:div(10)\n        bin = dec:add(bin)\n      end\n    \
    \  return bin\n    end\n    local bin = dec2bin(lhs)\n    local dec\n    for i\
    \ = 1, #arr do\n      dec = dec2bin(arr[i])\n      if dec == bin then\n      \
    \  return i\n      end\n    end\n    return #arr\n  end\n  -- Sort the array in\
    \ ascending order based on number of ones in their binary representation\n  --\
    \ For similar number of ones, sort based on decimal value\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  local function compare(lhs, rhs)\n    local\
    \ function bin2dec(bin)\n      local dec = 0\n      for i = 1, 8 do\n        local\
    \ bin = bin:sub(1, i)\n        dec = (dec + bin2dec[bin]) % 10\n      end\n  \
    \    return dec\n    end\n    local function dec2bin(dec)\n      local bin = \"\
    \"\n      for i = 1, 8 do\n        local dec = dec:div(10)\n        bin = dec:add(bin)\n\
    \      end\n      return bin\n    end\n    local bin = dec2bin(lhs)\n    local\
    \ dec\n    for i = 1, #arr do\n      dec = dec2bin(arr[i])\n      if dec == bin\
    \ then\n        return i\n      end\n    end\n    return #arr\n  end\n  -- Sort\
    \ the array in ascending order based on number of one\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3pz_uuxn.lua:90: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- For this purpose, use bitwise operations.\n\
    \  local function count_ones(x)\n    local count = 0\n    for i = 1, 8 do\n  \
    \    if x % 2^i == 0 then\n        count = count + 1\n      end\n    end\n   \
    \ return count\n  end\n  -- The second step is to sort based on the number of\
    \ ones.\n  -- For this purpose, use bitwise operations.\n  local function count_ones_desc(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2^i == 0 then\n      \
    \  count = count + 1\n      end\n    end\n    return -count\n  end\n  -- The third\
    \ step is to sort based on the decimal value.\n  -- For this purpose, use bitwise\
    \ operations.\n  local function sort_ones_desc(x)\n    local count = 0\n    for\
    \ i = 1, 8 do\n      if x % 2^i == 0 then\n        count = count + 1\n      end\n\
    \    end\n    return count\n  end\n  -- The fourth step is to sort based on the\
    \ decimal value.\n  -- For this purpose, use bitwise operations.\n  local function\
    \ sort_ones_asc(x)\n    local count = 0\n    for i = 1, 8 do\n      if x % 2^i\
    \ == 0 then\n        count = count + 1\n      end\n    end\n    return -count\n\
    \  end\n  -- The fifth step is to sort based on the decimal value.\n  -- For this\
    \ purpose, use bitwise operations.\n  local function sort_ones_desc(x)\n    local\
    \ count = 0\n    for i = 1, 8 do\n      if x % 2^i == 0 then\n        count =\
    \ count + 1\n      end\n    end\n    return -count\n  end\n  -- The sixth step\
    \ is to sort based on the decimal value.\n  -- For this purpose, use bitwise operations.\n\
    \  local function sort_ones_asc(x)\n    local count = 0\n    for i = 1, 8 do\n\
    \      if x % 2^i == 0 then\n        count = count + 1\n      end\n    end\n \
    \   return count\n  end\n  -- The seventh step is to sort based on the decimal\
    \ value.\n  -- For this purpose, use bitwise operations.\n  local function sort_ones_desc(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2^i == 0 then\n      \
    \  count = count + 1\n      end\n    end\n    return -count\n  end\n  -- The eighth\
    \ step is to sort based on the decimal value.\n  -- For this purpose, use bitwise\
    \ operations.\n  local function sort_ones_asc(x)\n    local count = 0\n    for\
    \ i = 1, 8 do\n      if x % 2^\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplozdyuvu.lua:92: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else if lhs > rhs then return 1 else return\
    \ 0 end\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgr3t8xao.lua:29: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  local bins = {}\n  local decimals = {}\n  local i = 0\n  local n = #arr\n \
    \ while i < n do\n    local bin = math.floor(math.pow(2,i))\n    bins[bin] = bins[bin]\
    \ + 1 -- Increment number of ones in binary representation\n    i = i + 1\n  end\n\
    \  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  for i = 1, #bins do\n    decimals[#decimals\
    \ + 1] = i\n  end\n  -- Sort array in ascending order based on decimal value\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending\
    \ order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending order based on decimal\
    \ value\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array\
    \ in ascending order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3,\
    \ 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending order based on decimal value\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending\
    \ order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending order based on decimal\
    \ value\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array\
    \ in ascending order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3,\
    \ 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending order based on decimal value\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort array in ascending\
    \ order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]\n  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpibi8foi2.lua:68: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyn9lxee.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpuyn9lxee.lua:18: in function 'candidate'\n\t/tmp/tmpuyn9lxee.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2 ^ i)\n     \
    \   local b = dec:floor()\n        bin = b .. bin\n      end\n      return bin\n\
    \    end\n    local function bin2dec2(bin)\n      local dec = 0\n      for i =\
    \ 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n\
    \      end\n      return dec\n    end\n    local function dec2bin2(dec)\n    \
    \  local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2 ^ i)\n\
    \        local b = dec:floor()\n        bin = b .. bin\n      end\n      return\
    \ bin\n    end\n    local function bin2dec3(bin)\n      local dec = 0\n      for\
    \ i = 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^\
    \ i)\n      end\n      return dec\n    end\n    local function dec2bin3(dec)\n\
    \      local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2 ^\
    \ i)\n        local b = dec:floor()\n        bin = b .. bin\n      end\n     \
    \ return bin\n    end\n    local function bin2dec4(bin)\n      local dec = 0\n\
    \      for i = 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec +\
    \ b) * (2 ^ i)\n      end\n      return dec\n    end\n    local function dec2bin4(dec)\n\
    \      local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2 ^\
    \ i)\n        local b = dec:floor()\n        bin = b .. bin\n      end\n     \
    \ return bin\n    end\n    local function bin2dec5(bin)\n      local dec = 0\n\
    \      for i = 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec +\
    \ b) * (2 ^ i)\n      end\n      return dec\n    end\n    local function dec2bin5(dec)\n\
    \      local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2 ^\
    \ i)\n        local b = dec:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwqkh_c8a.lua:91: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else return 1 end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jnzvgc9.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp8jnzvgc9.lua:12: in function 'candidate'\n\t/tmp/tmp8jnzvgc9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of arr\
    \ is already sorted\n  -- The second element of arr is sorted based on number\
    \ of ones in its binary representation\n  -- The third element of arr is sorted\
    \ based on decimal value of its elements\n  -- The fourth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The fifth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The sixth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The seventh element of arr is sorted\
    \ based on decimal value of its elements\n  -- The eighth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The ninth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The tenth element of arr is sorted\
    \ based on decimal value of its elements\n  -- The eleventh element of arr is\
    \ sorted based on decimal value of its elements\n  -- The twelfth element of arr\
    \ is sorted based on decimal value of its elements\n  -- The thirteenth element\
    \ of arr is sorted based on decimal value of its elements\n  -- The fourteenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The fifteenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The sixteenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The seventeenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The eighteenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The nineteenth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The twentieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The thirtieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The fourtieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The fiftieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The sixtieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The seventieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The eightieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The ninetieth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The twentyeth\
    \ element of arr is sorted based on decimal value of its elements\n  -- The thirtyfirst\
    \ element of arr is sorted based on decimal value of its elements\n  -- The fortyfirst\
    \ element of arr is sorted based on decimal value of its elements\n  -- The fif\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8k2wbd0v.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with less then 32 bits\n  -- because it is fastest to count bits.\n\
    \  -- For numbers with 32 bits, we convert them to decimal and sort them.\n  --\
    \ For numbers with 64 bits, we convert them to decimal and sort them.\n  -- For\
    \ numbers with 128 bits, we convert them to decimal and sort them.\n  -- For numbers\
    \ with 256 bits, we convert them to decimal and sort them.\n  -- For numbers with\
    \ 512 bits, we convert them to decimal and sort them.\n  -- For numbers with 1024\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 2048\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 4096\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 8192\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 16384\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 32768\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 65536\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 131072\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 262144\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 524288\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 1048576\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 2097152\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 4194304\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 8388608\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 16777216\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 33554432\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 67108864\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 134217728\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 268435456\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 536870912\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 1073741824\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 2147483648\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 4294967296\
    \ bits, we convert them to decimal and sort them.\n  -- For numbers with 8589934\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplrjo7o6w.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2^(8 - i))\n\
    \      end\n      return dec\n    end\n    local function dec2bin(dec)\n     \
    \ local bin = \"\"\n      for i = 1, 8 do\n        local dec = dec / (2^(8 - i))\n\
    \        local b = dec:floor()\n        bin = b .. bin\n      end\n      return\
    \ bin\n    end\n    local function compare_dec(lhs, rhs)\n      return bin2dec(lhs)\
    \ < bin2dec(rhs)\n    end\n    local function compare_dec_dec(lhs, rhs)\n    \
    \  return dec2bin(lhs) < dec2bin(rhs)\n    end\n    local function compare_dec_bin(lhs,\
    \ rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\n    end\n    local function\
    \ compare_bin_dec(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs)\n    end\n\
    \    local function compare_bin_bin(lhs, rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\n\
    \    end\n    local function compare_dec_dec(lhs, rhs)\n      return dec2bin(lhs)\
    \ < dec2bin(rhs)\n    end\n    local function compare_bin_dec(lhs, rhs)\n    \
    \  return bin2dec(lhs) < bin2dec(rhs)\n    end\n    local function compare_dec_bin(lhs,\
    \ rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\n    end\n    local function\
    \ compare_bin_bin(lhs, rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\n    end\n\
    \    local function compare_dec_dec(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs)\n\
    \    end\n    local function compare_bin_dec(lhs, rhs)\n      return bin2dec(lhs)\
    \ < bin2dec(rhs)\n    end\n    local function compare_dec_bin(lhs, rhs)\n    \
    \  return bin2dec(lhs) < bin2dec(rhs)\n    end\n    local function compare_bin_bin(lhs,\
    \ rhs)\n      return bin2dec(lhs) < bin2dec(rhs)\n    end\n    local function\
    \ compare_dec_dec(lhs, rhs)\n      return dec2bin(lhs) < dec2bin(rhs)\n    end\n\
    \    local function compare_bin_dec(lhs, rh\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuhhi040y.lua:70: ')' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2szb52a.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpl2szb52a.lua:14: in function 'candidate'\n\t/tmp/tmpl2szb52a.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order according to number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order according to decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    \  -- Sort array in descending order according to number of ones in their binary\
    \ representation\n  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n\
    \  -- >>> sort_array([-2, -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  --\
    \ >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in\
    \ descending order according to decimal value\n  -- >>> sort_array([1, 0, 2, 3,\
    \ 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], true)\
    \ == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4,\
    \ 3, 2, 1]\n  -- Sort array in descending order according to number of ones in\
    \ their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4], false) ==\
    \ [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], false) == [-6, -5,\
    \ -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n\
    \  -- Sort array in descending order according to decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5,\
    \ -6], false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], false)\
    \ == [5, 4, 3, 2, 1]\n  -- Sort array in descending order according to number\
    \ of ones in their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4],\
    \ true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], true) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3,\
    \ 2, 1]\n  -- Sort array in descending order according to decimal value\n  --\
    \ >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa3q65lm2.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element\n  -- of the array. Then, sort them in ascending\
    \ order.\n  local counts = {}\n  for i = 1, #arr do\n    local count = counts[tostring(arr[i])]\n\
    \    if count == nil then\n      count = 1\n    else\n      count = count + 1\n\
    \    end\n    counts[tostring(count)] = count\n  end\n  -- The second step is\
    \ to sort the elements in ascending order based\n  -- on the number of ones in\
    \ their binary representation in ascending\n  -- order.\n  local sorted_arr =\
    \ {}\n  for i = 1, #counts do\n    table.insert(sorted_arr, i)\n  end\n  table.sort(sorted_arr)\n\
    \  -- The third step is to sort the elements in ascending order based\n  -- on\
    \ the decimal value of their binary representation in ascending\n  -- order.\n\
    \  for i = 1, #counts do\n    local index = sorted_arr[i]\n    local count = 1\n\
    \    for j = i + 1, #counts do\n      count = count + counts[j]\n    end\n   \
    \ table.insert(sorted_arr, index)\n  end\n  -- Finally, return the sorted array.\n\
    \  return table.concat(sorted_arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydy_xito.lua:47:\
    \ expected: {1, 2, 4, 3, 5}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpydy_xito.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmvsp3omv.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4_f9eaei.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs end\n    if rhs == 0 then return lhs end\n\
    \    return lhs > rhs and 1 or -1\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidd8aezo.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpidd8aezo.lua:14: in function 'candidate'\n\t/tmp/tmpidd8aezo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs == 0 end\n    if lhs == 0 then return\
    \ rhs == 1 end\n    if lhs == 1 then return rhs == 0 end\n    if lhs == 1 then\
    \ return rhs == 1 end\n    return lhs < rhs\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5zhhz50.lua:23:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpk5zhhz50.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs == 0 end\n    if lhs == 0 then return\
    \ rhs == 1 end\n    if lhs == 0 then return rhs == -1 end\n    if lhs == 0 then\
    \ return rhs == -2 end\n    if lhs == 0 then return rhs == -3 end\n    if lhs\
    \ == 0 then return rhs == -4 end\n    if lhs == 0 then return rhs == -5 end\n\
    \    if lhs == 0 then return rhs == -6 end\n    if lhs == 0 then return rhs ==\
    \ -7 end\n    if lhs == 0 then return rhs == -8 end\n    if lhs == 0 then return\
    \ rhs == -9 end\n    if lhs == 0 then return rhs == -10 end\n    if lhs == 0 then\
    \ return rhs == -11 end\n    if lhs == 0 then return rhs == -12 end\n    if lhs\
    \ == 0 then return rhs == -13 end\n    if lhs == 0 then return rhs == -14 end\n\
    \    if lhs == 0 then return rhs == -15 end\n    if lhs == 0 then return rhs ==\
    \ -16 end\n    if lhs == 0 then return rhs == -17 end\n    if lhs == 0 then return\
    \ rhs == -18 end\n    if lhs == 0 then return rhs == -19 end\n    if lhs == 0\
    \ then return rhs == -20 end\n    if lhs == 0 then return rhs == -21 end\n   \
    \ if lhs == 0 then return rhs == -22 end\n    if lhs == 0 then return rhs == -23\
    \ end\n    if lhs == 0 then return rhs == -24 end\n    if lhs == 0 then return\
    \ rhs == -25 end\n    if lhs == 0 then return rhs == -26 end\n    if lhs == 0\
    \ then return rhs == -27 end\n    if lhs == 0 then return rhs == -28 end\n   \
    \ if lhs == 0 then return rhs == -29 end\n    if lhs == 0 then return rhs == -30\
    \ end\n    if lhs == 0 then return rhs == -31 end\n    if lhs == 0 then return\
    \ rhs == -32 end\n    if lhs == 0 then return rhs == -33 end\n    if lhs == 0\
    \ then return rhs == -34 end\n    if lhs == 0 then return rhs == -35 end\n   \
    \ if lhs == 0 then return rhs == -36 end\n    if lhs == 0 then return rhs == -37\
    \ end\n    if lhs == 0 then return rhs == -38 end\n    if lhs == 0 then return\
    \ rhs == -39 end\n    if lhs == 0 then return rhs == -40 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfa4ksb0l.lua:52: 'end' expected (to close 'if' at line 51)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(arr)\n\
    \    local counts = {}\n    for i = 1, #arr do\n      local v = tostring(arr[i])\n\
    \      counts[#counts + 1] = counts[#counts] + 1 or (v ~= '0' and v:len() == 1)\n\
    \    end\n    return counts\n  end\n  local function sort_by_count(arr)\n    local\
    \ counts = count_ones(arr)\n    table.sort(counts)\n    local results = {}\n \
    \   for i = 1, #counts do\n      table.insert(results, arr[counts[i]])\n    end\n\
    \    return results\n  end\n  local function sort_by_decimal(arr)\n    local counts\
    \ = count_ones(arr)\n    table.sort(counts, function(a, b) return tonumber(tostring(a))\
    \ < tonumber(tostring(b)) end)\n    local results = {}\n    for i = 1, #counts\
    \ do\n      table.insert(results, arr[counts[i]])\n    end\n    return results\n\
    \  end\n  local function sort_by_decimal(arr)\n    local counts = count_ones(arr)\n\
    \    table.sort(counts, function(a, b) return tonumber(tostring(a)) < tonumber(tostring(b))\
    \ end)\n    local results = {}\n    for i = 1, #counts do\n      table.insert(results,\
    \ arr[counts[i]])\n    end\n    return results\n  end\n  local function sort_by_decimal(arr)\n\
    \    local counts = count_ones(arr)\n    table.sort(counts, function(a, b) return\
    \ tonumber(tostring(a)) < tonumber(tostring(b)) end)\n    local results = {}\n\
    \    for i = 1, #counts do\n      table.insert(results, arr[counts[i]])\n    end\n\
    \    return results\n  end\n  local function sort_by_decimal(arr)\n    local counts\
    \ = count_ones(arr)\n    table.sort(counts, function(a, b) return tonumber(tostring(a))\
    \ < tonumber(tostring(b)) end)\n    local results = {}\n    for i = 1, #counts\
    \ do\n      table.insert(results, arr[counts[i]])\n    end\n    return results\n\
    \  end\n  local function sort_by_decimal(arr)\n    local counts = count_ones(arr)\n\
    \    table.sort(counts, function(a, b) return tonumber(tostring(a)) < tonumber(tostring(b))\
    \ end)\n    local results = {}\n    for i = 1, #counts do\n      table.insert(results,\
    \ arr[counts[i]])\n    end\n    return results\n  end\n  local function sort_by_decimal(arr)\n\
    \    local counts = count_ones(arr)\n    table.sort(counts, function(a, b) return\
    \ tonumber(tostring(a)) < tonumber(tostring(b)) end)\n    local result\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7avasogi.lua:89: 'end' expected (to close 'function' at line\
    \ 71) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\n  -- Recursive case\n  local n = #arr\n  local\
    \ m = math.floor(n / 2)\n  local left = arr:sub(1, m)\n  local right = arr:sub(n,\
    \ m)\n  local left_count = count_ones(left)\n  local right_count = count_ones(right)\n\
    \  if left_count > right_count then\n    return sort_array(left)\n  else\n   \
    \ return sort_array(right)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao8qi3c9.lua:16:\
    \ attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpao8qi3c9.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary(decimal)\n    local binary = \"\"\n    local\
    \ i = 0\n    while decimal > 0 do\n      binary = binary .. \"1\" if decimal %\
    \ 2 == 1 else \"0\"\n      decimal = decimal / 2\n      i = i + 1\n    end\n \
    \   return binary\n  end\n  local function sort_by_decimal(arr)\n    local decimal\
    \ = binary_to_decimal(arr)\n    local i = 0\n    local j = 0\n    local n = #arr\n\
    \    while i < n do\n      while j < n and decimal == binary_to_decimal(arr[j])\
    \ do\n        j = j + 1\n      end\n      if j > i then\n        arr[i], arr[j]\
    \ = arr[j], arr[i]\n      end\n      i = i + 1\n      j = j + 1\n    end\n   \
    \ return arr\n  end\n  local function sort_by_decimal_recursive(arr)\n    local\
    \ decimal = binary_to_decimal(arr)\n    local i = 0\n    local j = 0\n    local\
    \ n = #arr\n    while i < n do\n      while j < n and decimal == binary_to_decimal(arr[j])\
    \ do\n        j = j + 1\n      end\n      if j > i then\n        arr[i], arr[j]\
    \ = arr[j], arr[i]\n      end\n      i = i + 1\n      j = j + 1\n      if j ==\
    \ n then\n        local k = i\n        while k < n do\n          arr[k], arr[i]\
    \ = arr[i], arr[k]\n          k = k + 1\n        end\n      end\n    end\n   \
    \ return arr\n  end\n  local function sort_by_decimal_recursive2(arr)\n    local\
    \ decimal = binary_to_decimal(arr)\n    local i = 0\n    local j = 0\n    local\
    \ n = #arr\n    while i < n do\n      while j < n and decimal == binary_to_decimal(arr[j])\
    \ do\n        j = j + 1\n      end\n      if j > i then\n        arr[i], arr[j]\
    \ = arr[j], arr[i]\n      end\n      i = i + 1\n      j = j + 1\n      if j ==\
    \ n then\n        local k = i\n        while k < n do\n          arr[k], arr[i]\
    \ = arr[i], arr[k]\n          k = k + 1\n        end\n        local k = i\n  \
    \      while k < n do\n          arr[k], arr[i] = arr[i], arr[k]\n          k\
    \ = k + 1\n        end\n      end\n    end\n    return arr\n  end\n  local \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfnsytay.lua:20: 'then' expected near 'else'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdx5q_10q.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      return arr[i]\n    end\n    if arr[i] > arr[j]\
    \ then\n      return helper(arr, i, j)\n    else\n      return helper(arr, j,\
    \ i)\n    end\n  end\n  return helper(arr, 0, #arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_222n6x.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t(tail call): ?\n\t/tmp/tmpw_222n6x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnvolfba.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpvnvolfba.lua:14: in function 'candidate'\n\t/tmp/tmpvnvolfba.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, count)\n    if i == 1 then\n      arr[i] = count\n    else\n      helper(arr,\
    \ i - 1, count)\n      arr[i] = count\n    end\n  end\n  helper(arr, 0, 1)\n \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgfdlt2n.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmptgfdlt2n.lua:13: in function 'helper'\n\
    \t/tmp/tmptgfdlt2n.lua:13: in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13: in\
    \ function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13: in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13:\
    \ in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13: in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13:\
    \ in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13: in function 'helper'\n\t/tmp/tmptgfdlt2n.lua:13:\
    \ in function 'helper'\n\t...\n\nRan 1 tests in 0.171 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>>\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpufocnbx9.lua:62: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_xkzltl.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp7_xkzltl.lua:14: in function 'candidate'\n\t/tmp/tmp7_xkzltl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_search(arr,\
    \ val)\n    local low = 0\n    local high = #arr\n    while low < high do\n  \
    \    local mid = math.floor((low + high) / 2)\n      local midVal = arr[mid]\n\
    \      if midVal == val then\n        return mid\n      elseif midVal > val then\n\
    \        high = mid\n      else\n        low = mid + 1\n      end\n    end\n \
    \   return nil\n  end\n  local function decimal_search(arr, val)\n    local low\
    \ = 0\n    local high = #arr\n    while low < high do\n      local mid = math.floor((low\
    \ + high) / 2)\n      local midVal = arr[mid]\n      if midVal == val then\n \
    \       return mid\n      elseif midVal > val then\n        high = mid\n     \
    \ else\n        low = mid + 1\n      end\n    end\n    return nil\n  end\n  local\
    \ function binary_sort_helper(arr, val)\n    local low = 0\n    local high = #arr\n\
    \    while low < high do\n      local mid = math.floor((low + high) / 2)\n   \
    \   local midVal = arr[mid]\n      if midVal == val then\n        arr[mid] = arr[high]\n\
    \        arr[high] = midVal\n        return high\n      elseif midVal > val then\n\
    \        high = mid\n      else\n        low = mid + 1\n      end\n    end\n \
    \   arr[high] = arr[high]\n    return high\n  end\n  local function decimal_sort_helper(arr,\
    \ val)\n    local low = 0\n    local high = #arr\n    while low < high do\n  \
    \    local mid = math.floor((low + high) / 2)\n      local midVal = arr[mid]\n\
    \      if midVal == val then\n        arr[mid] = arr[high]\n        arr[high]\
    \ = midVal\n        return high\n      elseif midVal > val then\n        high\
    \ = mid\n      else\n        low = mid + 1\n      end\n    end\n    arr[high]\
    \ = arr[high]\n    return high\n  end\n  local function binary_sort(arr)\n   \
    \ local low = 0\n    local high = #arr\n    while low < high do\n      local mid\
    \ = math.floor((low + high) / 2)\n      local midVal = arr[mid]\n      if midVal\
    \ == 1 then\n        arr[mid] = arr[high]\n        arr[high] = midVal\n      \
    \  high = binary_sort_helper(arr, midVal)\n      elseif midVal > 1 then\n    \
    \    high = binary_sort_helper(arr, mid\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpabvttrhe.lua:91: ')' expected (to close '(' at line 90) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr according to\
    \ number of ones in their binary representation\n  -- Sort arr according to decimal\
    \ value\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  --\
    \ Sort arr according to number of ones in their binary representation\n  -- Sort\
    \ arr according to decimal value\n  -- It must be implemented like this:\n  --\
    \ >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr according to number of ones in their binary representation\n\
    \  -- Sort arr according to decimal value\n  -- It must be implemented like this:\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr according to number of ones in their binary representation\n\
    \  -- Sort arr according to decimal value\n  -- It must be implemented like this:\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr according to number of ones in their binary representation\n\
    \  -- Sort arr according to decimal value\n  -- It must be implemented like this:\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr according to number of ones in their binary representation\n\
    \  -- Sort arr according to decimal value\n  -- It must be implemented like this:\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr according to number of ones in their binary representation\n\
    \  -- Sort arr according to decimal value\n  -- \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf1a_g9p_.lua:62: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if rhs == 0 then\n\
    \      return 1\n    end\n    if lhs < rhs then\n      return -1\n    end\n  \
    \  return 1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpliijdql9.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpliijdql9.lua:21: in function 'candidate'\n\t/tmp/tmpliijdql9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, i - 1)\n    end\n    return decimal\n  end\n  local\
    \ function decimal_to_binary(decimal)\n    local binary = \"\"\n    while decimal\
    \ > 0 do\n      binary = binary .. \"0\"\n      decimal = decimal - 1\n    end\n\
    \    for i = #binary + 1, 1 do\n      binary = binary .. \"1\"\n    end\n    return\
    \ binary\n  end\n  local function sort_by_decimal(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive2(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive3(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive4(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive5(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      decimal = decimal - 1\n    end\n    return sorted_arr\n  end\n  local function\
    \ sort_by_decimal_recursive6(arr)\n    local decimal = binary_to_decimal(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[i] = decimal_to_binary(decimal)\n\
    \      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1fgcdgv8.lua:101: 'end' expected (to close 'for' at line 84)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j, count)\n    if i == j then\n      arr[i] = count\n      return\n    end\n\
    \    helper(arr, i + 1, j, count + 1)\n    helper(arr, i, j + 1, count + 1)\n\
    \  end\n  helper(arr, 1, #arr, 0)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n1mv26g.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2n1mv26g.lua:14: in function 'helper'\n\
    \t/tmp/tmp2n1mv26g.lua:15: in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:14: in\
    \ function 'helper'\n\t/tmp/tmp2n1mv26g.lua:15: in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:14:\
    \ in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:15: in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:14:\
    \ in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:15: in function 'helper'\n\t/tmp/tmp2n1mv26g.lua:14:\
    \ in function 'helper'\n\t...\n\nRan 1 tests in 0.220 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use decimal representation to sort\
    \ array in ascending order\n  -- We use decimal representation to sort array in\
    \ ascending order\n  -- We use binary representation to sort array in ascending\
    \ order\n  -- We use binary representation to sort array in ascending order\n\
    \  -- We use binary representation to sort array in ascending order\n  -- We use\
    \ binary representation to sort array in ascending order\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use binary representation to sort\
    \ array in ascending order\n  -- We use binary representation to sort array in\
    \ ascending order\n  -- We use binary representation to sort array in ascending\
    \ order\n  -- We use binary representation to sort array in ascending order\n\
    \  -- We use binary representation to sort array in ascending order\n  -- We use\
    \ binary representation to sort array in ascending order\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use binary representation to sort\
    \ array in ascending order\n  -- We use binary representation to sort array in\
    \ ascending order\n  -- We use binary representation to sort array in ascending\
    \ order\n  -- We use binary representation to sort array in ascending order\n\
    \  -- We use binary representation to sort array in ascending order\n  -- We use\
    \ binary representation to sort array in ascending order\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use binary representation to sort\
    \ array in ascending order\n  -- We use binary representation to sort array in\
    \ ascending order\n  -- We use binary representation to sort array in ascending\
    \ order\n  -- We use binary representation to sort array in ascending order\n\
    \  -- We use binary representation to sort array in ascending order\n  -- We use\
    \ binary representation to sort array in ascending order\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use binary representation to sort\
    \ array in ascending order\n  -- We use binary representation to sort array in\
    \ ascending order\n  -- We use binary representation to sort array in ascending\
    \ order\n  -- We use binary representation to sort array in ascending order\n\
    \  -- We use binary representation to sort array in ascending order\n  -- We use\
    \ binary representation to sort array in ascending order\n  -- We use binary representation\
    \ to sort array in ascending order\n  -- We use binary representation to sort\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdkr5y8cr.lua:60: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use bitwise operator\
    \ to count the number of 1s in binary representation\n  -- of the numbers in arr.\
    \ Then, we use bitwise operator to sort them in ascending\n  -- order.\n  -- >>>\
    \ bin(sort_array([1, 5, 2, 3, 4])) == bin([1, 5, 2, 3, 4])\n  -- >>> bin(sort_array([-2,\
    \ -3, -4, -5, -6])) == bin([-6, -5, -4, -3, -2])\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3,\
    \ 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0,\
    \ 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3,\
    \ 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  --\
    \ >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3,\
    \ 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0,\
    \ 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3,\
    \ 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  --\
    \ >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3,\
    \ 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0,\
    \ 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3,\
    \ 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  --\
    \ >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3,\
    \ 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0,\
    \ 1, 2, 3, 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3,\
    \ 4])\n  -- >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  --\
    \ >>> bin(sort_array([1, 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- >>> bin(sort_array([1,\
    \ 0, 2, 3, 4])) == bin([0, 1, 2, 3, 4])\n  -- \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpybnalvuv.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary(decimal)\n    local binary = \"\"\n    while\
    \ decimal > 0 do\n      binary = binary .. \"0\"\n      decimal = decimal - 1\n\
    \    end\n    while decimal > 0 do\n      decimal = decimal - 1\n      binary\
    \ = binary .. \"1\"\n    end\n    return binary\n  end\n  local function binary_to_decimal2(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary2(decimal)\n    local binary = \"\"\n    while\
    \ decimal > 0 do\n      binary = binary .. \"0\"\n      decimal = decimal - 1\n\
    \    end\n    while decimal > 0 do\n      decimal = decimal - 1\n      binary\
    \ = binary .. \"1\"\n    end\n    return binary\n  end\n  local function binary_to_decimal3(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary3(decimal)\n    local binary = \"\"\n    while\
    \ decimal > 0 do\n      binary = binary .. \"0\"\n      decimal = decimal - 1\n\
    \    end\n    while decimal > 0 do\n      decimal = decimal - 1\n      binary\
    \ = binary .. \"1\"\n    end\n    return binary\n  end\n  local function binary_to_decimal4(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary4(decimal)\n    local binary = \"\"\n    while\
    \ decimal > 0 do\n      binary = binary .. \"0\"\n      decimal = decimal - 1\n\
    \    end\n    while decimal > 0 do\n      decimal = decimal - 1\n      binary\
    \ = binary .. \"1\"\n    end\n    return binary\n  end\n  local function binary_to_decimal5(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1) * pow(2, #binary - i - 1)\n    end\n    return decimal\n  end\n\
    \  local function decimal_to_binary5(decimal)\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpawgsevoa.lua:108: 'end' expected (to close 'function' at line\
    \ 92) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      return\n    end\n    local m = math.floor(math.log2(i))\n\
    \    local l = math.pow(2, m)\n    local j = math.floor(i/l)\n    local k = i\
    \ - j*l\n    helper(arr, j, l)\n    helper(arr, k+1, n)\n    local m = math.floor(math.log2(k))\n\
    \    local l = math.pow(2, m)\n    local j = math.floor(k/l)\n    local k = k\
    \ - j*l\n    helper(arr, j, l)\n    helper(arr, k+1, n)\n  end\n  helper(arr,\
    \ 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw491it3.lua:13:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpnw491it3.lua:26:\
    \ in function 'candidate'\n\t/tmp/tmpnw491it3.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- For this, we use a hash table to count\
    \ the number of ones.\n  local counts = {}\n  for _, elem in ipairs(arr) do\n\
    \    local key = tostring(elem)\n    counts[key] = counts[key] or 0\n    counts[key]\
    \ = counts[key] + 1\n  end\n  -- Then, we sort them according to the number of\
    \ ones.\n  -- The second step is to sort the elements according to the decimal\
    \ value.\n  -- For this, we use a helper function sort_array_helper().\n  local\
    \ function sort_array_helper(arr)\n    local sorted_arr = {}\n    for _, elem\
    \ in ipairs(arr) do\n      local key = tostring(elem)\n      sorted_arr[key] =\
    \ sort_array_helper(sorted_arr[key] or {})\n      sorted_arr[key][counts[key]]\
    \ = elem\n    end\n    return sorted_arr\n  end\n  return sort_array_helper(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfempe_gd.lua:35:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {\"1\"={1}, \"2\"={2}, \"3\"={3}, \"4\"={4},\
    \ \"5\"={5}}\nstack traceback:\n\t/tmp/tmpfempe_gd.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ofbbfjr.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp8ofbbfjr.lua:18: in function 'candidate'\n\t/tmp/tmp8ofbbfjr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs end\n    if rhs == 0 then return lhs end\n\
    \    return lhs < rhs and -1 or 1\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkougqnq.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpmkougqnq.lua:14: in function 'candidate'\n\t/tmp/tmpmkougqnq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ekgc_qh.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp4ekgc_qh.lua:14: in function 'candidate'\n\t/tmp/tmp4ekgc_qh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- Sort array in descending order based on number of ones in\
    \ their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [5, 4,\
    \ 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- Sort array in descending order based on\
    \ decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  --\
    \ >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- Sort array in descending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- Sort array in descending\
    \ order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- Sort\
    \ array in descending order based on number of ones in their binary representation\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    \  -- Sort array in descending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- Sort array in descending order based on number of ones in\
    \ their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [5, 4,\
    \ 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp62f580sr.lua:57: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(x,\
    \ y) -- Compare function to be used in sorting\n    if x < y then return -1 end\n\
    \    if x > y then return 1 end\n    return 0 -- If they are equal\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzs1m_gl.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpnzs1m_gl.lua:14: in function 'candidate'\n\t/tmp/tmpnzs1m_gl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- The result will be a table with number\
    \ of ones in each element.\n  local ones = {}\n  for i = 1, #arr do\n    local\
    \ count = 0\n    for j = 1, #arr[i] do\n      if arr[i][j] == 1 then\n       \
    \ count = count + 1\n      end\n    end\n    table.insert(ones, count)\n  end\n\
    \  -- The second step is to sort the ones in ascending order.\n  -- The result\
    \ will be a table with number of ones in each element.\n  table.sort(ones)\n \
    \ -- The third step is to sort the elements in the original array in ascending\
    \ order.\n  -- The result will be a table with number of ones in each element.\n\
    \  local sorted_arr = {}\n  for i = 1, #arr do\n    local count = 0\n    for j\
    \ = 1, #arr[i] do\n      if arr[i][j] == 1 then\n        count = count + 1\n \
    \     end\n    end\n    table.insert(sorted_arr, count)\n  end\n  -- The fourth\
    \ step is to merge the two sorted tables.\n  -- The result will be a table with\
    \ number of ones in each element.\n  local merged_arr = {}\n  for i = 1, #ones\
    \ - 1 do\n    table.insert(merged_arr, ones[i])\n  end\n  for i = 1, #ones - 1\
    \ do\n    table.insert(merged_arr, sorted_arr[i])\n  end\n  -- The fifth step\
    \ is to merge the two sorted tables.\n  -- The result will be a table with number\
    \ of ones in each element.\n  table.sort(merged_arr)\n  -- The sixth step is to\
    \ merge the two sorted tables.\n  -- The result will be a table with number of\
    \ ones in each element.\n  table.sort(merged_arr)\n  -- The seventh step is to\
    \ merge the two sorted tables.\n  -- The result will be a table with number of\
    \ ones in each element.\n  table.sort(merged_arr)\n  -- The eighth step is to\
    \ merge the two sorted tables.\n  -- The result will be a table with number of\
    \ ones in each element.\n  table.sort(merged_arr)\n  -- The ninth step is to merge\
    \ the two sorted tables.\n  -- The result will be a table with number of ones\
    \ in each element.\n  table.sort(merged_arr)\n  -- The tenth step is to merge\
    \ the two sorted tables.\n  -- The result will be a table with number of ones\
    \ in each element.\n  table.sort(merged_arr)\n  -- The eleventh step is to merge\
    \ the two sorted tables.\n  -- The result will be a table with number of ones\
    \ in each element.\n  table.sort(merged_arr)\n  -- \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8e6suxz4.lua:81: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\n  -- Recursive case\n  local n = #arr\n  local\
    \ m = math.floor(math.log(n, 2))\n  local l = math.pow(2.0, m)\n  local i = 1\n\
    \  local j = 1\n  local k = 1\n  local tmp\n  local tmp2\n  local tmp3\n  local\
    \ tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local tmp9\n\
    \  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n \
    \ local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n  local\
    \ tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local tmp25\n\
    \  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n \
    \ local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n  local\
    \ tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local tmp41\n\
    \  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n \
    \ local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n  local\
    \ tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local tmp57\n\
    \  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n \
    \ local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n  local\
    \ tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local tmp73\n\
    \  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n \
    \ local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n  local\
    \ tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local tmp89\n\
    \  local tmp90\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj0cwqc7d.lua:125: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers into positive ones.\n  -- This can be done by adding 2^32\
    \ to negative numbers and subtracting 2^32\n  -- from positive ones.\n  local\
    \ function convert_negative(num)\n    return num + 2^32\n  end\n  local function\
    \ convert_positive(num)\n    return num - 2^32\n  end\n  -- The second step is\
    \ to convert all zeros into ones.\n  -- This can be done by adding 2^32 to zeros\
    \ and subtracting 2^32 from ones.\n  local function convert_zero(num)\n    return\
    \ num + 2^32\n  end\n  -- The third step is to convert all positive numbers into\
    \ negative ones.\n  -- This can be done by adding 2^32 to positive numbers and\
    \ subtracting 2^32\n  -- from negative ones.\n  local function convert_positive_to_negative(num)\n\
    \    return num - 2^32\n  end\n  -- The fourth step is to convert all negative\
    \ numbers into positive ones.\n  -- This can be done by adding 2^32 to negative\
    \ numbers and subtracting 2^32\n  -- from positive ones.\n  local function convert_negative_to_positive(num)\n\
    \    return num + 2^32\n  end\n  -- The fifth step is to convert all positive\
    \ numbers into negative ones.\n  -- This can be done by adding 2^32 to positive\
    \ numbers and subtracting 2^32\n  -- from negative ones.\n  local function convert_positive_to_negative_to_positive(num)\n\
    \    return num - 2^32\n  end\n  -- The sixth step is to convert all negative\
    \ numbers into positive ones.\n  -- This can be done by adding 2^32 to negative\
    \ numbers and subtracting 2^32\n  -- from positive ones.\n  local function convert_negative_to_positive_to_negative(num)\n\
    \    return num + 2^32\n  end\n  -- The seventh step is to convert all positive\
    \ numbers into negative ones.\n  -- This can be done by adding 2^32 to positive\
    \ numbers and subtracting 2^32\n  -- from negative ones.\n  local function convert_positive_to_negative_to_positive_to_negative(num)\n\
    \    return num - 2^32\n  end\n  -- The eighth step is to convert all negative\
    \ numbers into positive ones.\n  -- This can be done by adding 2^32 to negative\
    \ numbers and subtracting 2^32\n  -- from positive ones.\n  local function convert_negative_to_positive_to_negative_to_positive(num)\n\
    \    return num + 2^32\n  end\n  -- The ninth step is to convert all positive\
    \ numbers into negative ones.\n  -- This can be done by adding 2^32 to positive\
    \ numbers and subtracting 2^32\n  -- from negative ones.\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0c3vr_k6.lua:77: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or 1)\n    end\n    return decimal\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf65n7iup.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakblei39.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpakblei39.lua:18: in function 'candidate'\n\t/tmp/tmpakblei39.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\n  -- Recursive case\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  -- Sort the left half\n  helper(arr, #arr, 1)\n  -- Sort the right half\n \
    \ helper(arr, 2, #arr)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgayoztw.lua:31:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {4, 1, 2, 3, 5}\nstack traceback:\n\t/tmp/tmpkgayoztw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm_fwo0b_.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk_fr4ns.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpdk_fr4ns.lua:14: in function 'candidate'\n\t/tmp/tmpdk_fr4ns.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs < 0 then\n \
    \     return 1\n    end\n    if lhs > 0 then\n      return -1\n    end\n    if\
    \ rhs == 0 then\n      return 1\n    end\n    if rhs < 0 then\n      return -1\n\
    \    end\n    if rhs > 0 then\n      return 1\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3k3qno1c.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp3k3qno1c.lua:29: in function 'candidate'\n\t/tmp/tmp3k3qno1c.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbs0pllu6.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * (2^i)\n    end\n    return decimal\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpma1i9z7n.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kq_1n3m.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp0kq_1n3m.lua:18: in function 'candidate'\n\t/tmp/tmp0kq_1n3m.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * 2^i\n    end\n    return decimal\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm56s1_4e.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of arr\
    \ is already sorted\n  if arr[1] == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaah0unhl.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ to store binary representation of number\n  -- with same number of ones in ascending\
    \ order.\n  local bins = {}\n  -- We use an auxiliary array to store decimal representation\
    \ of number\n  -- with same number of ones in ascending order.\n  local decs =\
    \ {}\n  -- We use an auxiliary array to store decimal representation of number\n\
    \  -- with same number of ones in descending order.\n  local decs_rev = {}\n \
    \ -- We use an auxiliary array to store decimal representation of number\n  --\
    \ with same number of ones in descending order.\n  local decs_rev2 = {}\n  --\
    \ We use an auxiliary array to store decimal representation of number\n  -- with\
    \ same number of ones in descending order.\n  local decs_rev3 = {}\n  -- We use\
    \ an auxiliary array to store decimal representation of number\n  -- with same\
    \ number of ones in descending order.\n  local decs_rev4 = {}\n  -- We use an\
    \ auxiliary array to store decimal representation of number\n  -- with same number\
    \ of ones in descending order.\n  local decs_rev5 = {}\n  -- We use an auxiliary\
    \ array to store decimal representation of number\n  -- with same number of ones\
    \ in descending order.\n  local decs_rev6 = {}\n  -- We use an auxiliary array\
    \ to store decimal representation of number\n  -- with same number of ones in\
    \ descending order.\n  local decs_rev7 = {}\n  -- We use an auxiliary array to\
    \ store decimal representation of number\n  -- with same number of ones in descending\
    \ order.\n  local decs_rev8 = {}\n  -- We use an auxiliary array to store decimal\
    \ representation of number\n  -- with same number of ones in descending order.\n\
    \  local decs_rev9 = {}\n  -- We use an auxiliary array to store decimal representation\
    \ of number\n  -- with same number of ones in descending order.\n  local decs_rev10\
    \ = {}\n  -- We use an auxiliary array to store decimal representation of number\n\
    \  -- with same number of ones in descending order.\n  local decs_rev11 = {}\n\
    \  -- We use an auxiliary array to store decimal representation of number\n  --\
    \ with same number of ones in descending order.\n  local decs_rev12 = {}\n  --\
    \ We use an auxiliary array to store decimal representation of number\n  -- with\
    \ same number of ones in descending order.\n  local decs_rev13 = {}\n  -- We use\
    \ an auxiliary array to store decimal representation of number\n  -- with same\
    \ number of ones in descending order.\n  local decs_rev14 = {}\n  -- We use an\
    \ auxiliary \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt8_7lenb.lua:72: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ to sort array in ascending order.\n  -- This algorithm is called \"counting\
    \ sort\".\n  -- https://en.wikipedia.org/wiki/Counting_sort\n  -- The idea is\
    \ to count number of ones in binary representation of\n  -- each number, then\
    \ sort based on this number.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  local\
    \ function count_ones(arr)\n    local counts = {}\n    for i = 1, #arr do\n  \
    \    local bin = bit.bor(arr[i], 0)\n      local n = bit.rshift(bin, 1)\n    \
    \  counts[n] = counts[n] or 1\n      counts[n] = counts[n] + 1\n    end\n    local\
    \ sorted_arr = {}\n    for i = 1, #counts do\n      table.insert(sorted_arr, counts[i])\n\
    \    end\n    table.sort(sorted_arr)\n    return sorted_arr\n  end\n  -- We use\
    \ decimal representation to sort array in ascending order.\n  -- This algorithm\
    \ is called \"radix sort\".\n  -- https://en.wikipedia.org/wiki/Radix_sort\n \
    \ -- The idea is to sort array based on decimal value, where each number\n  --\
    \ is represented by a unique decimal value.\n  -- For similar number of ones,\
    \ sort based on binary value.\n  -- It must be implemented like this:\n  -- >>>\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n  local function radix_sort(arr)\n    local sorted_arr = {}\n \
    \   local radix = math.pow(10, math.floor(math.log2(#arr)))\n    for i = 1, #arr\
    \ do\n      local bin = bit.bor(arr[i], 0)\n      local n = bit.rshift(bin, 1)\n\
    \      table.insert(sorted_arr, radix * n)\n    end\n    table.sort(sorted_arr)\n\
    \    return sorted_arr\n  end\n  -- We use decimal representation to sort array\
    \ in ascending order.\n  -- This algorithm is called \"counting sort with radix\
    \ sort\".\n  -- https://en.wikipedia.org/wiki/Counting_sort\n  -- The idea is\
    \ to count number of ones in binary representation of\n  -- each number, then\
    \ sort based on this number.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpslm42qdb.lua:77: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element in the\
    \ array is always 1.\n  -- The second element in the array is always 0.\n  --\
    \ The third element in the array is always 0.\n  -- The fourth element in the\
    \ array is always 1.\n  -- The fifth element in the array is always 2.\n  -- The\
    \ sixth element in the array is always 3.\n  -- The seventh element in the array\
    \ is always 4.\n  -- The eighth element in the array is always 5.\n  -- The ninth\
    \ element in the array is always 6.\n  -- The tenth element in the array is always\
    \ 7.\n  -- The eleventh element in the array is always 8.\n  -- The twelfth element\
    \ in the array is always 9.\n  -- The array is sorted in ascending order according\
    \ to number of ones in their binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- The array is sorted\
    \ in ascending order according to decimal value.\n  -- The array is sorted in\
    \ ascending order according to decimal value.\n  -- The array is sorted in ascending\
    \ order according to decimal value.\n  -- The array is sorted in ascending order\
    \ according to decimal value.\n  -- The array is sorted in ascending order according\
    \ to decimal value.\n  -- The array is sorted in ascending order according to\
    \ decimal value.\n  -- The array is sorted in ascending order according to decimal\
    \ value.\n  -- The array is sorted in ascending order according to decimal value.\n\
    \  -- The array is sorted in ascending order according to decimal value.\n  --\
    \ The array is sorted in ascending order according to decimal value.\n  -- The\
    \ array is sorted in ascending order according to decimal value.\n  -- The array\
    \ is sorted in ascending order according to decimal value.\n  -- The array is\
    \ sorted in ascending order according to decimal value.\n  -- The array is sorted\
    \ in ascending order according to decimal value.\n  -- The array is sorted in\
    \ ascending order according to decimal value.\n  -- The array is sorted in ascending\
    \ order according to decimal value.\n  -- The array is sorted in ascending order\
    \ according to decimal value.\n  -- The array is sorted in ascending order according\
    \ to decimal value.\n  -- The array is sorted in ascending order according to\
    \ decimal value.\n  -- The array is sorted in ascending order according to decimal\
    \ value.\n  -- The array is sorted in ascending order according to decimal value.\n\
    \  -- The array is sorted in ascending order according to decimal value.\n  --\
    \ The array is sorted in ascending order according to decimal value.\n  -- The\
    \ array is sorted in ascending \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmpc1zzi2.lua:61: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq33oqnib.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpq33oqnib.lua:18: in function 'candidate'\n\t/tmp/tmpq33oqnib.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0egpl65.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpa0egpl65.lua:18: in function 'candidate'\n\t/tmp/tmpa0egpl65.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, count)\n    if count == 0 then\n      arr[i] = arr[i]\n    elseif count ==\
    \ 1 then\n      arr[i] = arr[i] + arr[i]\n    else\n      arr[i] = arr[i] + arr[i]\
    \ + arr[i]\n    end\n  end\n  local count = 1\n  local i = 1\n  while i <= #arr\
    \ do\n    helper(arr, i, count)\n    count = count + 1\n    i = i + 1\n  end\n\
    \  helper(arr, i, count)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6xvz61k.lua:15:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpq6xvz61k.lua:25: in function 'candidate'\n\t/tmp/tmpq6xvz61k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We sort by binary representation\
    \ and sort by decimal value.\n  -- The binary representation is created by converting\
    \ each integer into its binary representation.\n  -- For example, 5 -> \"101\"\
    .\n  -- Then we sort by decimal value.\n  -- For similar number of ones, sort\
    \ based on decimal value.\n  -- For similar number of zeros, sort based on binary\
    \ representation.\n  -- The decimal value is created by converting each binary\
    \ representation into its decimal value.\n  -- For example, 101 -> 5.\n  -- Then\
    \ we sort by decimal value.\n  -- For similar number of zeros, sort based on binary\
    \ representation.\n  -- The binary representation is created by converting each\
    \ integer into its binary representation.\n  -- For example, 5 -> \"101\".\n \
    \ -- Then we sort by decimal value.\n  -- For similar number of ones, sort based\
    \ on decimal value.\n  -- For similar number of zeros, sort based on binary representation.\n\
    \  -- The decimal value is created by converting each binary representation into\
    \ its decimal value.\n  -- For example, 101 -> 5.\n  -- Then we sort by decimal\
    \ value.\n  -- For similar number of zeros, sort based on binary representation.\n\
    \  -- The binary representation is created by converting each integer into its\
    \ binary representation.\n  -- For example, 5 -> \"101\".\n  -- Then we sort by\
    \ decimal value.\n  -- For similar number of ones, sort based on decimal value.\n\
    \  -- For similar number of zeros, sort based on binary representation.\n  --\
    \ The decimal value is created by converting each binary representation into its\
    \ decimal value.\n  -- For example, 101 -> 5.\n  -- Then we sort by decimal value.\n\
    \  -- For similar number of zeros, sort based on binary representation.\n  --\
    \ The binary representation is created by converting each integer into its binary\
    \ representation.\n  -- For example, 5 -> \"101\".\n  -- Then we sort by decimal\
    \ value.\n  -- For similar number of ones, sort based on decimal value.\n  --\
    \ For similar number of zeros, sort based on binary representation.\n  -- The\
    \ decimal value is created by converting each binary representation into its decimal\
    \ value.\n  -- For example, 101 -> 5.\n  -- Then we sort by decimal value.\n \
    \ -- For similar number of zeros, sort based on binary representation.\n  -- The\
    \ binary representation is created by converting each integer into its binary\
    \ representation.\n  -- For example, 5 -> \"101\".\n  -- Then we sort by decimal\
    \ value.\n  -- For similar number of ones, sort based on decimal value.\n  --\
    \ For similar number of zeros, sort based on binary representation.\n  -- The\
    \ decimal value is created by converting each binary representation into its decimal\
    \ value.\n  -- For example, 101 -> 5.\n  -- Then we sort by decimal value.\n \
    \ -- For similar number of zero\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzcufk1zm.lua:69: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return rhs\n    end\n    if rhs == 0 then\n\
    \      return lhs\n    end\n    return lhs - rhs\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpals1pq_l.lua:16:\
    \ attempt to perform arithmetic on local 'lhs' (a nil value)\nstack traceback:\n\
    \t[C]: in function 'sort'\n\t/tmp/tmpals1pq_l.lua:18: in function 'candidate'\n\
    \t/tmp/tmpals1pq_l.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of arr\
    \ is already sorted\n  if arr[1] == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt48wh8ni.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use bitwise operators\
    \ to convert each number to its binary representation.\n  -- Then we sort them\
    \ in ascending order and convert them back to integers.\n  -- The final result\
    \ will be an array of integers.\n  local bins = {}\n  for i = 1, #arr do\n   \
    \ local bin = bit.bor(bit.lshift(arr[i], 8), bit.rshift(arr[i], 8))\n    table.insert(bins,\
    \ bin)\n  end\n  table.sort(bins, function(a, b) return bit.lshift(a, 8) < bit.lshift(b,\
    \ 8) end)\n  local results = {}\n  for i = 1, #bins do\n    table.insert(results,\
    \ bit.rshift(bins[i], 8))\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mxevj2d.lua:14:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmp9mxevj2d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with less then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We also use binary representation for numbers with\
    \ more then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n\
    \  -- We use binary representation for numbers with less then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for numbers with more then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We use binary representation for numbers with less\
    \ then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n \
    \ -- We use binary representation for numbers with more then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for numbers with less then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We use binary representation for numbers with more\
    \ then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n \
    \ -- We use binary representation for numbers with less then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for numbers with more then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We use binary representation for numbers with less\
    \ then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n \
    \ -- We use binary representation for numbers with more then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for numbers with less then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We use binary representation for numbers with more\
    \ then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n \
    \ -- We use binary representation for numbers with less then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for numbers with more then 64 bits.\n  -- This allows us to sort them using\
    \ bitwise operators.\n  -- We use binary representation for numbers with less\
    \ then 64 bits.\n  -- This allows us to sort them using bitwise operators.\n \
    \ -- We use binary representation for numbers with more then 64 bits.\n  -- This\
    \ allows us to sort them using bitwise operators.\n  -- We use binary representation\
    \ for \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpilh7htp1.lua:60: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  local\
    \ function count_ones(arr)\n    local count = 0\n    for i = 1, #arr do\n    \
    \  if arr[i] > 0 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  --\
    \ Sort arr based on number of ones in their binary representation in ascending\
    \ order.\n  -- For similar number of ones, sort based on decimal value.\n  --\
    \ It must be implemented like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on\
    \ number of ones in their binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their\
    \ binary representation in ascending order.\n  -- For similar number of ones,\
    \ sort based on decimal value.\n  -- It must be implemented like this:\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm75imlue.lua:65: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * 2^i\n    end\n    return decimal\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8p7c9184.lua:30: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87w85ban.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp87w85ban.lua:14: in function 'candidate'\n\t/tmp/tmp87w85ban.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\n  -- Recursive case\n  local num_ones = count_ones(arr[1])\n\
    \  if num_ones == 1 then\n    return arr\n  else\n    local decimal_value = num_ones\
    \ - 1\n    local decimal_places = math.floor(math.log(decimal_value, 2))\n   \
    \ local decimal_power = decimal_places + 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt4rw3g5p.lua:84: 'end' expected (to close 'if' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs == 0 end\n    if lhs == 1 then return\
    \ rhs == 1 end\n    if lhs == -1 then return rhs == -1 end\n    return lhs < rhs\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxt2knpq.lua:22:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwxt2knpq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local function helper2(arr, i, j)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n  end\n  local function helper3(arr, i, j)\n    if i == j then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n    \
    \  arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper4(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local function helper5(arr, i, j)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n  end\n  local function helper6(arr, i, j)\n    if i == j then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n    \
    \  arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper7(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local function helper8(arr, i, j)\n    if i == j then\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n  end\n  local function helper9(arr, i, j)\n    if i == j then\n\
    \      arr[i], arr[j] = arr[j], arr[i]\n    elseif arr[i] > arr[j] then\n    \
    \  arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  local function helper10(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local function helper11(arr, i, \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbpan1f24.lua:80: ')' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87p92le9.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp87p92le9.lua:14: in function 'candidate'\n\t/tmp/tmp87p92le9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      for i = 7, 1, -1 do\n        local d = dec % 2\n        dec\
    \ = dec / 2\n        bin = d .. bin\n      end\n      return bin\n    end\n  \
    \  local function bin2dec2(bin)\n      local dec = 0\n      for i = 1, 8 do\n\
    \        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n      end\n\
    \      return dec\n    end\n    local function dec2bin2(dec)\n      local bin\
    \ = \"\"\n      for i = 7, 1, -1 do\n        local d = dec % 2\n        dec =\
    \ dec / 2\n        bin = d .. bin\n      end\n      return bin\n    end\n    local\
    \ function compare2(lhs, rhs)\n      local bin = dec2bin2(lhs)\n      bin = bin:sub(1,\
    \ bin:len()-1)\n      bin = bin:sub(1, bin:len()-1)\n      local bin2 = dec2bin2(rhs)\n\
    \      bin2 = bin2:sub(1, bin2:len()-1)\n      bin2 = bin2:sub(1, bin2:len()-1)\n\
    \      return bin2dec2(bin) > bin2dec2(bin2)\n    end\n    local function compare3(lhs,\
    \ rhs)\n      local bin = dec2bin2(lhs)\n      bin = bin:sub(1, bin:len()-1)\n\
    \      bin = bin:sub(1, bin:len()-1)\n      local bin2 = dec2bin2(rhs)\n     \
    \ bin2 = bin2:sub(1, bin2:len()-1)\n      bin2 = bin2:sub(1, bin2:len()-1)\n \
    \     return bin2dec2(bin) < bin2dec2(bin2)\n    end\n    local function compare4(lhs,\
    \ rhs)\n      local bin = dec2bin2(lhs)\n      bin = bin:sub(1, bin:len()-1)\n\
    \      bin = bin:sub(1, bin:len()-1)\n      local bin2 = dec2bin2(rhs)\n     \
    \ bin2 = bin2:sub(1, bin2:len()-1)\n      bin2 = bin2:sub(1, bin2:len()-1)\n \
    \     return bin2dec2(bin) == bin2dec2(bin2)\n    end\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5q82hsq5.lua:86: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local n = #arr\n  for i = 1, n do\n    helper(arr, i, n - 1)\n  end\n  helper(arr,\
    \ 1, n - 1)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd7vjfgg.lua:27:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 3, 2, 5, 4}\nstack traceback:\n\t/tmp/tmpxd7vjfgg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, count)\n    if i == count then\n      arr[i] = arr[i]\n    elseif count >\
    \ 0 then\n      helper(arr, i + 1, count)\n    end\n  end\n  helper(arr, 1, #arr)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6si3npeh.lua:23:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp6si3npeh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      return arr[i]\n    end\n    local num_ones\
    \ = count_ones(arr[i])\n    local num_zeros = count_zeros(arr[j])\n    if num_ones\
    \ > num_zeros then\n      return helper(arr, i, num_zeros)\n    elseif num_zeros\
    \ > num_ones then\n      return helper(arr, num_zeros, j)\n    else\n      return\
    \ helper(arr, i, j - num_ones)\n    end\n  end\n  return helper(arr, 1, #arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4449y8u.lua:13:\
    \ attempt to call global 'count_ones' (a nil value)\nstack traceback:\n\t(tail\
    \ call): ?\n\t/tmp/tmpg4449y8u.lua:29: in function 'test_humaneval'\n\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- For this purpose, use bitwise operators.\n\
    \  local function count_ones(x)\n    local count = 0\n    for i = 1, #x do\n \
    \     if x[i] == 1 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end\n  -- The second step is to sort the array based on the number\
    \ of ones.\n  -- For this purpose, use \"select\" function.\n  local function\
    \ sort_by_ones(arr)\n    local sorted_arr = {}\n    for i = 1, #arr do\n     \
    \ sorted_arr[#sorted_arr + 1] = arr[i]\n    end\n    table.sort(sorted_arr, count_ones)\n\
    \    return sorted_arr\n  end\n  -- The third step is to sort the array based\
    \ on the decimal value.\n  -- For this purpose, use \"select\" function.\n  local\
    \ function sort_by_decimal(arr)\n    local sorted_arr = {}\n    for i = 1, #arr\
    \ do\n      sorted_arr[#sorted_arr + 1] = arr[i]\n    end\n    table.sort(sorted_arr,\
    \ function(x, y)\n      -- The first step is to convert decimal to binary.\n \
    \     local x_bin = bit.rshift(x, 8)\n      local y_bin = bit.rshift(y, 8)\n \
    \     -- The second step is to compare the binary values.\n      -- If they are\
    \ equal, compare the decimal values.\n      if x_bin == y_bin then\n        return\
    \ x - y\n      else\n        return x_bin - y_bin\n      end\n    end)\n    return\
    \ sorted_arr\n  end\n  -- The fourth step is to sort the array based on the decimal\
    \ value.\n  -- For this purpose, use \"select\" function.\n  local function sort_by_decimal_2(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    end\n    table.sort(sorted_arr, function(x, y)\n      --\
    \ The first step is to convert decimal to binary.\n      local x_bin = bit.rshift(x,\
    \ 8)\n      local y_bin = bit.rshift(y, 8)\n      -- The second step is to compare\
    \ the binary values.\n      -- If they are equal, compare the decimal values.\n\
    \      if x_bin == y_bin then\n        return x - y\n      else\n        return\
    \ x_bin - y_bin\n      end\n    end)\n    return sorted_arr\n  end\n  -- The fifth\
    \ step is to sort the array based on the decimal value.\n  -- For this purpose,\
    \ use \"select\" function.\n  local function sort_by_decimal_3(arr)\n    local\
    \ sorted_arr = {}\n    for i = 1, #arr do\n      \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzgsrai8a.lua:92: 'end' expected (to close 'for' at line 76)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  --\
    \ Sort arr based on number of ones in their binary representation in ascending\
    \ order.\n  -- For similar number of ones, sort based on decimal value.\n  --\
    \ It must be implemented like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on\
    \ number of ones in their binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their\
    \ binary representation in ascending order.\n  -- For similar number of ones,\
    \ sort based on decimal value.\n  -- It must be implemented like this:\n  -- >>>\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpanfo1tvw.lua:59: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each number.\n  -- The result will be a table with one\
    \ column and one row.\n  local counts = {}\n  for i = 1, #arr do\n    local bin\
    \ = bit.rshift(tostring(arr[i]), 8)\n    local n = #bin\n    if counts[n] == nil\
    \ then\n      counts[n] = 0\n    end\n    counts[n] = counts[n] + 1\n  end\n \
    \ -- The second step is to sort the numbers by number of ones.\n  -- The result\
    \ will be a table with one column and one row.\n  local sorted_counts = {}\n \
    \ for i = 1, #counts do\n    sorted_counts[i] = counts[i]\n  end\n  table.sort(sorted_counts)\n\
    \  -- The third step is to sort the numbers by decimal value.\n  -- The result\
    \ will be a table with one column and one row.\n  local sorted_arr = {}\n  for\
    \ i = 1, #arr do\n    sorted_arr[i] = arr[i]\n  end\n  for i = 1, #sorted_counts\
    \ do\n    local n = sorted_counts[i]\n    local j = #sorted_arr\n    while j >\
    \ 0 and sorted_arr[j - 1] > n do\n      sorted_arr[j] = sorted_arr[j - 1]\n  \
    \    j = j - 1\n    end\n    sorted_arr[j] = n\n  end\n  return sorted_arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplst1roc2.lua:13:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmplst1roc2.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with less then 32 bits\n  -- because it is faster and it can be\
    \ converted to decimal easily.\n  -- For numbers with more then 32 bits, we convert\
    \ them to decimal and sort them.\n  -- This approach is very fast and can sort\
    \ arrays with up to 10^9 elements.\n  -- It uses O(n) time and O(1) space.\n \
    \ local function bin2dec(bin)\n    local dec = 0\n    for i = 1, 8 do\n      dec\
    \ = dec + bin:byte(i)\n    end\n    return dec\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi4e56rw0.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- The result is a table with one element\
    \ for each element in the input array.\n  local counts = {}\n  for _, elem in\
    \ ipairs(arr) do\n    local count = counts[elem] or 0\n    count = count + 1\n\
    \    counts[elem] = count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmxy4e69p.lua:31: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 1 then\n    return arr\n  end\n  -- Recursive case\n  local ones = arr[1]\n\
    \  local rest = arr[2:]\n  local sorted_rest = sort_array(rest)\n  local sorted_ones\
    \ = sort_array(ones)\n  -- Combine sorted arrays\n  return sorted_ones:concat(rest):concat(sorted_rest)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp18ozcq08.lua:15: ']' expected near ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    local function bin2dec(n)\n      local bin = string.format(\"%b\"\
    , n)\n      local dec = 0\n      for i = 1, #bin do\n        dec = dec + bin:sub(i,\
    \ i) * 2^i\n      end\n      return dec\n    end\n    local function dec2bin(dec)\n\
    \      local bin = \"\"\n      while dec > 0 do\n        bin = string.format(\"\
    %b\", dec % 2) + bin\n        dec = dec / 2\n      end\n      return bin\n   \
    \ end\n    local function bin2dec2(bin)\n      local dec = 0\n      for i = 1,\
    \ #bin do\n        dec = dec + bin:sub(i, i) * 2^i\n      end\n      return dec\n\
    \    end\n    local function dec2bin2(dec)\n      local bin = \"\"\n      while\
    \ dec > 0 do\n        bin = string.format(\"%b\", dec % 2) + bin\n        dec\
    \ = dec / 2\n      end\n      return bin\n    end\n    local function dec2bin3(dec)\n\
    \      local bin = \"\"\n      while dec > 0 do\n        bin = string.format(\"\
    %b\", dec % 2) + bin\n        dec = dec / 2\n      end\n      return bin\n   \
    \ end\n    local function dec2bin4(dec)\n      local bin = \"\"\n      while dec\
    \ > 0 do\n        bin = string.format(\"%b\", dec % 2) + bin\n        dec = dec\
    \ / 2\n      end\n      return bin\n    end\n    local function dec2bin5(dec)\n\
    \      local bin = \"\"\n      while dec > 0 do\n        bin = string.format(\"\
    %b\", dec % 2) + bin\n        dec = dec / 2\n      end\n      return bin\n   \
    \ end\n    local function dec2bin6(dec)\n      local bin = \"\"\n      while dec\
    \ > 0 do\n        bin = string.format(\"%b\", dec % 2) + bin\n        dec = dec\
    \ / 2\n      end\n      return bin\n    end\n    local function dec2bin7(dec)\n\
    \      local bin = \"\"\n      while dec > 0 do\n        bin = string.format(\"\
    %b\", dec % 2) + bin\n        dec = dec / 2\n      end\n      return bin\n   \
    \ end\n    local function dec2bin8(dec)\n      local bin = \"\"\n      while dec\
    \ > 0 do\n        bin = string.format(\"%b\", dec % 2) + bin\n        dec = dec\
    \ / 2\n      end\n      return bin\n    end\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvgpxi07_.lua:104: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- For this problem, we use a hash table\
    \ to count the number of ones.\n  local counts = {}\n  for _, elem in ipairs(arr)\
    \ do\n    local key = tostring(elem)\n    counts[key] = counts[key] or 0\n   \
    \ counts[key] = counts[key] + 1\n  end\n  -- The second step is to sort the array\
    \ based on the number of ones.\n  -- For this problem, we use a hash table to\
    \ store the sorted result.\n  local sorted_arr = {}\n  for _, elem in ipairs(arr)\
    \ do\n    local key = tostring(elem)\n    sorted_arr[key] = counts[key]\n  end\n\
    \  -- The third step is to sort the array based on the decimal value.\n  -- For\
    \ this problem, we use a hash table to store the sorted result.\n  local sorted_arr2\
    \ = {}\n  for _, elem in ipairs(arr) do\n    local key = tostring(elem)\n    sorted_arr2[key]\
    \ = sorted_arr2[key] or 0\n    sorted_arr2[key] = sorted_arr2[key] + 1\n  end\n\
    \  return sorted_arr2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4meoahc.lua:38:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {\"1\"=1, \"2\"=1, \"3\"=1, \"4\"=1, \"5\"\
    =1}\nstack traceback:\n\t/tmp/tmpx4meoahc.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 else return 1 end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35fyl6c3.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp35fyl6c3.lua:12: in function 'candidate'\n\t/tmp/tmp35fyl6c3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ to sort array\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  --\
    \ >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- We use decimal representation to sort array\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    \  -- We use decimal representation to sort array\n  -- >>> sort_array([1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- We use binary representation\
    \ to sort array\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  --\
    \ >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- We use decimal representation to sort\
    \ array\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    \  -- We use decimal representation to sort array\n  -- >>> sort_array([1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- We use binary representation\
    \ to sort array\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  --\
    \ >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- We use decimal representation to sort\
    \ array\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwsqfsp5c.lua:59: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in binary representation.\n  -- For similar number\
    \ of ones, sort based on decimal value.\n  -- It must be implemented like this:\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function compare(lhs, rhs)\n    local function bin2dec(bin)\n\
    \      -- Convert binary representation to decimal value.\n      -- It must be\
    \ implemented like this:\n      -- >>> bin2dec('1100') == 3\n      -- >>> bin2dec('1110')\
    \ == 4\n      -- >>> bin2dec('1111') == 5\n      -- >>> bin2dec('0000') == 0\n\
    \      -- >>> bin2dec('1111') == 5\n      -- >>> bin2dec('1110') == 4\n      --\
    \ >>> bin2dec('1100') == 3\n      local function dec2bin(dec)\n        -- Convert\
    \ decimal value to binary representation.\n        -- It must be implemented like\
    \ this:\n        -- >>> dec2bin(3) == '1100'\n        -- >>> dec2bin(4) == '1110'\n\
    \        -- >>> dec2bin(5) == '1111'\n        -- >>> dec2bin(0) == '0000'\n  \
    \      -- >>> dec2bin(5) == '1111'\n        -- >>> dec2bin(4) == '1110'\n    \
    \    -- >>> dec2bin(3) == '1100'\n        local function bin2dec2(bin)\n     \
    \     -- Convert binary representation to decimal value.\n          -- It must\
    \ be implemented like this:\n          -- >>> bin2dec2('1100') == 3\n        \
    \  -- >>> bin2dec2('1110') == 4\n          -- >>> bin2dec2('1111') == 5\n    \
    \      -- >>> bin2dec2('0000') == 0\n          -- >>> bin2dec2('1111') == 5\n\
    \          -- >>> bin2dec2('1110') == 4\n          -- >>> bin2dec2('1100') ==\
    \ 3\n          local function dec2bin2(dec)\n            -- Convert decimal value\
    \ to binary representation.\n            -- It must be implemented like this:\n\
    \            -- >>> dec2bin2(3) == '1100'\n            -- >>> dec2bin2(4) == '1110'\n\
    \            -- >>> dec2bin2(5) == '1111'\n            -- >>> dec2bin2(0) == '0000'\n\
    \            -- >>> dec2bin2(5) == '1111'\n            -- >>> dec2bin2(4\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwlqe2eez.lua:69: 'end' expected (to close 'function' at line\
    \ 46) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Initialize result array\n\
    \  local result = {}\n  -- Initialize number of ones in result array\n  local\
    \ num_ones = 0\n  -- Iterate through each element of array\n  for i = 1, #arr\
    \ do\n    -- Get binary representation of current element\n    local bin = bit.rshift(tostring(arr[i]),\
    \ 32)\n    -- If current element has only one bit set\n    if bin:len() == 1 then\n\
    \      -- Increment number of ones in result array\n      num_ones = num_ones\
    \ + 1\n      -- Append current element to result array\n      result[#result+1]\
    \ = arr[i]\n    end\n  end\n  -- If number of ones is less than or equal to number\
    \ of elements in array\n  if num_ones < #arr then\n    -- Sort result array based\
    \ on number of ones\n    table.sort(result, function(a, b)\n      -- Get number\
    \ of ones in binary representation of a\n      local num_ones_a = bit.rshift(tostring(a),\
    \ 32)\n      -- Get number of ones in binary representation of b\n      local\
    \ num_ones_b = bit.rshift(tostring(b), 32)\n      -- Return 1 if number of ones\
    \ in binary representation of a\n      -- is less than number of ones in binary\
    \ representation of b\n      if num_ones_a < num_ones_b then\n        return 1\n\
    \      else\n        return -1\n      end\n    end)\n  else\n    -- Sort result\
    \ array based on decimal value\n    table.sort(result, function(a, b)\n      --\
    \ Get decimal value of a\n      local decimal_a = tonumber(tostring(a))\n    \
    \  -- Get decimal value of b\n      local decimal_b = tonumber(tostring(b))\n\
    \      -- Return decimal value of a\n      if decimal_a < decimal_b then\n   \
    \     return -1\n      else\n        return 1\n      end\n    end)\n  end\n  --\
    \ Return result array\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4wx_n_a.lua:16:\
    \ attempt to index global 'bit' (a nil value)\nstack traceback:\n\t/tmp/tmpx4wx_n_a.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mhnvdgj.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp5mhnvdgj.lua:18: in function 'candidate'\n\t/tmp/tmp5mhnvdgj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  --\
    \ Sort arr based on number of ones in their binary representation in ascending\
    \ order.\n  -- For similar number of ones, sort based on decimal value.\n  --\
    \ It must be implemented like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1,\
    \ 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on\
    \ number of ones in their binary representation in ascending order.\n  -- For\
    \ similar number of ones, sort based on decimal value.\n  -- It must be implemented\
    \ like this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>>\
    \ sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their\
    \ binary representation in ascending order.\n  -- For similar number of ones,\
    \ sort based on decimal value.\n  -- It must be implemented like this:\n  -- >>>\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0,\
    \ 1, 2, 3, 4]\n  -- Sort arr based on number of ones in their binary representation\
    \ in ascending order.\n  -- For similar number of ones, sort based on decimal\
    \ value.\n  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzsu50oyn.lua:59: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return 1\n    elseif lhs > rhs then\n   \
    \   return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn48gojpr.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpn48gojpr.lua:18: in function 'candidate'\n\t/tmp/tmpn48gojpr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with less then 32 bits\n  -- because it is faster to convert them\
    \ to decimal and compare them.\n  -- For numbers with 32 bits, we convert them\
    \ to binary and compare\n  -- their binary representations.\n  -- For numbers\
    \ with 64 bits, we convert them to decimal and compare\n  -- their decimal representations.\n\
    \  -- For numbers with 128 bits, we convert them to binary and compare\n  -- their\
    \ binary representations.\n  -- For numbers with 256 bits, we convert them to\
    \ decimal and compare\n  -- their decimal representations.\n  -- For numbers with\
    \ 512 bits, we convert them to binary and compare\n  -- their binary representations.\n\
    \  -- For numbers with 1024 bits, we convert them to decimal and compare\n  --\
    \ their decimal representations.\n  -- For numbers with 2048 bits, we convert\
    \ them to binary and compare\n  -- their binary representations.\n  -- For numbers\
    \ with 4096 bits, we convert them to decimal and compare\n  -- their decimal representations.\n\
    \  -- For numbers with 8192 bits, we convert them to binary and compare\n  --\
    \ their binary representations.\n  -- For numbers with 16384 bits, we convert\
    \ them to decimal and compare\n  -- their decimal representations.\n  -- For numbers\
    \ with 32768 bits, we convert them to binary and compare\n  -- their binary representations.\n\
    \  -- For numbers with 65536 bits, we convert them to decimal and compare\n  --\
    \ their decimal representations.\n  -- For numbers with 131072 bits, we convert\
    \ them to binary and compare\n  -- their binary representations.\n  -- For numbers\
    \ with 262144 bits, we convert them to decimal and compare\n  -- their decimal\
    \ representations.\n  -- For numbers with 524288 bits, we convert them to binary\
    \ and compare\n  -- their binary representations.\n  -- For numbers with 1048576\
    \ bits, we convert them to decimal and compare\n  -- their decimal representations.\n\
    \  -- For numbers with 2097152 bits, we convert them to binary and compare\n \
    \ -- their binary representations.\n  -- For numbers with 4194304 bits, we convert\
    \ them to decimal and compare\n  -- their decimal representations.\n  -- For numbers\
    \ with 8388608 bits, we convert them to binary and compare\n  -- their binary\
    \ representations.\n  -- For numbers with 16777216 bits, we convert them to decimal\
    \ and compare\n  -- their decimal representations.\n  -- For numbers with 33554432\
    \ bits, we convert them to binary and compare\n  -- their binary representations.\n\
    \  -- For numbers with 67108864 bits, we \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppcc3cd0l.lua:68: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by adding 2^n\
    \ where n is the number of bits in the\n  -- number's binary representation.\n\
    \  -- >>> bin(2**31)\n  -- '0b111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 1)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 2)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 3)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 4)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 5)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 6)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 7)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 8)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 9)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 10)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 11)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 12)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 13)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 14)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 15)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 16)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 17)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 18)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 19)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 20)\n  -- '0b11111111111111111111111111111111111111111111111111111111'\n\
    \  -- >>> bin(2**31 + 21)\n  -- '0b\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuoaadcaa.lua:70: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin(dec)\n      local\
    \ bin = \"\"\n      for i = 7, 1, -1 do\n        local d = dec / (2 ^ i)\n   \
    \     bin = string.char(d % 2) + bin\n        dec = dec - d * 2 ^ i\n      end\n\
    \      return bin\n    end\n    local function bin2dec2(bin)\n      local dec\
    \ = 0\n      for i = 1, 8 do\n        local b = bin:sub(i, i)\n        dec = (dec\
    \ + b) * (2 ^ i)\n      end\n      return dec\n    end\n    local function dec2bin2(dec)\n\
    \      local bin = \"\"\n      for i = 7, 1, -1 do\n        local d = dec / (2\
    \ ^ i)\n        bin = string.char(d % 2) + bin\n        dec = dec - d * 2 ^ i\n\
    \      end\n      return bin\n    end\n    local function bin2dec3(bin)\n    \
    \  local dec = 0\n      for i = 1, 8 do\n        local b = bin:sub(i, i)\n   \
    \     dec = (dec + b) * (2 ^ i)\n      end\n      return dec\n    end\n    local\
    \ function dec2bin3(dec)\n      local bin = \"\"\n      for i = 7, 1, -1 do\n\
    \        local d = dec / (2 ^ i)\n        bin = string.char(d % 2) + bin\n   \
    \     dec = dec - d * 2 ^ i\n      end\n      return bin\n    end\n    local function\
    \ bin2dec4(bin)\n      local dec = 0\n      for i = 1, 8 do\n        local b =\
    \ bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n      end\n      return dec\n\
    \    end\n    local function dec2bin4(dec)\n      local bin = \"\"\n      for\
    \ i = 7, 1, -1 do\n        local d = dec / (2 ^ i)\n        bin = string.char(d\
    \ % 2) + bin\n        dec = dec - d * 2 ^ i\n      end\n      return bin\n   \
    \ end\n    local function bin2dec5(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local b = bin:sub(i, i)\n        dec = (dec + b) * (2 ^ i)\n \
    \     end\n      return dec\n    end\n    local function dec2bin5(dec)\n     \
    \ local bin = \"\"\n      for i = 7, 1, -1 do\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk9hjfdec.lua:103: 'end' expected (to close 'for' at line 88)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpote0rqb7.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpote0rqb7.lua:18: in function 'candidate'\n\t/tmp/tmpote0rqb7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in descending order based on number of ones in binary representation\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order based on\
    \ decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n\
    \  -- >>> sort_array([-2, -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  --\
    \ >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in\
    \ descending order based on number of ones in binary representation\n  -- >>>\
    \ sort_array([1, 5, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0,\
    \ 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order based\
    \ on decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], false) == [5, 4, 3, 2,\
    \ 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], false) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort array\
    \ in descending order based on number of ones in binary representation\n  -- >>>\
    \ sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6], true) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2,\
    \ 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array in descending order based on\
    \ decimal value\n  -- >>> sort_array([1, 5, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n\
    \  -- >>> sort_array([\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxxjfzxjr.lua:54: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    if left == 0 then\n      return right\n    end\n    if right ==\
    \ 0 then\n      return left\n    end\n    if left > right then\n      return 1\n\
    \    end\n    return -1\n  end\n  table.sort(arr, compare)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput780ua_.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmput780ua_.lua:21: in function 'candidate'\n\t/tmp/tmput780ua_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function binary_search(arr, val)\n    local low = 0\n\
    \    local high = #arr\n    while low <= high do\n      local mid = math.floor((low\
    \ + high) / 2)\n      if arr[mid] == val then\n        return mid\n      elseif\
    \ arr[mid] > val then\n        high = mid - 1\n      else\n        low = mid +\
    \ 1\n      end\n    end\n    return nil\n  end\n  -- Sort arr based on number\
    \ of ones in their binary representation in ascending order.\n  -- For similar\
    \ number of ones, sort based on decimal value.\n  -- It must be implemented like\
    \ this:\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  local function sort_array_2(arr)\n    local function binary_search_2(arr,\
    \ val)\n      local low = 0\n      local high = #arr\n      while low <= high\
    \ do\n        local mid = math.floor((low + high) / 2)\n        if arr[mid] ==\
    \ val then\n          return mid\n        elseif arr[mid] > val then\n       \
    \   high = mid - 1\n        else\n          low = mid + 1\n        end\n     \
    \ end\n      return nil\n    end\n    local function sort_array_3(arr)\n     \
    \ local function binary_search_3(arr, val)\n        local low = 0\n        local\
    \ high = #arr\n        while low <= high do\n          local mid = math.floor((low\
    \ + high) / 2)\n          if arr[mid] == val then\n            return mid\n  \
    \        elseif arr[mid] > val then\n            high = mid - 1\n          else\n\
    \            low = mid + 1\n          end\n        end\n        return nil\n \
    \     end\n      local function sort_array_4(arr)\n        local function binary_search_4(arr,\
    \ val)\n          local low = 0\n          local high = #arr\n          while\
    \ low <= high do\n            local mid = math.floor((low + high) / 2)\n     \
    \       if arr[mid] == val then\n              return mid\n            elseif\
    \ arr[mid] > val then\n              high\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgydxlk27.lua:78: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function bin2dec(n)\n\
    \    local s = ''\n    for i = 1, 8 do\n      s = s .. string.char(n:byte(i, true))\n\
    \    end\n    return tonumber(s)\n  end\n  local function dec2bin(n)\n    local\
    \ s = ''\n    for i = 1, 8 do\n      s = s .. string.char(n:byte(i, false))\n\
    \    end\n    return s\n  end\n  local function dec2bin2(n)\n    local s = ''\n\
    \    for i = 1, 8 do\n      s = s .. string.char(n:byte(i, true))\n    end\n \
    \   return s .. '0'\n  end\n  local function bin2dec2(s)\n    local n = 0\n  \
    \  for i = 1, 8 do\n      n = n + (string.byte(s, i) - '0')\n    end\n    return\
    \ n\n  end\n  local function dec2bin2(s)\n    local n = 0\n    for i = 1, 8 do\n\
    \      n = n + (string.byte(s, i) - '0')\n    end\n    return string.char(n)\n\
    \  end\n  local function bin2dec3(s)\n    local n = 0\n    for i = 1, 8 do\n \
    \     n = n + (string.byte(s, i) - '0')\n    end\n    return n\n  end\n  local\
    \ function dec2bin3(s)\n    local n = 0\n    for i = 1, 8 do\n      n = n + (string.byte(s,\
    \ i) - '0')\n    end\n    return string.char(n)\n  end\n  local function bin2dec4(s)\n\
    \    local n = 0\n    for i = 1, 8 do\n      n = n + (string.byte(s, i) - '0')\n\
    \    end\n    return n\n  end\n  local function dec2bin4(s)\n    local n = 0\n\
    \    for i = 1, 8 do\n      n = n + (string.byte(s, i) - '0')\n    end\n    return\
    \ string.char(n)\n  end\n  local function bin2dec5(s)\n    local n = 0\n    for\
    \ i = 1, 8 do\n      n = n + (string.byte(s, i) - '0')\n    end\n    return n\n\
    \  end\n  local function dec2bin5(s)\n    local n = 0\n    for i = 1, 8 do\n \
    \     n = n + (string.byte(s, i) - '0')\n    end\n    return string.char(n)\n\
    \  end\n  local function bin2dec6(s)\n    local n = 0\n    for i = 1, 8 do\n \
    \     n = n + (string.byte(s, i) - '0')\n    end\n    return n\n  end\n  local\
    \ function dec2bin6(s)\n    local n = 0\n    for i = 1, 8 do\n      n = n + (string.byte(s,\
    \ i) - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsciorlho.lua:97: ')' expected (to close '(' at line 96) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- The result is a table with one row\
    \ for each element and one column for each one.\n  local counts = {}\n  for i\
    \ = 1, #arr do\n    local count = counts[tostring(arr[i])]\n    if count == nil\
    \ then\n      count = 1\n    else\n      count = count + 1\n    end\n    counts[tostring(arr[i])]\
    \ = count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph94syp34.lua:35: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for numbers with only one bit set.\n  -- This makes it easier to sort them in\
    \ ascending order.\n  -- For numbers with more than one bit set, it is easier\
    \ to sort them based\n  -- on decimal value.\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ * 2^i)\n    end\n    return decimal\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6c31p6j4.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwnt84uy.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmptwnt84uy.lua:14: in function 'candidate'\n\t/tmp/tmptwnt84uy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ for counting number of ones in each number.\n  -- For example, for number 4,\
    \ we have binary representation \"10\", so number 4\n  -- has two ones in binary\
    \ representation: \"10\" and \"01\".\n  -- For number 5, we have binary representation\
    \ \"101\", so number 5 has three\n  -- ones in binary representation: \"101\"\
    , \"010\" and \"001\".\n  -- For number 6, we have binary representation \"1101\"\
    , so number 6 has four\n  -- ones in binary representation: \"1101\", \"1001\"\
    \ and \"0001\".\n  -- For number 7, we have binary representation \"111001\",\
    \ so number 7 has five\n  -- ones in binary representation: \"111001\", \"100100\"\
    \ and \"100001\".\n  -- For number 8, we have binary representation \"11110101\"\
    , so number 8 has six\n  -- ones in binary representation: \"11110101\", \"10011010\"\
    \ and \"100001001\".\n  -- For number 9, we have binary representation \"1111110100\"\
    , so number 9 has seven\n  -- ones in binary representation: \"1111110100\", \"\
    10011111100\" and \"100000001111\".\n  -- For number 10, we have binary representation\
    \ \"11111110010\", so number 10 has eight\n  -- ones in binary representation:\
    \ \"11111110010\", \"100111111110\" and \"10000000011111\".\n  -- For number 11,\
    \ we have binary representation \"1111111101001\", so number 11 has nine\n  --\
    \ ones in binary representation: \"1111111101001\", \"10011111111010\" and \"\
    1000000000111111\".\n  -- For number 12, we have binary representation \"11111111010100\"\
    , so number 12 has ten\n  -- ones in binary representation: \"11111111010100\"\
    , \"100111111110110\" and \"10000000000111111\".\n  -- For number 13, we have\
    \ binary representation \"1111111101101001\", so number 13 has eleven\n  -- ones\
    \ in binary representation: \"1111111101101001\", \"10011111111011010\" and \"\
    1000000000001111111\".\n  -- For number 14, we have binary representation \"11111111011010100\"\
    , so number 14 has twelve\n  -- ones in binary representation: \"11111111011010100\"\
    , \"100111111110110110\" and \"1000000000000111111\".\n  -- For number 15, we\
    \ have binary representation \"111111110110111001\", so number 15 has thirteen\n\
    \  -- ones in binary representation: \"111111110110111001\", \"1001111111101101110\"\
    \ and \"100000000000001111111\".\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2knfzrh7.lua:48: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function count_ones(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count\
    \ + 1 end\n      x = x / 2\n    end\n    return count\n  end\n  local function\
    \ sort_by_dec(x)\n    local count = 0\n    for i = 1, 8 do\n      if x % 2 ==\
    \ 1 then count = count + 1 end\n      x = x / 2\n    end\n    return count\n \
    \ end\n  local function sort_by_decdec(x)\n    local count = 0\n    for i = 1,\
    \ 8 do\n      if x % 2 == 1 then count = count + 1 end\n      x = x / 2\n    end\n\
    \    return count\n  end\n  local function sort_by_decdecdec(x)\n    local count\
    \ = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count + 1 end\n \
    \     x = x / 2\n    end\n    return count\n  end\n  local function sort_by_decdecdecdec(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count\
    \ + 1 end\n      x = x / 2\n    end\n    return count\n  end\n  local function\
    \ sort_by_decdecdecdecdec(x)\n    local count = 0\n    for i = 1, 8 do\n     \
    \ if x % 2 == 1 then count = count + 1 end\n      x = x / 2\n    end\n    return\
    \ count\n  end\n  local function sort_by_decdecdecdecdec(x)\n    local count =\
    \ 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count + 1 end\n   \
    \   x = x / 2\n    end\n    return count\n  end\n  local function sort_by_decdecdecdecdecdec(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count\
    \ + 1 end\n      x = x / 2\n    end\n    return count\n  end\n  local function\
    \ sort_by_decdecdecdecdecdec(x)\n    local count = 0\n    for i = 1, 8 do\n  \
    \    if x % 2 == 1 then count = count + 1 end\n      x = x / 2\n    end\n    return\
    \ count\n  end\n  local function sort_by_decdecdecdecdecdec(x)\n    local count\
    \ = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count + 1 end\n \
    \     x = x / 2\n    end\n    return count\n  end\n  local function sort_by_decdecdecdecdecdec(x)\n\
    \    local count = 0\n    for i = 1, 8 do\n      if x % 2 == 1 then count = count\
    \ + 1 end\n      x = x / 2\n    end\n    return count\n  end\n  local function\
    \ sort_by_decdecdecdecdecdec(x)\n    local count = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe_eilpuz.lua:114: 'end' expected (to close 'function' at line\
    \ 97) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in their binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  -- Sort array in ascending order based on decimal value\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n  -- >>> sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n  -- Sort array in descending order based on number of ones in\
    \ their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4], false) ==\
    \ [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], false) == [-6, -5,\
    \ -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort array\
    \ in descending order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3,\
    \ 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([1, 0, 2, 3, 4], false) ==\
    \ [5, 4, 3, 2, 1]\n  -- Sort array in descending order based on number of ones\
    \ in their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4], true) ==\
    \ [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], true) == [-6, -5,\
    \ -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], true) == [5, 4, 3, 2, 1]\n  -- Sort array\
    \ in descending order based on decimal value\n  -- >>> sort_array([1, 0, 2, 3,\
    \ 4], true) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([1, 0, 2, 3, 4], true) ==\
    \ [5, 4, 3, 2, 1]\n  -- Sort array in descending order based on number of ones\
    \ in their binary representation\n  -- >>> sort_array([1, 5, 2, 3, 4], false)\
    \ == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6], false) == [-6,\
    \ -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2,\
    \ 1]\n  -- >>> sort_array([1, 0, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- Sort\
    \ array in descending order based on decimal value\n  -- >>> sort_array([1, 0,\
    \ 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([1, 0, 2, 3, 4], false)\
    \ == [5, 4, 3, 2, 1]\n  -- Sort array in descending order based on number of ones\
    \ in their binary representation\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2mzjx5vd.lua:55: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    local function bin2dec(bin)\n      local dec = 0\n      for i = 1,\
    \ 8 do\n        local v = bin:sub(i, i)\n        if v == \"0\" then\n        \
    \  dec = dec + 1\n        elseif v == \"1\" then\n          dec = dec + 1\n  \
    \      else\n          return nil\n        end\n      end\n      return dec\n\
    \    end\n    local function dec2bin(dec)\n      local bin = \"\"\n      for i\
    \ = 1, 8 do\n        local v = dec:sub(i, i)\n        if v == \"0\" then\n   \
    \       bin = bin + \"0\"\n        elseif v == \"1\" then\n          bin = bin\
    \ + \"1\"\n        else\n          return nil\n        end\n      end\n      return\
    \ bin\n    end\n    local function bin2dec2(bin)\n      local dec = 0\n      for\
    \ i = 1, 8 do\n        local v = bin:sub(i, i)\n        if v == \"0\" then\n \
    \         dec = dec + 1\n        elseif v == \"1\" then\n          dec = dec +\
    \ 1\n        else\n          return nil\n        end\n      end\n      return\
    \ dec\n    end\n    local function dec2bin2(dec)\n      local bin = \"\"\n   \
    \   for i = 1, 8 do\n        local v = dec:sub(i, i)\n        if v == \"0\" then\n\
    \          bin = bin + \"0\"\n        elseif v == \"1\" then\n          bin =\
    \ bin + \"1\"\n        else\n          return nil\n        end\n      end\n  \
    \    return bin\n    end\n    local function bin2dec3(bin)\n      local dec =\
    \ 0\n      for i = 1, 8 do\n        local v = bin:sub(i, i)\n        if v == \"\
    0\" then\n          dec = dec + 1\n        elseif v == \"1\" then\n          dec\
    \ = dec + 1\n        elseif v == \"2\" then\n          dec = dec + 1\n       \
    \ else\n          return nil\n        end\n      end\n      return dec\n    end\n\
    \    local function dec2bin3(dec)\n      local bin = \"\"\n      for i = 1, 8\
    \ do\n        local v = dec:sub(i, i)\n        if v == \"0\" then\n          bin\
    \ = bin + \"0\"\n        elseif v == \"1\" then\n          bin = bin + \"1\"\n\
    \        elseif v == \"2\" then\n          bin = bin + \"2\"\n        else\n \
    \         return nil\n        end\n      end\n      return bin\n    end\n    local\
    \ function bin2dec4(bin)\n      local dec = 0\n      for i = 1, 8 do\n       \
    \ local v = bin:sub(i, i)\n        if v == \"0\" then\n          dec = dec + 1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphvwwuqhq.lua:118: 'end' expected (to close 'if' at line 102)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by adding 2^n\
    \ where n is the number of ones in the\n  -- binary representation of that number.\n\
    \  -- For example if we have 3 ones in binary representation of -4, then\n  --\
    \ adding 2^4 to -4 gives us 8.\n  -- >>> bin(-4)\n  -- >>> '0b100'\n  -- >>> bin(8)\n\
    \  -- >>> '0b1000'\n  -- >>> -4 + (2^4)\n  -- >>> -8\n  -- >>> 8 - (2^4)\n  --\
    \ >>> -8\n  -- >>> bin(-8)\n  -- >>> '0b1000'\n  -- >>> bin(-8)\n  -- >>> '0b1000'\n\
    \  -- >>> bin(-8) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4)\n  -- >>>\
    \ '0b100'\n  -- >>> bin(-8) - (2^4)\n  -- >>> '0b100'\n  -- >>> bin(-8) - (2^4)\
    \ + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4) + (2^4)\n  -- >>> '0b1000'\n\
    \  -- >>> bin(-8) - (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8)\
    \ - (2^4) + (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4)\
    \ + (2^4) + (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4)\
    \ + (2^4) + (2^4) + (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8)\
    \ - (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n\
    \  -- >>> bin(-8) - (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4)\n\
    \  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4) + (2^4) + (2^4) + (2^4) + (2^4) +\
    \ (2^4) + (2^4) + (2^4) + (2^4)\n  -- >>> '0b1000'\n  -- >>> bin(-8) - (2^4) +\
    \ (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (2^4) + (\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2ww3azu1.lua:65: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] == 1 then\n      helper(arr, i + 1, j - 1)\n    elseif arr[j] == 1 then\n\
    \      helper(arr, i, j - 1)\n    else\n      helper(arr, i + 1, j)\n    end\n\
    \  end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs0u_928.lua:27:\
    \ expected: {1, 2, 4, 3, 5}\nactual: {1, 5, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpzs0u_928.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + binary[i]\
    \ * 2^i\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local i = 0\n    while decimal > 0 do\n      binary\
    \ = binary .. string.format('%0', math.floor(decimal % 2))\n      decimal = decimal\
    \ / 2\n      i = i + 1\n    end\n    return binary\n  end\n  local function sort_by_decimal(arr)\n\
    \    local decimals = {}\n    for i = 1, #arr do\n      decimals[i] = binary_to_decimal(arr[i])\n\
    \    end\n    table.sort(decimals)\n    local sorted_arr = {}\n    for i = 1,\
    \ #decimals do\n      sorted_arr[i] = decimal_to_binary(decimals[i])\n    end\n\
    \    return sorted_arr\n  end\n  local function sort_by_decimal2(arr)\n    local\
    \ decimals = {}\n    for i = 1, #arr do\n      decimals[i] = binary_to_decimal(arr[i])\n\
    \    end\n    table.sort(decimals, function(a, b)\n      return decimals[a] >\
    \ decimals[b]\n    end)\n    local sorted_arr = {}\n    for i = 1, #decimals do\n\
    \      sorted_arr[i] = decimal_to_binary(decimals[i])\n    end\n    return sorted_arr\n\
    \  end\n  local function sort_by_decimal3(arr)\n    local decimals = {}\n    for\
    \ i = 1, #arr do\n      decimals[i] = binary_to_decimal(arr[i])\n    end\n   \
    \ table.sort(decimals, function(a, b)\n      return decimals[a] < decimals[b]\n\
    \    end)\n    local sorted_arr = {}\n    for i = 1, #decimals do\n      sorted_arr[i]\
    \ = decimal_to_binary(decimals[i])\n    end\n    return sorted_arr\n  end\n  local\
    \ function sort_by_decimal4(arr)\n    local decimals = {}\n    for i = 1, #arr\
    \ do\n      decimals[i] = binary_to_decimal(arr[i])\n    end\n    table.sort(decimals,\
    \ function(a, b)\n      return decimals[a] == decimals[b]\n    end)\n    local\
    \ sorted_arr = {}\n    for i = 1, #decimals do\n      sorted_arr[i] = decimal_to_binary(decimals[i])\n\
    \    end\n    return sorted_arr\n  end\n  local function sort_by_decimal5(arr)\n\
    \    local decimals = {}\n    for i = 1, #arr do\n      decimals[i] = binary_to_decimal(arr[i])\n\
    \    end\n    table.sort(decimals, function(a, b)\n      return decimals[a] <=\
    \ decimals[b]\n    end)\n    local sorted_arr = {}\n    for i = 1, #decimals do\n\
    \      sorted_arr[i] = decimal_to_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmqfm83vr.lua:105: 'end' expected (to close 'for' at line 89)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by negating all\
    \ numbers and adding one to them.\n  -- This can be done in O(n) time complexity\
    \ using bitwise operators.\n  -- >>> sort_array([-1, -5, -4, -3, -2]) == [1, 2,\
    \ 3, 4, 5]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n\
    \  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1,\
    \ 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4,\
    \ -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1,\
    \ 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>>\
    \ sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1,\
    \ 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4,\
    \ -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1,\
    \ 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>>\
    \ sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1,\
    \ 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4,\
    \ -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1,\
    \ 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>>\
    \ sort_array([-4, -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1,\
    \ 0]) == [-4, -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, 0]) == [-4,\
    \ -3, -2, -1, 0]\n  -- >>> sort_array([-4, -3, -2, -1, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdw6hfhuh.lua:51: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order based on number of ones in binary representation\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\
    \  local function bin2dec(bin)\n    local dec = 0\n    for i = 1, #bin do\n  \
    \    dec = dec + bin.sub(i, i)\n    end\n    return dec\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa_84d7bv.lua:34: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort array in ascending\
    \ order\n  -- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\n  -- Sort array in descending order\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4], false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5,\
    \ -6], false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], false)\
    \ == [4, 3, 2, 1, 0]\n  -- Sort array in ascending order with custom comparator\n\
    \  -- >>> sort_array([1, 5, 2, 3, 4], function(a, b) return a > b end) == [1,\
    \ 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6], function(a, b) return\
    \ a > b end) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4], function(a,\
    \ b) return a > b end) [0, 1, 2, 3, 4]\n  -- Sort array in descending order with\
    \ custom comparator\n  -- >>> sort_array([1, 5, 2, 3, 4], function(a, b) return\
    \ a > b end, false) == [5, 4, 3, 2, 1]\n  -- >>> sort_array([-2, -3, -4, -5, -6],\
    \ function(a, b) return a > b end, false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4], function(a, b) return a > b end, false) == [4, 3, 2, 1, 0]\n  --\
    \ Sort array in ascending order with custom comparator\n  -- >>> sort_array([1,\
    \ 5, 2, 3, 4], function(a, b) return a > b end, function(a, b) return a > b end)\
    \ == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6], function(a, b)\
    \ return a > b end, function(a, b) return a > b end) == [-6, -5, -4, -3, -2]\n\
    \  -- >>> sort_array([1, 0, 2, 3, 4], function(a, b) return a > b end, function(a,\
    \ b) return a > b end) [0, 1, 2, 3, 4]\n  -- Sort array in descending order with\
    \ custom comparator\n  -- >>> sort_array([1, 5, 2, 3, 4], function(a, b) return\
    \ a > b end, function(a, b) return a > b end, false) == [5, 4, 3, 2, 1]\n  --\
    \ >>> sort_array([-2, -3, -4, -5, -6], function(a, b) return a > b end, function(a,\
    \ b) return a > b end, false) == [-6, -5, -4, -3, -2]\n  -- >>> sort_array([1,\
    \ 0, 2, 3, 4], function(a, b) return a > b end, function(a, b) return a > b end,\
    \ function(a, b\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpay6bccgu.lua:47: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use an auxiliary array\
    \ for counting number of ones in binary representation.\n  -- The auxiliary array\
    \ is initialized with zeros.\n  local aux\n  aux = {}\n  for i = 1, #arr do\n\
    \    aux[i] = 0\n  end\n  -- We use an auxiliary array for counting number of\
    \ ones in decimal representation.\n  -- The auxiliary array is initialized with\
    \ zeros.\n  local aux2 = {}\n  for i = 1, #arr do\n    aux2[i] = 0\n  end\n  --\
    \ We use an auxiliary array for counting number of ones in binary representation.\n\
    \  -- The auxiliary array is initialized with zeros.\n  local aux3\n  for i =\
    \ 1, #arr do\n    aux3[i] = 0\n  end\n  -- We use an auxiliary array for counting\
    \ number of ones in decimal representation.\n  -- The auxiliary array is initialized\
    \ with zeros.\n  local aux4\n  for i = 1, #arr do\n    aux4[i] = 0\n  end\n  --\
    \ We use an auxiliary array for counting number of ones in binary representation.\n\
    \  -- The auxiliary array is initialized with zeros.\n  local aux5\n  for i =\
    \ 1, #arr do\n    aux5[i] = 0\n  end\n  -- We use an auxiliary array for counting\
    \ number of ones in decimal representation.\n  -- The auxiliary array is initialized\
    \ with zeros.\n  local aux6\n  for i = 1, #arr do\n    aux6[i] = 0\n  end\n  --\
    \ We use an auxiliary array for counting number of ones in binary representation.\n\
    \  -- The auxiliary array is initialized with zeros.\n  local aux7\n  for i =\
    \ 1, #arr do\n    aux7[i] = 0\n  end\n  -- We use an auxiliary array for counting\
    \ number of ones in decimal representation.\n  -- The auxiliary array is initialized\
    \ with zeros.\n  local aux8\n  for i = 1, #arr do\n    aux8[i] = 0\n  end\n  --\
    \ We use an auxiliary array for counting number of ones in binary representation.\n\
    \  -- The auxiliary array is initialized with zeros.\n  local aux9\n  for i =\
    \ 1, #arr do\n    aux9[i] = 0\n  end\n  -- We use an auxiliary array for counting\
    \ number of ones in decimal representation.\n  -- The auxiliary array is initialized\
    \ with zeros.\n  local aux10\n  for i = 1, #arr do\n    aux10[i] = 0\n  end\n\
    \  -- We use an auxiliary array \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpglnio854.lua:85: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use two stacks to implement\
    \ a LIFO queue.\n  -- The first stack stores the current number of ones in each\
    \ element.\n  -- The second stack stores the current decimal value of each element.\n\
    \  -- The first element of the second stack is always 0.\n  local stack1 = {}\n\
    \  local stack2 = {}\n  for i = 1, #arr do\n    local n = math.floor(math.log2(arr[i]))\n\
    \    stack1[i] = stack1[i] or n\n    stack2[i] = stack2[i] or 0\n    stack2[i]\
    \ = stack2[i] + arr[i]\n  end\n  -- The first element of stack2 is always 0.\n\
    \  stack2[1] = stack2[1] or 0\n  -- The first element of stack1 is the max number\
    \ of ones in arr\n  stack1[1] = stack1[1] or math.max(stack1)\n  -- The second\
    \ element of stack1 is the sum of all elements in arr\n  stack1[2] = stack1[2]\
    \ or stack2[1]\n  -- The second element of stack2 is the sum of all elements in\
    \ arr\n  stack2[2] = stack2[2] or stack2[1]\n  -- The third element of stack1\
    \ is the sum of all elements in arr\n  stack1[3] = stack1[3] or stack2[2]\n  --\
    \ The third element of stack2 is the sum of all elements in arr\n  stack2[3] =\
    \ stack2[3] or stack2[2]\n  -- The fourth element of stack1 is the sum of all\
    \ elements in arr\n  stack1[4] = stack1[4] or stack2[3]\n  -- The fourth element\
    \ of stack2 is the sum of all elements in arr\n  stack2[4] = stack2[4] or stack2[3]\n\
    \  -- The fifth element of stack1 is the sum of all elements in arr\n  stack1[5]\
    \ = stack1[5] or stack2[4]\n  -- The fifth element of stack2 is the sum of all\
    \ elements in arr\n  stack2[5] = stack2[5] or stack2[4]\n  -- The sixth element\
    \ of stack1 is the sum of all elements in arr\n  stack1[6] = stack1[6] or stack2[5]\n\
    \  -- The sixth element of stack2 is the sum of all elements in arr\n  stack2[6]\
    \ = stack2[6] or stack2[5]\n  -- The seventh element of stack1 is the sum of all\
    \ elements in arr\n  stack1[7] = stack1[7] or stack2[6]\n  -- The seventh element\
    \ of stack2 is the sum of all elements in arr\n  stack2[7] = stack2[7] or stack2[6]\n\
    \  -- The eigh\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5nh8bufo.lua:64: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- If array is empty, return\
    \ empty array.\n  if #arr == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0giursw5.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i], arr[j] = arr[j], arr[i]\n    elseif\
    \ arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n\
    \  local n = #arr\n  local m = math.pow(2, math.ceil(math.log(n, 2))) - 1\n  local\
    \ i, j, k\n  local arr2 = {}\n  for i = 1, n do\n    arr2[i] = 0\n  end\n  for\
    \ i = 1, n do\n    k = math.floor((n - i) / 2)\n    helper(arr, i, k)\n    helper(arr,\
    \ k + 1, n)\n    helper(arr2, i, k)\n    helper(arr2, k + 1, n)\n  end\n  for\
    \ i = 1, n do\n    k = math.floor((n - i) / 2)\n    helper(arr2, i, k)\n    helper(arr2,\
    \ k + 1, n)\n  end\n  return arr2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxy7nutx.lua:12:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpnxy7nutx.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpnxy7nutx.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, n)\n    if i == n then\n      table.sort(arr)\n      return\n    end\n  \
    \  local m = math.floor(math.log2(i))\n    local left = math.pow(2, m)\n    local\
    \ right = math.pow(2, m + 1)\n    helper(arr, 2 * i + 1, n)\n    helper(arr, 2\
    \ * i + 2, n)\n    if arr[i] < arr[left] then\n      table.insert(arr, i, arr[left])\n\
    \      table.insert(arr, left, arr[i])\n    end\n    if arr[i] > arr[right] then\n\
    \      table.insert(arr, i, arr[right])\n      table.insert(arr, right, arr[i])\n\
    \    end\n  end\n  helper(arr, 1, #arr)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrcqzncc.lua:14:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpgrcqzncc.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmpgrcqzncc.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l6crvuo.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp5l6crvuo.lua:18: in function 'candidate'\n\t/tmp/tmp5l6crvuo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all non-negative integers to binary string.\n  -- For this purpose, use bitwise\
    \ AND operator &.\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin(4)\n  -- '0b0'\n\
    \  -- '0b0'\n  -- '0b0'\n  -- '0b0'\n  -- '0b0'\n  -- >>> bin(0) & bin(1) & bin(2)\
    \ & bin(3) & bin(4)\n  -- '0b10'\n  -- '0b10'\n  -- '0b10'\n  -- '0b10'\n  --\
    \ '0b10'\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin(4)\n  -- '0b11'\n \
    \ -- '0b11'\n  -- '0b11'\n  -- '0b11'\n  -- '0b11'\n  -- >>> bin(0) & bin(1) &\
    \ bin(2) & bin(3) & bin(4)\n  -- '0b1111'\n  -- '0b1111'\n  -- '0b1111'\n  --\
    \ '0b1111'\n  -- '0b1111'\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin(4)\n\
    \  -- '0b11111'\n  -- '0b11111'\n  -- '0b11111'\n  -- '0b11111'\n  -- '0b11111'\n\
    \  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin(4)\n  -- '0b111111'\n  -- '0b111111'\n\
    \  -- '0b111111'\n  -- '0b111111'\n  -- '0b111111'\n  -- >>> bin(0) & bin(1) &\
    \ bin(2) & bin(3) & bin(4)\n  -- '0b11111111'\n  -- '0b11111111'\n  -- '0b11111111'\n\
    \  -- '0b11111111'\n  -- '0b11111111'\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3)\
    \ & bin(4)\n  -- '0b111111111'\n  -- '0b111111111'\n  -- '0b111111111'\n  -- '0b111111111'\n\
    \  -- '0b111111111'\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin(4)\n  --\
    \ '0b1111111111'\n  -- '0b1111111111'\n  -- '0b1111111111'\n  -- '0b1111111111'\n\
    \  -- '0b1111111111'\n  -- >>> bin(0) & bin(1) & bin(2) & bin(3) & bin\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpklrzeoh6.lua:80: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- sort by number of ones\n\
    \  local function count_ones(arr)\n    local counts = {}\n    for i = 1, #arr\
    \ do\n      local v = tostring(arr[i])\n      counts[v] = counts[v] or 0\n   \
    \   counts[v] = counts[v] + 1\n    end\n    return counts\n  end\n  local counts\
    \ = count_ones(arr)\n  -- sort by decimal value\n  local function sort_by_decimal(arr)\n\
    \    local decimals = {}\n    for i = 1, #arr do\n      local v = tostring(arr[i])\n\
    \      decimals[v] = decimals[v] or 0\n      decimals[v] = decimals[v] + 1\n \
    \   end\n    local sorted_decimals = {}\n    for k, v in pairs(decimals) do\n\
    \      sorted_decimals[v] = k\n    end\n    return sorted_decimals\n  end\n  local\
    \ sorted_decimals = sort_by_decimal(arr)\n  -- sort by decimal value\n  local\
    \ function sort_by_decimal(arr)\n    local decimals = {}\n    for i = 1, #arr\
    \ do\n      local v = tostring(arr[i])\n      decimals[v] = decimals[v] or 0\n\
    \      decimals[v] = decimals[v] + 1\n    end\n    local sorted_decimals = {}\n\
    \    for k, v in pairs(decimals) do\n      sorted_decimals[v] = k\n    end\n \
    \   return sorted_decimals\n  end\n  local sorted_decimals = sort_by_decimal(arr)\n\
    \  -- sort by decimal value\n  local function sort_by_decimal(arr)\n    local\
    \ decimals = {}\n    for i = 1, #arr do\n      local v = tostring(arr[i])\n  \
    \    decimals[v] = decimals[v] or 0\n      decimals[v] = decimals[v] + 1\n   \
    \ end\n    local sorted_decimals = {}\n    for k, v in pairs(decimals) do\n  \
    \    sorted_decimals[v] = k\n    end\n    return sorted_decimals\n  end\n  local\
    \ sorted_decimals = sort_by_decimal(arr)\n  -- sort by decimal value\n  local\
    \ function sort_by_decimal(arr)\n    local decimals = {}\n    for i = 1, #arr\
    \ do\n      local v = tostring(arr[i])\n      decimals[v] = decimals[v] or 0\n\
    \      decimals[v] = decimals[v] + 1\n    end\n    local sorted_decimals = {}\n\
    \    for k, v in pairs(decimals) do\n      sorted_decimals[v] = k\n    end\n \
    \   return sorted_decimals\n  end\n  local sorted_decimals = sort_by_decimal(arr)\n\
    \  -- sort by decimal value\n  local function sort_by_decimal(arr)\n    local\
    \ decimals = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkh2188le.lua:98: 'end' expected (to close 'function' at line\
    \ 81) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(left,\
    \ right)\n    local function bin2dec(n)\n      local bin = string.sub(tostring(n),\
    \ 1, -2)\n      local dec = 0\n      for i = 1, #bin do\n        dec = dec + bin:sub(i,\
    \ i) * 2^i\n      end\n      return dec\n    end\n    local function dec2bin(dec)\n\
    \      local bin = \"\"\n      while dec > 0 do\n        bin = string.sub(tostring(dec\
    \ % 2), 1, 1) + bin\n        dec = math.floor(dec / 2)\n      end\n      return\
    \ bin\n    end\n    local function compare_bin(left, right)\n      local left_dec\
    \ = bin2dec(left)\n      local right_dec = bin2dec(right)\n      if left_dec <\
    \ right_dec then\n        return -1\n      elseif left_dec > right_dec then\n\
    \        return 1\n      else\n        return dec2bin(left_dec):sub(1, #left_dec):byte()\
    \ - dec2bin(right_dec):sub(1, #right_dec):byte()\n      end\n    end\n    local\
    \ function compare_dec(left, right)\n      local left_dec = dec2bin(left)\n  \
    \    local right_dec = dec2bin(right)\n      if left_dec < right_dec then\n  \
    \      return -1\n      elseif left_dec > right_dec then\n        return 1\n \
    \     else\n        return left_dec:byte() - right_dec:byte()\n      end\n   \
    \ end\n    local function compare_dec_bin(left, right)\n      local left_dec =\
    \ dec2bin(left)\n      local right_dec = dec2bin(right)\n      if left_dec < right_dec\
    \ then\n        return -1\n      elseif left_dec > right_dec then\n        return\
    \ 1\n      else\n        return left_dec:sub(1, #left_dec):byte() - right_dec:sub(1,\
    \ #right_dec):byte()\n      end\n    end\n    local function compare_dec_bin_bin(left,\
    \ right)\n      local left_dec = dec2bin(left)\n      local right_dec = dec2bin(right)\n\
    \      if left_dec < right_dec then\n        return -1\n      elseif left_dec\
    \ > right_dec then\n        return 1\n      else\n        return left_dec:sub(1,\
    \ #left_dec):byte() - right_dec:sub(1, #right_dec):byte()\n      end\n    end\n\
    \    local function compare_dec_bin_bin_bin(left, right)\n      local left_dec\
    \ = dec2bin(left)\n      local right_dec = dec2bin(right)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc3la3he0.lua:87: 'end' expected (to close 'function' at line\
    \ 70) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j, k)\n    if arr[i] > arr[j] then\n      arr[i], arr[j] = arr[j], arr[i]\n\
    \    end\n    if arr[i] == arr[j] then\n      if arr[i] > arr[k] then\n      \
    \  arr[i], arr[k] = arr[k], arr[i]\n      end\n      if arr[k] > arr[j] then\n\
    \        arr[k], arr[j] = arr[j], arr[k]\n      end\n    end\n  end\n  local n\
    \ = #arr\n  for i = 1, n do\n    helper(arr, i, i, i)\n  end\n  for i = n - 1,\
    \ 1, -1 do\n    helper(arr, i, i, i - 1)\n  end\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4at79nem.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4at79nem.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmp4at79nem.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then return rhs == 0 end\n    if lhs == 0 then return\
    \ rhs == 1 end\n    if lhs == 0 then return rhs == -1 end\n    if lhs == 0 then\
    \ return rhs == -2 end\n    if lhs == 0 then return rhs == -3 end\n    if lhs\
    \ == 0 then return rhs == -4 end\n    if lhs == 0 then return rhs == -5 end\n\
    \    if lhs == 0 then return rhs == -6 end\n    if lhs == 0 then return rhs ==\
    \ -7 end\n    if lhs == 0 then return rhs == -8 end\n    if lhs == 0 then return\
    \ rhs == -9 end\n    if lhs == 0 then return rhs == -10 end\n    if lhs == 0 then\
    \ return rhs == -11 end\n    if lhs == 0 then return rhs == -12 end\n    if lhs\
    \ == 0 then return rhs == -13 end\n    if lhs == 0 then return rhs == -14 end\n\
    \    if lhs == 0 then return rhs == -15 end\n    if lhs == 0 then return rhs ==\
    \ -16 end\n    if lhs == 0 then return rhs == -17 end\n    if lhs == 0 then return\
    \ rhs == -18 end\n    if lhs == 0 then return rhs == -19 end\n    if lhs == 0\
    \ then return rhs == -20 end\n    if lhs == 0 then return rhs == -21 end\n   \
    \ if lhs == 0 then return rhs == -22 end\n    if lhs == 0 then return rhs == -23\
    \ end\n    if lhs == 0 then return rhs == -24 end\n    if lhs == 0 then return\
    \ rhs == -25 end\n    if lhs == 0 then return rhs == -26 end\n    if lhs == 0\
    \ then return rhs == -27 end\n    if lhs == 0 then return rhs == -28 end\n   \
    \ if lhs == 0 then return rhs == -29 end\n    if lhs == 0 then return rhs == -30\
    \ end\n    if lhs == 0 then return rhs == -31 end\n    if lhs == 0 then return\
    \ rhs == -32 end\n    if lhs == 0 then return rhs == -33 end\n    if lhs == 0\
    \ then return rhs == -34 end\n    if lhs == 0 then return rhs == -35 end\n   \
    \ if lhs == 0 then return rhs == -36 end\n    if lhs == 0 then return rhs == -37\
    \ end\n    if lhs == 0 then return rhs == -38 end\n    if lhs == 0 then return\
    \ rhs == -39 end\n    if lhs == 0 then return rhs == -40 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc3tlm9zj.lua:52: 'end' expected (to close 'if' at line 51)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Base case\n  if #arr ==\
    \ 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj7yndiss.lua:27: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers to positive ones.\n  -- This can be done by adding 2^32\
    \ to all negative numbers.\n  -- This can be done by subtracting 2^32 to all positive\
    \ numbers.\n  -- This can be done by multiplying all negative numbers by -1.\n\
    \  -- This can be done by multiplying all positive numbers by -1.\n  -- This can\
    \ be done by multiplying all negative numbers by -1.\n  -- This can be done by\
    \ multiplying all positive numbers by -1.\n  -- This can be done by multiplying\
    \ all negative numbers by -1.\n  -- This can be done by multiplying all positive\
    \ numbers by -1.\n  -- This can be done by multiplying all negative numbers by\
    \ -1.\n  -- This can be done by multiplying all positive numbers by -1.\n  --\
    \ This can be done by multiplying all negative numbers by -1.\n  -- This can be\
    \ done by multiplying all positive numbers by -1.\n  -- This can be done by multiplying\
    \ all negative numbers by -1.\n  -- This can be done by multiplying all positive\
    \ numbers by -1.\n  -- This can be done by multiplying all negative numbers by\
    \ -1.\n  -- This can be done by multiplying all positive numbers by -1.\n  --\
    \ This can be done by multiplying all negative numbers by -1.\n  -- This can be\
    \ done by multiplying all positive numbers by -1.\n  -- This can be done by multiplying\
    \ all negative numbers by -1.\n  -- This can be done by multiplying all positive\
    \ numbers by -1.\n  -- This can be done by multiplying all negative numbers by\
    \ -1.\n  -- This can be done by multiplying all positive numbers by -1.\n  --\
    \ This can be done by multiplying all negative numbers by -1.\n  -- This can be\
    \ done by multiplying all positive numbers by -1.\n  -- This can be done by multiplying\
    \ all negative numbers by -1.\n  -- This can be done by multiplying all positive\
    \ numbers by -1.\n  -- This can be done by multiplying all negative numbers by\
    \ -1.\n  -- This can be done by multiplying all positive numbers by -1.\n  --\
    \ This can be done by multiplying all negative numbers by -1.\n  -- This can be\
    \ done by multiplying all positive numbers by -1.\n  -- This can be done by multiplying\
    \ all negative numbers by -1.\n  -- This can be done by multiplying all positive\
    \ numbers by -1.\n  -- This can be done by multiplying all negative numbers by\
    \ -1.\n  -- This can be done by multiplying all positive numbers by -1.\n  --\
    \ This can be done by multiplying all negative numbers by -1.\n  -- This can be\
    \ done by multiply\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3tajpoxx.lua:60: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs < 0 then\n \
    \     return -1\n    end\n    if lhs > 0 then\n      return 1\n    end\n    if\
    \ rhs == 0 then\n      return 1\n    end\n    if rhs < 0 then\n      return -1\n\
    \    end\n    return lhs - rhs\n  end\n  table.sort(arr, compare)\n  return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w7vlalx.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp8w7vlalx.lua:27: in function 'candidate'\n\t/tmp/tmp8w7vlalx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75pp1wd9.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp75pp1wd9.lua:18: in function 'candidate'\n\t/tmp/tmp75pp1wd9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub1m07w8.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpub1m07w8.lua:14: in function 'candidate'\n\t/tmp/tmpub1m07w8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of the\
    \ array is always sorted as is.\n  -- The second element is the number of ones\
    \ in the binary representation of that number.\n  -- The third element is the\
    \ decimal value of that number.\n  -- The fourth element is the binary representation\
    \ of that number.\n  -- The fifth element is the decimal value of that number.\n\
    \  -- The sixth element is the binary representation of that number.\n  -- The\
    \ seventh element is the decimal value of that number.\n  -- The eighth element\
    \ is the binary representation of that number.\n  -- The ninth element is the\
    \ decimal value of that number.\n  -- The tenth element is the binary representation\
    \ of that number.\n  -- The eleventh element is the decimal value of that number.\n\
    \  -- The twelfth element is the binary representation of that number.\n  -- The\
    \ thirteenth element is the decimal value of that number.\n  -- The fourteenth\
    \ element is the binary representation of that number.\n  -- The fifteenth element\
    \ is the decimal value of that number.\n  -- The sixteenth element is the binary\
    \ representation of that number.\n  -- The seventeenth element is the decimal\
    \ value of that number.\n  -- The eighteenth element is the binary representation\
    \ of that number.\n  -- The nineteenth element is the decimal value of that number.\n\
    \  -- The twentieth element is the binary representation of that number.\n  --\
    \ The thirtieth element is the decimal value of that number.\n  -- The fourtieth\
    \ element is the binary representation of that number.\n  -- The fiftieth element\
    \ is the decimal value of that number.\n  -- The sixtieth element is the binary\
    \ representation of that number.\n  -- The seventieth element is the decimal value\
    \ of that number.\n  -- The eightieth element is the binary representation of\
    \ that number.\n  -- The ninetieth element is the decimal value of that number.\n\
    \  -- The twentyeth element is the binary representation of that number.\n  --\
    \ The thirtieth element is the decimal value of that number.\n  -- The fortieth\
    \ element is the binary representation of that number.\n  -- The fiftieth element\
    \ is the decimal value of that number.\n  -- The sixtieth element is the binary\
    \ representation of that number.\n  -- The seventieth element is the decimal value\
    \ of that number.\n  -- The eightieth element is the binary representation of\
    \ that number.\n  -- The ninetieth element is the decimal value of that number.\n\
    \  -- The twentyeth element is the binary representation of that number.\n  --\
    \ The thirtieth element is the decimal value of that number.\n  -- The fortieth\
    \ element is the binary representation of that number.\n  -- The fiftieth element\
    \ is the \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwswe5w_b.lua:62: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to count\
    \ the number of ones in each element.\n  -- The result is a table with one row\
    \ for each element and one column for each one.\n  local function count_ones(arr)\n\
    \    local counts = {}\n    for _, elem in ipairs(arr) do\n      local count =\
    \ 0\n      for i = 1, 8 do\n        if elem % 2^i == 0 then\n          count =\
    \ count + 1\n        end\n      end\n      counts[elem] = count\n    end\n   \
    \ return counts\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk6g5sdv1.lua:38: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if rhs == 0 then\n\
    \      return 1\n    end\n    if lhs < rhs then\n      return -1\n    else\n \
    \     return 1\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tfpcwtq.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp8tfpcwtq.lua:22: in function 'candidate'\n\t/tmp/tmp8tfpcwtq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs == -1 then\n\
    \      return 1\n    end\n    if lhs == 1 then\n      if rhs == 0 then\n     \
    \   return 0\n      elseif rhs == 1 then\n        return -1\n      else\n    \
    \    return lhs - rhs\n      end\n    end\n    if rhs == 0 then\n      return\
    \ -1\n    end\n    if rhs == 1 then\n      return 1\n    end\n    return lhs -\
    \ rhs\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_98r038.lua:31:\
    \ attempt to perform arithmetic on local 'lhs' (a nil value)\nstack traceback:\n\
    \t[C]: in function 'sort'\n\t/tmp/tmpa_98r038.lua:33: in function 'candidate'\n\
    \t/tmp/tmpa_98r038.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We use binary representation\
    \ to sort array in ascending order.\n  -- This representation is more compact\
    \ than decimal one.\n  -- See https://en.wikipedia.org/wiki/Binary_number#Advantages\n\
    \  local function bin2dec(bin)\n    local dec = 0\n    for i = 1, 8 do\n     \
    \ dec = dec + bin:byte(i) * math.pow(2, 8 - i)\n    end\n    return dec\n  end\n\
    \  -- We use decimal representation to sort array in ascending order.\n  -- This\
    \ representation is more compact than binary one.\n  -- See https://en.wikipedia.org/wiki/Decimal\n\
    \  local function dec2bin(dec)\n    local bin = \"\"\n    local i = 0\n    while\
    \ dec > 0 do\n      bin = string.sub(tostring(dec), i, i) + bin\n      dec = dec\
    \ - math.pow(2, i)\n      i = i + 1\n    end\n    return bin\n  end\n  -- We sort\
    \ array in ascending order based on number of ones in their binary representation\n\
    \  -- This representation is more compact than decimal one.\n  -- See https://en.wikipedia.org/wiki/Binary_number#Advantages\n\
    \  local function bin2dec2(bin)\n    local dec = 0\n    for i = 1, 8 do\n    \
    \  dec = dec + bin:byte(i) * math.pow(2, 8 - i)\n    end\n    return dec\n  end\n\
    \  -- We sort array in ascending order based on decimal value\n  -- This representation\
    \ is more compact than binary one.\n  -- See https://en.wikipedia.org/wiki/Decimal\n\
    \  local function dec2bin2(dec)\n    local bin = \"\"\n    local i = 0\n    while\
    \ dec > 0 do\n      bin = string.sub(tostring(dec), i, i) + bin\n      dec = dec\
    \ - math.pow(2, i)\n      i = i + 1\n    end\n    return bin\n  end\n  -- We sort\
    \ array in ascending order based on number of ones in their binary representation\n\
    \  -- This representation is more compact than decimal one.\n  -- See https://en.wikipedia.org/wiki/Binary_number#Advantages\n\
    \  local function bin2dec3(bin)\n    local dec = 0\n    for i = 1, 8 do\n    \
    \  dec = dec + bin:byte(i) * math.pow(2, 8 - i)\n    end\n    return dec\n  end\n\
    \  -- We sort array in ascending order based on decimal value\n  -- This representation\
    \ is more compact than binary one.\n  -- See https://en.wikipedia.org/wiki/Decimal\n\
    \  local function dec2bin3(dec)\n    local bin = \"\"\n    local i = 0\n    while\
    \ dec > 0 do\n      bin = string.sub(tostring(dec), i, i) + \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4udngjr7.lua:73: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of arr\
    \ must be zero\n  assert(arr[1] == 0)\n  -- The last element of arr must be zero\n\
    \  assert(arr[#arr] == 0)\n  -- The array must be non-negative\n  assert(arr[#arr]\
    \ >= 0)\n  -- The array must be sorted\n  assert(arr[#arr] == 0 or arr[#arr] ==\
    \ 1)\n  -- The array must be in ascending order\n  assert(arr[#arr] == 0 or arr[#arr]\
    \ == 1)\n  -- The array must be in ascending order according to number of ones\
    \ in its binary representation\n  assert(arr[#arr] == 0 or arr[#arr] == 1)\n \
    \ -- The array must be in ascending order according to decimal value\n  assert(arr[#arr]\
    \ == 0 or arr[#arr] == 1)\n  -- The array must be in ascending order according\
    \ to number of ones in its binary representation in ascending order\n  assert(arr[#arr]\
    \ == 0 or arr[#arr] == 1)\n  -- The array must be in ascending order according\
    \ to decimal value in ascending order\n  assert(arr[#arr] == 0 or arr[#arr] ==\
    \ 1)\n  -- The array must be in ascending order according to number of ones in\
    \ its binary representation in ascending order according to number of ones in\
    \ its binary representation\n  assert(arr[#arr] == 0 or arr[#arr] == 1)\n  --\
    \ The array must be in ascending order according to decimal value in ascending\
    \ order according to number of ones in its binary representation\n  assert(arr[#arr]\
    \ == 0 or arr[#arr] == 1)\n  -- The array must be in ascending order according\
    \ to number of ones in its binary representation in ascending order according\
    \ to decimal value\n  assert(arr[#arr] == 0 or arr[#arr] == 1)\n  -- The array\
    \ must be in ascending order according to decimal value in ascending order according\
    \ to number of ones in its binary representation in ascending order according\
    \ to decimal value\n  assert(arr[#arr] == 0 or arr[#arr] == 1)\n  -- The array\
    \ must be in ascending order according to number of ones in its binary representation\
    \ in ascending order according to decimal value in ascending order according to\
    \ number of ones in its binary representation\n  assert(arr[#arr] == 0 or arr[#arr]\
    \ == 1)\n  -- The array must be in ascending order according to decimal value\
    \ in ascending order according to number of ones in its binary representation\
    \ in ascending order according to decimal value in ascending order according to\
    \ number of ones in its binary representation\n  assert(arr[#arr] == 0 or arr[#arr]\
    \ == 1)\n  -- The array must be in ascending order according to number of ones\
    \ in its binary representation in ascending order according to decimal value in\
    \ ascending order according to decimal value in ascending order according to number\
    \ of ones in its binary representation\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6gn5fr69.lua:55: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then return -1 end\n    if lhs > rhs then return 1 end\n\
    \    return 0\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmia5mtak.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpmia5mtak.lua:14: in function 'candidate'\n\t/tmp/tmpmia5mtak.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr according to\
    \ number of ones in their binary representation\n  -- arr should be an array of\
    \ non-negative integers\n  -- Return sorted array\n  -- Example: [1, 5, 2, 3,\
    \ 4] -> [1, 2, 3, 4, 5]\n  -- Example: [-2, -3, -4, -5, -6] -> [-6, -5, -4, -3,\
    \ -2]\n  -- Example: [1, 0, 2, 3, 4] -> [0, 1, 2, 3, 4]\n  -- Example: [1, 5,\
    \ 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n\
    \  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3,\
    \ 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  --\
    \ Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] ->\
    \ [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example:\
    \ [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2,\
    \ 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1,\
    \ 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4,\
    \ 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2,\
    \ 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n\
    \  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3,\
    \ 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  --\
    \ Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] ->\
    \ [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example:\
    \ [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2,\
    \ 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1,\
    \ 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4,\
    \ 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2,\
    \ 3, 4] -> [1, 2, 3, 4, 5]\n  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, 5]\n\
    \  -- Example: [1, 5, 2, 3, 4] -> [1, 2, 3, 4, \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7e_zejj0.lua:60: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first step is to convert\
    \ all negative numbers into positive ones.\n  -- This can be done by adding 1\
    \ to the negative numbers and subtracting 1 from\n  -- positive numbers.\n  --\
    \ >>> sort_array([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4]\n  -- >>> sort_array([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4, -3, -2, -1, 0, 1, 2, 3, 4]) ==\
    \ [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n  -- >>> sort_array([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4]) == [-\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplxiz45th.lua:49: 'end' expected (to close 'function' at line\
    \ 8) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- Sort arr based on number\
    \ of ones in their binary representation\n  -- Sort arr based on decimal value\n\
    \  -- It must be implemented like this:\n  -- >>> sort_array([1, 5, 2, 3, 4])\
    \ == [1, 2, 3, 4, 5]\n  -- >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]\n  -- >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  -- Your code\
    \ here\n  -- return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfemv19jv.lua:22:\
    \ expected: {1, 2, 4, 3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpfemv19jv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function binary_to_decimal(binary)\n\
    \    local decimal = 0\n    for i = 1, #binary do\n      decimal = decimal + (binary[i]\
    \ == \"1\" or -1)\n    end\n    return decimal\n  end\n  local function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    decimal = decimal * 2\n    while decimal > 0 do\n\
    \      binary = binary .. \"0\"\n      decimal = decimal / 2\n    end\n    return\
    \ binary\n  end\n  local function compare(lhs, rhs)\n    local lhs_bin = decimal_to_binary(lhs)\n\
    \    local rhs_bin = decimal_to_binary(rhs)\n    local lhs_decimal = binary_to_decimal(lhs_bin)\n\
    \    local rhs_decimal = binary_to_decimal(rhs_bin)\n    if lhs_decimal < rhs_decimal\
    \ then\n      return -1\n    elseif lhs_decimal > rhs_decimal then\n      return\
    \ 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n\
    \    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n\
    \    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3, 6, 44, 12,\
    \ 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
    \ 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16, 32}),\
    \ {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi45i__8i.lua:18:\
    \ attempt to perform arithmetic on local 'decimal' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpi45i__8i.lua:26: in function </tmp/tmpi45i__8i.lua:25>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpi45i__8i.lua:38: in function 'candidate'\n\t/tmp/tmpi45i__8i.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.008 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, j)\n    if i == j then\n      arr[i] = arr[j]\n      return\n    end\n  \
    \  local m = math.abs(arr[i] + arr[j])\n    if m == 0 then\n      arr[i] = arr[j]\n\
    \      return\n    end\n    if m > 1 then\n      arr[i], arr[j] = arr[j], arr[i]\n\
    \      helper(arr, i + 1, j)\n      helper(arr, i, j - 1)\n    end\n  end\n  helper(arr,\
    \ 0, #arr - 1)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4ib2e1v.lua:14:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpl4ib2e1v.lua:25: in function 'candidate'\n\t/tmp/tmpl4ib2e1v.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- The first element of the\
    \ array is always one\n  -- Therefore, remove it from the array\n  local ones\
    \ = arr[1]\n  local rest = arr[#arr]\n  -- Sort the rest of array based on number\
    \ of ones\n  local sorted_rest = sort_array(rest)\n  -- Return the sorted array\
    \ with the first element removed\n  return ones, sorted_rest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({1,\
    \ 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5,\
    \ -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}),\
    \ {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4chnq9yr.lua:11:\
    \ attempt to index local 'arr' (a number value)\nstack traceback:\n\t/tmp/tmp4chnq9yr.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp4chnq9yr.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  -- We sort by decreasing\
    \ number of ones in binary representation\n  -- then by decreasing decimal value.\n\
    \  -- We use binary representation to save memory.\n  -- We use string representation\
    \ to save time.\n  local bin = arr:map(function(x) return bit.rshift(x, 1) end):map(function(x)\
    \ return bit.band(x, 1) end):map(function(x) return \"1\" .. tostring(x) end):reverse()\n\
    \  local dec = arr:map(function(x) return bit.band(x, 1) end):map(function(x)\
    \ return tonumber(string.reverse(tostring(x))) end):reverse()\n  -- We sort by\
    \ decreasing number of ones in binary representation\n  -- then by decreasing\
    \ decimal value.\n  -- We use binary representation to save memory.\n  local bin\
    \ = bin:map(function(x) return bit.rshift(x, 1) end):map(function(x) return bit.band(x,\
    \ 1) end):map(function(x) return \"1\" .. tostring(x) end):reverse()\n  local\
    \ dec = dec:map(function(x) return bit.band(x, 1) end):map(function(x) return\
    \ tonumber(string.reverse(tostring(x))) end):reverse()\n  -- We sort by decreasing\
    \ number of ones in binary representation\n  -- then by decreasing decimal value.\n\
    \  -- We use binary representation to save memory.\n  local bin = bin:map(function(x)\
    \ return bit.rshift(x, 1) end):map(function(x) return bit.band(x, 1) end):map(function(x)\
    \ return \"1\" .. tostring(x) end):reverse()\n  local dec = dec:map(function(x)\
    \ return bit.band(x, 1) end):map(function(x) return tonumber(string.reverse(tostring(x)))\
    \ end):reverse()\n  -- We sort by decreasing number of ones in binary representation\n\
    \  -- then by decreasing decimal value.\n  -- We use binary representation to\
    \ save memory.\n  local bin = bin:map(function(x) return bit.rshift(x, 1) end):map(function(x)\
    \ return bit.band(x, 1) end):map(function(x) return \"1\" .. tostring(x) end):reverse()\n\
    \  local dec = dec:map(function(x) return bit.band(x, 1) end):map(function(x)\
    \ return tonumber(string.reverse(tostring(x))) end):reverse()\n  -- We sort by\
    \ decreasing number of ones in binary representation\n  -- then by decreasing\
    \ decimal value.\n  -- We use binary representation to save memory.\n  local bin\
    \ = bin:map(function(x) return bit.rshift(x, 1) end):map(function(x) return \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphmr2r_tv.lua:34: 'end' expected (to close 'function' at line\
    \ 33) near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs == 0 then\n      return 0\n    end\n    if lhs == -1 then\n\
    \      return 1\n    end\n    if lhs == 1 then\n      if rhs == 0 then\n     \
    \   return -1\n      else\n        return 1\n      end\n    end\n    return lhs\
    \ < rhs and 1 or -1\n  end\n  table.sort(arr, compare)\n  return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
    \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
    \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp271lv15f.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmp271lv15f.lua:25: in function 'candidate'\n\t/tmp/tmp271lv15f.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function compare(lhs,\
    \ rhs)\n    if lhs < rhs then\n      return -1\n    elseif lhs > rhs then\n  \
    \    return 1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1,\
    \ 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2,\
    \ -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2, 5,\
    \ 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf691n5w.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t[C]: in function 'sort'\n\
    \t/tmp/tmpzf691n5w.lua:18: in function 'candidate'\n\t/tmp/tmpzf691n5w.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this Kata, you have to sort an array of non-negative integers according\
    \ to\n-- number of ones in their binary representation in ascending order.\n--\
    \ For similar number of ones, sort based on decimal value.\n-- It must be implemented\
    \ like this:\n-- >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n-- >>> sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n-- >>> sort_array([1, 0, 2, 3, 4])\
    \ [0, 1, 2, 3, 4]\nlocal function sort_array(arr)\n  local function helper(arr,\
    \ i, count)\n    if i == 1 then\n      arr[i] = count\n      return\n    end\n\
    \    helper(arr, i - 1, count)\n    helper(arr, i, count + 1)\n  end\n  helper(arr,\
    \ 0, 1)\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({1, 5, 2, 3, 4}),\
    \ {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4,\
    \ -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2,\
    \ 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
    \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
    \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8,\
    \ 16, 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeowfh9md.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpeowfh9md.lua:14: in function 'helper'\n\
    \t/tmp/tmpeowfh9md.lua:14: in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14: in\
    \ function 'helper'\n\t/tmp/tmpeowfh9md.lua:14: in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14:\
    \ in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14: in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14:\
    \ in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14: in function 'helper'\n\t/tmp/tmpeowfh9md.lua:14:\
    \ in function 'helper'\n\t...\n\nRan 1 tests in 0.179 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
