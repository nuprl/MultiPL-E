name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- match_parens(['()(', ')'])\
  \ == 'Yes'\n-- match_parens([')', ')']) == 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  local good = true\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '' then\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local result = 'No'\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open == close then\n\
    \      result = result and 'Yes'\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack ==\
    \ 0 and 'Yes' or 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  return open ~= close\
    \ and open ~= 0 and close ~= 0\nend", "  local open = 0\n  local close = 0\n \
    \ local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0\
    \ then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n \
    \     close = close - 1\n    elseif lst[i] == '(' and open == 0 and close == 0\
    \ then\n      result = 'Yes'\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = lst[i]\n\
    \      end\n    elseif open ~= close then\n      return false\n    end\n  end\n\
    \  return #stack > 0 and stack[#stack] == nil\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return false\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  return true\nend", "  local open\
    \ = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack + 1] =\
    \ i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n \
    \     if open ~= close then\n        return false\n      end\n      open = open\
    \ - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \    stack[#stack + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      table.insert(stack,\
    \ i)\n    elseif lst[i] == ')' then\n      if #stack == 0 then\n        return\
    \ 'No'\n      else\n        local top = stack[#stack]\n        local left = stack[#stack\
    \ - 1]\n        if lst[top + 1] == '(' then\n          stack[#stack] = left +\
    \ 2\n        elseif lst[top + 1] == ')' then\n          stack[#stack] = left +\
    \ 2\n        else\n          stack[#stack] = left + 2\n        end\n      end\n\
    \    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close then\n    return false\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  local open_balance_count\
    \ = 0\n  local close_balance_count = 0\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open_balance = open_balance + 1\n      open_balance_count =\
    \ open_balance_count + 1\n    elseif lst[i] == ')' then\n      close_balance =\
    \ close_balance + 1\n      close_balance_count = close_balance_count + 1\n   \
    \ end\n    if open_balance ~= close_balance then\n      return 'No'\n    end\n\
    \  end\n  if open_balance_count ~= close then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n      open = open -\
    \ 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close - 1\n  \
    \  elseif lst[i] == '(' and open == 0 and close == 0 then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 1\n  local close_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      close_balance = close_balance + 1\n   \
    \ end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if open\
    \ ~= close then\n    return 'Yes'\n  end\n  return 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  local result = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '' then\n      if open == close then\n   \
    \     result = result + 1\n      else\n        result = result + 0\n      end\n\
    \    end\n  end\n  return result == #lst\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local stack = {}\n  local open = 1\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      if #stack == 0 then\n\
    \        return 'No'\n      else\n        open = open - 1\n      end\n    end\n\
    \  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
