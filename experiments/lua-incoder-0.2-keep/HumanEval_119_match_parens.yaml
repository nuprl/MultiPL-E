name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- match_parens(['()(', ')'])\
  \ == 'Yes'\n-- match_parens([')', ')']) == 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  local good = true\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '' then\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local result = 'No'\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open == close then\n\
    \      result = result and 'Yes'\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack ==\
    \ 0 and 'Yes' or 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  return open ~= close\
    \ and open ~= 0 and close ~= 0\nend", "  local open = 0\n  local close = 0\n \
    \ local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0\
    \ then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n \
    \     close = close - 1\n    elseif lst[i] == '(' and open == 0 and close == 0\
    \ then\n      result = 'Yes'\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = lst[i]\n\
    \      end\n    elseif open ~= close then\n      return false\n    end\n  end\n\
    \  return #stack > 0 and stack[#stack] == nil\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return false\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  return true\nend", "  local open\
    \ = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack + 1] =\
    \ i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n \
    \     if open ~= close then\n        return false\n      end\n      open = open\
    \ - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \    stack[#stack + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      table.insert(stack,\
    \ i)\n    elseif lst[i] == ')' then\n      if #stack == 0 then\n        return\
    \ 'No'\n      else\n        local top = stack[#stack]\n        local left = stack[#stack\
    \ - 1]\n        if lst[top + 1] == '(' then\n          stack[#stack] = left +\
    \ 2\n        elseif lst[top + 1] == ')' then\n          stack[#stack] = left +\
    \ 2\n        else\n          stack[#stack] = left + 2\n        end\n      end\n\
    \    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close then\n    return false\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  local open_balance_count\
    \ = 0\n  local close_balance_count = 0\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open_balance = open_balance + 1\n      open_balance_count =\
    \ open_balance_count + 1\n    elseif lst[i] == ')' then\n      close_balance =\
    \ close_balance + 1\n      close_balance_count = close_balance_count + 1\n   \
    \ end\n    if open_balance ~= close_balance then\n      return 'No'\n    end\n\
    \  end\n  if open_balance_count ~= close then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n      open = open -\
    \ 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close - 1\n  \
    \  elseif lst[i] == '(' and open == 0 and close == 0 then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 1\n  local close_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      close_balance = close_balance + 1\n   \
    \ end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if open\
    \ ~= close then\n    return 'Yes'\n  end\n  return 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  local result = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '' then\n      if open == close then\n   \
    \     result = result + 1\n      else\n        result = result + 0\n      end\n\
    \    end\n  end\n  return result == #lst\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local stack = {}\n  local open = 1\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      if #stack == 0 then\n\
    \        return 'No'\n      else\n        open = open - 1\n      end\n    end\n\
    \  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open ==\
    \ close then\n      result = 'Yes'\n      break\n    end\n  end\n  return result\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n\
    \  if open > close then\n    return 'No'\n  end\n  return match_parens(lst)\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      good = good and (open > close)\n \
    \   elseif lst[i] == ')' then\n      good = good and (open < close)\n    end\n\
    \  end\n  return 'Yes' if good else 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '' then\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  if open ~= close then\n    good = false\n  end\n\
    \  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return false\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return false\n  end\n  return true\nend", "  local open = 0\n  local close =\
    \ 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ > 0 then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n\
    \      close = close - 1\n    elseif lst[i] == '(' and open > close then\n   \
    \   result = 'Yes'\n      break\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        local top = stack[#stack]\n      \
    \  local bottom = stack[#stack + 1]\n        if top ~= bottom then\n         \
    \ return false\n        end\n        stack[#stack + 1] = i\n      else\n     \
    \   open = open - 1\n      end\n    end\n  end\n  return #stack == 0\nend", " \
    \ local open = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      open_balance = open_balance + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n      local top = stack[#stack]\n      if top ~= i then\n\
    \        stack[#stack] = i\n      else\n        open = open - 1\n        close\
    \ = close - 1\n        open_balance = open_balance - 1\n        close_balance\
    \ = close_balance - 1\n        if open_balance == 0 and close_balance == 0 then\n\
    \          return 'Yes'\n        else\n          return 'No'\n        end\n  \
    \    end\n    end\n  end\nend", "  local open = 0\n  local close = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance_count = 0\n  local close_balance_count = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open_balance_count = open_balance_count\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance_count = close_balance_count\
    \ + 1\n    end\n  end\n  if open_balance_count ~= close then\n    return 'No'\n\
    \  end\n  if open_balance ~= open_balance_count then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      table.insert(stack, lst[i])\n    elseif lst[i] ==\
    \ ')' then\n      if #stack == 0 then\n        return 'No'\n      else\n     \
    \   local top = stack[#stack]\n        stack[#stack] = nil\n        if top ==\
    \ '(' then\n          table.insert(stack, lst[i])\n        elseif top == ')' then\n\
    \          stack[#stack] = nil\n        else\n          return 'No'\n        end\n\
    \      end\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      result = result .. lst[i]\n\
    \    end\n  end\n  return result == '' and open == close\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return false\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return false\n  end\n  return true\nend", "  local open = 0\n  local close =\
    \ 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open\
    \ == close then\n      good = true\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n\
    \  return match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  return open >= close and open ~= 0\nend", "  local open = 0\n\
    \  local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n    if open ~= close then\n      good = false\n    end\n\
    \  end\n  if open ~= close then\n    good = false\n  end\n  return good\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        good = false\n        break\n      end\n\
    \      open = open - 1\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      good = good and match_parens(lst:sub(1,\
    \ i - 1))\n    elseif lst[i] == ')' then\n      good = good and match_parens(lst:sub(i\
    \ + 1, #lst))\n    end\n  end\n  return 'Yes' if good else 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  local i = 0\n  local j = 1\n  local len = #lst\n\
    \  while i < len do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      return true\n    end\n    i = i + 1\n  end\n  return false\n\
    end", "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '(' and open == close\
    \ then\n      good = true\n    end\n  end\n  return good\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \    if open ~= close then\n        good = false\n        break\n      end\n \
    \     open = open - 1\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n\
    \      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close\
    \ = close - 1\n    elseif lst[i] == '(' and open > close then\n      return 'No'\n\
    \    elseif lst[i] == ')' and close > open then\n      return 'No'\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return false\n  end\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return false\n  end\n  return true\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \    if open ~= close then\n        good = false\n      end\n      open = open\
    \ - 1\n      stack[#stack + 1] = lst[i]\n    elseif lst[i] == nil then\n     \
    \ if open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      stack[#stack\
    \ + 1] = open\n      open = open + 1\n    elseif lst[i] == ')' and open ~= 0 then\n\
    \      open = open - 1\n      if open ~= 0 then\n        close = close + 1\n \
    \     end\n    elseif lst[i] == '(' and close ~= 0 then\n      close = close +\
    \ 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ stack_size = #stack\n  if stack_size == 0 then\n    return 'Yes'\n  end\n  for\
    \ i = 1, stack_size do\n    if stack[i] ~= open then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local i\
    \ = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    i = i +\
    \ 1\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' and open > 0 then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close > 0 then\n      close = close - 1\n    elseif lst[i] == '('\
    \ and open > close then\n      return 'Yes'\n    end\n  end\n  return 'No'\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack\
    \ == 0 and #lst == open and close == 0\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = 1\n  local i = 0\n  while i < #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = good\
    \ + 1\n    end\n    i = i + 1\n  end\n  if open ~= close then\n    good = 0\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == '(' then\n      open = open + 1\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    elseif open == close then\n    \
    \  open_balance = open_balance - 1\n      close_balance = close_balance - 1\n\
    \      if open_balance == 0 and close_balance == 0 then\n        return 'Yes'\n\
    \      else\n        return 'No'\n      end\n    end\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open > close then\n  \
    \      return 'No'\n      else\n        open = open - 1\n      end\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local stack_size =\
    \ #stack\n  local stack_index = 1\n  local stack_value = 1\n  while stack_size\
    \ > 0 do\n    if lst[stack[stack_index]] == '(' then\n      stack_value = stack_value\
    \ + 1\n      stack_size = stack_size - 1\n    elseif lst[stack[stack_index]] ==\
    \ ')' then\n      stack_size = stack_size - 1\n      stack_value = stack_value\
    \ - 1\n    end\n    stack_index = stack_index + 1\n  end\n  if stack_value ==\
    \ 0 then\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open >\
    \ 0 then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n\
    \      close = close - 1\n    elseif lst[i] == '(' and open == 0 and close ==\
    \ 0 then\n      result = 'Yes'\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '' and open == close then\n   \
    \   good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == '' then\n      if open == close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n", "  local open = 0\n  local close = 0\n  local stack =\
    \ {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  local\
    \ good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open =\
    \ open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ == close then\n        good = true\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        return false\n      end\n      open = open - 1\n    end\n\
    \  end\n  return open ~= close\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ ~= 0 then\n      open = open - 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close - 1\n    elseif lst[i] == '(' and open ~= 0 and close ==\
    \ 0 then\n      good = false\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  return open >= close and open ~= 0\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open - 1\n    elseif lst[i] == ')' then\n      close\
    \ = close - 1\n    end\n  end\n  if open ~= 0 or close ~= 0 then\n    return false\n\
    \  end\n  return true\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open > 0 then\n      open = open - 1\n   \
    \ elseif lst[i] == ')' and close > 0 then\n      close = close - 1\n    elseif\
    \ lst[i] == '(' and open > close then\n      return 'No'\n    elseif lst[i] ==\
    \ ')' and close > open then\n      return 'No'\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = false\n        break\n      end\n\
    \    end\n  end\n  return good\nend", "  local stack = {}\n  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        stack[#stack + 1]\
    \ = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] == ')' then\n      if open ~= close then\n\
    \        return 'No'\n      end\n    end\n  end\n  return 'Yes'\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if open >\
    \ close then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "  local\
    \ open = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  local open_balance_stack = {}\n  local close_balance_stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance += 1\n      open_balance_stack[#open_balance_stack\
    \ + 1] = open\n      open_balance_stack[#open_balance_stack + 1] = close\n   \
    \ elseif lst[i] == ')' then\n      close_balance += 1\n      close_balance_stack[#close_balance_stack\
    \ + 1] = close\n      open_balance_stack[#open_balance_stack + 1] = open\n   \
    \ elseif lst[i] == '(' then\n      open_balance += 1\n      open_balance_stack[#open_balance_stack\
    \ + 1] = open\n    elseif lst[i] == ')' then\n      close_balance += 1\n     \
    \ close_balance_stack[#close_balance_stack + 1] = close\n      open_balance_stack[#open_balance_stack\
    \ + 1] = open\n    end\n  end\n  if open_balance ~= close_balance then\n    return\
    \ 'No'\n  end\n  local open_balance_len = #open_balance_stack\n  local close_balance_len\
    \ = #close_balance_stack\n  local open_balance_stack_reverse = reverse(open_balance_stack)\n\
    \  local close_balance_stack_reverse = reverse(close_balance_stack)\n  local open_balance_stack_reverse_len\
    \ = #open_balance_stack_reverse\n  local close_balance_stack_reverse_len = #close_balance_stack_reverse\n\
    \  local open_balance_stack_reverse_len = #open_balance_stack_reverse\n  local\
    \ close_balance_stack_reverse_len = #close_balance_stack_reverse\n  local open_balance_stack_reverse_len\
    \ = #open_balance_stack_reverse\n  local close_balance_stack_reverse_len = #close_balance_stack_reverse\n\
    \  local open_balance_stack_reverse_len = #open_balance_stack_reverse\n  local\
    \ close_balance_stack_reverse_len = #close_balance_stack_reverse\n  local open_balance_stack_reverse_len\
    \ = #open_balance_stack_reverse\n  local close_balance_stack_reverse_len = #close_balance_stack_reverse\n\
    \  local open_balance_stack", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local result\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        result = false\n        break\n      end\n    end\n  end\n\
    \  return result\nend", "  local open = 0\n  local close = 0\n  local stack =\
    \ {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        open = open - 1\n      end\n     \
    \ stack[#stack + 1] = i\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend", "  local stack = {}\n  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open == close then\n        if #stack > 0 then\n\
    \          local first = stack[#stack]\n          local last = #stack\n      \
    \    while last > 0 do\n            local next = stack[last - 1]\n           \
    \ if lst[first] == lst[next] then\n              first = next + 1\n          \
    \    last = last - 1\n            else\n              break\n            end\n\
    \          end\n          if first == last then\n            return 'Yes'\n  \
    \        end\n        end\n      end\n    end\n  end\n  return 'No'\nend", " \
    \ local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  local stack2 = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      stack2[#stack2 + 1] = i\n    elseif lst[i] ==\
    \ ')' then\n      stack2[#stack2 + 1] = i\n    end\n  end\n  local stack3 = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack3[#stack3 + 1] =\
    \ i\n    elseif lst[i] == ')' then\n      stack3[#stack3 + 1] = i\n    end\n \
    \ end\n  for i = 1, #stack2 do\n    local j = stack2[i]\n    if stack3[j] ~= nil\
    \ then\n      local k = stack3[j]\n      if stack[k] ~= nil then\n        return\
    \ 'No'\n      end\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n\
    \      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close\
    \ = close - 1\n    elseif lst[i] == '(' and open > close then\n      return 'Yes'\n\
    \    end\n  end\n  if open > close then\n    return 'No'\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        open = open - 1\n      else\n    \
    \    stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack == 0\n\
    end", "  local open = 0\n  local close = 0\n  local result = 'No'\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open == close then\n        result\
    \ = 'Yes'\n      end\n    end\n  end\n  return result\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local stack = {}\n  for i = 1, #lst do\n    stack[#stack + 1]\
    \ = lst[i]\n  end\n  local good = true\n  while #stack > 0 do\n    local top =\
    \ stack[#stack]\n    if top == '(' or top == ')' then\n      stack[#stack] = nil\n\
    \    else\n      good = false\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      open_balance = open_balance - 1\n\
    \      if open_balance ~= 0 then\n        return 'No'\n      end\n    end\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local result =\
    \ ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] ==\
    \ ')' and open == close then\n      result = result .. lst[i]\n    end\n  end\n\
    \  return result == '' and true or false\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n    elseif lst[i] == '(' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ~= '(' then\n\
    \      good = false\n    end\n  end\n  if good then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        good = false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        return true\n \
    \     elseif open > close then\n        return false\n      else\n        open\
    \ = open - 1\n      end\n    end\n  end\n  return false\nend", "  local open =\
    \ 0\n  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ open = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n    i = i + 1\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] ~= '(' then\n      good = false\n    end\n  end\n  if\
    \ good then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance =\
    \ close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open == close then\n      result = 'Yes'\n    end\n  end\n  return\
    \ result\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open ~= close then\n      return false\n    end\n  end\n  return true\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n    if open_balance\
    \ ~= close_balance then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return false\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return false\n  end\n  return true\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open_balance ~= (open - close) then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        if #stack > 0 then\n\
    \          local open = stack[#stack]\n          local close = i\n          local\
    \ openParen = open\n          local closeParen = close\n          while openParen\
    \ <= close do\n            openParen = stack[openParen + 1]\n            closeParen\
    \ = stack[closeParen + 1]\n            if openParen > closeParen then\n      \
    \        return 'No'\n            end\n          end\n          local openParen\
    \ = open\n          local closeParen = close\n          while openParen <= close\
    \ do\n            openParen = stack[openParen + 1]\n            closeParen = stack[closeParen\
    \ + 1]\n          end\n          return 'Yes'\n        else\n          return\
    \ 'No'\n        end\n      end\n    end\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    end\n  end\n  if open_balance ~=\
    \ close then\n    return 'No'\n  end\n  if open == close then\n    return 'Yes'\n\
    \  end\n  return match_parens(lst)\nend", "  local open = 0\n  local close = 0\n\
    \  local i = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    i\
    \ = i + 1\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  local open_balance_stack = {}\n  local close_balance_stack\
    \ = {}\n  local open_balance_stack[open] = true\n  local close_balance_stack[close]\
    \ = true\n  while open ~= close do\n    open = open - 1\n    close = close + 1\n\
    \    if open_balance_stack[open] then\n      open_balance = open_balance + 1\n\
    \      open_balance_stack[open] = false\n    end\n    if close_balance_stack[close]\
    \ then\n      close_balance = close_balance + 1\n      close_balance_stack[close]\
    \ = false\n    end\n  end\n  if open_balance ~= close_balance then\n    return\
    \ 'No'\n  end\n  local open_balance_stack[open] = true\n  local close_balance_stack[close]\
    \ = true\n  local open_balance_stack[open] = true\n  local close_balance_stack[close]\
    \ = true\n  while open ~= close do\n    open = open - 1\n    close = close + 1\n\
    \    if open_balance_stack[open] then\n      open_balance = open_balance + 1\n\
    \      open_balance_stack[open] = false\n    end\n    if close_balance_stack[close]\
    \ then\n      close_balance = close_balance + 1\n      close_balance_stack[close]\
    \ = false\n    end\n  end\n  if open_balance ~= close_balance then\n    return\
    \ 'No'\n  end\n  local open_balance_stack[open] = true\n  local close_balance_stack[close]\
    \ = true\n  local open_balance_stack[open] = true\n  local close_balance_stack[close]\
    \ = true\n  while open ~= close do\n    open = open - 1\n    close = close + 1\n\
    \    if open_balance_stack[open] then\n      open_balance = open_balance + 1\n\
    \      open_balance_stack[open] = false\n    end\n    if close_balance_stack[close]\
    \ then\n      close", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    if open ~= close then\n      good = false\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  local open_balance = 1\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      open_balance = open_balance - 1\n      if open_balance\
    \ == 0 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        local top = stack[#stack]\n        local bottom = stack[#stack\
    \ + 1]\n        if top ~= bottom then\n          stack[#stack] = bottom\n    \
    \    else\n          return 'No'\n        end\n      end\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n\
    \  local balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      close_balance = close_balance + 1\n   \
    \ elseif lst[i] == '(' and open_balance > close_balance then\n      open_balance\
    \ = open_balance - 1\n      close_balance = close_balance + 1\n      balance =\
    \ open_balance + close_balance\n    elseif lst[i] == ')' and open_balance < close_balance\
    \ then\n      open_balance = open_balance + 1\n      close_balance = close_balance\
    \ - 1\n      balance = open_balance + close_balance\n    end\n  end\n  if balance\
    \ == 0 then\n    return 'No'\n  end\n  if balance == -1 then\n    return 'Yes'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = false\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local\
    \ open_balance_count = 0\n  local close_balance_count = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open_balance_count = open_balance_count + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance_count = close_balance_count\
    \ + 1\n    end\n  end\n  if open_balance_count ~= close_balance_count then\n \
    \   return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum ~= close_balance_sum\
    \ then\n    return 'No'\n  end\n  local ", "  local open = 0\n  local close =\
    \ 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = true\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  return open == close and open ~= 0\nend", " \
    \ local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    if open == close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      result[#result+1] = lst[i]\n   \
    \ end\n  end\n  return #result == 0\nend", "  local stack = {}\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open >\
    \ 0 then\n      stack[#stack + 1] = lst[i]\n      open = open - 1\n    elseif\
    \ lst[i] == ')' and close > 0 then\n      open = open + 1\n      close = close\
    \ - 1\n    elseif lst[i] == '(' and close > 0 then\n      open = open + 1\n  \
    \  elseif lst[i] == ')' and open > 0 then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local stack_string\
    \ = table.concat(stack, '')\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  local stack_string = table.concat(stack,\
    \ '')\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local\
    \ stack_string = table.concat(stack, '')\n  if stack_string ~= stack_string then\n\
    \    return 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if\
    \ stack_string ~= stack_string then\n    return 'No'\n  end\n  local stack_string\
    \ = table.concat(stack, '')\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  local stack_string = table.concat(stack,\
    \ '')\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local\
    \ stack_string = table.concat(stack, '')\n  if stack_string ~= stack_string then\n\
    \    return 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if\
    \ stack_string ~= stack_string then\n    return 'No'\n  end\n  local stack_string\
    \ = table.concat(stack, '')\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  local stack_string = table.concat(stack,\
    \ '')\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local\
    \ stack_string = table.concat(stack, '')\n  if stack_string ~= stack_string then\n\
    \    return 'No'\n  end\n  local stack_string = table.concat(stack, '')\n  if\
    \ stack_string ~= stack_string then\n    return 'No'", "  local open = 0\n  local\
    \ close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and\
    \ open > 0 then\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ and close > 0 then\n      close_balance = close_balance + 1\n    elseif lst[i]\
    \ == '(' and open > 0 then\n      open = open - 1\n    elseif lst[i] == ')' and\
    \ close > 0 then\n      close = close - 1\n    end\n  end\n  if open_balance ==\
    \ close_balance then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      good = good and match_parens(lst:sub(1, i - 1))\n\
    \    elseif lst[i] == ')' then\n      good = good and match_parens(lst:sub(i +\
    \ 1, #lst))\n    end\n  end\n  return 'Yes' if good else 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = 0\n    end\n  end\n  if good then\n    return 'Yes'\n\
    \  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == ')' and open == close then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       good = false\n        break\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    i = i + 1\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = false\n        break\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      result = result .. lst[i]\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n    if open ~= close then\n \
    \     good = false\n    end\n  end\n  return good\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open == close then\n        if #stack == 0 then\n          return\
    \ 'Yes'\n        else\n          local top = stack[#stack]\n          local bottom\
    \ = stack[#stack + 1]\n          local left = lst[top + 1]\n          local right\
    \ = lst[bottom + 1]\n          if left ~= right then\n            return 'No'\n\
    \          else\n            stack[#stack] = nil\n            stack[#stack + 1]\
    \ = nil\n          end\n        end\n      end\n    end\n  end\n  return 'No'\n\
    end", "  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      if #stack ==\
    \ 0 then\n        return 'No'\n      else\n        local top = stack[#stack]\n\
    \        stack[#stack] = nil\n        if lst[top + 1] == '(' then\n          stack[#stack\
    \ + 1] = top + 1\n        elseif lst[top + 1] == ')' then\n          stack[#stack\
    \ + 1] = top\n        else\n          return 'No'\n        end\n      end\n  \
    \  end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open == close then\n        local start = stack[#stack\
    \ + 1]\n        local end = i\n        local str = table.concat(lst:sub(1, start),\
    \ '') .. table.concat(lst:sub(end), '') .. table.concat(lst:sub(start + 1, end),\
    \ '') .. table.concat(lst:sub(end + 1), '')\n        if str == lst[#lst] then\n\
    \          return 'Yes'\n        else\n          return 'No'\n        end\n  \
    \    end\n    end\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n      if open_balance ~= close_balance then\n        open_balance\
    \ = open_balance - 1\n      end\n      open = open - 1\n      if open == 0 then\n\
    \        return true\n      end\n    else\n      open = open + 1\n    end\n  end\n\
    \  return false\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n \
    \   end\n  end\n  return #stack == 0\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n \
    \ else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \  elseif open == close then\n      good = true\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local result = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n    if open == close then\n      result\
    \ = result + 1\n    end\n  end\n  return result == #lst\nend", "  local open =\
    \ 0\n  local close = 0\n  local good = 1\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '(' ~= close ~= open then\n      good = 0\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  return open >=\
    \ close and open ~= 0\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n      stack[#stack + 1] = i\n    end\n  end\n  return #stack ==\
    \ 0\nend", "  local open = 0\n  local close = 0\n  local result = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n\
    \    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    elseif\
    \ lst[i] == '(' and open ~= close then\n      result = result + 1\n    end\n \
    \ end\n  return result == #lst\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open\
    \ - 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n\
    \    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    end\n  end\n\
    \  return open ~= close and open ~= 0 and close ~= 0\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local open = 0\n  local close = 0\n  local open_balance = 0\n\
    \  local close_balance = 0\n  local good = false\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close then\n      good\
    \ = false\n      break\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    good = false\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        local start = stack[#stack\
    \ + 1]\n        local end = i\n        local open = 0\n        local close = 0\n\
    \        for j = start + 1, end do\n          if lst[j] == ')' then\n        \
    \    close = close + 1\n          elseif lst[j] == '(' then\n            open\
    \ = open + 1\n          end\n        end\n        if open ~= close then\n    \
    \      return 'No'\n        end\n      end\n    end\n  end\n  return 'Yes'\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return false\n  end\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' then\n      close = close - 1\n    end\n    if open < 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' and open ~= 0 then\n      open_balance = open_balance\
    \ + 1\n      open = open - 1\n    elseif lst[i] == ')' and close ~= 0 then\n \
    \     close_balance = close_balance + 1\n      close = close - 1\n    end\n  \
    \  if open_balance ~= close_balance then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    if\
    \ open > close then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' or lst[i] == '[' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' or lst[i] == ']' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        good = false\n        break\n      end\n\
    \      open = open - 1\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  local result = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open == close then\n        result = false\n      end\n\
    \    end\n  end\n  return result\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open - 1\n    elseif lst[i] == ')' then\n      close = close - 1\n\
    \    end\n  end\n  return open >= 0 and close >= 0\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == '' and open == close then\n      result = 'Yes'\n    end\n  end\n  return\
    \ result\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  return open == close and open ~= 0\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n    if open ~= close then\n \
    \     good = false\n    end\n  end\n  return good\nend", "  local open = 0\n \
    \ local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  end\n  local stack2 = {}\n  for i = 1, #lst do\n    if lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack2[#stack2\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack2 > 0 then\n    return 'Yes'\n\
    \  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == ')' and open_balance > close_balance then\n      open\
    \ = open - 1\n      open_balance = open_balance - 1\n    elseif lst[i] == '('\
    \ and close_balance > open_balance then\n      close = close - 1\n      close_balance\
    \ = close_balance - 1\n    end\n  end\n  return open == close and open_balance\
    \ == close_balance\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open ==\
    \ close then\n      result = 'Yes'\n    end\n  end\n  return result\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      return 'No'\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  return open >=\
    \ close and open ~= 0 and close ~= 0\nend", "  local open = 0\n  local close =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n", "  local open = 0\n  local close = 0\n  local good =\
    \ true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    if open\
    \ ~= close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack ==\
    \ 0 and 'Yes' or 'No'\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == ')' and open == close then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  for i = 1, #lst do\n    local open = lst[i]\n\
    \    if open == '(' then\n      stack[#stack + 1] = open\n    elseif open == ')'\
    \ then\n      local close = stack[#stack + 1]\n      if close ~= '(' then\n  \
    \      return 'No'\n      end\n      stack[#stack + 1] = close\n    end\n  end\n\
    \  if #stack > 0 then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open == close then\n\
    \        local s = stack[#stack + 1]\n        stack[#stack + 1] = nil\n      \
    \  return s\n      end\n    end\n  end\n  return nil\nend", "  local open = 0\n\
    \  local close = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open\
    \ ~= close then\n      result = 'Yes'\n      break\n    end\n  end\n  return result\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n  \
    \    local open = 0\n      for j = 1, #stack do\n        if lst[stack[j]] ~= '('\
    \ then\n          open = open + 1\n        end\n      end\n      if open ~= close\
    \ then\n        return 'No'\n      end\n    end\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n   \
    \ return 'No'\n  end\nend", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    end\n  end\n  return #stack == 0 and 'Yes' or 'No'\nend", "  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n \
    \   end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        good = false\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return false\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close then\n    return false\n  end\n\
    \  return true\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '' then\n\
    \      good = false\n    end\n  end\n  if open ~= close then\n    good = false\n\
    \  end\n  return good\nend", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    end\n  end\n  return #stack > 0 and #stack == close + 1\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = i\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack == 0\
    \ and 'No' or 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    else\n      if\
    \ open ~= close then\n        good = false\n        break\n      end\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  local good = true\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open == close\
    \ then\n      good = false\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       local top = stack[#stack]\n        local bottom = stack[#stack + 1]\n\
    \        local middle = open + close\n        if top ~= middle and bottom ~= middle\
    \ then\n          return 'No'\n        end\n      end\n      stack[#stack] = nil\n\
    \    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n\
    \  local open_balance = 0\n  local close_balance = 0\n  local open_balance_stack\
    \ = {}\n  local close_balance_stack = {}\n  local open_balance_stack_index = 0\n\
    \  local close_balance_stack_index = 0\n  local open_balance_stack[open_balance_stack_index]\
    \ = true\n  local close_balance_stack[close_balance_stack_index] = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_stack[open_balance_stack_index]\
    \ = true\n      open_balance_stack_index = open_balance_stack_index + 1\n    \
    \  open_balance_stack[open_balance_stack_index] = false\n    end\n    if lst[i]\
    \ == ')' then\n      close_balance_stack[close_balance_stack_index] = true\n \
    \     close_balance_stack_index = close_balance_stack_index + 1\n      close_balance_stack[close_balance_stack_index]\
    \ = false\n    end\n    if open_balance_stack[open_balance_stack_index] == false\
    \ then\n      open_balance_stack[open_balance_stack_index] = true\n      open_balance_stack_index\
    \ = open_balance_stack_index + 1\n      open_balance_stack[open_balance_stack_index]\
    \ = false\n    end\n    if close_balance_stack[close_balance_stack_index] == false\
    \ then\n      close_balance_stack[close_balance_stack_index] = true\n      close_balance_stack_index\
    \ = close_balance_stack_index + 1\n      close_balance_stack[close_balance_stack_index]\
    \ = false\n    end\n  end\n  if open_balance_stack_index == close_balance_stack_index\
    \ then\n    return 'No'\n  end\n  if open_balance_stack_index > close_balance_stack_index\
    \ then\n    return 'Yes'\n  end\n  local open_balance_stack[open_balance_stack_index]\
    \ = true\n  local close_balance_stack[close_balance_stack_index] = true\n  local\
    \ open_balance_stack_index = 1\n  local close_balance_stack_index = 1\n  local\
    \ open_balance_stack[open_balance_stack_index] = true\n  local close_balance_stack[close_balance_stack_index]\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_stack[open_balance_stack_index",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return false\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return false\n  end\n  return true\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open_balance ~= (close - open) then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
