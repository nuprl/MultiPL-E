language: lua
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false\
    \ end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_73k8tqf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_73k8tqf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  local i0 = 0\n  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n\
    \    if s0[i0] ~= s1[i1] then return false end\n    i0 = i0 + 1\n    i1 = i1 +\
    \ 1\n  end\n  return i0 == l0 and i1 == l1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbxco3yc.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmbxco3yc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0 or 0\n  local l1 = #s1 or 0\n  local i0\
    \ = 0\n  local i1 = 0\n  while i0 < l0 and i1 < l1 do\n    if s0[i0] ~= s1[i1]\
    \ then return false end\n    i0 = i0 + 1\n    i1 = i1 + 1\n  end\n  return i0\
    \ == l0 and i1 == l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25hpj_0c.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp25hpj_0c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0, n1 = #s0, #s1\n  if n0 ~= n1 then return false\
    \ end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_73k8tqf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_73k8tqf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n   if #s0 ~= #s1 then return false end\n   for i=1, #s0\
    \ do\n      if s0[i] ~= s1[i] then return false end\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponzkvpu3.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmponzkvpu3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return\
    \ false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn5qo05i.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsn5qo05i.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxb3_fgd.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxb3_fgd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  -- Check lengths\n  if #s0 ~= #s1 then\n    return false\n\
    \  end\n  -- Check characters\n  for i = 0, #s0 do\n    if s0[i] ~= s1[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iy5nnsh.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3iy5nnsh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0 = #s0\n  local n1 = #s1\n  if n0 ~= n1 then return\
    \ false end\n  for i = 1, n0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn5qo05i.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsn5qo05i.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxb3_fgd.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxb3_fgd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1\
    \ then return false end\n  for i = 1, len0 do\n    if s0:sub(i, i) ~= s1:sub(i,\
    \ i) then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4u9nzvt.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps4u9nzvt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxb3_fgd.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxb3_fgd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then return\
    \ false end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxb3_fgd.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxb3_fgd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\n\
    \    return false\n  end\n  for i = 1, l0 do\n    if s0[i] ~= s1[i] then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnok5lfp.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdnok5lfp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local len0 = #s0\n  local len1 = #s1\n  if len0 ~= len1\
    \ then return false end\n  for i = 1, len0 do\n    if s0[i] ~= s1[i] then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1vmry6b.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa1vmry6b.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0 = #s0\n  local n1 = #s1\n  local i0\n  local\
    \ i1\n  for i0 = 1, n0 do\n    for i1 = 1, n1 do\n      if s0[i0] == s1[i1] then\
    \ return true end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9ytct8k.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe9ytct8k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local n0 = #s0\n  local n1 = #s1\n  local i0\n  local\
    \ i1\n  for i0 = 1, n0 do\n    for i1 = 1, n1 do\n      if s0[i0] == s1[i1] then\n\
    \        return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0orxgf8o.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0orxgf8o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local l0 = #s0\n  local l1 = #s1\n  if l0 ~= l1 then\n\
    \    return false\n  end\n  for i = 1, l0 do\n    if string.sub(s0, i, i) ~= string.sub(s1,\
    \ i, i) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9wau7ym.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt9wau7ym.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  local len0 = #s0\n  local len1 = #s1\n  local i = 0\n\
    \  local j = 0\n  while i < len0 and j < len1 do\n    if s0[i] == s1[j] then\n\
    \      i = i + 1\n      j = j + 1\n    else\n      i = i + 1\n      j = j + 1\n\
    \    end\n  end\n  return i == len0 and j == len1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsuq6fow.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzsuq6fow.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- True\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ True\n-- >>> same_chars('dddddddabc', 'abcd')\n-- True\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- False\n-- >>> same_chars('abcd', 'dddddddabce')\n-- False\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- False\nlocal function\
    \ same_chars(s0, s1)\n  -- Check length\n  if #s0 ~= #s1 then\n    return false\n\
    \  end\n  -- Check characters\n  for i = 0, #s0 do\n    if s0[i] ~= s1[i] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e956wsi.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5e956wsi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
