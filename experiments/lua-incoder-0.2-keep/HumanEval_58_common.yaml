name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
  \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common =\
    \ {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n\
    \        table.insert(common, l1[i1])\n        i1 = i1 + 1\n      else\n     \
    \   j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n\
    \  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n\
    \        table.insert(common, l1[i1])\n        i1 = i1 + 1\n        break\n  \
    \    elseif l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n        i1\
    \ = i1 + 1\n      end\n    end\n    while j1 <= j2 do\n      table.insert(common,\
    \ l2[j1])\n      j1 = j1 + 1\n    end\n    while i1 <= i2 do\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n    end\n  end\n  return common\nend", "  local\
    \ i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1 <= i2 do\n    local e1\
    \ = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n      i1 = i1 + 1\n \
    \     j2 = j2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n    \
    \  j2 = j2 + 1\n    end\n  end\n  return l1[i1]\nend", "  local common = {}\n\
    \  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v1 ==\
    \ v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _,\
    \ v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common, v)\n\
    \      end\n    end\n  end\n  return common\nend", "  local common = {}\n  for\
    \ _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n\
    \        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n\
    \  local common = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1]\
    \ == l2[j1] then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n\
    \        break\n      elseif j1 > j2 then\n        break\n      end\n      j1\
    \ = j1 + 1\n    end\n    j2 = j2 + 1\n  end\n  return common\nend", "  local i1,\
    \ i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2\
    \ do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      elseif l1[i1] < l2[j1] then\n\
    \        j2 = j2 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n  \
    \  j1 = j1 + 1\n  end\n  return common\nend", "  local common = {}\n  for _, v\
    \ in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n  \
    \      table.insert(common, v)\n      end\n    end\n  end\n  return common\nend",
  "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n\
    \      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n\
    \  local common = {}\n  while i1 <= i2 do\n    local e1 = l1[i1]\n    local e2\
    \ = l2[j1]\n    if e1 == e2 then\n      common[e1] = common[e1] or 1\n      j1\
    \ = j1 + 1\n    elseif common[e1] > common[e2] then\n      common[e2] = common[e2]\
    \ + 1\n    else\n      common[e1] = common[e1] + 1\n    end\n    i1 = i1 + 1\n\
    \  end\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    common[l1[i1]] = common[l1[i1]]\
    \ or 1\n    i1 = i1 + 1\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n\
    \  local common = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1]\
    \ == l2[j1] then\n        table.insert(common, l1[i1])\n        j1 = j1 + 1\n\
    \      else\n        j2 = j2 + 1\n      end\n    end\n    i1 = i1 + 1\n  end\n\
    \  return common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local\
    \ common = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] ==\
    \ l2[j1] then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n   \
    \     break\n      elseif l1[i1] < l2[j1] then\n        j2 = j2 + 1\n      else\n\
    \        i1 = i1 + 1\n      end\n    end\n    while j1 <= j2 do\n      table.insert(common,\
    \ l2[j1])\n      j2 = j2 + 1\n    end\n    while i1 <= i2 do\n      table.insert(common,\
    \ l1[i1])\n      i1 = i1 + 1\n    end\n  end\n  return common\nend", "  local\
    \ i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <=\
    \ i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      end\n      j1 = j1 + 1\n\
    \    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n  return common\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
