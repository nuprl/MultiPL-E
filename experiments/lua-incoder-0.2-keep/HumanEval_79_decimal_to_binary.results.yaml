language: lua
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = math.floor(decimal)\n    local remainder\
    \ = decimal\n    while remainder ~= 0 do\n        binary = binary .. \"1\" ..\
    \ math.floor(remainder / 2)\n        remainder = remainder % 2\n    end\n    binary\
    \ = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2lih5d8.lua:24:\
    \ expected: \"db0db\"\nactual: \"db\"\nstack traceback:\n\t/tmp/tmpn2lih5d8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    decimal = tonumber(decimal)\n    local binary = \"\"\n    local decimals\
    \ = math.floor(math.log(decimal, 2))\n    local remainder = math.fmod(decimal,\
    \ 2)\n    local remainders = math.floor(math.log(remainder, 2))\n    local remainders_str\
    \ = string.format(\"%0d\", remainders)\n    local remainders_str = string.gsub(remainders_str,\
    \ \".\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"-\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \":\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"-\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1cq5ufs8.lua:40: unfinished string near ''"+''

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local decimal_str = tostring(decimal)\n    local binary_str = \"\"\n    local\
    \ binary_index = 1\n    local binary_length = #decimal_str\n    local binary_remainder\n\
    \    local binary_digit\n    local binary_remainder_str\n    local binary_remainder_length\n\
    \    local binary_remainder_remainder\n    local binary_remainder_digit\n    local\
    \ binary_remainder_remainder_str\n    local binary_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder\n    local binary_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_str\n    local binary_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder\n    local binary_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_str\n    local binary_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder\n    local\
    \ binary_remainder_remainder_remainder_remainder_digit\n    local binary_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_length\n \
    \   local binary_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_digit\n  \
    \  local binary_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remain\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7iugqsn8.lua:59: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  -- Write your code here\n  local binary = \"\"\n  local decimal = decimal\n\
    \  local i = 0\n  while decimal > 0 do\n    binary = binary .. \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary .. \"1\"\n  binary = binary .. \"db\"\
    \n  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi721bfc.lua:26:\
    \ expected: \"db0db\"\nactual: \"1db\"\nstack traceback:\n\t/tmp/tmpqi721bfc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = decimal\n    while decimal > 0 do\n\
    \        local remainder = decimal % 2\n        decimal = decimal / 2\n      \
    \  binary = string.format(\"%s%d%s\", binary, remainder, string.sub(binary, 1,\
    \ string.len(binary)-1))\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhl3ocpa.lua:23:\
    \ expected: \"db0db\"\nactual: \"db\"\nstack traceback:\n\t/tmp/tmpkhl3ocpa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = decimal\n    local decimal_power\
    \ = math.pow(10, decimal)\n    while decimal > 0 do\n        binary = binary ..\
    \ \"0\"\n        decimal = decimal - 1\n    end\n    binary = binary .. \"1\"\n\
    \    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqstmtb8m.lua:24:\
    \ expected: \"db0db\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmpqstmtb8m.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = decimal\n    local decimal_power\
    \ = math.pow(10, decimal)\n    local decimal_remainder = decimal % decimal_power\n\
    \    local decimal_remainder_power = math.pow(10, decimal_remainder)\n    local\
    \ decimal_remainder_remainder = decimal_remainder % decimal_remainder_power\n\
    \    local decimal_remainder_remainder_power = math.pow(10, decimal_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder = decimal_remainder_remainder\
    \ % decimal_remainder_remainder_power\n    local decimal_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder\
    \ = decimal_remainder_remainder_remainder % decimal_remainder_remainder_remainder_power\n\
    \    local decimal_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder\
    \ = decimal_remainder_remainder_remainder_remainder % decimal_remainder_remainder_remainder_remainder_power\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr48upqhw.lua:32: unexpected symbol near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local decimal_str = string.format(\"%0d\", decimal)\n    local binary_str\
    \ = \"\"\n    for i = 1, #decimal_str do\n        binary_str = binary_str .. \"\
    db\" .. decimal_str:sub(i,i)\n    end\n    return binary_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_a_9ste.lua:21:\
    \ expected: \"db0db\"\nactual: \"db0\"\nstack traceback:\n\t/tmp/tmp0_a_9ste.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  decimal = tonumber(decimal)\n  local binary = \"\"\n  local decimal_power =\
    \ math.pow(10, math.floor(math.log10(decimal)))\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_pow\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjcv66k0i.lua:77: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  decimal = decimal or 0\n  local binary = \"\"\n  local remainder\n  while decimal\
    \ > 0 do\n    remainder = decimal % 2\n    decimal = math.floor(decimal / 2)\n\
    \    binary = string.format(\"%s%c\", binary, remainder)\n  end\n  return binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgqtdcrl.lua:24:\
    \ expected: \"db0db\"\nactual: \"db\"\nstack traceback:\n\t/tmp/tmpxgqtdcrl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal_power = math.pow(10, decimal)\n  \
    \  local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiitaj9py.lua:78: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = math.floor(decimal)\n    local remainder\
    \ = decimal\n    while remainder > 0 do\n        binary = binary .. \"0\"\n  \
    \      remainder = remainder - 1\n    end\n    binary = binary .. \"1\"\n    return\
    \ binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzzdmf9d.lua:24:\
    \ expected: \"db0db\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmpjzzdmf9d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    decimal = decimal\n    local binary = \"\"\n    local decimal_power = math.pow(10,\
    \ decimal)\n    local decimal_mod = decimal\n    while decimal_mod > 0 do\n  \
    \      binary = binary .. \"0\"\n        decimal_mod = decimal_mod - 1\n    end\n\
    \    binary = binary .. \"1\"\n    while decimal_power > 0 do\n        binary\
    \ = binary .. \"0\"\n        decimal_power = decimal_power - 1\n    end\n    return\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnh9al0lv.lua:29:\
    \ expected: \"db0db\"\nactual: \"10db\"\nstack traceback:\n\t/tmp/tmpnh9al0lv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local decimal = decimal\n  local decimal_power = math.pow(10,\
    \ decimal)\n  local decimal_power = decimal_power - 1\n  local decimal_power =\
    \ decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfcaeftxi.lua:78: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  decimal = tonumber(decimal)\n  if decimal < 0 then\n    return \"db\"..decimal_to_binary(-decimal)\n\
    \  end\n  local binary = \"\"\n  local decimals = math.floor(math.log(decimal,2))\n\
    \  local power = math.pow(2,decimals)\n  for i = 1,decimals do\n    binary = binary\
    \ .. (decimal%power) .. \"b\"\n    decimal = math.floor(decimal/power)\n  end\n\
    \  return \"db\"..binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex6hk9vd.lua:27:\
    \ expected: \"db0db\"\nactual: \"db\"\nstack traceback:\n\t/tmp/tmpex6hk9vd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    decimal = decimal or 0\n    local binary = \"\"\n    local remainder\n  \
    \  local decimal_str = tostring(decimal)\n    local decimal_len = #decimal_str\n\
    \    local decimal_remainder\n    local decimal_remainder_str\n    local decimal_remainder_len\n\
    \    local decimal_remainder_remainder\n    local decimal_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_len\n    local decimal_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_str\n    local decimal_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder\n    local decimal_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_len\n    local decimal_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_str\n   \
    \ local decimal_remainder_remainder_remainder_remainder_remainder_len\n    local\
    \ decimal_remainder_remainder_remainder_remainder_remainder_remainder\n    local\
    \ decimal_remainder_remainder_remainder_remainder_remainder_remainder_str\n  \
    \  local decimal_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbv9lpp8b.lua:56: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  decimal = decimal:byte()\n  local binary = \"\"\n  local i = 0\n  while decimal\
    \ > 0 do\n    binary = binary .. \"0\"\n    decimal = decimal - 1\n    i = i +\
    \ 1\n  end\n  binary = binary .. \"1\"\n  i = i - 1\n  while i > 0 do\n    binary\
    \ = binary .. \"0\"\n    i = i - 1\n  end\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyeotg1y.lua:10:\
    \ attempt to index a number value (local 'decimal')\nstack traceback:\n\t/tmp/tmpwyeotg1y.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwyeotg1y.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local decimal = decimal\n    local decimal_power\
    \ = math.pow(10, math.floor(math.log10(decimal)))\n    local decimal_mod = decimal\n\
    \    while decimal_mod > 0 do\n        decimal = decimal_mod % decimal_power\n\
    \        binary = binary .. \"1\" .. tostring(decimal)\n        decimal_mod =\
    \ math.floor(decimal_mod - decimal)\n    end\n    binary = binary .. \"0\"\n \
    \   return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr16fu_6.lua:26:\
    \ expected: \"db0db\"\nactual: \"0db\"\nstack traceback:\n\t/tmp/tmpbr16fu_6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    decimal = tonumber(decimal)\n    if decimal < 0 then\n        decimal = -decimal\n\
    \        decimal = -decimal\n    end\n    local binary = \"\"\n    local remainder\n\
    \    for i = 1, decimal do\n        remainder = math.floor((decimal % 2))\n  \
    \      binary = binary .. \"1\" .. remainder\n        decimal = decimal / 2\n\
    \    end\n    if decimal > 0 then\n        remainder = math.floor((decimal % 2))\n\
    \        binary = binary .. \"1\" .. remainder\n    end\n    if binary == \"1\"\
    \ then\n        binary = \"db\" .. binary\n    end\n    return binary\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphydepo3p.lua:35:\
    \ expected: \"db0db\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphydepo3p.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    decimal = tonumber(decimal)\n    if decimal < 0 then\n        error(\"Decimal\
    \ must be positive\")\n    end\n    local binary = \"\"\n    local decimals =\
    \ math.floor(math.log(decimal, 2))\n    local remainder = decimal % 2\n    if\
    \ decimals > 0 then\n        binary = decimal_to_binary(math.floor(decimal / 2))\n\
    \    end\n    if remainder == 1 then\n        binary = \"1\" + binary\n    else\n\
    \        binary = \"0\" + binary\n    end\n    return binary .. \"db\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppk74wi89.lua:23:\
    \ attempt to perform arithmetic on a string value (local 'binary')\nstack traceback:\n\
    \t/tmp/tmppk74wi89.lua:23: in local 'candidate'\n\t/tmp/tmppk74wi89.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
