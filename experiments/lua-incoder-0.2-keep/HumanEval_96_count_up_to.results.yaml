language: lua
name: HumanEval_96_count_up_to
results:
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local count = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for j = 2, i do\n      if i % j == 0 then\n        prime = false\n      \
    \  break\n      end\n    end\n    if prime then\n      table.insert(count, i)\n\
    \    end\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptszg_vds.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptszg_vds.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, prime in ipairs(primes) do\n      if prime and i % prime == 0 then\n\
    \        prime = false\n        break\n      end\n    end\n    if prime then\n\
    \      table.insert(primes, i)\n    end\n    i = i + 1\n  end\n  return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11bno6qs.lua:32:\
    \ expected: {2, 3}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp11bno6qs.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, p in ipairs(primes) do\n      if p*p > i then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnquz_7j.lua:32:\
    \ expected: {2, 3}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpmnquz_7j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, prime in pairs(primes) do\n      if prime and i % prime == 0 then\n\
    \        prime = false\n        break\n      end\n    end\n    if prime then\n\
    \      table.insert(primes, i)\n    end\n    i = i + 1\n  end\n  return primes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm64lkpb0.lua:32:\
    \ expected: {2, 3}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpm64lkpb0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local a = {}\n  for i = 2, n do\n    local j = 1\n    while i * j <= n do\n\
    \      if n % i == 0 then\n        table.insert(a, i)\n        n = n / i\n   \
    \     break\n      end\n      j = j + 1\n    end\n  end\n  return a\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
    \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
    \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
    \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pds887l.lua:29:\
    \ expected: {2, 3}\nactual: {5}\nstack traceback:\n\t/tmp/tmp5pds887l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in ipairs(primes) do\n      if i % v == 0 then\n        prime =\
    \ false\n        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3ci1ha9.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpp3ci1ha9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  for i = 2, n do\n    local prime = true\n    for j = 2,\
    \ #primes do\n      if primes[j] and primes[j] % i == 0 then\n        prime =\
    \ false\n        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjnzgyry.lua:30:\
    \ expected: {2, 3}\nactual: {2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpyjnzgyry.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      primes[i] = i\n \
    \   end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaoo6pdt.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptaoo6pdt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for _, v in pairs(primes) do\n      if i % v == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  return primes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsncqps6r.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsncqps6r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n-- integers that are prime numbers and less than n.\n\
    -- for example:\n-- count_up_to(5) => [2,3]\n-- count_up_to(11) => [2,3,5,7]\n\
    -- count_up_to(0) => []\n-- count_up_to(20) => [2,3,5,7,11,13,17,19]\n-- count_up_to(1)\
    \ => []\n-- count_up_to(18) => [2,3,5,7,11,13,17]\nlocal function count_up_to(n)\n\
    \  local count = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n\
    \    for j = 2, i do\n      if i % j == 0 then\n        prime = false\n      \
    \  break\n      end\n    end\n    if prime then\n      table.insert(count, i)\n\
    \    end\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_up_to\n    lu.assertEquals(candidate(5),\
    \ {2, 3})\n    lu.assertEquals(candidate(6), {2, 3, 5})\n    lu.assertEquals(candidate(7),\
    \ {2, 3, 5})\n    lu.assertEquals(candidate(10), {2, 3, 5, 7})\n    lu.assertEquals(candidate(0),\
    \ {})\n    lu.assertEquals(candidate(22), {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1),\
    \ {})\n    lu.assertEquals(candidate(18), {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101),\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptszg_vds.lua:32:\
    \ expected: {2, 3}\nactual: {1}\nstack traceback:\n\t/tmp/tmptszg_vds.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
