name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- generate_integers(2, 8) => [2,\
  \ 4, 6, 8]\n-- generate_integers(8, 2) => [2, 4, 6, 8]\n-- generate_integers(10,\
  \ 14) => []\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  assert(a <= b)\n  local result = {}\n  for i = a, b do\n    table.insert(result,\
    \ i)\n  end\n  table.sort(result)\n  return result\nend", "  -- Generate all integers\
    \ between a and b\n  local function generate_integer(a, b)\n    if a > b then\n\
    \      generate_integer(b, a)\n    end\n    local digits = math.floor((b - a)\
    \ / 10)\n    local remainder = (b - a) % 10\n    local result = {\n      a = a,\n\
    \      b = b,\n      digits = digits,\n      remainder = remainder,\n    }\n \
    \   if remainder > 0 then\n      table.insert(result, generate_integer(a + 1,\
    \ b))\n    end\n    return result\n  end\n  local result = {}\n  for i = a, b\
    \ do\n    table.insert(result, generate_integer(i, i))\n  end\n  return result\n\
    end", "  local results = {}\n  for i = a, b do\n    table.insert(results, i)\n\
    \  end\n  return results\nend", "  -- If b is greater than a, swap them.\n  if\
    \ b > a then\n    local t = a\n    a = b\n    b = t\n  end", "  local results\
    \ = {}\n  local current = a\n  while current <= b do\n    table.insert(results,\
    \ current)\n    current = current * 10 + 1\n  end\n  return results\nend", " \
    \ -- If b is greater than a, swap them.\n  if b > a then\n    local t = a\n  \
    \  a = b\n    b = t\n  end", "  assert(a <= b)\n  local results = {}\n  for i\
    \ = a, b do\n    table.insert(results, i)\n  end\n  table.sort(results)\n  return\
    \ results\nend", "  assert(a <= b)\n  local digits = {}\n  for i = a, b do\n \
    \   digits[i] = true\n  end\n  local i = 1\n  while i <= b do\n    digits[i] =\
    \ false\n    i = i * 10 + 1\n  end\n  table.sort(digits)\n  return digits\nend",
  "  local results = {}\n  for i = a, b do\n    table.insert(results, i)\n  end\n\
    \  return results\nend", "  assert(a <= b)\n  local digits = {}\n  local i = 0\n\
    \  while i <= a do\n    digits[i] = i\n    i = i + 1\n  end\n  i = a\n  while\
    \ i <= b do\n    digits[i] = i\n    i = i + 1\n  end\n  return digits\nend", " \
    \ -- We use an auxiliary function to avoid repeating ourselves.\n  local function\
    \ aux(a, b)\n    if a < b then\n      aux(b, a)\n    else\n      collect(a:gsub(\"\
    %d+\", function(c) return c * 10 end))\n    end\n  end\n  aux(a, b)\nend", " \
    \ -- Return an empty list if b is less than a.\n  if b < a then\n    return nil\n\
    \  end", "  local results = {}\n  local current = a\n  while current <= b do\n\
    \    local digit = math.floor(math.random() * 10)\n    if digit > 0 then\n   \
    \   table.insert(results, digit)\n    end\n    current = current + 1\n  end\n\
    \  return results\nend", "  -- If b is negative, swap it with the maximum value.\n\
    \  if b < 0 then\n    b = math.max(a, b)\n  end", "  local results = {}\n  local\
    \ i = 1\n  while i <= b do\n    local remainder = a % i\n    if remainder == 0\
    \ then\n      table.insert(results, i)\n      i = i + 1\n    end\n    a = a\n\
    \  end\n  return results\nend", "  local results = {}\n  for i = a, b do\n   \
    \ table.insert(results, i)\n  end\n  return results\nend", "  local results =\
    \ {}\n  for i = a, b do\n    table.insert(results, i)\n  end\n  return results\n\
    end", "  local results = {}\n  for i = a, b do\n    table.insert(results, i)\n\
    \  end\n  return results\nend", "  local results = {}\n  local current = a\n \
    \ while current <= b do\n    table.insert(results, current)\n    current = current\
    \ * 10 + 1\n  end\n  return results\nend", "  local results = {}\n  for i = a,\
    \ b do\n    table.insert(results, i)\n  end\n  return results\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
