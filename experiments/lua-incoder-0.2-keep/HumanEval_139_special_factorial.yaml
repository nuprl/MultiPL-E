name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
  -- 288\n-- The function will receive an integer as input and should return the special\n\
  -- factorial of this integer.\nlocal function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n\
    \  else\n    return n * special_factorial(n - 1)\n  end\nend", "  assert(n > 0,\
    \ \"The factorial of a negative number is not defined\")\n  local factorial =\
    \ 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n < 2 then return 1 end\n  return n * special_factorial(n\
    \ - 1)\nend", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n < 0 then\n    error(\"Negative factorial not allowed\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "  assert(n > 0, \"The factorial of a negative number\
    \ is not defined\")\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend", "  if n == 0 then\n    return\
    \ 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", "  if n < 0\
    \ then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "  if n < 2 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n == 0 then\n    return 1\n  elseif n == 1 then\n \
    \   return 1\n  else\n    return n * special_factorial(n - 1)\n  end\nend", " \
    \ if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend", "  if n < 0 then\n    error(\"\
    Negative factorial not allowed\")\n  end\n  local factorial = 1\n  for i = 1,\
    \ n do\n    factorial = factorial * i\n  end\n  return factorial\nend", "  if\
    \ n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local factorial\
    \ = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i =\
    \ 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
