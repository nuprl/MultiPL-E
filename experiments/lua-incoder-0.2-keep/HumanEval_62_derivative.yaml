name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative([3, 1, 2, 4, 5])\n-- [1, 4, 12, 20]\n-- >>> derivative([1, 2, 3])\n\
  -- [2, 6]\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local n = #xs\n  if n == 0 then\n    return {}\n  end\n  local ds\
    \ = {}\n  ds[1] = 1\n  for i = 2, n do\n    ds[i] = ds[i-1] * xs[i-1]\n  end\n\
    \  return ds\nend", "  if #xs == 0 then\n    return {}\n  elseif #xs == 1 then\n\
    \    return { xs[1] }\n  else\n    local ds = {}\n    for i = 1, #xs do\n    \
    \  ds[i] = xs[i + 1]\n    end\n    return ds\n  end\nend", "  if #xs == 0 then\n\
    \    return {}\n  end\n  local ds = {}\n  local x = xs[1]\n  ds[1] = xs[1]\n \
    \ for i = 2, #xs do\n    ds[i] = xs[i]\n  end\n  return ds\nend", "  local n =\
    \ 1\n  local d = 0\n  for i = 1, #xs do\n    d = d * xs[i] + n\n    n = n * xs[i]\n\
    \  end\n  return d\nend", "  local n = 1\n  local d = 0\n  for i = 1, #xs do\n\
    \    d = d * xs[i] + n\n    n = n * xs[i]\n  end\n  return d\nend", "  local n\
    \ = #xs\n  if n == 0 then\n    return {}\n  end\n  local ds = {}\n  ds[1] = 1\n\
    \  for i = 2, n do\n    ds[i] = ds[i-1] * xs[i-1]\n  end\n  return ds\nend", " \
    \ local n = 1\n  local d = 0\n  for i = 1, #xs do\n    local p = xs[i]\n    local\
    \ q = xs[n]\n    local r = p * q\n    local s = p + q\n    local t = r - s\n \
    \   local u = 1 / t\n    d = d + u * u\n    n = n + 1\n  end\n  return d\nend",
  "  if xs == nil then\n    return nil\n  end\n  local n = #xs\n  if n == 0 then\n\
    \    return nil\n  end\n  local d\n  if xs[1] == 0 then\n    d = {xs[1]}\n  else\n\
    \    d = {}\n  end\n  for i = 2, n do\n    local dd = {}\n    for j = 1, i do\n\
    \      table.insert(dd, xs[j] * d[j])\n    end\n    table.insert(d, dd)\n  end\n\
    \  return d\nend", "  local n = 1\n  local dxs = { xs[1] }\n  for i = 2, #xs do\n\
    \    local x = xs[i]\n    local dy = dxs[n]\n    dy = dy or 1\n    local dy_dx\
    \ = x * dy\n    dxs[i] = dy_dx\n    n = n + 1\n  end\n  return dxs\nend", "  if\
    \ xs == nil then return nil end\n  local n = #xs - 1\n  local result = {}\n  for\
    \ i = 1, n do\n    local x = xs[i]\n    local d = 1\n    for j = 1, n do\n   \
    \   if j == i then\n        continue\n      end\n      d = d * xs[j]\n    end\n\
    \    result[#result + 1] = d / x\n  end\n  return result\nend", "  local n = #xs\
    \ - 1\n  local d = 0\n  for i = 1, n do\n    local x = xs[i]\n    local p = xs[i\
    \ + 1]\n    d = d * x + p\n  end\n  return d\nend", "  local n = 1\n  local d\
    \ = 0\n  for i = 1, #xs do\n    local x = xs[i]\n    local p = n * x\n    n =\
    \ n + 2\n    d = d + p\n  end\n  return d\nend", "  local n = #xs - 1\n  local\
    \ result = {}\n  for i = 1, n do\n    local x = xs[i]\n    local d = 1\n    for\
    \ j = 1, n do\n      if j == i then\n        continue\n      end\n      d = d\
    \ * xs[j]\n    end\n    result[#result + 1] = d / x\n  end\n  return result\n\
    end", "  local n = 1\n  local d = 0\n  for i = 1, #xs do\n    local x = xs[i]\n\
    \    local p = n * x\n    n = n - 1\n    d = d + p\n  end\n  return d\nend", " \
    \ local n = 1\n  local result = {}\n  for i = 1, #xs do\n    local x = xs[i]\n\
    \    local d = x\n    for j = 1, n do\n      d = d * x\n    end\n    result[#result\
    \ + 1] = d / n\n    n = n + 1\n  end\n  return result\nend", "  if #xs == 0 then\n\
    \    return {}\n  end\n  local n = #xs - 1\n  local d = {}\n  for i = 1, n do\n\
    \    local x = xs[i]\n    local y = xs[i + 1]\n    d[i] = y * (x - 1)\n  end\n\
    \  return d\nend", "  if xs == nil then return nil end\n  if #xs == 0 then return\
    \ [] end\n  local dp = xs[1]\n  local dd = derivative(xs[2])\n  local dc = derivative(xs[3])\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = dd[1]\n  local dc = dc[1]\n\
    \  local dd = dd[1]\n  local dc = dc[1]\n  local dd = ", "  local d = 0\n  for\
    \ i = 1, #xs do\n    d = d * xs[i]\n  end\n  return d\nend", "  local d = 0\n\
    \  local n = #xs\n  for i = 1, n do\n    local p = xs[i]\n    local q = xs[i +\
    \ 1]\n    d = d * p + q\n  end\n  return d\nend", "  local d = 0\n  for i = 1,\
    \ #xs do\n    local x = xs[i]\n    local xp = xs[i + 1]\n    d = d * x + xp\n\
    \  end\n  return d\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
