name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given an array arr of integers and you need to return\n-- sum\
  \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
  \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
  -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1]) ==\
  \ 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #arr == 0 then return nil end\n  local sign = 1\n  local product\
    \ = 1\n  for i = 1, #arr do\n    product = product * sign\n    sign = sign * arr[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign =\
    \ sign * arr[i]\n    product = product * sign\n  end\n  return product\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product =\
    \ 1\n  for i = 1, #arr do\n    product = product * sign\n    sign = sign * arr[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for i\
    \ = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  for i = 1, #arr do\n    sign = sign * math.abs(arr[i])\n  end\n  return\
    \ sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n \
    \   product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", " \
    \ if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + math.abs(arr[i]) * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr\
    \ do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n  return\
    \ product\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n  for\
    \ i = 1, #arr do\n    sign = sign * math.abs(arr[i])\n  end\n  return sign\nend",
  "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign\
    \ * v\n      sign = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local x = arr[i]\n    if x ~= 0 then\n      sum = sum + x * sign\n\
    \    end\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr\
    \ do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n  return\
    \ product\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i]) * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * math.abs(arr[i])\n\
    \  end\n  return sign\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
