name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n\
  -- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x =\
    \ l[i]\n    local y = l[j]\n    if x < y then\n      return false\n    end\n \
    \   if x > y then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend", "  local function is_decreasing(v)\n    return v\
    \ < l[1]\n  end\n  local function is_increasing(v)\n    return v > l[1]\n  end\n\
    \  local function is_monotonic(v)\n    return is_decreasing(v) or is_increasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return v == l[1]\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v == l[1]\n  end\n  local\
    \ function is_strictly_monotonic(v)\n    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n    return\
    \ v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decre", "  local i\
    \ = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l do\n  \
    \  local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~= 0 then\n\
    \      if x > y then\n        if w > m then\n          m = w\n        end\n  \
    \    else\n        if w < m then\n          m = w\n        end\n      end\n  \
    \  end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return m == 0\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[2]\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ k = i\n    while k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n \
    \   if k > i then\n      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n \
    \   j = j - 1\n  end\n  return i == 1\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n\
    \ do\n      if l[m] < l[n] then\n        return false\n      elseif l[m] > l[n]\
    \ then\n        return true\n      else\n        local m = m + 1\n        local\
    \ n = n + 1\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag\
    \ = true\n  local last_monotonic_flag = false\n  local last_monotonic_value =\
    \ 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <=\
    \ n do\n    local x = l[i]\n    if i == 1 then\n      k = x\n      m = x\n   \
    \ else\n      if x < l[j] then\n        k = x\n      else\n        if x > l[k]\
    \ then\n          m = x\n        else\n          k = x\n        end\n      end\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <= k\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n    \
    \  local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n  \
    \    j = j - 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n     \
    \ i = i + 1\n    end\n  end\n  return i == j\nend", "  local function helper(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if l[i] < l[j] then\n\
    \      return helper(l, i + 1, j)\n    else\n      return helper(l, i, j - 1)\n\
    \    end\n  end\n  return helper(l, 1, #l)\nend", "  local i = 1\n  local j =\
    \ #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <=\
    \ n do\n      if l[m] < l[n] then\n        j = m\n      else\n        i = m\n\
    \      end\n      m = m + 1\n      n = n + 1\n    end\n  end\n  return i == j\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ 1\n    local n = j + 1\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  return false\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n      return\
    \ false\n    end\n    if l[i-1] < l[i] then\n      return true\n    end\n    i\
    \ = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - j\n    if l[m] < l[i] then return false end\n \
    \   if l[m] > l[i] then return true end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return false\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i]\
    \ then return false end\n      if l[m] > l[i] then return true end\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n  end\n  return\
    \ i <= j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i - j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then\
    \ return true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = 1\n  local n = #l\n  while i < n do\n    local x = l[i]\n\
    \    local y = l[j]\n    local w = l[k]\n    if x > y then\n      if w < x then\n\
    \        j = k\n      else\n        i = k\n      end\n    elseif x < y then\n\
    \      if w > x then\n        k = k + 1\n      else\n        i = i + 1\n     \
    \ end\n    else\n      if w == x then\n        i = i + 1\n      else\n       \
    \ k = k + 1\n      end\n    end\n    m = m + 1\n  end\n  return m == n\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n  local\
    \ max_val = l[1]\n  local min_val = l[1]\n  while i <= #l do\n    local val =\
    \ l[i]\n    if val > max_val then\n      max_val = val\n      j = i\n    elseif\
    \ val < min_val then\n      min_val = val\n      k = i\n    end\n    i = i + 1\n\
    \    if i == #l then\n      if max_val > min_val then\n        monotonic_flag\
    \ = false\n      end\n      break\n    end\n  end\n  return monotonic_flag\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n\
    \  local last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to ", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] > l[j]\
    \ then\n      i = m\n    end\n  end\n  return i <= j\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local k = l[i]\n    if k < l[j] then\n\
    \      j = k\n    else\n      i = k + 1\n    end\n  end\n  return i <= j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j =\
    \ m\n    else\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n    local\
    \ m = l[j]\n    if m > k then\n      return false\n    end\n    if m == k then\n\
    \      if i == j then\n        return true\n      end\n      i = i + 1\n     \
    \ j = j - 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while\
    \ i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n    \
    \  return false\n    end\n    k = k + 1\n    if k > 1 then\n      if m ~= l[k\
    \ - 1] then\n        return false\n      end\n    end\n    i = i + 1\n    j =\
    \ j + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local m = l[i]\n\
    \    local n = l[j]\n    if m > n then\n      k = k + 1\n    elseif m == n then\n\
    \      if k ~= 1 then\n        return false\n      end\n      i = i + 1\n    \
    \  j = j + 1\n    else\n      k = k + 1\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j =\
    \ m\n    else\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m]\
    \ ~= l[i] then\n      if l[m] > l[i] then\n        j = m\n      else\n       \
    \ i = m\n      end\n    else\n      i = i + 1\n      j = j - 1\n    end\n  end\n\
    \  return i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    if l[i] < l[j] then\n      i = i + 1\n    elseif l[i] > l[j] then\n     \
    \ j = j - 1\n    else\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      k = k + 1\n      if k\
    \ > 1 then\n        j = j + 1\n      end\n      i = i + 1\n    end\n    i = i\
    \ + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k =\
    \ 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    k = k + 1\n \
    \   if l[i] > m then\n      m = l[i]\n    end\n    if l[i] < n then\n      n =\
    \ l[i]\n    end\n    i = i + 1\n  end\n  return m <= n\nend", "  if #l == 0 then\
    \ return false end\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last\
    \ then return false end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while\
    \ i < #l do\n    k = i\n    while k < #l and l[k] < m do\n      k = k + 1\n  \
    \  end\n    if k > i then\n      m = l[i]\n      n = l[k]\n      i = k\n    end\n\
    \  end\n  return n == m\nend", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local monotonic = nil\n  local last_monotonic = nil\n  local last_monotonic_i\
    \ = nil\n  local last_monotonic_j = nil\n  local last_monotonic_k = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_m = nil\n  local last_monotonic_n\
    \ = nil\n  local last_monotonic_o = nil\n  local last_monotonic_d = nil\n  local\
    \ last_monotonic_r = nil\n  local last_monotonic_p = nil\n  local last_monotonic_f\
    \ = nil\n  local last_monotonic_c = nil\n  local last_monotonic_a = nil\n  local\
    \ last_monotonic_b = nil\n  local last_monotonic_c = nil\n  local last_monotonic_d\
    \ = nil\n  local last_monotonic_f = nil\n  local last_monotonic_p = nil\n  local\
    \ last_monotonic_r = 0\n  local last_monotonic_n = 0\n  local last_monotonic_o\
    \ = 0\n  local last_monotonic_d = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b\
    \ = 0\n  local last_monotonic_a = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p\
    \ = 0\n  local last_monotonic_r = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o\
    \ = 0\n  local last_monotonic_d = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b\
    \ = 0\n  local last_monotonic_a = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p\
    \ = 0\n  local last_monotonic_r = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o\
    \ = 0\n  local last_monotonic_d = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b\
    \ = 0\n  local last_monotonic_a = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p\
    \ = 0\n  local last_monotonic_r = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o\
    \ = 0\n  local last_monotonic_d = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b\
    \ = 0\n  local last_monotonic_a = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p\
    \ = 0\n  local last_monotonic_r = nil\n  local last_monot", "  local i = 1\n \
    \ local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n\
    \    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x > y then\n\
    \      if x < z then\n        return false\n      else\n        return true\n\
    \      end\n    else\n      if x > z then\n        return true\n      else\n \
    \       if y < z then\n          return false\n        else\n          return\
    \ true\n        end\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k =\
    \ k + 1\n    m = m + 1\n  end\n  return false\nend", "  if #l == 0 then\n    return\
    \ true\n  end\n  local first = l[1]\n  for i = 2, #l do\n    if l[i] < first then\n\
    \      return false\n    end\n    first = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n   \
    \ local y = l[j]\n    if x < y then\n      i = i + 1\n    elseif x > y then\n\
    \      j = j - 1\n    else\n      return true\n    end\n  end\n  return false\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while\
    \ i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n   \
    \ if w ~= 0 then\n      if x >= y then\n        if w > 0 then\n          return\
    \ false\n        else\n          k = k + 1\n        end\n      else\n        if\
    \ w < 0 then\n          return false\n        else\n          k = k + 1\n    \
    \    end\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    i = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i]\
    \ > l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend", "  if #l ==\
    \ 0 then return false end\n  local i = 1\n  local lastVal = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= lastVal then\n      return false\n    end\n    lastVal\
    \ = l[i]\n  end\n  return true\nend", "  local prev = {}\n  for _, v in ipairs(l)\
    \ do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if not prev[v]\
    \ then\n      return false\n    end\n    prev[v] = false\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then return\
    \ true end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while\
    \ i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n    \
    \  return false\n    end\n    if m == n then\n      i = i + 1\n      j = j + 1\n\
    \    else\n      k = k + 1\n      if k > #l then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[n] then\n        j = m\n      else\n        i = n\n      end\n      n =\
    \ n - 1\n    end\n    if i <= j then\n      j = j - 1\n    end\n    i = i + 1\n\
    \  end\n  return i <= j\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[i] then return false end\n      if l[m] > l[i] then return true end\n  \
    \    m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return false\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n\
    \    if k ~= nil then\n      if k < l[j] then\n        j = k\n      else\n   \
    \     i = k\n      end\n    end\n    i = i + 1\n  end\n  return i == j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m] < l[i] then\
    \ return false end\n    if l[m] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend", "  if #l == 0 then return false end\n\
    \  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = 1\n  local k = 1\n  local monotonic = true -- Default to true\n \
    \ local max_i = #l + 1\n  local max_j = #l + 1\n  while i <= max_i and j <= max_j\
    \ do\n    if l[i] < l[j] then\n      k = i\n      i = i + 1\n    elseif l[i] >\
    \ l[j] then\n      k = j\n      j = j + 1\n    else\n      -- If l[i] == l[j],\
    \ then we know that l[i] < l[j] so l[i] < l[k] so l[i] < l[k+1]\n      -- If l[i]\
    \ < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n      -- If l[i]\
    \ > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n      -- If l[i]\
    \ > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n      -- If l[i]\
    \ < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n      -- If l[i]\
    \ < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n      -- If l[i]\
    \ > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n      -- If l[i]\
    \ > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n      -- If l[i]\
    \ == l[k], then we know that l[i] < l[k] so l[i] < l[k+1] so l[i] < l[k+2]\n \
    \     -- If l[i] < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] < l[k], then l[i] < ", "  if #l == 0 then return false end\n\
    \  local first = l[1]\n  for i = 2, #l do\n    if l[i] < first then return false\
    \ end\n    first = l[i]\n  end\n  return true\nend", "  local i = 1\n  local j\
    \ = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <=\
    \ n do\n      if l[m] < l[n] then\n        j = m\n      else\n        i = m\n\
    \      end\n      m = m + 1\n      n = n - 1\n    end\n    if i < j then\n   \
    \   j = i\n    end\n    i = i + 1\n  end\n  return i <= j\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m] <\
    \ l[i] then return false end\n    if l[m] > l[i] then return true end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j\
    \ = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while\
    \ m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n        l[m] =\
    \ l[n]\n        l[n] = t\n      else\n        local t = l[m]\n        l[m] = l[n]\n\
    \        l[n] = t\n      end\n      m = m + 1\n      n = n - 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n   \
    \ local x = l[i]\n    if i == 1 then\n      k = x\n      m = x\n      j = x\n\
    \    elseif j > x then\n      k = x\n      m = x\n      j = x\n    elseif j <\
    \ x then\n      k = x\n      m = x\n      j = x\n    elseif m > x then\n     \
    \ k = x\n      m = x\n      j = x\n    elseif m == x then\n      if k <= x then\n\
    \        i = i + 1\n      else\n        i = i - 1\n      end\n    end\n  end\n\
    \  return m <= l[1]\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic = true -- Default to true\n  local last_monotonic = true -- Default\
    \ to true\n  local last_monotonic_i = 1 -- Default to 1\n  local last_monotonic_j\
    \ = 1 -- Default to 1\n  local last_monotonic_k = 1 -- Default to 1\n  local last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    local x = l[i]\n    local y = l[j]\n    if x > y\
    \ then\n      return false\n    elseif x < y then\n      return true\n    else\n\
    \      i = i + 1\n      j = j - 1\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while\
    \ i < #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if\
    \ x < y then\n      if x < z then\n        m = x\n      else\n        n = x\n\
    \      end\n    else\n      if y < z then\n        m = y\n      else\n       \
    \ n = y\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n\
    \  return m <= n\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ m = 1\n  local n = #l\n  while i <= n do\n    while j <= m do\n      if l[j]\
    \ < l[i] then\n        local t = l[j]\n        l[j] = l[i]\n        l[i] = t\n\
    \        j = j + 1\n      else\n        j = j + 1\n      end\n    end\n    i =\
    \ i + 1\n    k = k + 1\n    m = m + 1\n  end\n  return k > n\nend", "  local i\
    \ = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local m = j\n\
    \    while m > k do\n      if l[k] < l[m] then return false end\n      k = k +\
    \ 1\n      m = m - 1\n    end\n    if l[k] > l[m] then return true end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local monotonic = nil\n  local is_decreasing = false\n\
    \  local is_increasing = false\n  local is_monotonic = false\n  local is_decreasing_or_nondecreasing\
    \ = false\n  local is_increasing_or_nonincreasing = false\n  local is_monotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic = false\n  local is_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing = false\n\
    \  local is_nonmonotonic_or_nonmonotonic_or_nonincreasing = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonot",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x > z then\n        m = x\n      else\n        n\
    \ = y\n      end\n    elseif x < y then\n      if x < z then\n        m = y\n\
    \      else\n        n = z\n      end\n    else\n      if x > z then\n       \
    \ m = z\n      else\n        n = x\n      end\n    end\n    i = i + 1\n    j =\
    \ j + 1\n    k = k + 1\n  end\n  return m <= n\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = i\n    while k < j do\n      if\
    \ l[k] < l[i] then\n        i, k = k, k + 1\n      elseif l[k] > l[i] then\n \
    \       j = k\n      else\n        return false\n      end\n    end\n    if i\
    \ < j then\n      i = i + 1\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n    local\
    \ y = l[j]\n    if x > y then\n      return false\n    end\n    if i == j then\n\
    \      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[2]\n  while\
    \ i <= n do\n    if l[i] < m then\n      k = k + 1\n      m = l[i]\n    elseif\
    \ l[i] > m then\n      j = j + 1\n      m = l[i]\n    end\n    i = i + 1\n  end\n\
    \  return k == j\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic_flag = true\n  local last_element = l[1]\n  for i = 2, #l do\n   \
    \ if l[i] ~= last_element then\n      k = j\n      j = i\n    end\n    last_element\
    \ = l[i]\n    if k - j > 1 then\n      monotonic_flag = false\n    end\n  end\n\
    \  return monotonic_flag\nend", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local monotonic_flag = true\n  local max_val = l[1]\n  local min_val = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > max_val then\n      max_val = l[i]\n    end\n\
    \    if l[i] < min_val then\n      min_val = l[i]\n    end\n    if l[i] ~= l[j]\
    \ then\n      monotonic_flag = false\n    end\n    j = i\n  end\n  return monotonic_flag\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m]\
    \ ~= l[i] or l[m] ~= l[j] then\n      return false\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local m =\
    \ l[i]\n    local n = l[j]\n    if m > n then\n      k = k + 1\n    elseif m ==\
    \ n then\n      if m ~= 0 then\n        k = k + 1\n      end\n      i = i + 1\n\
    \      j = j + 1\n    else\n      k = k + 1\n    end\n  end\n  return k == #l\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then return\
    \ true end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n    \
    \  local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n  \
    \    j = j - 1\n    elseif l[i] > l[j] then\n      j = j + 1\n    else\n     \
    \ i = i + 1\n    end\n  end\n  return i == j\nend", "  local prev\n  for _, v\
    \ in ipairs(l) do\n    if prev == nil then\n      prev = v\n      continue\n \
    \   end\n    if prev < v then\n      return false\n    end\n    prev = v\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i]\
    \ then return false end\n      if l[m] > l[i] then return true end\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n  \
    \  local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while\
    \ i <= #l do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      if\
    \ k > 1 then\n        local m = l[j]\n      end\n    else\n      k = k - 1\n \
    \     if k < 1 then\n        local m = l[j]\n      end\n    end\n    i = i + 1\n\
    \    j = j + 1\n  end\n  return k == 0\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local k = i\n    while k <= j and l[k] < l[k + 1]\
    \ do\n      k = k + 1\n    end\n    if k > i then\n      l[i], l[k] = l[k], l[i]\n\
    \      i = i + 1\n    end\n    j = j - 1\n  end\n  return i == j\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while\
    \ i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if\
    \ x > y then\n      if x < z then\n        return false\n      else\n        return\
    \ true\n      end\n    else\n      if x > z then\n        return true\n      else\n\
    \        return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k\
    \ = k + 1\n    m = m + 1\n  end\n  return true\nend", "  local prev = {}\n  for\
    \ _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n\
    \    if not prev[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local\
    \ n = l[1]\n  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if\
    \ m > n then\n      return false\n    end\n    if m == n then\n      if m ~= 0\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j + 1\n  \
    \    k = k + 1\n    else\n      if m > n then\n        j = j + 1\n      else\n\
    \        i = i + 1\n      end\n      k = k + 1\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n =\
    \ #l\n  local p = 1\n  local q = 1\n  local r = 1\n  local s = 1\n  local t =\
    \ 1\n  local u = 1\n  local v = 1\n  local w = 1\n  local x = 1\n  local y = 1\n\
    \  local z = 1\n  local a = l[1]\n  local b = l[2]\n  local c = l[3]\n  local\
    \ d = l[4]\n  local e = l[5]\n  local f = l[6]\n  local g = l[7]\n  local h =\
    \ l[8]\n  local i = l[9]\n  local j = l[10]\n  local k = l[11]\n  local l = l[12]\n\
    \  local m = l[13]\n  local n = l[14]\n  local p = l[15]\n  local q = l[16]\n\
    \  local r = l[17]\n  local s = l[18]\n  local t = l[19]\n  local u = l[20]\n\
    \  local v = l[21]\n  local w = l[22]\n  local x = l[23]\n  local y = l[24]\n\
    \  local z = l[25]\n  local a = l[26]\n  local b = l[27]\n  local c = l[28]\n\
    \  local d = l[29]\n  local e = l[30]\n  local f = l[31]\n  local g = l[32]\n\
    \  local h = l[33]\n  local i = l[34]\n  local j = l[35]\n  local k = l[36]\n\
    \  local l = l[37]\n  local m = l[38]\n  local n = l[39]\n  local p = l[40]\n\
    \  local q = l[41]\n  local r = l[42]\n  local s = l[43]\n  local t = l[44]\n\
    \  local u = l[45]\n  local v = l[46]\n  local w = l[47]\n  local x = l[48]\n\
    \  local y = l[49]\n  local z = l[50]\n  local a = l[51]\n  local b = l[52]\n\
    \  local c = l[53]\n  local d = l[54]\n  local e = l[55]\n  local f = l[56]\n\
    \  local g = l[57]\n  ", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic_flag = true\n  local monotonic_flag2 = true\n  local monotonic_flag3\
    \ = true\n  local monotonic_flag4 = true\n  local monotonic_flag5 = true\n  local\
    \ monotonic_flag6 = true\n  local monotonic_flag7 = true\n  local monotonic_flag8\
    \ = true\n  local monotonic_flag9 = true\n  local monotonic_flag10 = true\n  local\
    \ monotonic_flag11 = true\n  local monotonic_flag12 = true\n  local monotonic_flag13\
    \ = true\n  local monotonic_flag14 = true\n  local monotonic_flag15 = true\n \
    \ local monotonic_flag16 = true\n  local monotonic_flag17 = true\n  local monotonic_flag18\
    \ = true\n  local monotonic_flag19 = true\n  local monotonic_flag20 = true\n \
    \ local monotonic_flag21 = true\n  local monotonic_flag22 = true\n  local monotonic_flag23\
    \ = true\n  local monotonic_flag24 = true\n  local monotonic_flag25 = true\n \
    \ local monotonic_flag26 = true\n  local monotonic_flag27 = true\n  local monotonic_flag28\
    \ = true\n  local monotonic_flag29 = true\n  local monotonic_flag30 = true\n \
    \ local monotonic_flag31 = true\n  local monotonic_flag32 = true\n  local monotonic_flag33\
    \ = true\n  local monotonic_flag34 = true\n  local monotonic_flag35 = true\n \
    \ local monotonic_flag36 = true\n  local monotonic_flag37 = true\n  local monotonic_flag38\
    \ = true\n  local monotonic_flag39 = true\n  local monotonic_flag40 = true\n \
    \ local monotonic_flag41 = true\n  local monotonic_flag42 = true\n  local monotonic_flag43\
    \ = true\n  local monotonic_flag44 = true\n  local monotonic_flag45 = true\n \
    \ local monotonic_flag46 = true\n  local monotonic_flag47 = true\n  local monotonic_flag48\
    \ = true\n  local monotonic_flag49 = true\n  local monotonic_flag50 = true\n \
    \ local monotonic_flag51 = true\n  local monotonic_flag52 = true\n  local monotonic_flag53\
    \ = true\n  local monotonic_flag54 = true\n  local monot", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while\
    \ m <= n do\n      if l[m] < l[n] then\n        return false\n      elseif l[m]\
    \ > l[n] then\n        return true\n      else\n        local m = m + 1\n    \
    \    n = n + 1\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n      i = i + 1\n  \
    \  elseif l[i] > l[j] then\n      j = j - 1\n    else\n      return false\n  \
    \  end\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local k = i\n    local m = j\n    while m > k do\n      if l[k]\
    \ < l[m] then\n        local t = l[k]\n        l[k] = l[m]\n        l[m] = t\n\
    \      end\n      k = k + 1\n      m = m - 1\n    end\n    i = i + 1\n    j =\
    \ j - 1\n  end\n  return l[1] < l[#l]\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n\
    \ do\n      if l[m] < l[i] then\n        local t = l[m]\n        l[m] = l[i]\n\
    \        l[i] = t\n        i = m + 1\n      elseif l[m] > l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n        j = m - 1\n      else\n\
    \        i = m + 1\n      end\n      m = m + 1\n    end\n    i = i + 1\n  end\n\
    \  return i == j\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ m = 1\n  local n = #l\n  while i <= n do\n    local m = i - k\n    local j =\
    \ i - m\n    if l[j] < l[m] then\n      k = j\n    else\n      i = m\n    end\n\
    \  end\n  return l[k] < l[1]\nend", "  local i = 1\n  local j = 1\n  local k =\
    \ 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local m = l[i]\n\
    \    local n = l[j]\n    local k = k + 1\n    if m > n then\n      l[j] = m\n\
    \      l[k] = n\n      i = i + 1\n      j = j + 1\n    elseif m == n then\n  \
    \    if m ~= l[j] then\n        l[j] = m\n      end\n      i = i + 1\n      j\
    \ = j + 1\n    else\n      if m > l[j] then\n        l[j] = m\n      end\n   \
    \   i = i + 1\n      j = j + 1\n    end\n  end\n  return l[1] < l[2]\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if\
    \ l[i] < l[j] then\n      j = i\n    end\n  end\n  return i == j\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n \
    \   j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j] then i\
    \ = j end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = l[1]\n  while i <= #l do\n    local v = l[i]\n    if v <\
    \ m then\n      k = k + 1\n      if k > 1 then\n        if l[j] < m then\n   \
    \       j = j + 1\n        else\n          k = k - 1\n        end\n      end\n\
    \    end\n    if v > m then\n      k = k - 1\n      if k < 1 then\n        if\
    \ l[j] > m then\n          j = j + 1\n        else\n          k = k + 1\n    \
    \    end\n      end\n    end\n    i = i + 1\n  end\n  return j == 1\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n - 1\n    end\n\
    \    if i < j then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ m = 1\n  local n = #l\n  while i <= n do\n    local x = l[i]\n    local y =\
    \ l[j]\n    local z = l[k]\n    if x < y then\n      if x < z then\n        j\
    \ = k\n      else\n        k = k + 1\n      end\n    elseif x > y then\n     \
    \ if x > z then\n        i = i + 1\n      else\n        k = k + 1\n      end\n\
    \    else\n      if x == y then\n        j = k\n      else\n        k = k + 1\n\
    \      end\n    end\n    if m > k then\n      m = k\n    end\n  end\n  return\
    \ m == k\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n   \
    \     j = n\n      elseif l[m] > l[n] then\n        i = m\n      else\n      \
    \  return true\n      end\n      n = m\n    end\n    i = m\n  end\n  return false\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local\
    \ n = l[1]\n  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if\
    \ m > n then\n      return false\n    end\n    if m == n then\n      if m ~= 0\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j + 1\n  \
    \  else\n      if m > n then\n        j = j + 1\n      else\n        i = i + 1\n\
    \      end\n    end\n    k = k + 1\n  end\n  return true\nend", "  local function\
    \ helper(l, low, high)\n    if low > high then\n      return false\n    end\n\
    \    if low == high then\n      return true\n    end\n    local mid = math.floor((low\
    \ + high) / 2)\n    return helper(l, low, mid) or helper(l, mid + 1, high)\n \
    \ end\n  return helper(l, 0, #l - 1)\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    if l[i] < l[j] then\n      local tmp = l[i]\n      l[i]\
    \ = l[j]\n      l[j] = tmp\n      i = i + 1\n      j = j - 1\n    elseif l[i]\
    \ > l[j] then\n      i = i + 1\n    else\n      j = j - 1\n    end\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if\
    \ l[i] < l[j] then return false end\n    if l[i] > l[j] then return true end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i < #l do\n\
    \    k = l[i]\n    if m > k then\n      m = k\n      n = l[j]\n      j = i\n \
    \   elseif n < k then\n      n = k\n      m = l[j]\n      j = i\n    end\n   \
    \ i = i + 1\n  end\n  return m > n\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local monotonic = true -- Default to true\n  local last_monotonic =\
    \ true -- Default to true\n  local last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k = 1 -- Default\
    \ to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_l = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic_i = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_j = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_k = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_l = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to ", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[n]\
    \ then\n        return false\n      elseif l[m] > l[n] then\n        return true\n\
    \      else\n        m = m + 1\n        n = n + 1\n      end\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j\
    \ = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if l[i]\
    \ < l[j] then\n      j = m\n    end\n  end\n  return i == j\nend", "  local i\
    \ = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default to true\n\
    \  local is_decreasing = true -- Default to true\n  local is_increasing = true\
    \ -- Default to true\n  local last_element = l[1]\n  local last_element_is_decreasing\
    \ = true\n  local last_element_is_increasing = true\n  local last_element_is_decreasing_or_nondecreasing\
    \ = true\n  local last_element_is_increasing_or_nonincreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nondecreasing_or_nonincreasing = true\n  local last_element_is_nonincreasing_or_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nonincreasing_or_nondecreasing = true\n  local last_element_is_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nonincreasing_or_nondecreasing = true\n  local last_element_is_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_non", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n   \
    \ local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x < y then\n\
    \      if x < z then\n        return false\n      else\n        k = k + 1\n  \
    \    end\n    elseif x > y then\n      if x > z then\n        return false\n \
    \     else\n        k = k + 1\n      end\n    else\n      if x == y then\n   \
    \     if x == z then\n          return false\n        else\n          i = i +\
    \ 1\n          j = j + 1\n          k = k + 1\n        end\n      else\n     \
    \   if x == z then\n          return false\n        else\n          i = i + 1\n\
    \          j = j + 1\n          k = k + 1\n        end\n      end\n    end\n \
    \ end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j\
    \ do\n    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[i] then return false end\n      if l[m] > l[i] then return true end\n  \
    \    m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true --\
    \ Default to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local m =\
    \ l[i]\n    local n = l[j]\n    if m ~= n then\n      if m > n then\n        return\
    \ false\n      elseif m < n then\n        return true\n      else\n        return\
    \ false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n\
    \    end\n    if l[i] > l[j] then\n      i = j\n    end\n  end\n  return i ==\
    \ 1\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local\
    \ n = #l\n  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local\
    \ z = l[k]\n    if x < y then\n      if x < z then\n        j = k\n      else\n\
    \        k = k + 1\n      end\n    elseif x > y then\n      if x > z then\n  \
    \      i = i + 1\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x == y then\n        j = k\n      else\n        k = k + 1\n      end\n    end\n\
    \    if i == n then\n      if j == m then\n        return true\n      else\n \
    \       return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    m\
    \ = m + 1\n  end\n  return false\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n    local x = l[i]\n\
    \    local y = l[j]\n    local z = l[k]\n    if x == y then\n      if i == j then\n\
    \        k = k + 1\n      elseif i == k then\n        k = k + 1\n      elseif\
    \ j == k then\n        k = k + 1\n      else\n        i = i + 1\n        j = j\
    \ + 1\n      end\n    elseif x > y then\n      if i == j then\n        k = k +\
    \ 1\n      elseif i == k then\n        k = k + 1\n      elseif j == k then\n \
    \       k = k + 1\n      else\n        i = i + 1\n        j = j + 1\n      end\n\
    \    else\n      if i == j then\n        k = k + 1\n      elseif i == k then\n\
    \        k = k + 1\n      elseif j == k then\n        k = k + 1\n      else\n\
    \        i = i + 1\n        j = j + 1\n      end\n    end\n    if m > k then\n\
    \      m = m\n    else\n      m = k\n    end\n  end\n  return m == k\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[j-1] < l[i] then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i\
    \ = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n      i\
    \ = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local prev = -1\n  for _, v in\
    \ ipairs(l) do\n    if prev < v then\n      return false\n    end\n    prev =\
    \ v\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local m = l[1]\n  local n = l[1]\n  local o = l[1]\n  while i <= #l do\n  \
    \  local m = l[i]\n    local n = l[j]\n    local o = l[k]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      if o > m then\n      \
    \  return false\n      end\n      if o < m then\n        return true\n      end\n\
    \    end\n    if m > o then\n      return true\n    end\n    if m < o then\n \
    \     return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n\
    \  return false\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local k = l[i]\n    if k == nil then\n      k = l[j]\n      j = j - 1\n \
    \   end\n    if k == nil then\n      return false\n    end\n    if k > l[i] then\n\
    \      i = i + 1\n    elseif k < l[i] then\n      j = j - 1\n    else\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i < #l do\n    local\
    \ m = l[i]\n    local n = l[j]\n    local k = k + 1\n    if m > n then\n     \
    \ i = i + 1\n      j = j + 1\n    elseif m < n then\n      j = j + 1\n    elseif\
    \ m == n then\n      if k < 2 then\n        return true\n      else\n        i\
    \ = i + 1\n        j = j + 1\n      end\n    end\n  end\n  return false\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j\
    \ = 1\n  local k = 1\n  local monotonic = true -- Default to true\n  local last_monotonic\
    \ = true -- Default to true\n  local last_monotonic_i = nil -- Default to nil\n\
    \  local last_monotonic_j = nil -- Default to nil\n  local last_monotonic_k =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to ", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    local x = l[i]\n    local y = l[j]\n    if x < y\
    \ then\n      return false\n    end\n    if x > y then\n      return true\n  \
    \  end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while\
    \ i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n   \
    \ if x > y then\n      if x > z then\n        return false\n      else\n     \
    \   k = k + 1\n      end\n    elseif x < y then\n      if x < z then\n       \
    \ return false\n      else\n        k = k + 1\n      end\n    else\n      if x\
    \ == y then\n        if x == z then\n          return false\n        else\n  \
    \        k = k + 1\n        end\n      else\n        if x > z then\n         \
    \ return false\n        else\n          k = k + 1\n        end\n      end\n  \
    \  end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default to true\n\
    \  local last_monotonic = true -- Default to true\n  local last_monotonic_i =\
    \ nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n  local\
    \ last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to ", "  if\
    \ #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] < first then\n      return false\n    end\n    first = l[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ m = 1\n  local n = #l\n  while i <= n do\n    while j <= n do\n      if l[j]\
    \ < l[j - 1] then\n        local temp = l[j]\n        l[j] = l[j - 1]\n      \
    \  l[j - 1] = temp\n      end\n      j = j + 1\n    end\n    i = i + 1\n    k\
    \ = k + 1\n    if k > m then\n      m = k\n    end\n  end\n  return m == n\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j] then\
    \ i = j end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local monotonic = true -- default return value\n  local last_monotonic\
    \ = true -- default return value\n  local last_monotonic_i = nil -- default return\
    \ value\n  local last_monotonic_j = nil -- default return value\n  local last_monotonic_k\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return ",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while\
    \ i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if\
    \ x > y then\n      if x < z then\n        j = k\n      else\n        i = k\n\
    \      end\n    elseif x < z then\n      k = j\n    else\n      i = j\n    end\n\
    \    m = m + 1\n  end\n  return m == n\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i - j\n    if l[m] ~= l[i] then\n      return\
    \ false\n    end\n    if l[m] > l[i] then\n      j = m\n    else\n      i = m\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local m = l[1]\n  local n = l[1]\n  while i < #l do\n    local m = l[i]\n\
    \    local n = l[j]\n    if m > n then\n      k = k + 1\n    elseif m < n then\n\
    \      k = k - 1\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return k ==\
    \ 0\nend", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ ~= last then\n      return false\n    end\n    last = l[i]\n  end\n  return\
    \ true\nend", "  local function is_decreasing(t)\n    return t ~= nil and t >\
    \ 0 and t <= l[#l]\n  end\n  local function is_increasing(t)\n    return t ~=\
    \ nil and t > 0 and t >= l[#l]\n  end\n  local function is_monotonic(t)\n    return\
    \ is_decreasing(t) or is_increasing(t)\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increas",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = True\n  local\
    \ last_monotonic = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j\
    \ = nil\n  local last_monotonic_k = nil\n  local last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_i = nil\n  local last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_k = nil\n  local last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_i = nil\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_j = nil\n  local last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_i =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_j =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_k =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monoton", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    if l[i] < l[j] then\n      local tmpi = i\n    \
    \  i = j\n      j = tmpi\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x == m and y == m and w == m then\n      i = i + 1\n      j = j + 1\n\
    \      k = k + 1\n      m = l[i]\n    elseif x < m then\n      i = i + 1\n   \
    \ elseif y < m then\n      j = j + 1\n    elseif w < m then\n      k = k + 1\n\
    \    end\n  end\n  return i <= #l and j <= #l and k <= #l\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local k = j\n\
    \    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n    \
    \    l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend", "  local i = 1\n\
    \  local j = 1\n  local k = 1\n  local monotonic = true -- Default to true\n \
    \ local last_monotonic = true -- Default to true\n  local last_monotonic_i = 1\
    \ -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_monotonic_i = 1 -- Default\
    \ to 1\n  local last_monotonic_monotonic_j = 1 -- Default to 1\n  local last_monotonic_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_monotonic_l = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic = true -- Default to true\n  local last_monotonic_last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_j = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_k = 1 -- Default to 1\n  local last_monotonic_last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_monotonic = true\
    \ -- Default to true\n  local last_monotonic_last_monotonic_monotonic_i = 1 --\
    \ Default to 1\n  local last_monotonic_last_monotonic_monotonic_j = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_monotonic_k = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_monotonic_l = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic = true -- Default to true\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_j = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_k = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_l = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_monotonic = true -- Default to\
    \ true\n  local last_monotonic_last_monotonic_last_monotonic_monotonic_i = 1 --\
    \ Default to 1\n  local last_monotonic_last_monoton", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local k = l[i]\n    if k < l[j] then\n  \
    \    j = k\n    else\n      i = k + 1\n    end\n  end\n  return i <= j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] ~= l[i] then\n      return false\n    end\n    if l[m] > l[i] then\n\
    \      j = m\n    else\n      i = m\n    end\n  end\n  return true\nend", "  local\
    \ function helper(l, i, j)\n    if i == j then\n      return true\n    end\n \
    \   if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n      return\
    \ helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local t = l[m]\n\
    \        l[m] = l[i]\n        l[i] = t\n      end\n      m = m + 1\n      n =\
    \ n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend", "  local function helper(l,\
    \ low, high)\n    if low > high then\n      return false\n    end\n    if low\
    \ == high then\n      return true\n    end\n    if l[low] <= l[high] then\n  \
    \    return helper(l, low + 1, high)\n    else\n      return helper(l, low, high\
    \ - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i - j\n    if l[m] < l[i] then\
    \ return false end\n    if l[m] > l[i] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = 1\n  while i <= #l do\n    if l[i] < l[j] then\n      if\
    \ l[i] < l[k] then\n        if l[i] < l[m] then\n          k = i\n        else\n\
    \          m = i\n        end\n      else\n        k = i\n      end\n    else\n\
    \      if l[j] < l[k] then\n        if l[j] < l[m] then\n          k = j\n   \
    \     else\n          m = j\n        end\n      else\n        k = j\n      end\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <= j\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default to\
    \ true\n  local min_value = l[1]\n  local max_value = l[1]\n  for i = 2, #l do\n\
    \    local value = l[i]\n    if value < min_value then\n      min_value = value\n\
    \      k = i\n    elseif value > max_value then\n      max_value = value\n   \
    \   j = i\n    end\n  end\n  if min_value == max_value then\n    return true\n\
    \  end\n  if min_value < max_value then\n    if j ~= i then\n      monotonic =\
    \ false\n    end\n  end\n  return monotonic\nend", "  local i = 1\n  local j =\
    \ 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n \
    \   local m = l[i]\n    local n = l[j]\n    if m > n then\n      return false\n\
    \    end\n    k = k + 1\n    if k > 1 then\n      if m ~= l[k - 1] then\n    \
    \    return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n \
    \ return true\nend", "  if #l == 0 then return false end\n  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local prev = 0\n  for\
    \ _, v in ipairs(l) do\n    if prev < v then\n      return false\n    end\n  \
    \  prev = v\n  end\n  return true\nend", "  if #l == 0 then return false end\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n \
    \ while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x == y then\n      if x > y then\n        if z > x then\n          return\
    \ false\n        else\n          k = k + 1\n        end\n      else\n        if\
    \ z < x then\n          return false\n        else\n          k = k + 1\n    \
    \    end\n      end\n    elseif x > y then\n      if z > x then\n        return\
    \ false\n      else\n        k = k + 1\n      end\n    else\n      if z < x then\n\
    \        return false\n      else\n        k = k + 1\n      end\n    end\n   \
    \ i = i + 1\n    j = j + 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l do\n    local x = l[i]\n\
    \    local y = l[j]\n    local w = l[k]\n    if w < x then\n      k = k + 1\n\
    \      if k < #l then\n        m = m + 1\n      end\n    elseif w > x then\n \
    \     k = k + 1\n      if k < #l then\n        m = m + 1\n      end\n    elseif\
    \ w == x then\n      if m > 1 then\n        m = m - 1\n      end\n      i = i\
    \ + 1\n      j = j + 1\n    else\n      i = i + 1\n      j = j + 1\n    end\n\
    \  end\n  return m == 0\nend", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local monotonic_flag = true\n  local last_monotonic_flag = false\n  local last_monotonic_value\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default to true\n\
    \  local is_decreasing = true -- Default to true\n  local is_increasing = true\
    \ -- Default to true\n  local is_decreasing_or_non_increasing = true -- Default\
    \ to true\n  local is_non_increasing = true -- Default to true\n  local is_non_decreasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing = true\
    \ -- Default to true\n  local is_monotonic = true -- Default to true\n  local\
    \ is_monotonic_or_non_increasing = true -- Default to true\n  local is_monotonic_or_non_decreasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing = true\
    \ -- Default to true\n  local is_non_decreasing_or_non_increasing = true -- Default\
    \ to true\n  local is_monotonic_or_non_increasing_or_non_decreasing = true --\
    \ Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true", "  local i = 1\n  local j = 1\n  local k = 1\n \
    \ local m = l[1]\n  while i <= #l do\n    local x = l[i]\n    if x > m then\n\
    \      k = k + 1\n      if k > 1 then\n        local y = l[j]\n        if y <\
    \ m then\n          return false\n        end\n      end\n    end\n    i = i +\
    \ 1\n    j = j + 1\n    m = x\n  end\n  return true\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local x = l[i]\n    local y = l[j]\n    if\
    \ x > y then\n      return false\n    end\n    if i == j then\n      return true\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local\
    \ function helper(l, i, j)\n    if i == j then return true end\n    if l[i] <\
    \ l[j] then return helper(l, i, i+1) and true end\n    if l[i] > l[j] then return\
    \ helper(l, j, j+1) and true end\n    return false\n  end\n  return helper(l,\
    \ 1, #l)\nend", "  local function helper(l, i, j)\n    if i == j then return true\
    \ end\n    if l[i] < l[j] then return helper(l, i + 1, j) end\n    if l[i] > l[j]\
    \ then return helper(l, i, j + 1) end\n  end\n  return helper(l, 1, #l)\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local is_increasing = true -- Default to true\n  local is_decreasing\
    \ = true -- Default to true\n  local is_monotonic = true -- Default to true\n\
    \  local is_decreasing_monotonic = true -- Default to true\n  local is_increasing_monotonic\
    \ = true -- Default to true\n  local is_decreasing_monotonic_or_nondecreasing\
    \ = true -- Default to true\n  local is_increasing_monotonic_or_nonincreasing\
    \ = true -- Default to true\n  local is_decreasing_monotonic_or_nonincreasing_or_nondecreasing\
    \ = true -- Default to true\n  local is_nondecreasing = true -- Default to true\n\
    \  local is_nonincreasing = true -- Default to true\n  local is_nondecreasing_or_nonincreasing\
    \ = true -- Default to true\n  local is_nondecreasing_or_nonincreasing_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic = true -- Default to true\n\
    \  local is_nonmonotonic_or_nonmonotonic = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_non",
  "  local function helper(l, i, j)\n    if i == j then return true end\n    if l[i]\
    \ < l[j] then return helper(l, i, j-1) end\n    return helper(l, j, i-1)\n  end\n\
    \  return helper(l, 1, #l)\nend", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local monotonic_flag = true\n  local monotonic_flag2 = true\n  local monotonic_flag3\
    \ = true\n  local monotonic_flag4 = true\n  local monotonic_flag5 = true\n  local\
    \ monotonic_flag6 = true\n  local monotonic_flag7 = true\n  local monotonic_flag8\
    \ = true\n  local monotonic_flag9 = true\n  local monotonic_flag10 = true\n  local\
    \ monotonic_flag11 = true\n  local monotonic_flag12 = true\n  local monotonic_flag13\
    \ = true\n  local monotonic_flag14 = true\n  local monotonic_flag15 = true\n \
    \ local monotonic_flag16 = true\n  local monotonic_flag17 = true\n  local monotonic_flag18\
    \ = true\n  local monotonic_flag19 = true\n  local monotonic_flag20 = true\n \
    \ local monotonic_flag21 = true\n  local monotonic_flag22 = true\n  local monotonic_flag23\
    \ = true\n  local monotonic_flag24 = true\n  local monotonic_flag25 = true\n \
    \ local monotonic_flag26 = true\n  local monotonic_flag27 = true\n  local monotonic_flag28\
    \ = true\n  local monotonic_flag29 = true\n  local monotonic_flag30 = true\n \
    \ local monotonic_flag31 = true\n  local monotonic_flag32 = true\n  local monotonic_flag33\
    \ = true\n  local monotonic_flag34 = true\n  local monotonic_flag35 = true\n \
    \ local monotonic_flag36 = true\n  local monotonic_flag37 = true\n  local monotonic_flag38\
    \ = true\n  local monotonic_flag39 = true\n  local monotonic_flag40 = true\n \
    \ local monotonic_flag41 = true\n  local monotonic_flag42 = true\n  local monotonic_flag43\
    \ = true\n  local monotonic_flag44 = true\n  local monotonic_flag45 = true\n \
    \ local monotonic_flag46 = true\n  local monotonic_flag47 = true\n  local monotonic_flag48\
    \ = true\n  local monotonic_flag49 = true\n  local monotonic_flag50 = true\n \
    \ local monotonic_flag51 = true\n  local monotonic_flag52 = true\n  local monotonic_flag53\
    \ = true\n  local monotonic_flag54 = true\n  local monot", "  local prev = 0\n\
    \  for _, v in ipairs(l) do\n    if prev < v then\n      return false\n    end\n\
    \    prev = v\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = l[1]\n  while i < #l do\n    local x = l[i]\n    local y\
    \ = l[j]\n    local z = l[k]\n    if x > y then\n      if x < z then\n       \
    \ return false\n      else\n        return true\n      end\n    elseif x < y then\n\
    \      return false\n    else\n      if x < z then\n        return true\n    \
    \  else\n        return false\n      end\n    end\n    i = i + 1\n    j = j +\
    \ 1\n    k = k + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n\
    \  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local\
    \ x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if m > x and y > w then\n\
    \      k = k + 1\n      m = x\n      n = y\n    elseif m < x and y < w then\n\
    \      k = k + 1\n      m = x\n      n = y\n    elseif m == x and y == w then\n\
    \      k = k + 1\n      m = x\n      n = y\n    end\n    i = i + 1\n    j = j\
    \ + 1\n  end\n  return m > n\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then return\
    \ false end\n    if l[i] > l[j] then i = m end\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n   \
    \ if k ~= l[j] then\n      if k < l[j] then\n        j = j - 1\n      elseif k\
    \ > l[j] then\n        i = i + 1\n      else\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n    local m = l[i]\n\
    \    local n = l[j]\n    if m > n then\n      return false\n    end\n    if m\
    \ == n then\n      i = i + 1\n      j = j + 1\n    else\n      k = k + 1\n   \
    \   if k > #l then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "  local prev = 0\n  for _, v in ipairs(l) do\n    if prev < v then\n  \
    \    return false\n    end\n    prev = v\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l do\n\
    \    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x then\n\
    \      k = k + 1\n    elseif x == y then\n      k = k + 1\n      if k > m then\n\
    \        return false\n      end\n    else\n      m = m + 1\n      i = i + 1\n\
    \      j = j + 1\n      k = k + 1\n    end\n  end\n  return true\nend", "  local\
    \ function helper(l, i, j)\n    if i == j then\n      return true\n    end\n \
    \   if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n      return\
    \ helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  local\
    \ p = 1\n  local q = 1\n  local r = 1\n  local s = l[1]\n  local t = l[1]\n  local\
    \ u = 1\n  local v = 1\n  local w = 1\n  local x = l[1]\n  local y = l[1]\n  local\
    \ z = l[1]\n  local a = l[1]\n  local b = l[1]\n  local c = l[1]\n  local d =\
    \ l[1]\n  local e = l[1]\n  local f = l[1]\n  local g = l[1]\n  local h = l[1]\n\
    \  local i = l[1]\n  local j = l[1]\n  local k = l[1]\n  local l = l[1]\n  local\
    \ m = l[1]\n  local n = l[1]\n  local p = l[1]\n  local q = l[1]\n  local r =\
    \ l[1]\n  local s = l[1]\n  local t = l[1]\n  local u = l[1]\n  local v = l[1]\n\
    \  local w = l[1]\n  local x = l[1]\n  local y = l[1]\n  local z = l[1]\n  local\
    \ a = l[1]\n  local b = l[1]\n  local c = l[1]\n  local d = l[1]\n  local e =\
    \ l[1]\n  local f = l[1]\n  local g = l[1]\n  local h = l[1]\n  local i = l[1]\n\
    \  local j = l[1]\n  local k = l[1]\n  local l = l[1]\n  local m = l[1]\n  local\
    \ n = l[1]\n  local p = l[1]\n  local q = l[1]\n  local r = l[1]\n  local s =\
    \ l[1]\n  local t = l[1]\n  local u = l[1]\n  local v = l[1]\n  local w = l[1]\n\
    \  local x = l[1]\n  local y = l[1]\n  local z = l[1]\n  local a = l[1]\n  local\
    \ b = l[1]\n  local c = l[1]\n  local d = l[1]\n  local e = l[1]\n  local f =\
    \ l[1]\n  local g = l[1]\n  local h = l[1]\n  local i = l[1]\n  local j = l[1]\n\
    \  local k = l[1]\n  local l = l[1]\n  local m = l[1]\n  local n = l[1]\n  local\
    \ p = l[1]\n  local q = l[1]\n  local r = l[1]\n  local s = l[1]\n  local t =\
    \ l[1]\n  local u = l[1]\n  local v = l[1]\n", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    local m = i - j\n    if l[m] < l[i] then return\
    \ false end\n    if l[m] > l[i] then return true end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return false\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - 1\n    if l[m] < l[i] then\n      i = m + 1\n \
    \   elseif l[m] > l[i] then\n      j = m\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i - j\n    if l[m] < l[i] then return false end\n    if\
    \ l[m] > l[i] then return true end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local prev = {}\n  for i = 1, #l do\n    prev[tostring(l[i])]\
    \ = true\n  end\n  for i = 1, #l do\n    if not prev[tostring(l[i])] then\n  \
    \    return false\n    end\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n\
    \    local m = l[i]\n    local n = l[j]\n    if m ~= n then\n      if m > n then\n\
    \        return false\n      elseif m == n then\n        k = k + 1\n      else\n\
    \        return true\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return false\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag\
    \ = true\n  local min_value = l[1]\n  local max_value = l[1]\n  for i = 2, #l\
    \ do\n    if l[i] < min_value then\n      min_value = l[i]\n    elseif l[i] >\
    \ max_value then\n      max_value = l[i]\n    end\n    if l[i] < min_value or\
    \ l[i] > max_value then\n      monotonic_flag = false\n    end\n  end\n  if min_value\
    \ == max_value then\n    return true\n  end\n  while j < #l do\n    if l[j] <\
    \ min_value then\n      min_value = l[j]\n    elseif l[j] > max_value then\n \
    \     max_value = l[j]\n    end\n    if l[j] < min_value or l[j] > max_value then\n\
    \      monotonic_flag = false\n    end\n    j = j + 1\n  end\n  return monotonic_flag\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n\
    \    while k < j do\n      if l[k] < l[k + 1] then return false end\n      k =\
    \ k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <=\
    \ #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n      k =\
    \ k + 1\n      l[k] = m\n      i = i + 1\n    elseif m < n then\n      k = k +\
    \ 1\n      l[k] = n\n      j = j + 1\n    else\n      k = k + 1\n      l[k] =\
    \ m\n      i = i + 1\n      j = j + 1\n    end\n  end\n  return k == 1\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] > l[j]\
    \ then\n      i = j\n    end\n  end\n  return i == 1\nend", "  local i = 1\n \
    \ local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <\
    \ #l do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if x\
    \ == m then\n      if y < m then\n        m = y\n      else\n        k = k + 1\n\
    \      end\n    elseif y == n then\n      if x < n then\n        n = x\n     \
    \ else\n        k = k + 1\n      end\n    elseif x < y then\n      if w < x then\n\
    \        m = x\n        n = y\n      else\n        k = k + 1\n      end\n    else\n\
    \      if w > y then\n        m = y\n        n = x\n      else\n        k = k\
    \ + 1\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <=\
    \ n\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m\
    \ = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local x = l[i]\n    local y = l[j]\n\
    \    if x > y then return false end\n    if i == j then return true end\n    i\
    \ = i + 1\n    j = j - 1\n  end\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n     \
    \ if l[m] < l[i] then return false end\n      if l[m] > l[i] then return true\
    \ end\n      m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i]\
    \ < l[j] then\n      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n\
    \    else\n      return false\n    end\n  end\n  return true\nend", "  local i\
    \ = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n\
    \    while m <= n do\n      if l[m] < l[n] then\n        j = m\n      else\n \
    \       i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n  end\n \
    \ return i <= j\nend", "  if #l == 0 then\n    return true\n  end\n  local first\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] < first then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local k = l[i]\n    local m = l[j]\n    if m > k then\n     \
    \ return false\n    end\n    if m == k then\n      i = i + 1\n      j = j - 1\n\
    \    else\n      i = i + 1\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l do\n    local\
    \ x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x then\n      k\
    \ = k + 1\n      m = x\n    elseif w > x then\n      k = k + 1\n      m = y\n\
    \    elseif w == x then\n      if m ~= y then\n        k = k + 1\n        m =\
    \ y\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return m == l[1]\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j]\
    \ then\n      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n\
    \      return false\n    end\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n   \
    \ local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x > y then\n\
    \      if x < z then\n        return false\n      else\n        j = k\n      end\n\
    \    elseif x < z then\n      if y < z then\n        return false\n      else\n\
    \        k = m\n      end\n    else\n      if y < z then\n        j = k\n    \
    \  else\n        i = i + 1\n        k = k + 1\n      end\n    end\n    m = m +\
    \ 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i\
    \ <= j do\n    local m = i - j\n    if l[m] < l[i] then\n      j = m\n    else\n\
    \      i = m\n    end\n  end\n  return i <= j\nend", "  local i = 1\n  local j\
    \ = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <= n do\n    while\
    \ j <= n and l[j] < l[i] do\n      j = j + 1\n    end\n    if j > n then\n   \
    \   return false\n    end\n    while k <= n and l[k] > l[i] do\n      k = k +\
    \ 1\n    end\n    if k > n then\n      return false\n    end\n    if l[j] < l[i]\
    \ then\n      m = m + 1\n      if m > 1 then\n        return false\n      end\n\
    \    end\n    if l[k] > l[i] then\n      m = m + 1\n      if m > 1 then\n    \
    \    return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k\
    \ + 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local x = l[i]\n    local y = l[j]\n    if x > y then\n     \
    \ return false\n    end\n    if i == j then\n      return true\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return false\nend", "  local i = 1\n  local\
    \ j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n  while i <= #l do\n\
    \    local m = l[i]\n    local n = l[j]\n    if m > n then\n      k = k + 1\n\
    \      if k > 1 then\n        if m > l[k - 1] then\n          j = k\n        else\n\
    \          i = i + 1\n        end\n      else\n        j = j + 1\n      end\n\
    \    elseif m < n then\n      k = k + 1\n      if k > 1 then\n        if m < l[k\
    \ - 1] then\n          i = i + 1\n        else\n          j = j + 1\n        end\n\
    \      else\n        j = j + 1\n      end\n    else\n      i = i + 1\n      j\
    \ = j + 1\n    end\n  end\n  return j > i\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
