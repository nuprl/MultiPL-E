name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n\
  -- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x =\
    \ l[i]\n    local y = l[j]\n    if x < y then\n      return false\n    end\n \
    \   if x > y then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend", "  local function is_decreasing(v)\n    return v\
    \ < l[1]\n  end\n  local function is_increasing(v)\n    return v > l[1]\n  end\n\
    \  local function is_monotonic(v)\n    return is_decreasing(v) or is_increasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return v == l[1]\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v == l[1]\n  end\n  local\
    \ function is_strictly_monotonic(v)\n    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n    return\
    \ v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decre", "  local i\
    \ = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l do\n  \
    \  local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~= 0 then\n\
    \      if x > y then\n        if w > m then\n          m = w\n        end\n  \
    \    else\n        if w < m then\n          m = w\n        end\n      end\n  \
    \  end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return m == 0\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[2]\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ k = i\n    while k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n \
    \   if k > i then\n      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n \
    \   j = j - 1\n  end\n  return i == 1\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n\
    \ do\n      if l[m] < l[n] then\n        return false\n      elseif l[m] > l[n]\
    \ then\n        return true\n      else\n        local m = m + 1\n        local\
    \ n = n + 1\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag\
    \ = true\n  local last_monotonic_flag = false\n  local last_monotonic_value =\
    \ 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while i <=\
    \ n do\n    local x = l[i]\n    if i == 1 then\n      k = x\n      m = x\n   \
    \ else\n      if x < l[j] then\n        k = x\n      else\n        if x > l[k]\
    \ then\n          m = x\n        else\n          k = x\n        end\n      end\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <= k\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n    \
    \  local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n  \
    \    j = j - 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n     \
    \ i = i + 1\n    end\n  end\n  return i == j\nend", "  local function helper(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if l[i] < l[j] then\n\
    \      return helper(l, i + 1, j)\n    else\n      return helper(l, i, j - 1)\n\
    \    end\n  end\n  return helper(l, 1, #l)\nend", "  local i = 1\n  local j =\
    \ #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <=\
    \ n do\n      if l[m] < l[n] then\n        j = m\n      else\n        i = m\n\
    \      end\n      m = m + 1\n      n = n + 1\n    end\n  end\n  return i == j\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ 1\n    local n = j + 1\n    while m <= n do\n      if l[m] < l[i] then return\
    \ false end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  return false\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n      return\
    \ false\n    end\n    if l[i-1] < l[i] then\n      return true\n    end\n    i\
    \ = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - j\n    if l[m] < l[i] then return false end\n \
    \   if l[m] > l[i] then return true end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return false\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i]\
    \ then return false end\n      if l[m] > l[i] then return true end\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n  end\n  return\
    \ i <= j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i - j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then\
    \ return true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true end\n\
    \    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local m = 1\n  local n = #l\n  while i < n do\n    local x = l[i]\n\
    \    local y = l[j]\n    local w = l[k]\n    if x > y then\n      if w < x then\n\
    \        j = k\n      else\n        i = k\n      end\n    elseif x < y then\n\
    \      if w > x then\n        k = k + 1\n      else\n        i = i + 1\n     \
    \ end\n    else\n      if w == x then\n        i = i + 1\n      else\n       \
    \ k = k + 1\n      end\n    end\n    m = m + 1\n  end\n  return m == n\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n  local\
    \ max_val = l[1]\n  local min_val = l[1]\n  while i <= #l do\n    local val =\
    \ l[i]\n    if val > max_val then\n      max_val = val\n      j = i\n    elseif\
    \ val < min_val then\n      min_val = val\n      k = i\n    end\n    i = i + 1\n\
    \    if i == #l then\n      if max_val > min_val then\n        monotonic_flag\
    \ = false\n      end\n      break\n    end\n  end\n  return monotonic_flag\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
