language: lua
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y or x == z or y == z then\n    return true\n  else\n    return false\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyse269g.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgyse269g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ug7o3ut.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ug7o3ut.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return x == y + z\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnbu4mi3.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfnbu4mi3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg8dwvtp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptg8dwvtp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  elseif\
    \ y == z then\n    return x == y\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpdc9zss.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphpdc9zss.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y and x == z and x ~= 0 then\n    return true\n  elseif x == y or x == z\
    \ or y == z then\n    return false\n  else\n    return true\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu98rx5bx.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu98rx5bx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ sum = x+y+z\n  return sum == x or sum == y or sum == z\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r1yl4m_.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2r1yl4m_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ug7o3ut.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ug7o3ut.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg8dwvtp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptg8dwvtp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == 'number' and type(y) == 'number' and type(z) == 'number' then\n    return\
    \ x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr60ko5j.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplr60ko5j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return x == y + z\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ug7o3ut.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ug7o3ut.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return true\n  elseif x == z then\n    return true\n  elseif\
    \ y == z then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5y_g8rz.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5y_g8rz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x or z == y\n  elseif x < y then\n    return any_int(y,\
    \ x, z)\n  else\n    return any_int(x, y, z) or any_int(y, x, z)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprncsejs7.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprncsejs7.lua:15: in upvalue 'any_int'\n\
    \t/tmp/tmprncsejs7.lua:15: in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15: in\
    \ upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15: in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15:\
    \ in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15: in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15:\
    \ in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15: in upvalue 'any_int'\n\t/tmp/tmprncsejs7.lua:15:\
    \ in upvalue 'any_int'\n\t...\n\t/tmp/tmprncsejs7.lua:15: in function </tmp/tmprncsejs7.lua:9>\n\
    \t(...tail calls...)\n\t/tmp/tmprncsejs7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.130 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    if x == z then\n      return true\n    end\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8uyyjg3.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps8uyyjg3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return true\n  elseif x == z then\n    return true\n  elseif\
    \ y == z then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5y_g8rz.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5y_g8rz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg8dwvtp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptg8dwvtp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    return z == x\n  elseif x == z then\n    return y == z\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg8dwvtp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptg8dwvtp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ == y then\n    if x == z then\n      return true\n    end\n    return false\n\
    \  end\n  if x < y then\n    if x < z then\n      return true\n    end\n    return\
    \ false\n  end\n  if y < x then\n    if y < z then\n      return true\n    end\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u3rdfuf.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5u3rdfuf.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  if x\
    \ ~= nil and y ~= nil and z ~= nil then\n    return ((type(x) == \"number\" and\
    \ type(y) == \"number\" and type(z) == \"number\") and\n            math.floor(x)\
    \ == math.floor(y) and math.floor(x) == math.floor(z)) or\n           (type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"table\") or\n     \
    \      (type(x) == \"table\" and type(y) == \"number\" and type(z) == \"number\"\
    ) or\n           (type(x) == \"table\" and type(y) == \"table\" and type(z) ==\
    \ \"number\")\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ju7eeix.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ju7eeix.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- any_int(5, 2, 7) \u279E\
    \ True\n-- any_int(3, 2, 2) \u279E False\n-- any_int(3, -2, 1) \u279E True\n--\
    \ any_int(3.6, -2.2, 2) \u279E False\nlocal function any_int(x, y, z)\n  local\
    \ function is_int(n)\n    return type(n - 0) == 'number'\n  end\n  if is_int(x)\
    \ and is_int(y) and is_int(z) then\n    return x == y + z\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9nwyfvr.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc9nwyfvr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
