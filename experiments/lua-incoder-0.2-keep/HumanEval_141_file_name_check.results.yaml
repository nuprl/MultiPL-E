name: HumanEval_141_file_name_check
language: lua
results:
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the dot '.'\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local file_name = file_name:gsub(\"\
    ^[%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplelrq7ss.lua:17: unfinished string near '\"^[%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a][%a]['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*$\") ~= nil and string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]\") ~= nil and string.find(file_name, \"^[^.]\") ~= nil and string.find(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl4ntr8nx.lua:15: ')' expected (to close '(' at line 14) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"~\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"`\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"'\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"~\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"`\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"'\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo94wt0sx.lua:144: 'end' expected (to close 'if' at line 110)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.find(file_name, \".\") ~= nil and string.sub(file_name,1,1) ~= nil then\n\
    \        -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\", string.find(file_name, \".\")+1) ~= nil then\n          local extension\
    \ = string.sub(file_name,string.find(file_name, \".\"),string.find(file_name,\
    \ \".\") + 1)\n          -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n          if string.find(extension, \".\")\
    \ ~= nil and string.find(extension, \".\", string.find(extension, \".\")+1) ~=\
    \ nil then\n            -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n            if string.find(extension, \".\"\
    ) ~= nil and string.find(extension, \".\", string.find(extension, \".\")+1) ~=\
    \ nil then\n              if string.find(extension, \".\") ~= nil and string.find(extension,\
    \ \".\", string.find(extension, \".\")+1) ~= nil then\n                local extension\
    \ = string.sub(extension,string.find(extension, \".\"),string.find(extension,\
    \ \".\") + 1)\n                if extension == \"txt\" or extension == \"exe\"\
    \ or extension == \"dll\" then\n                  return \"Yes\"\n           \
    \     else\n                  return \"No\"\n                end\n           \
    \   else\n                return \"No\"\n              end\n            else\n\
    \              return \"No\"\n            end\n          else\n            return\
    \ \"No\"\n          end\n        else\n          return \"No\"\n        end\n\
    \      else\n        return \"No\"\n      end\n    else\n      return \"No\"\n\
    \    end\n  else\n    return \"No\"\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmckx8qs.lua:59:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbmckx8qs.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:gsub(\"^%d+\", \"\") -- Remove all digits from\
    \ the beginning of the string\n  local file_name = file_name:gsub(\"%.\", \"\"\
    ) -- Remove all dots from the beginning of the string\n  local file_name = file_name:gsub(\"\
    ^[a-zA-Z]+\", \"\") -- Remove all letters from the beginning of the string\n \
    \ local file_name = file_name:gsub(\"%[!.]+\", \"\") -- Remove all characters\
    \ that are not dots or periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%.%.%.\", \"\") -- Remove all periods from the beginning\
    \ of the string\n  local file_name = file_name:gsub(\"%%.%.\", \"\") -- Remove\
    \ all periods from the beginning of the string\n  local file_name = file_name:gsub(\"\
    %%.\", \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%.\", \"\") -- Remove all periods from the beginning of the\
    \ string\n  local file_name = file_name:gsub(\"%\", \"\") -- Remove all periods\
    \ from the beginning of the string\n  local file_name = file_name:gsub(\"%+\"\
    , \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%+\", \"\") -- Remove all periods from the beginning of the\
    \ string\n  local file_name = file_name:gsub(\"%+\", \"\") -- Remove all periods\
    \ from the beginning of the string\n  local file_name = file_name:gsub(\"%+\"\
    , \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%+\", \"\") -- Remove all periods from the beginning of the\
    \ string\n  local file_name = file_name:gsub(\"%+\", \"\") -- Remove all periods\
    \ from the beginning of the string\n  local file_name = file_name:gsub(\"%+\"\
    , \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%+\", \"\") -- Remove all periods from the beginning of the\
    \ string\n  local file_name = file_name:gsub(\"%+\", \"\") -- Remove all periods\
    \ from the beginning of the string\n  local file_name = file_name:gsub(\"%+\"\
    , \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%+\", \"\") -- Remove all periods from the beginning of the\
    \ string\n  local file_name = file_name:gsub(\"%+\", \"\") -- Remove all periods\
    \ from the beginning of the string\n  local file_name = file_name:gsub(\"%+\"\
    , \"\") -- Remove all periods from the beginning of the string\n  local file_name\
    \ = file_name:gsub(\"%+\", \"\") -- Remove all periods from the beginning \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1brjj3d_.lua:69: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name, \".\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"%\") \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi5hwlin0.lua:99: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") == 1 then\n     \
    \    if string.find(file_name, \" \") ~= nil then\n            if string.find(file_name,\
    \ \" \") ~= 1 then\n               if string.find(file_name, \".\") ~= 1 then\n\
    \                  if string.find(file_name, \".\") ~= 1 then\n              \
    \       if string.find(file_name, \".\") ~= 1 then\n                         if\
    \ string.find(file_name, \".\") ~= 1 then\n                             if string.find(file_name,\
    \ \".\") ~= 1 then\n                                return nil\n             \
    \                end\n                         end\n                     end\n\
    \                  end\n               end\n            end\n         end\n  \
    \    end\n   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == 1 then\n         if string.find(file_name, \" \") ~= nil then\n  \
    \          if string.find(file_name, \" \") ~= 1 then\n               if string.find(file_name,\
    \ \".\") ~= 1 then\n                  if string.find(file_name, \".\") ~= 1 then\n\
    \                     if string.find(file_name, \".\") ~= 1 then\n           \
    \              if string.find(file_name, \".\") ~= 1 then\n                  \
    \           if string.find(file_name, \".\") ~= 1 then\n                     \
    \           return nil\n                             end\n                   \
    \      end\n                     end\n                  end\n               end\n\
    \            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") == nil then\n      if string.find(file_name, \".\") == 1 then\n     \
    \    if string.find(file_name, \" \") ~= nil then\n            if string.find(file_name,\
    \ \" \") ~= 1 then\n               if string.find(file_name, \".\") ~= 1 then\n\
    \                  if string.find(file_name, \".\") ~= 1 then\n              \
    \       if string.find(file_name, \".\") ~= 1 then\n                         if\
    \ string.find(file_name, \".\") ~= 1 then\n                             if string.find(file_name,\
    \ \".\") ~= 1 then\n                                return nil\n             \
    \                end\n                         end\n                     end\n\
    \                  end\n               end\n            end\n         end\n  \
    \    end\n   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == 1 then\n         if string.find(file_name, \" \") ~= nil then\n  \
    \          if string.find(file_name, \" \") ~= 1 then\n               if string.find(file_name,\
    \ \".\") ~= 1 then\n                  if string.find(file_name, \".\") ~= 1 \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_43xhro5.lua:80: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.g\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx97t9zcv.lua:89: 'end' expected (to close 'if' at line 14)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if #file_name < 1 then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp61bl3mz.lua:38:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpp61bl3mz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2, string.len(file_name)\
    \ - 2), \"exe\") ~= nil then\n      if string.find(file_name:sub(2, string.len(file_name)\
    \ - 2), \"dll\") ~= nil then\n        return \"Yes\"\n      end\n    end\n  end\n\
    \  return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjbeccv0.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprjbeccv0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = file_name:find('.')\n  \
    \  if dot_index == nil then\n      return 'No'\n    end\n    -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n    if dot_index > 0 and file_name:sub(1,\
    \ 1) ~= string.upper(string.sub(file_name:sub(1, 1), 1, 1)) then\n      return\
    \ 'No'\n    end\n    -- Check that the substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub((dot_index +\
    \ 1), 3), 'exe') ~= nil then\n      return 'Yes'\n    end\n    if string.find(file_name:sub((dot_index\
    \ + 1), 3), 'dll') ~= nil then\n      return 'Yes'\n    end\n    return 'No'\n\
    \  end\n  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcohoar39.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpcohoar39.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9][0-9]\") ~= nil and\n    string.find(file_name,\
    \ \".\") ~= nil and\n    string.find(file_name, \"^[a-z][a-z]\") ~= nil and\n\
    \    string.find(file_name, \"^[a-z][a-z].*\") ~= nil and\n    string.find(file_name,\
    \ \"^[a-z][a-z].*\\.(txt|exe|dll)$\") ~= nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm062qqi.lua:24:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpsm062qqi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"^[%z\\1-9]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%.\", \"\")\n    local file_name = file_name:gsub(\"^[a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[%z\\1-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[a-z][a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[a-z][A-Z]\", \"\
    \")\n    local file_name = file_name:gsub(\"^[A-Z][a-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[A-Z][A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[a-z][a-z][0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[A-Z][a-z][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][0-9][a-z]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[A-Z][0-9][a-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[a-z][0-9][0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[A-Z][0-9][0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9][0-9]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9][0-9]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9][0-9][0-9]\", \"\
    \")\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n    local file_name = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5pw0i_1n.lua:43: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = string.find(file_name, '.');\n\
    \    if dot_index == nil then\n      return 'No';\n    end\n    -- Check that\
    \ the substring before the dot is not empty\n    if string.sub(file_name,1,dot_index)\
    \ ~= '' then\n      return 'No';\n    end\n    -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n    local extension = string.sub(file_name,dot_index\
    \ + 1);\n    if string.find(extension, 'txt') ~= nil then\n      return 'Yes';\n\
    \    end\n    if string.find(extension, 'exe') ~= nil then\n      return 'Yes';\n\
    \    end\n    if string.find(extension, 'dll') ~= nil then\n      return 'Yes';\n\
    \    end\n  end\n  return 'No';\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uuddghs.lua:42:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2uuddghs.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return nil\n   end\n   if file_name:sub(1, 1)\
    \ ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n\
    \      return nil\n   end\n   if file_name:sub(2, 2) ~= '.txt' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 2) ~= '.exe' then\n      return nil\n  \
    \ end\n   if file_name:sub(2, 2) ~= '.dll' then\n      return nil\n   end\n  \
    \ return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98fz_2yy.lua:41:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp98fz_2yy.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ nil then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= nil then\n\
    \      local ext = string.sub(file_name,string.find(file_name, \".\"),string.len(file_name))\n\
    \      if string.find(ext, \"txt\") ~= nil then\n         return 'Yes'\n     \
    \ elseif string.find(ext, \"exe\") ~= nil then\n         return 'Yes'\n      elseif\
    \ string.find(ext, \"dll\") ~= nil then\n         return 'Yes'\n      else\n \
    \        return 'No'\n      end\n   else\n      return 'No'\n   end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldgvxp13.lua:45:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpldgvxp13.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'a'\
    \ then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'z' then\n\
    \      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'A' then\n   \
    \   return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   if string.sub(file_name, 1, 2) ~= '.' then\n      return nil\n\
    \   end\n   if string.sub(file_name, 1, 3) ~= '.' then\n      return nil\n   end\n\
    \   if string.sub(file_name, 1, 4) ~= '.' then\n      return nil\n   end\n   if\
    \ string.sub(file_name, 1, 5) ~= '.' then\n      return nil\n   end\n   if string.sub(file_name,\
    \ 1, 6) ~= '.' then\n      return nil\n   end\n   if string.sub(file_name, 1,\
    \ 7) ~= '.' then\n      return nil\n   end\n   if string.sub(file_name, 1, 8)\
    \ ~= '.' then\n      return nil\n   end\n   if string.sub(file_name, 1, 9) ~=\
    \ '.' then\n      return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7npzu_2u.lua:62:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7npzu_2u.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name < 1 then\n\
    \      return false\n   end\n   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1,\
    \ 1) ~= '.' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return false\n   end\n   if string.find(file_name:sub(2,\
    \ #file_name), {'txt', 'exe', 'dll'}) == nil then\n      return false\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu3fufnf4.lua:20: 'then' expected near '.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there is only one digit in the file name\n    local digits_index = string.find(file_name,\
    \ \"[0-9]\")\n    if digits_index == nil then\n      return \"No\"\n    end\n\
    \    -- Check that there is only one digit in the file name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there is only one digit in the file\
    \ name\n    local digits_index = string.find(file_name, \"[0-9]\")\n    if digits_index\
    \ == nil then\n      return \"No\"\n    end\n    -- Check that there is only one\
    \ digit in the file name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there is only one digit in the file name\n    local digits_index = string.find(file_name,\
    \ \"[0-9]\")\n    if digits_index == nil then\n      return \"No\"\n    end\n\
    \    -- Check that there is only one digit in the file name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there is only one digit in the file\
    \ name\n    local digits_index = string.find(file_name, \"[0-9]\")\n    if digits_index\
    \ == nil then\n      return \"No\"\n    end\n    -- Check that there is only one\
    \ digit in the file name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there is only one digit in the file name\n    local digits_index = string.find(file_name,\
    \ \"[0-9]\")\n    if digits_index == nil then\n      return \"No\"\n    end\n\
    \    -- Check that there is only one digit in the file name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there is only one digit in the file\
    \ name\n    local digits_index = string.find(file_name, \"[0-9]\")\n    if digits_index\
    \ == nil then\n      return \"No\"\n    end\n    -- Check that there is only one\
    \ digit in the file name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there is only one digit in the file name\n    local digits_index = string.find(file_name\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpagmcoujv.lua:82: ')' expected (to close '(' at line 81) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local file_ext = string.match(file_name,\
    \ \"%.[^.]*$\")\n    if file_ext ~= nil and file_ext ~= \"\" then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      local file_ext_split\
    \ = string.split(file_ext, \".\")\n      if file_ext_split[1] and string.find(file_ext_split[1],\
    \ \"^[a-zA-Z]\") then\n        -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n        local file_ext_split = string.split(file_ext,\
    \ \".\")\n        if file_ext_split[2] and string.find(file_ext_split[2], \"^(txt|exe|dll)$\"\
    ) then\n          return \"Yes\"\n        else\n          return \"No\"\n    \
    \    end\n      else\n        return \"No\"\n      end\n    else\n      return\
    \ \"No\"\n    end\n  else\n    return \"No\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputkq6sm1.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmputkq6sm1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ ~= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,2) ~= string.sub(file_name,1,2)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,2) ~= 'A' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,2) ~= 'Z' then\n     \
    \ return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe43rnkon.lua:47:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpe43rnkon.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%.\") then\n      return nil\n   end\n   if string.find(file_name, \"%.\"\
    ) == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\n   end\n   if string.find(file_name, \"%.\")\
    \ == nil then\n      return nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpny1rs0m3.lua:100: 'end' expected (to close 'if' at line 98)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8xs4b71z.lua:107: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 1\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return false\n \
    \  end\n   if file_name:sub(1, 1) ~= 'A' then\n      return false\n   end\n  \
    \ if file_name:sub(1, 1) ~= 'Z' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 2) ~= '.' then\n      return false\n   end\n   if file_name:sub(2, 3) ~= 'txt'\
    \ then\n      return false\n   end\n   if file_name:sub(3, 4) ~= 'exe' then\n\
    \      return false\n   end\n   if file_name:sub(4, 5) ~= 'dll' then\n      return\
    \ false\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74bdduy4.lua:53:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp74bdduy4.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = file_name:gsub(\"\
    [^0-9a-zA-Z.]\", \"\")\n  local file_name = file_name:sub(1, 3)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, 1)\n  local file_name\
    \ = file_name:sub(1, 1)\n  local file_name = file_name:sub(1, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd72t9zj4.lua:65: ')' expected (to close '(' at line 64) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n        return false\n    end\n    local\
    \ file_name = file_name:sub(1, dot_index)\n    local first_letter = string.sub(file_name,1,1)\n\
    \    if string.find(first_letter, \"a\") ~= nil then\n        return false\n \
    \   end\n    if string.find(first_letter, \"z\") ~= nil then\n        return false\n\
    \    end\n    if string.find(first_letter, \"0\") ~= nil then\n        return\
    \ false\n    end\n    if string.find(first_letter, \"9\") ~= nil then\n      \
    \  return false\n    end\n    if string.find(file_name, \"exe\") ~= nil then\n\
    \        return false\n    end\n    if string.find(file_name, \"dll\") ~= nil\
    \ then\n        return false\n    end\n    if string.find(file_name, \"txt\")\
    \ ~= nil then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3oxmzlxv.lua:48:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp3oxmzlxv.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \".\") == 1 then\n         if string.find(file_name, \".\") == 1 then\n    \
    \        if string.find(file_name, \".\") == 1 then\n               if string.find(file_name,\
    \ \".\") == 1 then\n                  if string.find(file_name, \".\") == 1 then\n\
    \                     return 'No'\n                  else\n                  \
    \   return 'No'\n                  end\n               else\n                \
    \  return 'No'\n               end\n            else\n               return 'No'\n\
    \            end\n         else\n            return 'No'\n         end\n     \
    \ else\n         return 'No'\n      end\n   else\n      return 'No'\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejdugpv6.lua:44:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpejdugpv6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, string.sub(file_name,1,1)) == nil then\n    \
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, \"exe\") ~= nil then\n    \
    \      -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n          if string.find(file_name, \"dll\") ~= nil then\n  \
    \          -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n            return true\n          else\n            return false\n\
    \          end\n        else\n          return false\n        end\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcygfu8kk.lua:45:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpcygfu8kk.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local file_name = string.lower(file_name)\n\
    \    local dot_index = string.find(file_name, \".\")\n    if dot_index == nil\
    \ then\n      return \"No\"\n    else\n      -- Check that the substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n      if dot_index > 0 and string.sub(file_name,1,1)\
    \ ~= string.sub(file_name,1,1) then\n        return \"No\"\n      else\n     \
    \   -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        local allowed_extensions = {\"txt\", \"exe\", \"dll\"\
    }\n        local extension = string.sub(file_name,dot_index+1,string.len(file_name))\n\
    \        if allowed_extensions ~= nil and allowed_extensions ~= \"\" then\n  \
    \        for _, allowed_extension in ipairs(allowed_extensions) do\n         \
    \   if allowed_extension == extension then\n              return \"Yes\"\n   \
    \         end\n          end\n        end\n      end\n    end\n  end\n  return\
    \ \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07sogyf1.lua:44:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp07sogyf1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ exactly three digits ('0'-'9')\n   if file_name ~= nil and file_name ~= \"\"\
    \ then\n      if file_name:sub(1, 3) ~= string.gsub(file_name, \".\", \"\") then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name starts\
    \ with a latin alphapet letter\n   if file_name ~= nil and file_name ~= \"\" then\n\
    \      if file_name:sub(1, 1) ~= string.gsub(string.gsub(file_name, \".\", \"\"\
    ), \"^%l\", string.char(\"a\")) then\n         return \"No\"\n      end\n   end\n\
    \   -- Check that the file name contains one of these extensions: \n   -- 'txt',\
    \ 'exe', 'dll'\n   if file_name ~= nil and file_name ~= \"\" then\n      if string.find(file_name,\
    \ \"exe\", 1, true) ~= nil then\n         if string.find(file_name, \"dll\", 1,\
    \ true) ~= nil then\n            return \"No\"\n         end\n      end\n    \
    \  if string.find(file_name, \"txt\", 1, true) ~= nil then\n         if string.find(file_name,\
    \ \"dll\", 1, true) ~= nil then\n            return \"No\"\n         end\n   \
    \   end\n   end\n   return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn5u5m2s.lua:52:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkn5u5m2s.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n     \
    \ return 'No'\n    end\n    -- Check that the substring before the dot is not\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if file_name:sub(1, 1) ~= '' then\n      if string.find(string.lower(file_name:sub(1,\
    \ 1)), '[a-z_]') then\n        return 'No'\n      end\n    end\n    -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(string.lower(file_name:sub(1,\
    \ file_name:len()-3)), '[txt.exe,dll]') then\n      return 'Yes'\n    end\n  end\n\
    \  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvzipyz4.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfvzipyz4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwkowhxk0.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \          -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n          if string.find(file_name, \".\", 1, 2) ~= nil then\n\
    \            if string.find(file_name, \".\", 1, 3) ~= nil then\n            \
    \  if string.find(file_name, \".\", 1, 4) ~= nil then\n                if string.find(file_name,\
    \ \".\", 1, 5) ~= nil then\n                  if string.find(file_name, \".\"\
    , 1, 6) ~= nil then\n                    if string.find(file_name, \".\", 1, 7)\
    \ ~= nil then\n                      if string.find(file_name, \".\", 1, 8) ~=\
    \ nil then\n                        if string.find(file_name, \".\", 1, 9) ~=\
    \ nil then\n                          if string.find(file_name, \".\", 1, 10)\
    \ ~= nil then\n                            if string.find(file_name, \".\", 1,\
    \ 11) ~= nil then\n                              return 'Yes'\n              \
    \              else\n                              return 'No'\n             \
    \               end\n                          else\n                        \
    \    return 'No'\n                          end\n                        else\n\
    \                          return 'No'\n                        end\n        \
    \              else\n                        return 'No'\n                   \
    \   end\n                    else\n                      return 'No'\n       \
    \             end\n                  else\n                    return 'No'\n \
    \                 end\n                else\n                  return 'No'\n \
    \               end\n              else\n                return 'No'\n       \
    \       end\n            else\n              return 'No'\n            end\n  \
    \        else\n            return 'No'\n          end\n        else\n        \
    \  return 'No'\n        end\n      else\n        return 'No'\n      end\n    else\n\
    \      return 'No'\n    end\n  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfz1eje3.lua:80:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpwfz1eje3.lua:80:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local num_digits = string.gsub(file_name, \"^0*\", \"\") -- Remove leading\
    \ zeroes\n    local num_dots = string.gsub(file_name, num_digits, \"1\") -- Replace\
    \ all digits with 1\n    local dot_position = string.find(num_dots, \"\\.\") --\
    \ Find the position of the dot\n    local dot_substring_1 = string.sub(num_dots,\
    \ 1, dot_position-1) -- Get the substring before the dot\n    local dot_substring_2\
    \ = string.sub(num_dots, dot_position+1) -- Get the substring after the dot\n\
    \    local dot_substring_1_letter = string.sub(dot_substring_1, 1, 1) -- Get the\
    \ first letter of the substring before the dot\n    local dot_substring_2_letter\
    \ = string.sub(dot_substring_2, 1, 1) -- Get the first letter of the substring\
    \ after the dot\n    local dot_substring_1_letter = string.lower(dot_substring_1_letter)\
    \ -- Convert the first letter of the substring before the dot to lower case\n\
    \    local dot_substring_2_letter = string.lower(dot_substring_2_letter) -- Convert\
    \ the first letter of the substring after the dot to lower case\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 1, 1) -- Get the first letter of the substring\
    \ before the dot\n    local dot_substring_2_letter = string.sub(dot_substring_2_letter,\
    \ 1, 1) -- Get the first letter of the substring after the dot\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 2, 2) -- Get the second letter of the substring\
    \ before the dot\n    local dot_substring_2_letter = string.sub(dot_substring_2_letter,\
    \ 2, 2) -- Get the second letter of the substring after the dot\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 3, 3) -- Get the third letter of the substring\
    \ before the dot\n    local dot_substring_2_letter = string.sub(dot_substring_2_letter,\
    \ 3, 3) -- Get the third letter of the substring after the dot\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 4, 4) -- Get the fourth letter of the substring\
    \ before the dot\n    local dot_substring_2_letter = string.sub(dot_substring_2_letter,\
    \ 4, 4) -- Get the fourth letter of the substring after the dot\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 5, 5) -- Get the fifth letter of the substring\
    \ before the dot\n    local dot_substring_2_letter = string.sub(dot_substring_2_letter,\
    \ 5, 5) -- Get the fifth letter of the substring after the dot\n    local dot_substring_1_letter\
    \ = string.sub(dot_substring_1_letter, 6, \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi6ts8c3m.lua:34: ')' expected (to close '(' at line 33) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ ~= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'z' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,2) ~= 'A' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,2) ~= 'Z' then\n      return nil\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4uldem0.lua:44:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpd4uldem0.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ string.sub(file_name,1,1)) == nil then\n          -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ \".\") ~= nil then\n            if string.find(file_name, \".\") ~= nil then\n\
    \              if string.find(file_name, \".\") ~= nil then\n                if\
    \ string.find(file_name, \".\") ~= nil then\n                  if string.find(file_name,\
    \ \".\") ~= nil then\n                    if string.find(file_name, \".\") ~=\
    \ nil then\n                      if string.find(file_name, \".\") ~= nil then\n\
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                    if string.find(file_name, \".\") ~= nil then\n          \
    \                  if string.find(file_name, \".\") ~= nil then\n            \
    \                  return 'Yes'\n                            else\n          \
    \                    return 'No'\n                            end\n          \
    \                else\n                            return 'No'\n             \
    \             end\n                        else\n                          return\
    \ 'No'\n                        end\n                      else\n            \
    \            return 'No'\n                      end\n                    else\n\
    \                      return 'No'\n                    end\n                \
    \  else\n                    return 'No'\n                  end\n            \
    \    else\n                  return 'No'\n                end\n              else\n\
    \                return 'No'\n              end\n            else\n          \
    \    return 'No'\n            end\n          else\n            return 'No'\n \
    \         end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1w0n3wv.lua:79:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpx1w0n3wv.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") ~= 1 then\n     \
    \    return nil\n      end\n      if string.find(file_name, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\", 1, 1))\n      if string.find(sub_string, \".\") ~= nil then\n       \
    \  return nil\n      end\n      if string.find(sub_string, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\", 1, 1))\n      if string.find(sub_string, \".\") ~= nil then\n       \
    \  return nil\n      end\n      if string.find(sub_string, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\", 1, 1))\n      if string.find(sub_string, \".\") ~= nil then\n       \
    \  return nil\n      end\n      if string.find(sub_string, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\", 1, 1))\n      if string.find(sub_string, \".\") ~= nil then\n       \
    \  return nil\n      end\n      if string.find(sub_string, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \".\", 1, 1))\n      if string.find(sub_string, \".\") ~= nil then\n       \
    \  return nil\n      end\n      if string.find(sub_string, \".\", 1, 1) ~= nil\
    \ then\n         return nil\n      end\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n      local sub_string = string.sub(file_name,1,string.find(file_name,\
    \ \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4sh7pykr.lua:71: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = file_name:find('.')\n  \
    \  if dot_index == nil then\n      return nil\n    end\n    -- Check that there\
    \ are no more than three digits in the file's name\n    local digits_index = file_name:sub(1,\
    \ dot_index - 1):match(\"^[0-9]+$\")\n    if digits_index == nil then\n      return\
    \ nil\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    local letters_index = file_name:sub(1, dot_index - 1):match(\"^[a-z]+$\"\
    )\n    if letters_index == nil then\n      return nil\n    end\n    -- Check that\
    \ there are no more than three digits in the file's name\n    local dot_index\
    \ = file_name:find('.')\n    if dot_index == nil then\n      return nil\n    end\n\
    \    -- Check that there are no more than three digits in the file's name\n  \
    \  local letters_index = file_name:sub(1, dot_index - 1):match(\"^[a-z]+$\")\n\
    \    if letters_index == nil then\n      return nil\n    end\n    -- Check that\
    \ there are no more than three digits in the file's name\n    local letters_index\
    \ = file_name:sub(1, dot_index - 1):match(\"^[a-z]+$\")\n    if letters_index\
    \ == nil then\n      return nil\n    end\n    -- Check that there are no more\
    \ than three digits in the file's name\n    local letters_index = file_name:sub(1,\
    \ dot_index - 1):match(\"^[a-z]+$\")\n    if letters_index == nil then\n     \
    \ return nil\n    end\n    -- Check that there are no more than three digits in\
    \ the file's name\n    local letters_index = file_name:sub(1, dot_index - 1):match(\"\
    ^[a-z]+$\")\n    if letters_index == nil then\n      return nil\n    end\n   \
    \ -- Check that there are no more than three digits in the file's name\n    local\
    \ letters_index = file_name:sub(1, dot_index - 1):match(\"^[a-z]+$\")\n    if\
    \ letters_index == nil then\n      return nil\n    end\n    -- Check that there\
    \ are no more than three digits in the file's name\n    local letters_index =\
    \ file_name:sub(1, dot_index - 1):match(\"^[a-z]+$\")\n    if letters_index ==\
    \ nil then\n      return nil\n    end\n    -- Check that there are no more than\
    \ three digits in the file's name\n    local letters_index = file_name:sub(1,\
    \ dot_index - 1):match(\"^[a-z]+$\")\n    if letters_index == nil then\n     \
    \ return nil\n    end\n    -- Check that there are no more than three digits in\
    \ the file's name\n    local letters_index = file_name:sub(1, dot_index - 1):match(\"\
    ^\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbrij0o96.lua:71: unfinished string near '\"^'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n        return \"No\"\n      end\n\
    \    end\n    -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the file name does not contain more than three digits ('0'-'9')\n    if file_name:sub(1,\
    \ 1) ~= \".\" then\n      if file_name:sub(1, 1) ~= \".\" then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n        return \"No\"\n      end\n\
    \    end\n    -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the file name does not contain more than three digits ('0'-'9')\n    if file_name:sub(1,\
    \ 1) ~= \".\" then\n      if file_name:sub(1, 1) ~= \".\" then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n        return \"No\"\n      end\n\
    \    end\n    -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the file name does not contain more than three digits ('0'-'9')\n    if file_name:sub(1,\
    \ 1) ~= \".\" then\n      if file_name:sub(1, 1) ~= \".\" then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if file_name:sub(1, 1) ~= \".\" then\n\
    \      if file_name:sub(1, 1) ~= \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp87kqe8gf.lua:76: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty\n    if file_name:sub(1, 1) ~= \"\" then\n      -- Check that the\
    \ substring before the dot starts with a latin alphapet letter\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n    local extension = string.lower(string.sub(file_name:sub(1,\
    \ #file_name), #file_name))\n    if extension ~= \"txt\" and extension ~= \"exe\"\
    \ and extension ~= \"dll\" then\n      return \"No\"\n    end\n  end\n  return\
    \ \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1jgcycm.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmph1jgcycm.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%0\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%1\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%2\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%3\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%4\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%5\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%6\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%7\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%8\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%9\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%0\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%1\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%2\") then\n\
    \      return \"No\"\n    end\n    -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n    if string.find(file_name, \"%3\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzk2teppb.lua:76: unfinished string near '\"%3'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    local file_ext = string.sub(file_name, string.find(file_name,\
    \ \".\") + 1)\n    -- Check that the file extension contains only these extensions:\
    \ \n    -- ['txt', 'exe', 'dll']\n    if string.find(file_ext, \".\") ~= nil then\n\
    \      local file_ext_ext = string.sub(file_ext, string.find(file_ext, \".\")\
    \ + 1)\n      -- Check that there are no more than three digits in the file extension\n\
    \      if string.find(file_ext_ext, \".\") ~= nil then\n        local file_ext_ext_ext\
    \ = string.sub(file_ext_ext, string.find(file_ext_ext, \".\") + 1)\n        if\
    \ string.find(file_ext_ext_ext, \".\") ~= nil then\n          local file_ext_ext_ext_ext\
    \ = string.sub(file_ext_ext_ext, string.find(file_ext_ext_ext, \".\") + 1)\n \
    \         if string.find(file_ext_ext_ext_ext, \".\") ~= nil then\n          \
    \  local file_ext_ext_ext_ext_ext = string.sub(file_ext_ext_ext_ext, string.find(file_ext_ext_ext_ext,\
    \ \".\") + 1)\n            if string.find(file_ext_ext_ext_ext_ext, \".\") ~=\
    \ nil then\n              local file_ext_ext_ext_ext_ext_ext = string.sub(file_ext_ext_ext_ext_ext,\
    \ string.find(file_ext_ext_ext_ext_ext, \".\") + 1)\n              if string.find(file_ext_ext_ext_ext_ext_ext,\
    \ \".\") ~= nil then\n                local file_ext_ext_ext_ext_ext_ext_ext =\
    \ string.sub(file_ext_ext_ext_ext_ext_ext, string.find(file_ext_ext_ext_ext_ext_ext,\
    \ \".\") + 1)\n                if string.find(file_ext_ext_ext_ext_ext_ext_ext,\
    \ \".\") ~= nil then\n                  local file_ext_ext_ext_ext_ext_ext_ext_ext\
    \ = string.sub(file_ext_ext_ext_ext_ext_ext_ext, string.find(file_ext_ext_ext_ext_ext_ext_ext,\
    \ \".\") + 1)\n                  if string.find(file_ext_ext_ext_ext_ext_ext_ext_ext,\
    \ \".\") ~= nil then\n                    local file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext\
    \ = string.sub(file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext, string.find(file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext,\
    \ \".\") + 1)\n                    if string.find(file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext,\
    \ \".\") ~= nil then\n                      local file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext\
    \ = string.sub(file_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext_ext, string.find(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp86pjp6gg.lua:38: ')' expected (to close '(' at line 37) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9][0-9]\") ~= nil and\n         string.find(file_name,\
    \ \".\") ~= nil and\n         string.find(file_name, \"^[a-z][a-z]\") ~= nil and\n\
    \         string.find(file_name, \"^[a-z][a-z][a-z][a-z]\") ~= nil and\n     \
    \    string.find(file_name, \"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp812m_4k9.lua:18: unfinished string near '\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty\n    if file_name ~= \"\" then\n      -- Check that the substring\
    \ before the dot starts with a latin alphapet letter\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(string.lower(file_name), 1, 1)) then\n       \
    \ return \"No\"\n      end\n    end\n    -- Check that the substring after the\
    \ dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name, \"\
    exe\") ~= nil then\n      if string.find(file_name, \"dll\") ~= nil then\n   \
    \     return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_iyxy6e.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4_iyxy6e.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      -- Check that there are no more than\
    \ three digits in the file's name\n      if string.find(file_name, \"%.\") ~=\
    \ nil then\n         if string.len(file_name) > 3 then\n            return false\n\
    \         end\n      end\n      -- Check that there are no more than three digits\
    \ in the file's name\n      if string.find(file_name, \"%.\") ~= nil then\n  \
    \       if string.len(file_name) > 3 then\n            return false\n        \
    \ end\n      end\n      -- Check that there are no more than three digits in the\
    \ file's name\n      if string.find(file_name, \"%.\") ~= nil then\n         if\
    \ string.len(file_name) > 3 then\n            return false\n         end\n   \
    \   end\n      -- Check that there are no more than three digits in the file's\
    \ name\n      if string.find(file_name, \"%.\") ~= nil then\n         if string.len(file_name)\
    \ > 3 then\n            return false\n         end\n      end\n      -- Check\
    \ that there are no more than three digits in the file's name\n      if string.find(file_name,\
    \ \"%.\") ~= nil then\n         if string.len(file_name) > 3 then\n          \
    \  return false\n         end\n      end\n      -- Check that there are no more\
    \ than three digits in the file's name\n      if string.find(file_name, \"%.\"\
    ) ~= nil then\n         if string.len(file_name) > 3 then\n            return\
    \ false\n         end\n      end\n      -- Check that there are no more than three\
    \ digits in the file's name\n      if string.find(file_name, \"%.\") ~= nil then\n\
    \         if string.len(file_name) > 3 then\n            return false\n      \
    \   end\n      end\n      -- Check that there are no more than three digits in\
    \ the file's name\n      if string.find(file_name, \"%.\") ~= nil then\n     \
    \    if string.len(file_name) > 3 then\n            return false\n         end\n\
    \      end\n      -- Check that there are no more than three digits in the file's\
    \ name\n      if string.find(file_name, \"%.\") ~= nil then\n         if string.len(file_name)\
    \ > 3 then\n            return false\n         end\n      end\n      -- Check\
    \ that there are no more than three digits in the file's name\n      if string.find(file_name,\
    \ \"%.\") ~= nil then\n         if string.len(file_name) > 3 then\n          \
    \  return false\n         end\n      end\n      -- Check that there are no more\
    \ than three digits in the file's name\n      if string.find(file_name, \"%.\"\
    ) ~= nil then\n         if string.len(file_name) > 3 then\n            return\
    \ false\n         end\n      end\n      -- Check that there are no more than three\
    \ digits in the file's name\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkjinm6e8.lua:116: 'end' expected (to close 'if' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, string.sub(file_name,1,1)) == nil then\n    \
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, \"exe\") ~= nil then\n    \
    \      -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n          if string.find(file_name, \"dll\") ~= nil then\n  \
    \          return 'Yes'\n          else\n            return 'No'\n          end\n\
    \        else\n          return 'No'\n        end\n      else\n        return\
    \ 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwhkzy54.lua:44:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprwhkzy54.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 1\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return false\n \
    \  end\n   if file_name:sub(1, 2) ~= '.' then\n      return false\n   end\n  \
    \ if file_name:sub(1, 3) ~= 'txt' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 3) ~= 'exe' then\n      return false\n   end\n   if file_name:sub(1, 3) ~= 'dll'\
    \ then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdncrr9ym.lua:47:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpdncrr9ym.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n     \
    \ return 'No'\n    end\n    -- Check that the substring before the dot is not\
    \ empty, and it starts with a latin alphapet letter\n    if file_name:sub(1, 1)\
    \ ~= '' then\n      if string.find(string.lower(file_name:sub(1, 1)), string.letters(string.byte('a'))\
    \ .. string.letters(string.byte('z')) or string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte('A')) .. string.letters(string.byte('Z')) )\
    \ then\n        return 'No'\n      end\n    end\n    -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(nil,\
    \ 1), 'exe') ~= nil then\n      return 'No'\n    end\n    if string.find(file_name:sub(nil,\
    \ 1), 'dll') ~= nil then\n      return 'No'\n    end\n    return 'Yes'\n  end\n\
    \  return 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyhtps82t.lua:21: ')' expected near 'then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return nil\n   end\n   if file_name:sub(1, 1)\
    \ ~= '\\' or file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   if\
    \ file_name:sub(2, 2) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 2), 1, 1)) then\n      return\
    \ nil\n   end\n   if string.find(file_name:sub(2, 2), {'txt', 'exe', 'dll'}) ==\
    \ nil then\n      return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxsjlamhy.lua:17: 'then' expected near '~'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^%a..%z\") ~= nil and\n    string.find(file_name,\
    \ \".\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqge2osgn.lua:47: 'end' expected (to close 'function' at line\
    \ 13) near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name does\
    \ not contain more than three digits ('0'-'9')\n   if file_name ~= nil and file_name\
    \ ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(2,\
    \ 2) ~= \"0\" then\n            if file_name:sub(3, 3) ~= \"0\" then\n       \
    \        if file_name:sub(4, 4) ~= \"0\" then\n                  if file_name:sub(5,\
    \ 5) ~= \"0\" then\n                     if file_name:sub(6, 6) ~= \"0\" then\n\
    \                        if file_name:sub(7, 7) ~= \"0\" then\n              \
    \             if file_name:sub(8, 8) ~= \"0\" then\n                         \
    \     if file_name:sub(9, 9) ~= \"0\" then\n                                 return\
    \ \"No\"\n                              end\n                           end\n\
    \                        end\n                     end\n                  end\n\
    \               end\n            end\n         end\n      end\n   end\n   -- Check\
    \ that the file name starts with a latin alphapet letter\n   if file_name ~= nil\
    \ and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n   \
    \      if file_name:sub(1, 1) ~= \"a\" then\n            if file_name:sub(1, 1)\
    \ ~= \"A\" then\n               return \"No\"\n            end\n         end\n\
    \      end\n   end\n   -- Check that the file name contains one of these extensions:\
    \ ['txt', 'exe', 'dll']\n   if file_name ~= nil and file_name ~= \"\" then\n \
    \     if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(1, 1) ~=\
    \ \"a\" then\n            if file_name:sub(1, 1) ~= \"A\" then\n             \
    \  if file_name:sub(1, 1) ~= \"t\" then\n                  if file_name:sub(1,\
    \ 1) ~= \"T\" then\n                     if file_name:sub(1, 1) ~= \"e\" then\n\
    \                        if file_name:sub(1, 1) ~= \"E\" then\n              \
    \             if file_name:sub(1, 1) ~= \"x\" then\n                         \
    \     if file_name:sub(1, 1) ~= \"X\" then\n                                 if\
    \ file_name:sub(1, 1) ~= \"e\" then\n                                    if file_name:sub(1,\
    \ 1) ~= \"E\" then\n                                       if file_name:sub(1,\
    \ 1) ~= \"x\" then\n                                         if file_name:sub(1,\
    \ 1) ~= \"X\" then\n                                            if file_name:sub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp49htvudp.lua:68: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9][0-9][0-9]\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \"^[a-z][a-z][a-z]\") ~= nil and string.find(file_name,\
    \ \"^[a-z][a-z][a-z].*\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nc2w8ks.lua:20:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp9nc2w8ks.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = string.find(file_name, \"\
    .\")\n    if dot_index == nil then\n      return 'No'\n    elseif dot_index ==\
    \ 0 then\n      return 'No'\n    elseif dot_index > 1 then\n      return 'No'\n\
    \    end\n  end\n  -- Check that the file name contains only digits (0-9)\n  if\
    \ file_name ~= nil and file_name ~= '' then\n    local digits_index = string.find(file_name,\
    \ \"[0-9]\")\n    if digits_index == nil then\n      return 'No'\n    elseif digits_index\
    \ > 1 then\n      return 'No'\n    end\n  end\n  -- Check that the file name starts\
    \ with a latin alphapet letter\n  if file_name ~= nil and file_name ~= '' then\n\
    \    local letter_index = string.find(file_name, \"[a-zA-Z]\")\n    if letter_index\
    \ == nil then\n      return 'No'\n    elseif letter_index > 1 then\n      return\
    \ 'No'\n    end\n  end\n  -- Check that the file name contains only latin alphapet\
    \ letters and dots\n  if file_name ~= nil and file_name ~= '' then\n    local\
    \ letter_index = string.find(file_name, \"[a-zA-Z.]\")\n    if letter_index ==\
    \ nil then\n      return 'No'\n    elseif letter_index > 1 then\n      return\
    \ 'No'\n    end\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizt0z8x5.lua:58:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpizt0z8x5.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if string.sub(file_name,1,1) ~= \"\" then\n      if string.sub(file_name,1,1)\
    \ ~= string.sub(file_name,1,1) then\n        return false\n      end\n    end\n\
    \    -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n    local extensions = { \"txt\", \"exe\", \"dll\" }\n    for _, extension\
    \ in ipairs(extensions) do\n      if string.find(file_name, extension) ~= nil\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp7v_je1.lua:37:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmplp7v_je1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \".\" then\n    return\
    \ false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_txzfvpc.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"^[%z\\1-9]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^.]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^.]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^a-zA-Z]+\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-zA-Z]+$\", \"\")\n    local file_name = file_name:gsub(\"^[^a-zA-Z]+\", \"\
    \")\n    local file_name = file_name:gsub(\"^[^a-zA-Z\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpolc5p4xu.lua:46: unfinished string near '\"^[^a-zA-Z'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, '.') ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.sub(file_name,1,1) ~= nil then\n        -- Check that the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n        if string.find(string.lower(string.sub(file_name,1,-1)),{'txt','exe','dll'})\
    \ ~= nil then\n          return 'Yes'\n        else\n          return 'No'\n \
    \       end\n      else\n        return 'No'\n      end\n    else\n      return\
    \ 'No'\n    end\n  else\n    return 'No'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuefvl92o.lua:20:\
    \ bad argument #2 to 'find' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpuefvl92o.lua:20: in function 'candidate'\n\t/tmp/tmpuefvl92o.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name contains\
    \ only digits (0-9)\n   if file_name ~= nil and file_name ~= \"\" then\n     \
    \ if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(2, 2) ~= \"\
    0123456789\" then\n            return \"No\"\n         end\n      end\n   end\n\
    \   -- Check that the file name starts with a latin alphapet letter\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1),\
    \ 1, 1)) then\n            return \"No\"\n         end\n      end\n   end\n  \
    \ -- Check that the file name contains only 'txt', 'exe', 'dll'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         if string.find(file_name:sub(2, 2), \"txt\") ~= nil then\n         \
    \   if string.find(file_name:sub(2, 2), \"exe\") ~= nil then\n               if\
    \ string.find(file_name:sub(2, 2), \"dll\") ~= nil then\n                  return\
    \ \"Yes\"\n               end\n            end\n         end\n      end\n   end\n\
    \   return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5lhzty8.lua:54:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpx5lhzty8.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local num_digits = string.len(file_name)\n    if num_digits > 3 then\n  \
    \      return 'No'\n    end\n    local first_letter = string.sub(file_name, 1,\
    \ 1)\n    if first_letter ~= string.upper(first_letter) then\n        return 'No'\n\
    \    end\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return 'No'\n    end\n    local extension = string.sub(file_name,\
    \ dot_index + 1, string.len(file_name))\n    if extension ~= \".txt\" and extension\
    \ ~= \".exe\" and extension ~= \".dll\" then\n        return 'No'\n    end\n \
    \   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfzkgf6p.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptfzkgf6p.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n     \
    \ return 'No'\n    end\n    -- Check that the file name starts with a latin alphapet\
    \ letter\n    if file_name:sub(1, 1) ~= 'a' and file_name:sub(1, 1) ~= 'A' then\n\
    \      return 'No'\n    end\n    -- Check that the file name contains only latin\
    \ alphapet letters and '0'-'9'\n    if file_name:sub(1, 1) ~= 'a' or file_name:sub(1,\
    \ 1) ~= 'A' or file_name:sub(1, 1) ~= '0' or file_name:sub(1, 1) ~= '9' then\n\
    \      return 'No'\n    end\n    -- Check that the file name contains only 'txt',\
    \ 'exe', 'dll'\n    if file_name:sub(1, 4) ~= 'txt' or file_name:sub(1, 4) ~=\
    \ 'exe' or file_name:sub(1, 4) ~= 'dll' then\n      return 'No'\n    end\n  end\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl70pqt4z.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl70pqt4z.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") then\n      return false\n   end\n   if string.find(file_name,\
    \ \"..\") then\n      return false\n   end\n   if string.find(file_name, \"%\"\
    ) then\n      return false\n   end\n   if string.find(file_name, \"/\") then\n\
    \      return false\n   end\n   if string.find(file_name, \"\\\\\") then\n   \
    \   return false\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ false\n   end\n   if string.find(file_name, \"%\") then\n      return false\n\
    \   end\n   if string.find(file_name, \"/\") then\n      return false\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return false\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return false\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return false\n   end\n   if string.find(file_name, \"/\"\
    ) then\n      return false\n   end\n   if string.find(file_name, \"\\\\\") then\n\
    \      return false\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ false\n   end\n   if string.find(file_name, \"%\") then\n      return false\n\
    \   end\n   if string.find(file_name, \"/\") then\n      return false\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return false\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return false\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return false\n   end\n   if string.find(file_name, \"/\"\
    ) then\n      return false\n   end\n   if string.find(file_name, \"\\\\\") then\n\
    \      return false\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ false\n   end\n   if string.find(file_name, \"%\") then\n      return false\n\
    \   end\n   if string.find(file_name, \"/\") then\n      return false\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return false\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return false\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return false\n   end\n   if string.find(file_name, \"/\"\
    ) then\n      return false\n   end\n   if string.find(file_name, \"\\\\\") then\n\
    \      return false\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ false\n   end\n   if string.find(file_name, \"%\") then\n      return false\n\
    \   end\n   if string.find(file_name, \"/\") then\n      return false\n   end\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7meemp70.lua:143: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local file_name = file_name:gsub(\"\
    %w+\", \"\")\n    local file_name = file_name:gsub(\"%w+$\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpovy0iwt1.lua:84: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, \".\") then\n  \
    \    -- Check that the substring before the dot is not empty\n      if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n        -- Check that the substring before the dot\
    \ starts with a latin alphapet letter\n        if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n          -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n          if string.find(file_name, \".\",\
    \ 1, 2) ~= nil then\n            -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name, \"\
    .\", 1, 3) ~= nil then\n              return 'Yes'\n            else\n       \
    \       return 'No'\n            end\n          else\n            return 'No'\n\
    \          end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx5bavr9.lua:50:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpxx5bavr9.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*$\") ~= nil and\n         string.find(file_name,\
    \ \".\") ~= nil and\n         string.find(file_name, \"^[a-z][a-z][a-z]$\") ~=\
    \ nil and\n         string.find(file_name, \"^[a-z][a-z][a-z][a-z][a-z][a-z]$\"\
    ) ~= nil and\n         string.find(file_name, \"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpux0omf3n.lua:18: unfinished string near '\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a latin alphapet letter\n    if file_name:sub(1,\
    \ 1) ~= \"\" then\n      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2,\
    \ #file_name), {'txt', 'exe', 'dll'}) == nil then\n      return \"No\"\n    end\n\
    \  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6w18a8w.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmps6w18a8w.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n        return false\n    end\n    local\
    \ file_name = file_name:sub(1, dot_index)\n    local first_letter = string.sub(file_name,1,1)\n\
    \    if first_letter ~= string.upper(first_letter) then\n        return false\n\
    \    end\n    local extensions = { \"txt\", \"exe\", \"dll\" }\n    local extension_index\
    \ = string.find(file_name, extensions)\n    if extension_index == nil then\n \
    \       return false\n    end\n    local extension = file_name:sub(extension_index\
    \ + 3)\n    if extension == \"exe\" then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaybu54ok.lua:39:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpaybu54ok.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= '' then\n      -- Get the substring before the dot '.'\n\
    \      local file_name = file_name:sub(1, file_name:find('.')-1)\n      -- Check\
    \ that it starts with a latin alphapet letter\n      if file_name ~= nil and file_name\
    \ ~= '' then\n         if file_name:byte(1) ~= 65 then\n            -- Check that\
    \ it contains only latin alphapet letters and '0'-'9'\n            if file_name\
    \ ~= nil and file_name ~= '' then\n               if file_name:byte(1) ~= 122\
    \ then\n                  -- Check that it contains only latin alphapet letters\
    \ and 'A'-'Z'\n                  if file_name ~= nil and file_name ~= '' then\n\
    \                     return 'No'\n                  end\n               end\n\
    \            end\n         end\n      end\n   end\n   return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg_c_kfo.lua:40:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpyg_c_kfo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"[^0-9.]\", \"\")\n    local file_name\
    \ = file_name:sub(1, 3)\n    local file_name = file_name:sub(1, 1)\n    local\
    \ file_name = file_name:lower()\n    local file_name = file_name:sub(1, 3)\n \
    \   local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\n    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:sub(1,\
    \ 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpweedtge4.lua:97: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(file_name, \"^[0-9]{1,3}\\.[a-zA-Z]+$\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw74aj51.lua:20:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxw74aj51.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \"\" then\n        if string.find(string.lower(file_name:sub(1, 1)), string.letters(string.byte(\"\
    a\"..string.byte(\"z\"))) ~= nil then\n          return \"No\"\n        end\n\
    \      end\n    end\n    -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n    if file_name ~= nil and file_name ~= \"\" then\n\
    \      if file_name:sub(2, 2) ~= \"exe\" and file_name:sub(2, 2) ~= \"dll\" and\
    \ file_name:sub(2, 2) ~= \"txt\" then\n        return \"No\"\n      end\n    end\n\
    \  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmm_4ts0d.lua:22: ')' expected near 'then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ > 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^[a-zA-Z]\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^[0-9]\") then\n   \
    \   return nil\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_ybz537.lua:35:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi_ybz537.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return 'No'\n      else\n         if string.find(file_name,\
    \ \".\") ~= 1 then\n            if string.find(file_name, \".\") ~= 1 then\n \
    \              if string.find(file_name, \".\") ~= 1 then\n                  if\
    \ string.find(file_name, \".\") ~= 1 then\n                     return 'No'\n\
    \                  else\n                     return 'No'\n                  end\n\
    \               else\n                  return 'No'\n               end\n    \
    \        else\n               return 'No'\n            end\n         else\n  \
    \          return 'No'\n         end\n      end\n   else\n      return 'No'\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8el1inl.lua:44:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpt8el1inl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_ext = file_name:sub(1,4)\n\
    \  local file_ext = file_ext:sub(1,3)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\n  local file_ext = file_ext:sub(1,1)\n\
    \  local file_ext = file_ext:sub(1,1)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn7sa88yu.lua:93: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '-' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 2) ~= '-' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 3) ~= '-' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 4) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 5) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 6) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 7) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 8) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 9) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 9) ~= 'txt'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 9) ~= 'exe' then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 9) ~= 'dll' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lpvdnu6.lua:62:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0lpvdnu6.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      if string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte(string.sub(file_name:sub(1, 1), 1, 1))) ~= nil)\
    \ then\n        return \"No\"\n      end\n    end\n    -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(string.lower(file_name:sub(1,\
    \ -1)), {'txt', 'exe', 'dll'}) ~= nil then\n      return \"Yes\"\n    end\n  end\n\
    \  return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3br0rt1.lua:36:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl3br0rt1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   elseif #file_name == 0 then\n\
    \      return false\n   elseif file_name:sub(1, 1) ~= '\\' or file_name:sub(1,\
    \ 1) ~= '.' then\n      return false\n   elseif file_name:sub(1, 2) ~= '' then\n\
    \      return false\n   elseif #file_name ~= 1 then\n      return false\n   elseif\
    \ file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n\
    \      return false\n   elseif #file_name ~= 2 then\n      return false\n   elseif\
    \ string.find(file_name:sub(2, 3), 'exe') ~= nil then\n      return false\n  \
    \ elseif string.find(file_name:sub(2, 3), 'dll') ~= nil then\n      return false\n\
    \   else\n      return true\n   end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjxf07rud.lua:18: 'then' expected near '.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n        return 'No'\n    end\n    local\
    \ file_name = file_name:sub(1, dot_index)\n    local first_letter = string.sub(file_name,1,1)\n\
    \    if first_letter ~= 'a' and first_letter ~= 'A' then\n        return 'No'\n\
    \    end\n    local extensions = { \"txt\", \"exe\", \"dll\" }\n    local extension\
    \ = string.sub(file_name,dot_index+1)\n    if #extensions == 0 then\n        return\
    \ 'No'\n    end\n    if #extensions > 1 then\n        return 'No'\n    end\n \
    \   if extensions[#extensions] ~= extension then\n        return 'No'\n    end\n\
    \    return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r0yflna.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6r0yflna.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot\n  if file_name ~= nil\
    \ and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n     \
    \ return \"No\"\n    end\n    -- Check that the substring before the dot is not\
    \ empty\n    if file_name:sub(1, 1) ~= \"\" then\n      -- Check that the substring\
    \ before the dot starts with a latin alphapet letter\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the substring after the dot is\
    \ one of these\n    local extensions = { \"txt\", \"exe\", \"dll\" }\n    for\
    \ _, extension in ipairs(extensions) do\n      if file_name:sub(-3, 3) ~= extension\
    \ then\n        return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyiyp4fq.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptyiyp4fq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return nil\n  \
    \ end\n   if file_name:sub(1, 1) ~= '/'  then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '0' or file_name:sub(1, 1) ~= '9' then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= 'a' or file_name:sub(1, 1) ~= 'z' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'A' or file_name:sub(1, 1) ~= 'Z'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n    \
    \  return nil\n   end\n   if file_name:sub(1, 1) ~= 'txt' or file_name:sub(1,\
    \ 1) ~= 'exe' or file_name:sub(1, 1) ~= 'dll' then\n      return nil\n   end\n\
    \   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5xxuyfi6.lua:20: unfinished string near ''' then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:gsub(\"^%w+%.\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:gsub(\"%w+%.\", \"\") -- Remove all\
    \ non-alphanumeric characters\n  local file_name = file_name:gsub(\"^%w+\", \"\
    \") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    %w+\", \"\") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    ^%w+%.\", \"\") -- Remove all non-alphanumeric characters\n  local file_name =\
    \ file_name:gsub(\"%w+%.\", \"\") -- Remove all non-alphanumeric characters\n\
    \  local file_name = file_name:gsub(\"^%w+\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:gsub(\"%w+\", \"\") -- Remove all\
    \ non-alphanumeric characters\n  local file_name = file_name:gsub(\"^%w+%.\",\
    \ \"\") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    %w+%.\", \"\") -- Remove all non-alphanumeric characters\n  local file_name =\
    \ file_name:gsub(\"^%w+\", \"\") -- Remove all non-alphanumeric characters\n \
    \ local file_name = file_name:gsub(\"%w+\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:gsub(\"^%w+%.\", \"\") -- Remove all\
    \ non-alphanumeric characters\n  local file_name = file_name:gsub(\"%w+%.\", \"\
    \") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    ^%w+\", \"\") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    %w+\", \"\") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    ^%w+%.\", \"\") -- Remove all non-alphanumeric characters\n  local file_name =\
    \ file_name:gsub(\"%w+%.\", \"\") -- Remove all non-alphanumeric characters\n\
    \  local file_name = file_name:gsub(\"^%w+\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:gsub(\"%w+\", \"\") -- Remove all\
    \ non-alphanumeric characters\n  local file_name = file_name:gsub(\"^%w+%.\",\
    \ \"\") -- Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    %w+%.\", \"\") -- Remove all non-alphanumeric characters\n  local file_name =\
    \ file_name\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6fy1l9a4.lua:69: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2zkb9pd4.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check the length of the file name.\n  if #file_name > 3 then\n    return\
    \ 'No'\n  end\n  -- Check the file's name.\n  if file_name ~= string.sub(file_name,\
    \ 1, string.find(file_name, \".\", 1, true)) then\n    return 'No'\n  end\n  --\
    \ Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1 then\n\
    \    return 'No'\n  end\n  -- Check the file's name.\n  if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n  -- Check the file's name.\n\
    \  if string.find(file_name, \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n\
    \  -- Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1\
    \ then\n    return 'No'\n  end\n  -- Check the file's name.\n  if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n  -- Check the file's name.\n\
    \  if string.find(file_name, \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n\
    \  -- Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1\
    \ then\n    return 'No'\n  end\n  -- Check the file's name.\n  if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n  -- Check the file's name.\n\
    \  if string.find(file_name, \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n\
    \  -- Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1\
    \ then\n    return 'No'\n  end\n  -- Check the file's name.\n  if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n  -- Check the file's name.\n\
    \  if string.find(file_name, \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n\
    \  -- Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1\
    \ then\n    return 'No'\n  end\n  -- Check the file's name.\n  if string.find(file_name,\
    \ \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n  -- Check the file's name.\n\
    \  if string.find(file_name, \".\", 1, true) ~= 1 then\n    return 'No'\n  end\n\
    \  -- Check the file's name.\n  if string.find(file_name, \".\", 1, true) ~= 1\
    \ then\n    return 'No'\n  end\n  -- Check the file's name.\n  if string.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa7n73phb.lua:88: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbji_h1x2.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- If the file's name contains more than three digits, return 'No'.\n   if\
    \ string.find(file_name, \"%[0-9]\") then\n      return 'No'\n   end\n   -- If\
    \ the file's name contains exactly one dot, return 'No'.\n   if string.find(file_name,\
    \ \".\") then\n      return 'No'\n   end\n   -- If the file's name starts with\
    \ a latin alphapet letter, return 'No'.\n   if string.find(file_name, \"^[%a%z]\"\
    ) then\n      return 'No'\n   end\n   -- If the file's name ends with one of these\
    \ extensions, return 'No'.\n   if string.find(file_name, \"%[txt]\") then\n  \
    \    return 'No'\n   end\n   if string.find(file_name, \"%[exe]\") then\n    \
    \  return 'No'\n   end\n   if string.find(file_name, \"%[dll]\") then\n      return\
    \ 'No'\n   end\n   -- If the file's name contains any other character, return\
    \ 'No'.\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkswf12on.lua:43:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkswf12on.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name ~= \".\" then\n    -- Check that the\
    \ substring before the dot is not empty, and it starts with a letter from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" and file_name:sub(1, 1) ~= \"\" then\n      --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \      if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1,\
    \ 2) ~= \"\" then\n        -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n        if file_name ~= nil and file_name ~= \"\
    \" and file_name ~= \".\" and file_name:sub(1, 3) ~= \"\" then\n          -- Check\
    \ that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n  \
    \        if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\" and\
    \ file_name:sub(1, 4) ~= \"\" then\n            -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n            if file_name ~=\
    \ nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1, 5) ~=\
    \ \"\" then\n              -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n              if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" and file_name:sub(1, 6) ~= \"\" then\n      \
    \          -- Check that the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n                if file_name ~= nil and file_name ~= \"\" and\
    \ file_name ~= \".\" and file_name:sub(1, 7) ~= \"\" then\n                  --\
    \ Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \                  if file_name ~= nil and file_name ~= \"\" and file_name ~=\
    \ \".\" and file_name:sub(1, 8) ~= \"\" then\n                    -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \             if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\"\
    \ and file_name:sub(1, 9) ~= \"\" then\n                      -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n           \
    \           if file_name ~= nil and file_name ~= \"\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7m_w8d63.lua:36: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the dot '.' in the file's name\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z_]+\", \"\") -- Remove all letters after the dot\n    local file_name = file_name:gsub(\"\
    [\\.]$\", \"\") -- Remove the last dot\n    local file_name = file_name:gsub(\"\
    ^[a-z_]+\", \"\") -- Remove all letters before the dot\n    local file_name =\
    \ file_name:gsub(\"[^a-z0-9]\", \"\") -- Remove all non-letters from the file's\
    \ name\n    local file_name = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all\
    \ letters before the dot\n    local file_name = file_name:gsub(\"[^a-z0-9]\",\
    \ \"\") -- Remove all non-letters from the file's name\n    local file_name =\
    \ file_name:gsub(\"^[a-z]\", \"\") -- Remove all letters before the dot\n    local\
    \ file_name = file_name:gsub(\"[^a-z0-9]\", \"\") -- Remove all non-letters from\
    \ the file's name\n    local file_name = file_name:gsub(\"^[a-z]\", \"\") -- Remove\
    \ all letters before the dot\n    local file_name = file_name:gsub(\"[^a-z0-9]\"\
    , \"\") -- Remove all non-letters from the file's name\n    local file_name =\
    \ file_name:gsub(\"^[a-z]\", \"\") -- Remove all letters before the dot\n    local\
    \ file_name = file_name:gsub(\"[^a-z0-9]\", \"\") -- Remove all non-letters from\
    \ the file's name\n    local file_name = file_name:gsub(\"^[a-z]\", \"\") -- Remove\
    \ all letters before the dot\n    local file_name = file_name:gsub(\"[^a-z0-9]\"\
    , \"\") -- Remove all non-letters from the file's name\n    local file_name =\
    \ file_name:gsub(\"^[a-z]\", \"\") -- Remove all letters before the dot\n    local\
    \ file_name = file_name:gsub(\"[^a-z0-9]\", \"\") -- Remove all non-letters from\
    \ the file's name\n    local file_name = file_name:gsub(\"^[a-z]\", \"\") -- Remove\
    \ all letters before the dot\n    local file_name = file_name:gsub(\"[^a-z0-9]\"\
    , \"\") -- Remove all non-letters from the file's name\n    local file_name =\
    \ file_name:gsub(\"^[a-z]\", \"\") -- Remove all letters before the dot\n    local\
    \ file_name = file_name:gsub(\"[^a-z0-9]\", \"\") -- Remove all non-letters from\
    \ the file's name\n    local file_name = file_name\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_uklr_42.lua:70: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn530vmc.lua:38:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqn530vmc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n        return false\n    end\n    local\
    \ file_name = file_name:sub(1, dot_index)\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmaoetytm.lua:92: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2hyolach.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnlwq7uu.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local dot_index = file_name:find(\".\")\n\
    \    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if dot_index > 0 then\n \
    \     local first_letter = file_name:sub(1, 1)\n      if first_letter ~= nil and\
    \ first_letter ~= \"\" then\n        local first_letter_index = string.lower(first_letter)\n\
    \        if first_letter_index ~= 'a' and first_letter_index ~= 'b' and first_letter_index\
    \ ~= 'c' and first_letter_index ~= 'd' and first_letter_index ~= 'e' and first_letter_index\
    \ ~= 'f' and first_letter_index ~= 'g' and first_letter_index ~= 'h' and first_letter_index\
    \ ~= 'i' and first_letter_index ~= 'j' and first_letter_index ~= 'k' and first_letter_index\
    \ ~= 'l' and first_letter_index ~= 'm' and first_letter_index ~= 'n' and first_letter_index\
    \ ~= 'o' and first_letter_index ~= 'p' and first_letter_index ~= 'q' and first_letter_index\
    \ ~= 'r' and first_letter_index ~= 's' and first_letter_index ~= 't' and first_letter_index\
    \ ~= 'u' and first_letter_index ~= 'v' and first_letter_index ~= 'w' and first_letter_index\
    \ ~= 'x' and first_letter_index ~= 'y' and first_letter_index ~= 'z' then\n  \
    \        return \"No\"\n        end\n      end\n    end\n    -- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    local\
    \ extension = file_name:sub((dot_index + 1), (string.len(file_name) - 1))\n  \
    \  if extension ~= nil and extension ~= \"\" then\n      if extension == \"txt\"\
    \ or extension == \"exe\" or extension == \"dll\" then\n        return \"Yes\"\
    \n      else\n        return \"No\"\n      end\n    end\n  end\n  return \"No\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin_053l4.lua:46:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpin_053l4.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if not (file_name:sub(1,1):byte() >= 65 and file_name:sub(1,1):byte()\
    \ <= 90) then\n    return 'No'\n  end\n  -- Check that the file name contains\
    \ only latin alphapet letters and 'txt', 'exe', 'dll'\n  -- The substring before\
    \ the dot should not be empty, and it starts with a letter from the \n  -- latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n  if not (file_name:sub(1,2):byte() >= 65 and\
    \ file_name:sub(1,2):byte() <= 90) then\n    return 'No'\n  end\n  -- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \  -- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \  if not (file_name:sub(2):byte() >= 48 and file_name:sub(2):byte() <= 57) then\n\
    \    return 'No'\n  end\n  -- Check that the file's name contains only latin alphapet\
    \ letters and 'txt', 'exe', 'dll'\n  -- The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n  if not (file_name:sub(3):byte() >= 48\
    \ and file_name:sub(3):byte() <= 57) then\n    return 'No'\n  end\n  -- Check\
    \ that the file's name contains only latin alphapet letters and 'txt', 'exe',\
    \ 'dll'\n  -- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n  if not (file_name:sub(4):byte() >= 48 and file_name:sub(4):byte()\
    \ <= 57) then\n    return 'No'\n  end\n  -- Check that the file's name contains\
    \ only latin alphapet letters and 'txt', 'exe', 'dll'\n  -- The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n  if not (file_name:sub(5):byte()\
    \ >= 48 and file_name:sub(5):byte() <= 57) then\n    return 'No'\n  end\n  --\
    \ Check that the file's name contains only latin alphapet letters and 'txt', 'exe',\
    \ 'dll'\n  -- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n  if not (file_name:sub(6):byte() >= 48 and file_name:sub(6):byte()\
    \ <= 57) then\n    return 'No'\n  end\n  -- Check that the file's name \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprk422r85.lua:86: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that there are no more than\
    \ three digits in the file's name\n  local digits = string.gsub(file_name, '%d+',\
    \ '')\n  if digits ~= file_name then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local digits = string.gsub(file_name,\
    \ '%d+', '')\n  if digits ~= file_name then\n    return 'No'\n  end\n  -- Check\
    \ that there are no more than three digits in the file's name\n  local digits\
    \ = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name then\n    return\
    \ 'No'\n  end\n  -- Check that there are no more than three digits in the file's\
    \ name\n  local digits = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name\
    \ then\n    return 'No'\n  end\n  -- Check that there are no more than three digits\
    \ in the file's name\n  local digits = string.gsub(file_name, '%d+', '')\n  if\
    \ digits ~= file_name then\n    return 'No'\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local digits = string.gsub(file_name,\
    \ '%d+', '')\n  if digits ~= file_name then\n    return 'No'\n  end\n  -- Check\
    \ that there are no more than three digits in the file's name\n  local digits\
    \ = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name then\n    return\
    \ 'No'\n  end\n  -- Check that there are no more than three digits in the file's\
    \ name\n  local digits = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name\
    \ then\n    return 'No'\n  end\n  -- Check that there are no more than three digits\
    \ in the file's name\n  local digits = string.gsub(file_name, '%d+', '')\n  if\
    \ digits ~= file_name then\n    return 'No'\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local digits = string.gsub(file_name,\
    \ '%d+', '')\n  if digits ~= file_name then\n    return 'No'\n  end\n  -- Check\
    \ that there are no more than three digits in the file's name\n  local digits\
    \ = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name then\n    return\
    \ 'No'\n  end\n  -- Check that there are no more than three digits in the file's\
    \ name\n  local digits = string.gsub(file_name, '%d+', '')\n  if digits ~= file_name\
    \ then\n    return 'No'\n  end\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuh_8upta.lua:111: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   \n   local file_name\
    \ = file_name:lower()\n   \n   if #file_name > 3 then\n      return nil\n   end\n\
    \   \n   if file_name ~= file_name then\n      return nil\n   end\n   \n   if\
    \ file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~=\
    \ '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n\
    \      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n\
    \   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   \n \
    \  if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~=\
    \ '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n\
    \      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n\
    \   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   \n \
    \  if file_name:sub(1, 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~=\
    \ '~' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n\
    \      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= '~\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzp7o3vn3.lua:112: unfinished string near ''~'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0n260xaj.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+$\", \"\")\n    local file_name = file_name:gsub(\"%.\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"\
    %w$\", \"\")\n    local file_name = file_name:gsub(\"%w%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"\
    %l$\", \"\")\n    local file_name = file_name:gsub(\"%l%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"\
    %h$\", \"\")\n    local file_name = file_name:gsub(\"%h%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%n\", \"\")\n    local file_name = file_name:gsub(\"\
    %n$\", \"\")\n    local file_name = file_name:gsub(\"%n%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%t\", \"\")\n    local file_name = file_name:gsub(\"\
    %t$\", \"\")\n    local file_name = file_name:gsub(\"%t%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%e\", \"\")\n    local file_name = file_name:gsub(\"\
    %e$\", \"\")\n    local file_name = file_name:gsub(\"%e%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%p\", \"\")\n    local file_name = file_name:gsub(\"\
    %p$\", \"\")\n    local file_name = file_name:gsub(\"%p%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%h\", \"\")\n    local file_name = file_name:gsub(\"\
    %h$\", \"\")\n    local file_name = file_name:gsub(\"%h%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"\
    %l$\", \"\")\n    local file_name = file_name:gsub(\"%l%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%n\", \"\")\n    local file_name = file_name:gsub(\"\
    %n$\", \"\")\n    local file_name = file_name:gsub(\"%n%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpugvcq0de.lua:50: unfinished string near '\"^'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    local file_ext = string.match(file_name, \"%.[^.]+$\"\
    )\n    -- Check that there are no more than three digits in the file's name\n\
    \    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"No\"\n\
    \    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%[0-9]\") ~= nil then\n      return \"\
    No\"\n    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2lktoplq.lua:107: 'end' expected (to close 'if' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(file_name, \"^%[A-z][A-z0-9]+\\.[txt|exe|dll]$\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdomcp5r.lua:20:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmppdomcp5r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.lower(file_name)\n    local dot_index = string.find(file_name,\
    \ \".\")\n    local dot_string = string.sub(file_name,1,dot_index)\n    local\
    \ dot_length = string.len(dot_string)\n    local dot_start_index = string.find(dot_string,\
    \ \"%a\")\n    local dot_start_string = string.sub(dot_string,1,dot_start_index)\n\
    \    local dot_start_length = string.len(dot_start_string)\n    local dot_start_letter\
    \ = string.sub(dot_start_string,1,1)\n    local dot_end_index = string.find(dot_string,\
    \ \"%A\")\n    local dot_end_string = string.sub(dot_string,dot_end_index+1)\n\
    \    local dot_end_length = string.len(dot_end_string)\n    local dot_end_letter\
    \ = string.sub(dot_end_string,1,1)\n    local dot_start_letter = string.lower(dot_start_letter)\n\
    \    local dot_end_letter = string.lower(dot_end_letter)\n    local dot_start_index\
    \ = string.find(dot_string, \"%a\")\n    local dot_end_index = string.find(dot_string,\
    \ \"%A\")\n    local dot_start_string = string.sub(dot_string,dot_start_index+1)\n\
    \    local dot_end_string = string.sub(dot_string,dot_end_index+1)\n    local\
    \ dot_start_length = string.len(dot_start_string)\n    local dot_end_length =\
    \ string.len(dot_end_string)\n    local dot_start_index = string.find(dot_string,\
    \ \"%a\")\n    local dot_end_index = string.find(dot_string, \"%A\")\n    local\
    \ dot_start_string = string.sub(dot_string,dot_start_index+1)\n    local dot_end_string\
    \ = string.sub(dot_string,dot_end_index+1)\n    local dot_start_length = string.len(dot_start_string)\n\
    \    local dot_end_length = string.len(dot_end_string)\n    local dot_start_index\
    \ = string.find(dot_string, \"%a\")\n    local dot_end_index = string.find(dot_string,\
    \ \"%A\")\n    local dot_start_string = string.sub(dot_string,dot_start_index+1)\n\
    \    local dot_end_string = string.sub(dot_string,dot_end_index+1)\n    local\
    \ dot_start_length = string.len(dot_start_string)\n    local dot_end_length =\
    \ string.len(dot_end_string)\n    local dot_start_index = string.find(dot_string,\
    \ \"%a\")\n    local dot_end_index = string.find(dot_string, \"%A\")\n    local\
    \ dot_start_string = string.sub(dot_string,dot_start_index+1)\n    local dot_end_string\
    \ = string.sub(dot_string,dot_end_index+1)\n    local dot_start_length = string.len(dot_start_string)\n\
    \    local dot_end_length = string.len(dot_end_string)\n    local dot_start_index\
    \ = string.find(dot_string, \"%a\")\n    local dot_end_index = string.find(dot_string,\
    \ \"%A\")\n    local dot_start_string = string.sub(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplb7s4n3j.lua:55: ')' expected (to close '(' at line 54) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    local file_name = string.gsub(file_name, \"\", \".\"\
    )\n    -- Check that the substring before the dot is not empty\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      local file_name = string.gsub(file_name, \"\", \"\
    .\")\n      -- Check that the substring before the dot starts with a latin alphapet\
    \ letter\n      if string.find(file_name, \".\") ~= nil then\n        local file_name\
    \ = string.gsub(file_name, \"\", \".\")\n        -- Check that the substring after\
    \ the dot is one of these\n        if string.find(file_name, \".\") ~= nil then\n\
    \          local file_name = string.gsub(file_name, \"\", \".\")\n          --\
    \ Check that the substring after the dot is one of these\n          if string.find(file_name,\
    \ \".\") ~= nil then\n            local file_name = string.gsub(file_name, \"\"\
    , \".\")\n            -- Check that the substring after the dot is one of these\n\
    \            if string.find(file_name, \".\") ~= nil then\n              local\
    \ file_name = string.gsub(file_name, \"\", \".\")\n              -- Check that\
    \ the substring after the dot is one of these\n              if string.find(file_name,\
    \ \".\") ~= nil then\n                local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n                -- Check that the substring after the dot is one\
    \ of these\n                if string.find(file_name, \".\") ~= nil then\n   \
    \               local file_name = string.gsub(file_name, \"\", \".\")\n      \
    \            -- Check that the substring after the dot is one of these\n     \
    \             if string.find(file_name, \".\") ~= nil then\n                 \
    \   local file_name = string.gsub(file_name, \"\", \".\")\n                  \
    \  -- Check that the substring after the dot is one of these\n               \
    \     if string.find(file_name, \".\") ~= nil then\n                      local\
    \ file_name = string.gsub(file_name, \"\", \".\")\n                      -- Check\
    \ that the substring after the dot is one of these\n                      if string.find(file_name,\
    \ \".\") ~= nil then\n                        local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n                        -- Check that the substring after the\
    \ dot is one of these\n                        if string.find(file_name, \".\"\
    ) ~= nil then\n                          local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n                          -- Check that the substring after the\
    \ dot is one of these\n                          if string.find(file_name, \"\
    .\") ~= nil then\n                            local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n                            -- Check that the substring after\
    \ the dot is one of these\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmnof0x4t.lua:86: 'end' expected (to close 'if' at line 51)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"..\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n \
    \  if string.find(file_name, \"^\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"$\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"(\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \")\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"<\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \">\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"~\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"`\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"'\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"^\") then\n      return nil\n   end\n   if string.find(file_name, \"$\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"[\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"]\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"(\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \")\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"<\") then\n      return nil\n   end\n   if string.find(file_name, \">\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"|\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"~\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"`\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"'\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"^\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"$\") then\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptxmgpa4i.lua:143: 'end' expected (to close 'if' at line 110)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n          -- Check that the substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n            if string.find(file_name, \".\", 1, 3)\
    \ ~= nil then\n              if string.find(file_name, \".\", 1, 4) ~= nil then\n\
    \                if string.find(file_name, \".\", 1, 5) ~= nil then\n        \
    \          if string.find(file_name, \".\", 1, 6) ~= nil then\n              \
    \      if string.find(file_name, \".\", 1, 7) ~= nil then\n                  \
    \    if string.find(file_name, \".\", 1, 8) ~= nil then\n                    \
    \    if string.find(file_name, \".\", 1, 9) ~= nil then\n                    \
    \      if string.find(file_name, \".\", 1, 10) ~= nil then\n                 \
    \           if string.find(file_name, \".\", 1, 11) ~= nil then\n            \
    \                  return 'Yes'\n                            else\n          \
    \                    return 'No'\n                            end\n          \
    \                else\n                            return 'No'\n             \
    \             end\n                        else\n                          return\
    \ 'No'\n                        end\n                      else\n            \
    \            return 'No'\n                      end\n                    else\n\
    \                      return 'No'\n                    end\n                \
    \  else\n                    return 'No'\n                  end\n            \
    \    else\n                  return 'No'\n                end\n              else\n\
    \                return 'No'\n              end\n            else\n          \
    \    return 'No'\n            end\n          else\n            return 'No'\n \
    \         end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk9t46y9.lua:80:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpnk9t46y9.lua:80:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local sub_string = string.sub(file_name,\
    \ 1, string.find(file_name, \".\") - 1)\n      local sub_string2 = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1, string.len(file_name))\n      if string.find(sub_string,\
    \ \".\") ~= nil then\n         if string.find(sub_string, \".\") ~= nil then\n\
    \            if string.find(sub_string, \".\") ~= nil then\n               if\
    \ string.find(sub_string, \".\") ~= nil then\n                  if string.find(sub_string,\
    \ \".\") ~= nil then\n                     if string.find(sub_string, \".\") ~=\
    \ nil then\n                        if string.find(sub_string, \".\") ~= nil then\n\
    \                           if string.find(sub_string, \".\") ~= nil then\n  \
    \                            if string.find(sub_string, \".\") ~= nil then\n \
    \                                if string.find(sub_string, \".\") ~= nil then\n\
    \                                    if string.find(sub_string, \".\") ~= nil\
    \ then\n                                       if string.find(sub_string, \".\"\
    ) ~= nil then\n                                          if string.find(sub_string,\
    \ \".\") ~= nil then\n                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                   if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(sub_string, \".\") ~= nil then\n                               \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                                          if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(sub_string, \".\") ~= nil then\n                   \
    \                                                 if string.find(sub_string, \"\
    .\") ~= nil then\n                                                           \
    \            if string.find(sub_string, \".\") ~= nil then\n                 \
    \                                                         if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                      if string.find(sub_string, \".\") ~= nil then\n       \
    \                                                                         if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                            if string.find(sub_string, \".\") ~= nil then\n \
    \                                                                            \
    \         if string.find(sub_string, \".\") ~= nil then\n                    \
    \                                                                     if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                     if string.find(sub_string, \".\") ~= nil\
    \ then\n                                                                     \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                                                            \
    \                   if string.find(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp93xj3616.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return nil\n   end\n   if #file_name < 1 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'z' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '9' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(2,\
    \ 1) ~= 'txt' then\n      return nil\n   end\n   if file_name:sub(2, 1) ~= 'exe'\
    \ then\n      return nil\n   end\n   if file_name:sub(2, 1) ~= 'dll' then\n  \
    \    return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleqc3b3q.lua:59:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpleqc3b3q.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, '.') ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.sub(file_name,1,1) ~= nil then\n        if string.sub(file_name,1,1)\
    \ ~= string.sub(file_name,1,1) then\n          if string.sub(file_name,1,1) ~=\
    \ string.sub(file_name,1,1) then\n            if string.sub(file_name,1,1) ~=\
    \ string.sub(file_name,1,1) then\n              if string.sub(file_name,1,1) ~=\
    \ string.sub(file_name,1,1) then\n                return \"No\"\n            \
    \  end\n            end\n          end\n        end\n      end\n    end\n  end\n\
    \  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_6t1pql.lua:38:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpd_6t1pql.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1g8nh2qu.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*$\") ~= nil and string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name, \"^[^.]*[.]\") ~= nil and string.find(file_name,\
    \ \"^[^.]*[.]\") ~= nil and string.find(file_name\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx9fb83k2.lua:15: ')' expected (to close '(' at line 14) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %.\", \"\")\n    local file_name = file_name:gsub(\"^[a-z]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!-~]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppm5svotr.lua:78: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt94yozk_.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name, \"\
    ^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n    string.find(file_name, \"^[^.]\") ~= nil and\n  \
    \  string.find(file_name, \"^[^.]\") ~= nil \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwqmhbdu2.lua:46: 'end' expected (to close 'function' at line\
    \ 13) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprj0nv527.lua:57: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsu1olkhe.lua:52: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local file_ext = file_name:sub(1,\
    \ #file_name)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext\
    \ = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1, #file_ext)\n\
    \    local file_ext = file_ext:sub(1, #file_ext)\n    local file_ext = file_ext:sub(1,\
    \ #file_ext)\n    local file_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0u8lwltb.lua:84: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, string.sub(file_name,1,1)) == nil then\n    \
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= nil then\n          -- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \          if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= nil then\n            -- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \            if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= nil then\n              return true\n\
    \            else\n              return false\n            end\n          else\n\
    \            return false\n          end\n        else\n          return false\n\
    \        end\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8cmkad_.lua:49:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpp8cmkad_.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil then\n      if string.find(file_name, \".\") ~= nil then\n         --\
    \ Check that the substring before the dot is not empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n         if string.sub(file_name,1,1)\
    \ ~= nil then\n            if string.sub(file_name,1,1) ~= string.char(string.byte('a'))\
    \ or string.sub(file_name,1,1) ~= string.char(string.byte('A')) then\n       \
    \        return 'No'\n            end\n         end\n         -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n         if\
    \ string.find(file_name, \"exe\") ~= nil then\n            return 'Yes'\n    \
    \     end\n         if string.find(file_name, \"dll\") ~= nil then\n         \
    \   return 'Yes'\n         end\n      end\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vts6avi.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_vts6avi.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name ~= \".\" then\n    local file_name =\
    \ string.lower(file_name)\n    local dot_index = string.find(file_name, \".\"\
    )\n    if dot_index == nil then\n      return \"No\"\n    else\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if dot_index > 0\
    \ and string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n        return\
    \ \"No\"\n      else\n        -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n        if string.sub(file_name,dot_index+1,string.len(file_name))\
    \ ~= \"txt\" and string.sub(file_name,dot_index+1,string.len(file_name)) ~= \"\
    exe\" and string.sub(file_name,dot_index+1,string.len(file_name)) ~= \"dll\" then\n\
    \          return \"No\"\n        else\n          return \"Yes\"\n        end\n\
    \      end\n    end\n  else\n    return \"No\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytn4t3qi.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpytn4t3qi.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ nil then\n      if string.find(file_name, \".\") ~= 1 then\n         return\
    \ nil\n      end\n   end\n   if string.find(file_name, \".\") ~= 1 then\n    \
    \  return nil\n   end\n   if string.find(file_name, \".\", 1, 1) ~= 1 then\n \
    \     return nil\n   end\n   if string.find(file_name, \".\", 1, 2) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 3) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 4) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 5) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 6) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 7) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 8) ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\", 1, 9) ~= 1 then\n\
    \      return nil\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7vfvl6f.lua:61:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpj7vfvl6f.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk6lqmr68.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %.\", \"\")\n    local file_name = file_name:gsub(\"^[a-z]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!-~]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[!A-Za-z0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[!A-Za-z0-9]\", \"\")\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_fwjg862.lua:78: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"%.\") ~= nil and string.find(file_name, \"\
    %.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") ~= 0 and string.find(file_name,\
    \ \"%.\") ~= 0 and string.find(file_name, \"%.\") \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvrbdgc63.lua:15: 'end' expected (to close 'function' at line\
    \ 13) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot\n  if file_name ~= nil\
    \ and file_name ~= \"\" then\n    local index = string.find(file_name, \".\")\n\
    \    if index == nil then\n      return \"No\"\n    end\n    -- Check that the\
    \ substring before the dot is not empty\n    if index > 1 then\n      local substr\
    \ = string.sub(file_name, 1, index-1)\n      if substr ~= \"\" then\n        local\
    \ index = string.find(substr, \"[a-zA-Z]\")\n        if index == nil then\n  \
    \        return \"No\"\n        end\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these\n    local substr = string.sub(file_name+1,\
    \ index+1)\n    if substr ~= nil and substr ~= \"\" then\n      local index =\
    \ string.find(substr, \"[txt,exe,dll]\")\n      if index == nil then\n       \
    \ return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgi5_yoo.lua:31:\
    \ attempt to perform arithmetic on local 'file_name' (a string value)\nstack traceback:\n\
    \t/tmp/tmplgi5_yoo.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local dotIndex = string.find(file_name,\
    \ \".\")\n    if dotIndex == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= \"\" then\n      local firstChar = string.sub(file_name,1,1)\n      if firstChar\
    \ ~= string.upper(firstChar) then\n        return \"No\"\n      end\n    end\n\
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    local extension = string.sub(file_name,dotIndex+1)\n    if\
    \ extension ~= nil and extension ~= \"\" then\n      local extensions = { \"txt\"\
    , \"exe\", \"dll\" }\n      local extensionIndex = string.find(extensions, extension)\n\
    \      if extensionIndex == nil then\n        return \"No\"\n      end\n    end\n\
    \  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhj2l2cf.lua:43:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnhj2l2cf.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"..\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n \
    \  if string.find(file_name, \"/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\\\") then\n      return nil\n   end\n   if string.find(file_name, \":\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"?\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"*\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"[\") then\n      return nil\n   end\n   if string.find(file_name, \"]\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"{\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"}\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"(\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \")\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"$\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"&\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"!\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"+\") then\n      return nil\n   end\n   if string.find(file_name, \"-\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"=\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"~\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"`\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"'\") then\n      return nil\n   end\n   if string.find(file_name, \"\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdfbz4q_q.lua:110: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*\\.[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil and\n\
    \    string.find(file_name, \"^[^.]*$\") ~= nil and\n    string.find(file_name,\
    \ \"^[^.]*$\") ~= nil and\n    string.find(file_name, \"^[^.]*$\") ~= nil \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcdnkif54.lua:44: 'end' expected (to close 'function' at line\
    \ 13) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"/\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"\\\\\
    \") then\n      return \"No\"\n   end\n   if string.find(file_name, \":\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"*\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"?\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"<\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \">\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"|\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"[\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"]\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"{\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"(\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \")\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"?\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"<\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \">\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"[\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"]\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"{\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"}\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"(\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \")\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"?\") then\n      return \"No\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz0tyhofu.lua:100: 'end' expected (to close 'if' at line 98)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot\n  if file_name:sub(1,\
    \ 1) ~= '.' then\n    return 'No'\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpshb44n9m.lua:50: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z' then\n      return nil\n\
    \   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 2) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 3) ~= 'txt' then\n      return nil\n   end\n   if file_name:sub(1, 3) ~= 'exe'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n  \
    \    return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxwno7xt.lua:47:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfxwno7xt.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"..\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n \
    \  if string.find(file_name, \"^\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"$\") then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"[\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"]\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"{\") then\n      return nil\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"~\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \":\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \";\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"?\") then\n      return nil\n   end\n   if string.find(file_name, \"*\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"|\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"=\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"+\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"-\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"$\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"<\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \">\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvt9c_bw8.lua:110: unfinished string near '\"]'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = string.lower(file_name)\n    local dot_index = string.find(file_name,\
    \ \".\")\n    local file_name = string.sub(file_name,1,dot_index)\n    local dot_index\
    \ = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index+1)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,dot_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpima6qsz8.lua:61: ')' expected (to close '(' at line 60) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \".\" then\n    return\
    \ false\n  end\n  -- Check that the file name contains exactly three digits ('0'-'9')\n\
    \  if file_name ~= nil and file_name ~= \"\" and file_name:sub(1, 3) ~= string.gsub(\"\
    %w\", \"%d+\", \"%0d\") then\n    return false\n  end\n  -- Check that the file\
    \ name starts with a latin alphapet letter\n  if file_name ~= nil and file_name\
    \ ~= \"\" and file_name:sub(1, 1) ~= string.gsub(\"%w\", \"%d+\", \"%a\") then\n\
    \    return false\n  end\n  -- Check that the file name ends with one of these:\
    \ ['txt', 'exe', 'dll']\n  if file_name ~= nil and file_name ~= \"\" and file_name:sub((#file_name\
    \ + 1), 3) ~= string.gsub(\"%w\", \"%d+\", \"%a\") then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy9dmd9m.lua:36:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmphy9dmd9m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local file_name = file_name:gsub(\"%.\"\
    , \"\")\n    if file_name ~= nil and file_name ~= \"\" then\n      -- Check that\
    \ the substring before the dot is not empty\n      if file_name ~= nil and file_name\
    \ ~= \"\" then\n        local file_name = file_name:sub(1, 1)\n        if file_name\
    \ ~= nil and file_name ~= \"\" then\n          -- Check that the substring after\
    \ the dot is one of these\n          if file_name ~= nil and file_name ~= \"\"\
    \ then\n            local file_name = file_name:sub(2)\n            if file_name\
    \ ~= nil and file_name ~= \"\" then\n              if string.match(file_name,\
    \ \"^[a-z]\") ~= nil then\n                return \"Yes\"\n              else\n\
    \                return \"No\"\n              end\n            else\n        \
    \      return \"No\"\n            end\n          else\n            return \"No\"\
    \n          end\n        else\n          return \"No\"\n        end\n      else\n\
    \        return \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n\
    \    return \"No\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhssxwba.lua:54:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpyhssxwba.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \":\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \",\", \"\")\n    local file_name\
    \ = string.gsub(file_name, \",\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1vn7064k.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local name_split = string.split(file_name,\
    \ \".\")\n      if #name_split ~= 2 then\n         return 'No'\n      elseif name_split[1]\
    \ ~= \"\" then\n         if string.find(name_split[1], \"^[a-zA-Z]\") ~= nil then\n\
    \            if string.find(name_split[1], \"^[0-9]\") ~= nil then\n         \
    \      if #name_split[2] ~= 1 then\n                  return 'No'\n          \
    \     else\n                  if name_split[2] ~= ['txt', 'exe', 'dll'] then\n\
    \                     return 'No'\n                  end\n               end\n\
    \            end\n         end\n      end\n   end\n   return 'Yes'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeipbl9fh.lua:24: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if #file_name < 1 then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '~' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'a' and file_name:sub(1, 1) ~= 'A'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, #file_name) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, #file_name) ~= 'txt' and file_name:sub(1,\
    \ #file_name) ~= 'exe' and file_name:sub(1, #file_name) ~= 'dll' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvsumif1v.lua:23: 'then' expected near '~'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the first dot\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z_]+\", \"\") -- Remove all letters before the dot\n    local file_name =\
    \ file_name:gsub(\"[\\.][^\\.]+$\", \"\") -- Remove all extensions after the dot\n\
    \    local file_name = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all letters\
    \ before the dot\n    local file_name = file_name:gsub(\"[\\.][^\\.]+$\", \"\"\
    ) -- Remove all extensions after the dot\n    local file_name = file_name:gsub(\"\
    ^[0-9]\", \"\") -- Remove all digits before the dot\n    local file_name = file_name:gsub(\"\
    [0-9]$\", \"\") -- Remove all digits after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z]\", \"\") -- Remove all letters before the dot\n    local file_name = file_name:gsub(\"\
    [a-z]$\", \"\") -- Remove all letters after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z0-9]\", \"\") -- Remove all letters and digits before the dot\n    local\
    \ file_name = file_name:gsub(\"[a-z0-9]$\", \"\") -- Remove all letters and digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[a-z0-9]\", \"\") --\
    \ Remove all letters and digits before the dot\n    local file_name = file_name:gsub(\"\
    [a-z0-9]$\", \"\") -- Remove all letters and digits after the dot\n    local file_name\
    \ = file_name:gsub(\"^[a-z0-9]\", \"\") -- Remove all letters and digits before\
    \ the dot\n    local file_name = file_name:gsub(\"[a-z0-9]$\", \"\") -- Remove\
    \ all letters and digits after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z0-9]\", \"\") -- Remove all letters and digits before the dot\n    local\
    \ file_name = file_name:gsub(\"[a-z0-9]$\", \"\") -- Remove all letters and digits\
    \ after the dot\n    local file_name = file_name:gsub(\"^[a-z0-9]\", \"\") --\
    \ Remove all letters and digits before the dot\n    local file_name = file_name:gsub(\"\
    [a-z0-9]$\", \"\") -- Remove all letters and digits after the dot\n    local file_name\
    \ = file_name:gsub(\"^[a-z0-9]\", \"\") -- Remove all letters and digits before\
    \ the dot\n    local file_name = file_name:gsub(\"[a-z0-9]$\", \"\") -- Remove\
    \ all letters and digits \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqy1jtpdj.lua:69: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local first_part = string.sub(file_name,1,string.find(file_name,\
    \ \".\"))\n      if string.find(first_part, \"%\") ~= nil then\n         return\
    \ 'No'\n      else\n         if string.find(first_part, \"a\") ~= nil then\n \
    \           if string.find(first_part, \"A\") ~= nil then\n               return\
    \ 'No'\n            else\n               return 'Yes'\n            end\n     \
    \    else\n            return 'No'\n         end\n      end\n   else\n      return\
    \ 'No'\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_5uj02j.lua:16:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpg_5uj02j.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpg_5uj02j.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp99f2ypjq.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'Z' then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".txt\") then\n      return \"Yes\"\n   end\n   if string.find(file_name, \"\
    .exe\") then\n      return \"Yes\"\n   end\n   if string.find(file_name, \".dll\"\
    ) then\n      return \"Yes\"\n   end\n   return \"No\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6vzft66.lua:50:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl6vzft66.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:gsub(\"^%w+\", \"\")\n  local file_name = file_name:gsub(\"\
    %.\", \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n  local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n  local file_name = file_name:gsub(\"^%l\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqcp49qfo.lua:50: unfinished string near '\"^'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = file_name:lower()\n   local dot_index = string.find(file_name,\
    \ \".\")\n   if dot_index == nil then\n      return \"No\"\n   else\n      local\
    \ file_name = file_name:sub(1, dot_index)\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxdx7vrnc.lua:58: unfinished string near '\" '\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.find(file_name, \".\") ~= nil and string.sub(file_name,1,1) ~= nil then\n\
    \        -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\", string.find(file_name, \".\")+1) ~= nil then\n          -- Check that\
    \ the file's name contains exactly three digits ('0'-'9')\n          if string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\", string.find(file_name, \".\"\
    )+1) ~= nil and string.find(file_name, \".\", string.find(file_name, \".\")+2)\
    \ ~= nil then\n            -- Check that the file's name contains only latin alphapet\
    \ letters ('a'-'z' and 'A'-'Z')\n            if string.find(file_name, \".\")\
    \ ~= nil and string.find(file_name, \".\", string.find(file_name, \".\")+1) ~=\
    \ nil and string.find(file_name, \".\", string.find(file_name, \".\")+2) ~= nil\
    \ and string.find(file_name, \".\", string.find(file_name, \".\")+3) ~= nil then\n\
    \              return true\n            else\n              return false\n   \
    \         end\n          else\n            return false\n          end\n     \
    \   else\n          return false\n        end\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c0hfi_y.lua:49:\
    \ expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp4c0hfi_y.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 1, 1) ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \".\", 1, 2)\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\", 1,\
    \ 3) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\",\
    \ 1, 4) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    , 1, 5) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    , 1, 6) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    , 1, 7) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    , 1, 8) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    , 1, 9) ~= 1 then\n      return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6f1h2x6.lua:62:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk6f1h2x6.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx5v1pdnu.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = file_name\n   local dot_index = string.find(file_name, \"\
    .\")\n   if dot_index == nil then\n      return \"No\"\n   end\n   if string.len(file_name)\
    \ < 3 then\n      return \"No\"\n   end\n   if string.sub(file_name,1,1) ~= 'a'\
    \ ~= 'z' then\n      return \"No\"\n   end\n   if string.sub(file_name,dot_index+1,string.len(file_name))\
    \ ~= 'txt' ~= 'exe' ~= 'dll' then\n      return \"No\"\n   end\n   return \"Yes\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96e2wxps.lua:34:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp96e2wxps.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n          if string.find(file_name, \".\", 1, 1) ~=\
    \ nil then\n            if string.find(file_name, \".\", 1, 1) ~= nil then\n \
    \             if string.find(file_name, \".\", 1, 1) ~= nil then\n           \
    \     if string.find(file_name, \".\", 1, 1) ~= nil then\n                  if\
    \ string.find(file_name, \".\", 1, 1) ~= nil then\n                    if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                      if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n                        if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n                          if string.find(file_name, \".\"\
    , 1, 1) ~= nil then\n                            if string.find(file_name, \"\
    .\", 1, 1) ~= nil then\n                              if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                  if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                    if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                      if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                          if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                              if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                if\
    \ string.find(file_name, \".\", 1, 1) ~= nil then\n                          \
    \                        if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                                                    if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                 \
    \     if string.find(file_name, \".\", 1, 1) ~= nil then\n                   \
    \                                     if string.find(file_name, \".\", 1, 1) ~=\
    \ nil then\n                                                          if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                 \
    \           if string.find(file_name, \".\", 1, 1) ~= nil then\n             \
    \                                                 if string.find(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqo5nun9a.lua:47: ')' expected (to close '(' at line 46) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \".\" then\n    return\
    \ nil\n  end\n  -- Check that the file name contains only digits (0-9)\n  if file_name\
    \ ~= nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \"\" then\n    if string.find(file_name,\
    \ \"%w\") then\n      return nil\n    end\n  end\n  -- Check that the file name\
    \ starts with a latin alphapet letter\n  if file_name ~= nil and file_name ~=\
    \ \"\" and string.find(file_name, \"%a\") then\n    return nil\n  end\n  -- Check\
    \ that the file name starts with a latin alphapet letter\n  if file_name ~= nil\
    \ and file_name ~= \"\" and string.find(file_name, \"%A\") then\n    return nil\n\
    \  end\n  -- Check that the file name starts with a latin alphapet letter\n  if\
    \ file_name ~= nil and file_name ~= \"\" and string.find(file_name, \"%w\") then\n\
    \    return nil\n  end\n  -- Check that the file name starts with a latin alphapet\
    \ letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%W\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%a\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%A\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%w\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%W\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%w\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name ~= nil and file_name ~= \"\" and string.find(file_name,\
    \ \"%W\") then\n    return nil\n  end\n  -- Check that the file name starts with\
    \ a latin \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmpoaas3r.lua:97: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n     \
    \ return 'No'\n    end\n    -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= '' then\n      if file_name:sub(1, 1)\
    \ ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ 'No'\n      end\n    end\n    -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2,\
    \ #file_name), 'exe') ~= nil then\n      return 'Yes'\n    end\n    if string.find(file_name:sub(2,\
    \ #file_name), 'dll') ~= nil then\n      return 'Yes'\n    end\n  end\n  return\
    \ 'No'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtu9nuk7.lua:39:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpvtu9nuk7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that the file name does not\
    \ contain more than three digits ('0'-'9')\n  local digits = file_name:sub(1,3):gsub('%d+','')\n\
    \  if digits ~= '' then\n    return 'No'\n  end\n  -- Check that the file name\
    \ starts with a latin alphapet letter\n  local letters = file_name:sub(1,1):gsub('%a','')\n\
    \  if letters ~= '' then\n    return 'No'\n  end\n  -- Check that the file name\
    \ does not contain any of these extensions: ['txt', 'exe', 'dll']\n  local extensions\
    \ = ''\n  for i = 1, #extensions do\n    if file_name:sub(i+2,i+2) ~= extensions[i]\
    \ then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_5ka5gt.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpu_5ka5gt.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    local file_name = string.gsub(file_name, \" \", \"\"\
    )\n    local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp13bretoi.lua:89: 'end' expected (to close 'if' at line 15)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      if string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte(\"a\"..string.byte(\"z\"))) ~= nil then\n  \
    \      return \"No\"\n      end\n    end\n    -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(string.lower(file_name:sub(2)),\
    \ \"exe\" ~= nil or \"dll\" ~= nil or \"txt\" ~= nil) then\n      return \"Yes\"\
    \n    end\n  end\n  return \"No\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5zc4kmm7.lua:21: ')' expected near 'then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd4zqlq1s.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local index = string.find(file_name, \".\"\
    )\n    if index == nil then\n      return nil\n    end\n    -- Check that the\
    \ substring before the dot is not empty, and it starts with a letter from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z')\n    if index == nil then\n      return\
    \ nil\n    end\n    local letter = string.sub(file_name,1,1)\n    if letter ~=\
    \ nil and letter ~= '' then\n      local index = string.find(letter, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n      if index == nil then\n        return nil\n      end\n    end\n  end\n\
    \  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvsvpotx.lua:38:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfvsvpotx.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \"\" then\n        if string.find(string.lower(file_name:sub(1, 1)), string.letters(string.byte(\"\
    a\"))) == nil then\n          return \"No\"\n        end\n      end\n    end\n\
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    if file_name ~= nil and file_name ~= \"\" then\n      if\
    \ file_name:sub((string.len(file_name) - 1), 1) ~= \"exe\" and file_name:sub((string.len(file_name)\
    \ - 1), 1) ~= \"dll\" and file_name:sub((string.len(file_name) - 1), 1) ~= \"\
    txt\" then\n        return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bzjovc3.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6bzjovc3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxv5jamzu.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'a'\
    \ then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'z' then\n\
    \      return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'A' then\n   \
    \   return nil\n   end\n   if string.sub(file_name, 1, 1) ~= 'Z' then\n      return\
    \ nil\n   end\n   if string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\
    \ ~= 'txt' then\n      return nil\n   end\n   if string.sub(file_name, string.len(file_name)\
    \ - 1, string.len(file_name)) ~= 'exe' then\n      return nil\n   end\n   if string.sub(file_name,\
    \ string.len(file_name) - 1, string.len(file_name)) ~= 'dll' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn101rctn.lua:47:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn101rctn.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot\n  if file_name ~= nil\
    \ and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot is not empty\n      if string.find(file_name,\
    \ string.sub(file_name,1,string.find(file_name, \".\"))) ~= nil then\n       \
    \ -- Check that the substring after the dot is one of these\n        if string.find(file_name,\
    \ string.sub(file_name,string.find(file_name, \".\"),string.find(file_name, \"\
    .\"))) ~= nil then\n          -- Check that the substring after the dot is one\
    \ of these\n          if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\"))) ~= nil then\n            -- Check that\
    \ the substring after the dot is one of these\n            if string.find(file_name,\
    \ string.sub(file_name,string.find(file_name, \".\"),string.find(file_name, \"\
    .\"))) ~= nil then\n              return 'Yes'\n            else\n           \
    \   return 'No'\n            end\n          else\n            return 'No'\n  \
    \        end\n        else\n          return 'No'\n        end\n      else\n \
    \       return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnryd4aew.lua:50:\
    \ expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpnryd4aew.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = string.find(file_name, \"\
    .\")\n    if dot_index == nil then\n      return nil\n    end\n    -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= nil then\n      local letter_index = string.find(string.sub(file_name,1,1),\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n      if letter_index\
    \ == nil then\n        return nil\n      end\n    end\n    -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    local extensions\
    \ = { \"txt\", \"exe\", \"dll\" }\n    local extension_index = string.find(string.sub(file_name,dot_index+1),\
    \ extensions)\n    if extension_index == nil then\n      return nil\n    end\n\
    \  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1778iqyk.lua:40:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1778iqyk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local dot_index = string.find(file_name, \"\
    .\")\n  if dot_index == nil then\n    return true\n  end\n  local file_name =\
    \ file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name, \".\"\
    )\n  if dot_index == nil then\n    return true\n  end\n  local file_name = file_name:sub(1,\
    \ dot_index)\n  local dot_index = string.find(file_name, \".\")\n  if dot_index\
    \ == nil then\n    return true\n  end\n  local file_name = file_name:sub(1, dot_index)\n\
    \  local dot_index = string.find(file_name, \".\")\n  if dot_index == nil then\n\
    \    return true\n  end\n  local file_name = file_name:sub(1, dot_index)\n  local\
    \ dot_index = string.find(file_name, \".\")\n  if dot_index == nil then\n    return\
    \ true\n  end\n  local file_name = file_name:sub(1, dot_index)\n  local dot_index\
    \ = string.find(file_name, \".\")\n  if dot_index == nil then\n    return true\n\
    \  end\n  local file_name = file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name,\
    \ \".\")\n  if dot_index == nil then\n    return true\n  end\n  local file_name\
    \ = file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name, \"\
    .\")\n  if dot_index == nil then\n    return true\n  end\n  local file_name =\
    \ file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name, \".\"\
    )\n  if dot_index == nil then\n    return true\n  end\n  local file_name = file_name:sub(1,\
    \ dot_index)\n  local dot_index = string.find(file_name, \".\")\n  if dot_index\
    \ == nil then\n    return true\n  end\n  local file_name = file_name:sub(1, dot_index)\n\
    \  local dot_index = string.find(file_name, \".\")\n  if dot_index == nil then\n\
    \    return true\n  end\n  local file_name = file_name:sub(1, dot_index)\n  local\
    \ dot_index = string.find(file_name, \".\")\n  if dot_index == nil then\n    return\
    \ true\n  end\n  local file_name = file_name:sub(1, dot_index)\n  local dot_index\
    \ = string.find(file_name, \".\")\n  if dot_index == nil then\n    return true\n\
    \  end\n  local file_name = file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name,\
    \ \".\")\n  if dot_index == nil then\n    return true\n  end\n  local file_name\
    \ = file_name:sub(1, dot_index)\n  local dot_index = string.find(file_name, \"\
    .\")\n  if dot_index == nil then\n    return true\n  end\n  local file_name =\
    \ file_name:sub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8q7mw647.lua:90: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check the length of the file name\n  if #file_name > 3 then\n    return\
    \ 'No'\n  end\n  -- Check the length of the substring before the dot\n  if #file_name\
    \ > 1 and file_name:sub(1, 1) ~= '' then\n    return 'No'\n  end\n  -- Check the\
    \ length of the substring after the dot\n  if #file_name > 2 and file_name:sub(2,\
    \ 2) ~= '.' then\n    return 'No'\n  end\n  -- Check the substring before the\
    \ dot is latin alphapet\n  if #file_name > 1 and file_name:sub(1, 1) ~= 'a' and\
    \ file_name:sub(1, 1) ~= 'A' then\n    return 'No'\n  end\n  -- Check the substring\
    \ after the dot is one of these\n  local extensions = {'txt', 'exe', 'dll'}\n\
    \  if #file_name > 2 and file_name:sub(2, 2) ~= '.' and file_name:sub(2, 2) ~=\
    \ extensions[1] then\n    return 'No'\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfooue1z1.lua:41:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfooue1z1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   \n   local file_name\
    \ = file_name:lower()\n   \n   if #file_name > 3 then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '\\\\' then\n      return nil\n   end\n   \n\
    \   if file_name:sub(1, 2) ~= '.' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 3) ~= '' then\n      return nil\n   end\n   \n   if #file_name ~= 1 then\n \
    \     return nil\n   end\n   \n   if file_name:sub(1, 1) ~= string.lower(string.sub(\"\
    abcdefghijklmnopqrstuvwxyz\", 1, 1)) then\n      return nil\n   end\n   \n   if\
    \ string.sub(file_name, 1, 3) ~= '.exe' then\n      return nil\n   end\n   \n\
    \   return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3x0yqr9.lua:54:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmph3x0yqr9.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that there are no more than\
    \ three digits in the file's name\n  local digits = file_name:sub(1,3)\n  if digits\
    \ ~= '' then\n    if tonumber(digits) ~= nil then\n      if tonumber(digits) ~=\
    \ false then\n        if tonumber(digits) ~= true then\n          return 'No'\n\
    \        end\n      end\n    end\n  end\n  -- Check that there are no empty strings\
    \ in the file's name\n  if file_name:sub(1,1) ~= '' then\n    return 'No'\n  end\n\
    \  -- Check that there are no letters other than latin alphapet in the file's\
    \ name\n  local letters = file_name:sub(1,1)\n  if letters ~= '' then\n    if\
    \ letters ~= nil then\n      if letters ~= false then\n        if letters ~= true\
    \ then\n          return 'No'\n        end\n      end\n    end\n  end\n  -- Check\
    \ that there are no letters other than latin alphapet in the file's name\n  local\
    \ letters = file_name:sub(1,1)\n  if letters ~= '' then\n    if letters ~= nil\
    \ then\n      if letters ~= false then\n        if letters ~= true then\n    \
    \      return 'No'\n        end\n      end\n    end\n  end\n  -- Check that there\
    \ are no letters other than latin alphapet in the file's name\n  local letters\
    \ = file_name:sub(1,1)\n  if letters ~= '' then\n    if letters ~= nil then\n\
    \      if letters ~= false then\n        if letters ~= true then\n          return\
    \ 'No'\n        end\n      end\n    end\n  end\n  -- Check that there are no letters\
    \ other than latin alphapet in the file's name\n  local letters = file_name:sub(1,1)\n\
    \  if letters ~= '' then\n    if letters ~= nil then\n      if letters ~= false\
    \ then\n        if letters ~= true then\n          return 'No'\n        end\n\
    \      end\n    end\n  end\n  -- Check that there are no letters other than latin\
    \ alphapet in the file's name\n  local letters = file_name:sub(1,1)\n  if letters\
    \ ~= '' then\n    if letters ~= nil then\n      if letters ~= false then\n   \
    \     if letters ~= true then\n          return 'No'\n        end\n      end\n\
    \    end\n  end\n  -- Check that there are no letters other than \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpv2c843e1.lua:121: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    local dot_index = string.find(file_name, '.',\
    \ 1, 1)\n    if dot_index == nil then\n      return nil\n    end\n    -- Check\
    \ that substring before the dot is not empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1) ~=\
    \ nil then\n      local letter_index = string.find(string.sub(file_name,1,1),\
    \ 'a', 1, 1)\n      if letter_index == nil then\n        return nil\n      end\n\
    \    end\n    -- Check that substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n    local extension_index = string.find(string.sub(file_name,dot_index+1),\
    \ 'exe', 1, true)\n    if extension_index == nil then\n      return nil\n    end\n\
    \  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt7uhkmc.lua:39:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkt7uhkmc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 0\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= \".\" then\n\
    \      return false\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return false\n   end\n   if #string.gmatch(file_name,\
    \ \"[^.]\") ~= 1 then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp18dkvo.lua:35:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpcp18dkvo.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.find(file_name, \".\") ~= nil and string.sub(file_name,1,1) ~= nil and\
    \ string.sub(file_name,1,1) ~= string.upper(string.sub(file_name,1,1)) then\n\
    \        -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwf4ejqrk.lua:21: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9][0-9]\") ~= nil and\n         string.find(file_name,\
    \ \".\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n \
    \        string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil\
    \ and\n         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n       \
    \  string.find(file_name, \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name,\
    \ \"[^a-zA-Z]\") ~= nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~=\
    \ nil and\n         string.find(file_name, \"[^a-zA-Z]\") ~= nil and\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo40nmsz9.lua:48: 'end' expected (to close 'function' at line\
    \ 13) near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") == nil then\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx66u6qq8.lua:123: 'end' expected (to close 'if' at line 89)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return nil\n   end\n   if #file_name < 1 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return nil\n  \
    \ end\n   if file_name:sub(1, 1) ~= '/'  then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= '~'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '<'  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '>'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '|'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '\"'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\''  then\n      return nil\n  \
    \ end\n   if file_name:sub(1, 1) ~= ':'  then\n      return nil\n   end\n   if\
    \ file_name:sub(1, 1) ~= ';'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= ','  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '='\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '?'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '@'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '['  then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= ']'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '^'  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '`'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '{'  then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 1) ~= '}'  then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '~'  then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '^'  then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '`'  then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '{'\
    \  then\n      return nil\n   end\n   if file_name:sub(1, 1) \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpawp8g031.lua:20: unfinished string near ''' then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      local first_letter\
    \ = file_name:sub(1, 1):lower()\n      if first_letter ~= \"a\" and first_letter\
    \ ~= \"b\" and first_letter ~= \"c\" and first_letter ~= \"d\" and first_letter\
    \ ~= \"e\" and first_letter ~= \"f\" and first_letter ~= \"g\" and first_letter\
    \ ~= \"h\" and first_letter ~= \"i\" and first_letter ~= \"j\" and first_letter\
    \ ~= \"k\" and first_letter ~= \"l\" and first_letter ~= \"m\" and first_letter\
    \ ~= \"n\" and first_letter ~= \"o\" and first_letter ~= \"p\" and first_letter\
    \ ~= \"q\" and first_letter ~= \"r\" and first_letter ~= \"s\" and first_letter\
    \ ~= \"t\" and first_letter ~= \"u\" and first_letter ~= \"v\" and first_letter\
    \ ~= \"w\" and first_letter ~= \"x\" and first_letter ~= \"y\" and first_letter\
    \ ~= \"z\" then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    local\
    \ extension = file_name:sub(2)\n    if extension ~= \"txt\" and extension ~= \"\
    exe\" and extension ~= \"dll\" then\n      return \"No\"\n    end\n  end\n  return\
    \ \"Yes\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5xxc0of.lua:38:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd5xxc0of.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.find(file_name, \"^[0-9][0-9]*$\") ~= nil and\n         string.find(file_name,\
    \ \".\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n \
    \        string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.find(file_name, \"^[^.]\") ~= nil and\n\
    \         string.find(file_name, \"^[^.]\") ~= nil and\n         string.find(file_name,\
    \ \"^[^.]\") ~= nil and\n         string.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8hl11smx.lua:47: 'end' expected (to close 'function' at line\
    \ 13) near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil then\n    if string.find(file_name, \".\") then\n      -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1)\
    \ ~= nil then\n        if string.find(string.sub(file_name,1,1), string.letters)\
    \ then\n          -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n          if string.find(string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name)), {\"txt\", \"exe\", \"dll\"}) then\n         \
    \   return true\n          else\n            return false\n          end\n   \
    \     else\n          return false\n        end\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa75ap73.lua:19:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpaa75ap73.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpaa75ap73.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   local file_name = file_name:lower()\n   if #file_name > 3 then\n      return\
    \ false\n   end\n   if file_name ~= file_name then\n      return false\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '.' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 3) ~= 'exe' or file_name:sub(2, 3) ~=\
    \ 'dll' then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqp3y_ty7.lua:21: 'then' expected near '.'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 0\
    \ then\n      return false\n   end\n   if #file_name ~= 1 then\n      return false\n\
    \   end\n   if file_name:sub(1, 1) ~= '.' then\n      return false\n   end\n \
    \  if file_name:sub(1, 1) ~= 'a' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'A'\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n  \
    \    return false\n   end\n   if file_name:sub(2, 1) ~= 'txt' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 1) ~= 'exe' then\n      return false\n\
    \   end\n   if file_name:sub(2, 1) ~= 'dll' then\n      return false\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz13j9xo.lua:53:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpuz13j9xo.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    else\n      --\
    \ Check that substring before the dot is not empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.sub(file_name,1,1)\
    \ ~= nil then\n        local letter_index = string.find(string.sub(file_name,1,1),\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n        if letter_index\
    \ == nil then\n          return \"No\"\n        else\n          -- Check that\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n          local\
    \ allowed_extensions = {\"txt\", \"exe\", \"dll\"}\n          local extension_index\
    \ = string.find(string.sub(file_name,dot_index+1), allowed_extensions)\n     \
    \     if extension_index == nil then\n            return \"No\"\n          else\n\
    \            return \"Yes\"\n          end\n        end\n      else\n        return\
    \ \"No\"\n      end\n    end\n  else\n    return \"No\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapt4z94i.lua:47:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpapt4z94i.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  return string.match(file_name, \"^%w[%w.]*$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w]$\") ~= nil and string.match(file_name, \"^%w[%w.]*\\.[%w][%w]$\"\
    ) ~= nil and string.match(file_name, \"^%w[%w.]*\\.[%w][%w][%w]$\") ~= nil and\
    \ string.match(file_name, \"^%w[%w.]*\\.[%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name, \"\
    ^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name, \"\
    ^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and string.match(file_name,\
    \ \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w][%w]$\") ~= nil and\
    \ string.match(file_name, \"^%w[%w.]*\\.[%w][%w][%w][%w][%w][%w][%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_p0elwy9.lua:14: unfinished string near '\"^%w[%w.]*.[%w][%w][%w][%w][%w][%w][%'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the dot\n    local file_name = file_name:sub(1, dot_index)\
    \ -- Get the substring before the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z_]+\", \"\") -- Remove all letters before the dot\n    local file_name =\
    \ file_name:gsub(\"[\\.]\", \"\") -- Remove all dots from the string\n    local\
    \ file_name = file_name:gsub(\"^0*\", \"\") -- Remove all leading zeros from the\
    \ string\n    local file_name = file_name:gsub(\"^[1-9]\", \"\") -- Remove all\
    \ digits before the dot\n    local file_name = file_name:gsub(\"^[a-z]\", \"\"\
    ) -- Remove all letters after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z_]+$\", \"\") -- Remove all letters after the dot\n    local file_name =\
    \ file_name:gsub(\"^[a-z0-9]+$\", \"\") -- Remove all letters and digits after\
    \ the dot\n    local file_name = file_name:gsub(\"^[a-z0-9]+[a-z0-9]+$\", \"\"\
    ) -- Remove all letters and digits after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z0-9]+[a-z0-9]+[a-z0-9]+$\", \"\") -- Remove all letters and digits after\
    \ the dot\n    local file_name = file_name:gsub(\"^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\"\
    , \"\") -- Remove all letters and digits after the dot\n    local file_name =\
    \ file_name:gsub(\"^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\", \"\") --\
    \ Remove all letters and digits after the dot\n    local file_name = file_name:gsub(\"\
    ^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\", \"\") -- Remove all\
    \ letters and digits after the dot\n    local file_name = file_name:gsub(\"^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\"\
    , \"\") -- Remove all letters and digits after the dot\n    local file_name =\
    \ file_name:gsub(\"^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\"\
    , \"\") -- Remove all letters and digits after the dot\n    local file_name =\
    \ file_name:gsub(\"^[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+[a-z0-9]+$\"\
    , \"\") -- Remove all letters and digits after the dot\n    local file_name =\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpombykcyr.lua:33: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   \n   local file_name\
    \ = file_name:lower()\n   \n   if #file_name > 3 then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   \n\
    \   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~=\
    \ 'A' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= 'Z' then\n\
    \      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '0' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= '9' then\n      return nil\n\
    \   end\n   \n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   \n\
    \   if file_name:sub(1, 2) ~= '.' then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 2) ~= '\\0' then\n      return nil\n   end\n   \n   if file_name:sub(1, 3) ~=\
    \ '.' then\n      return nil\n   end\n   \n   if file_name:sub(1, 3) ~= '\\0'\
    \ then\n      return nil\n   end\n   \n   if file_name:sub(1, 4) ~= '.' then\n\
    \      return nil\n   end\n   \n   if file_name:sub(1, 4) ~= '\\0' then\n    \
    \  return nil\n   end\n   \n   return 'Yes'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2kkvzr4.lua:90:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2kkvzr4.lua:90:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^[a-zA-Z]\") then\n\
    \      return nil\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3i20cg2.lua:32:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl3i20cg2.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 1) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 2) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 3) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 4) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 5) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 6) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 7) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 8) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 9) ~= 1\
    \ then\n      return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq7acczn.lua:62:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmppq7acczn.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the dot '.'\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local file_name = file_name:gsub(\"\
    ^[%w]\", \"\") -- Remove all letters from the beginning of the string\n    local\
    \ file_name = file_name:gsub(\"[%w]$\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"^%l\", \"\") -- Remove\
    \ all letters from the beginning of the string\n    local file_name = file_name:gsub(\"\
    %l$\", \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\") -- Remove all letters from the beginning of\
    \ the string\n    local file_name = file_name:gsub(\"%l$\", \"\") -- Remove all\
    \ letters from the end of the string\n    local file_name = file_name:gsub(\"\
    ^%l\", \"\") -- Remove all letters from the beginning of the string\n    local\
    \ file_name = file_name:gsub(\"%l$\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"^%l\", \"\") -- Remove\
    \ all letters from the beginning of the string\n    local file_name = file_name:gsub(\"\
    %l$\", \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\") -- Remove all letters from the beginning of\
    \ the string\n    local file_name = file_name:gsub(\"%l$\", \"\") -- Remove all\
    \ letters from the end of the string\n    local file_name = file_name:gsub(\"\
    ^%l\", \"\") -- Remove all letters from the beginning of the string\n    local\
    \ file_name = file_name:gsub(\"%l$\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"^%l\", \"\") -- Remove\
    \ all letters from the beginning of the string\n    local file_name = file_name:gsub(\"\
    %l$\", \"\") -- Remove all letters from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\") -- Remove all letters from the beginning of\
    \ the string\n    local file_name = file_name:gsub(\"%l$\", \"\") -- Remove all\
    \ letters from the end of the string\n    local file_name = file_name:gsub(\"\
    ^%l\", \"\") -- Remove all letters from the beginning of the string\n    local\
    \ file_name = file_name:gsub(\"%l$\", \"\") -- Remove all letters from the end\
    \ of the string\n    local file_name = file_name:gsub(\"^%l\", \"\") -- Remove\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp78l4i91c.lua:70: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local file_name = string.gsub(file_name,\
    \ \"\", \".\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_5hs3bgi.lua:57: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n     \
    \ return 'No'\n    end\n    -- Check that the substring before the dot is not\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if file_name:sub(1, 1) ~= '' then\n      if string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte('a')) .. string.letters(string.byte('z')) or\
    \ string.find(string.lower(file_name:sub(1, 1)), string.letters(string.byte('A'))\
    \ .. string.letters(string.byte('Z')) ~= nil) then\n        return 'No'\n    \
    \  end\n    end\n    -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2, 3), 'exe') ~= nil\
    \ or string.find(file_name:sub(2, 3), 'dll') ~= nil then\n      return 'No'\n\
    \    end\n  end\n  return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpi0vc7ndu.lua:21: ')' expected near 'then'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:lower()\n  local file_name = file_name:gsub(\"\
    %w+\", \"\")\n  local file_name = file_name:gsub(\"%w+$\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^%w+\", \"\")\n  local file_name = file_name:gsub(\"%w+%.\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+\", \"\")\n  local file_name\
    \ = file_name:gsub(\"%w+%.%w+$\", \"\")\n  local file_name = file_name:gsub(\"\
    %w+%.%w+%.\", \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+\", \"\"\
    )\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+$\", \"\")\n  local file_name\
    \ = file_name:gsub(\"%w+%.%w+%.%w+%.\", \"\")\n  local file_name = file_name:gsub(\"\
    %w+%.%w+%.%w+%.%w+\", \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+$\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.\", \"\")\n\
    \  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+\", \"\")\n  local\
    \ file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+\", \"\")\n  local file_name\
    \ = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.\", \"\")\n  local file_name = file_name:gsub(\"\
    %w+%.%w+%.%w+%.%w+%.%w+%.%w+\", \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+\"\
    , \"\")\n  local file_name = file_name:gsub(\"%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+%.%w+\"\
    , \"\")\n  local file_name = file_name:gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpznweo29r.lua:38: function arguments expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name:gsub(\"^%w+\", \"\")\n  local file_name = file_name:gsub(\"\
    %.\", \"\")\n  local file_name = file_name:gsub(\"^[a-z]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[A-Z]\", \"\")\n  local file_name = file_name:gsub(\"^[0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[\\.]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^\\.]\", \"\")\n  local file_name = file_name:gsub(\"^[^a-z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^A-Z]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name = file_name:gsub(\"\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
    \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
    \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n \
    \   lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9mg_7kac.lua:48: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return nil\n   end\n   if file_name:sub(1, 1)\
    \ ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n\
    \      return nil\n   end\n   if file_name:sub(2, 3) ~= '.txt' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 3) ~= '.exe' then\n      return nil\n  \
    \ end\n   if file_name:sub(2, 3) ~= '.dll' then\n      return nil\n   end\n  \
    \ return 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiw1o446.lua:41:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmiw1o446.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0uj_z6v5.lua:49: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \".\" then\n    local file_extension\
    \ = file_name:sub(2)\n    if file_extension ~= nil and file_extension ~= \"\"\
    \ and (file_extension:sub(1, 1) ~= 'a' or file_extension:sub(1, 1) ~= 'A') then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ file_name ~= nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \"\" then\n\
    \        local file_extension_length = #file_extension\n        if file_extension_length\
    \ > 1 then\n          local file_extension_length = file_extension_length - 1\n\
    \          local file_extension_char = file_extension:sub(1, file_extension_length)\n\
    \          if file_extension_char ~= nil and file_extension_char ~= \"\" and (file_extension_char:sub(1,\
    \ 1) ~= 'a' or file_extension_char:sub(1, 1) ~= 'A') then\n            -- Check\
    \ that the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \            if file_extension_char == \"txt\" then\n              return \"Yes\"\
    \n            elseif file_extension_char == \"exe\" then\n              return\
    \ \"Yes\"\n            elseif file_extension_char == \"dll\" then\n          \
    \    return \"Yes\"\n            else\n              return \"No\"\n         \
    \   end\n          else\n            return \"No\"\n          end\n        else\n\
    \          return \"No\"\n        end\n      else\n        return \"No\"\n   \
    \   end\n    else\n      return \"No\"\n    end\n  else\n    return \"No\"\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg35hii3.lua:55:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfg35hii3.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  local file_name = file_name\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmdu_1smb.lua:90: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \".\") then\n      if string.find(file_name, \".\") then\n\
    \         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               return \"No\"\n            end\n         end\n \
    \     end\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"/\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return \"No\"\n   end\n  \
    \ if string.find(file_name, \".\") then\n      if string.find(file_name, \".\"\
    ) then\n         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               return \"No\"\n            end\n         end\n \
    \     end\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"/\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return \"No\"\n   end\n  \
    \ if string.find(file_name, \".\") then\n      if string.find(file_name, \".\"\
    ) then\n         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               return \"No\"\n            end\n         end\n \
    \     end\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"/\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return \"No\"\n   end\n  \
    \ if string.find(file_name, \".\") then\n      if string.find(file_name, \".\"\
    ) then\n         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               return \"No\"\n            end\n         end\n \
    \     end\n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"/\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"\\\\\") then\n      return \"No\"\n   end\n  \
    \ if string.find(file_name, \".\") then\n      if string.find(file_name, \".\"\
    ) then\n         if string.find(file_name, \".\") then\n            if string.find(file_name,\
    \ \".\") then\n               return \"No\"\n            end\n         end\n \
    \     end\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpucyujhvg.lua:130: 'end' expected (to close 'if' at line 89)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         return \"No\"\n      end\n   end\n   -- Check that the file name does\
    \ not contain more than three digits ('0'-'9')\n   if file_name ~= nil and file_name\
    \ ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n         if #file_name\
    \ > 3 then\n            return \"No\"\n         end\n      end\n   end\n   --\
    \ Check that the file name does not contain more than three digits ('0'-'9')\n\
    \   if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n         if #file_name > 3 then\n            if file_name:sub(2,\
    \ 2) ~= \".\" then\n               if #file_name > 3 then\n                  if\
    \ file_name:sub(3, 3) ~= \".\" then\n                     if #file_name > 3 then\n\
    \                        if file_name:sub(4, 4) ~= \".\" then\n              \
    \             if #file_name > 3 then\n                              if file_name:sub(5,\
    \ 5) ~= \".\" then\n                                 if #file_name > 3 then\n\
    \                                    if file_name:sub(6, 6) ~= \".\" then\n  \
    \                                     if #file_name > 3 then\n               \
    \                           if file_name:sub(7, 7) ~= \".\" then\n           \
    \                                  if #file_name > 3 then\n                  \
    \                              if file_name:sub(8, 8) ~= \".\" then\n        \
    \                                           if #file_name > 3 then\n         \
    \                                             if file_name:sub(9, 9) ~= \".\"\
    \ then\n                                                         return \"No\"\
    \n                                                      end\n                \
    \                                   end\n                                    \
    \            end\n                                             end\n         \
    \                               end\n                                    end\n\
    \                                 end\n                              end\n   \
    \                        end\n                        end\n                  \
    \   end\n                  end\n               end\n            end\n        \
    \ end\n      end\n   end\n   return \"Yes\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqf7aza18.lua:99: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"..\") then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\\\") then\n      return nil\n   end\n   if string.find(file_name, \":\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"?\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"*\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"<\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \">\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return nil\n   end\n   if string.find(file_name, \"=\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"+\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"&\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"+\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"&\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"+\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"&\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprab_0jpl.lua:110: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"/\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"\\\\\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \":\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \">\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"|\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"?\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \"*\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"[\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"]\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"{\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"}\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"(\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \")\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"%\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"<\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \">\") then\n      return \"No\"\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return \"No\"\n   end\n   if string.find(file_name, \"?\"\
    ) then\n      return \"No\"\n   end\n   if string.find(file_name, \"*\") then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \"[\") then\n     \
    \ return \"No\"\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ \"No\"\n   end\n   if string.find(file_name, \"{\") then\n      return \"No\"\
    \n   end\n   if string.find(file_name, \"}\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \"(\") then\n      return \"No\"\n   end\n   if\
    \ string.find(file_name, \")\") then\n      return \"No\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0rk12emj.lua:100: 'end' expected (to close 'if' at line 98)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= 'A' then\n      return nil\n   end\n   if\
    \ string.sub(file_name,1,1) ~= 'Z' then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"exe\") then\n      return nil\n   end\n   if string.find(file_name, \"dll\"\
    ) then\n      return nil\n   end\n   return 'Yes'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunizry73.lua:47:\
    \ expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpunizry73.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot is\
    \ not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      local first_letter\
    \ = file_name:sub(1, 1):lower()\n      if first_letter ~= first_letter then\n\
    \        return \"No\"\n      end\n    end\n    -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n    local extension = file_name:sub(2)\n\
    \    if extension ~= \"\" then\n      if extension:sub(1, 1) ~= \"a\" and extension:sub(1,\
    \ 1) ~= \"b\" and extension:sub(1, 1) ~= \"c\" and extension:sub(1, 1) ~= \"d\"\
    \ and extension:sub(1, 1) ~= \"e\" and extension:sub(1, 1) ~= \"f\" and extension:sub(1,\
    \ 1) ~= \"g\" and extension:sub(1, 1) ~= \"h\" and extension:sub(1, 1) ~= \"i\"\
    \ and extension:sub(1, 1) ~= \"j\" and extension:sub(1, 1) ~= \"k\" and extension:sub(1,\
    \ 1) ~= \"l\" and extension:sub(1, 1) ~= \"m\" and extension:sub(1, 1) ~= \"n\"\
    \ and extension:sub(1, 1) ~= \"o\" and extension:sub(1, 1) ~= \"p\" and extension:sub(1,\
    \ 1) ~= \"q\" and extension:sub(1, 1) ~= \"r\" and extension:sub(1, 1) ~= \"s\"\
    \ and extension:sub(1, 1) ~= \"t\" and extension:sub(1, 1) ~= \"u\" and extension:sub(1,\
    \ 1) ~= \"v\" and extension:sub(1, 1) ~= \"w\" and extension:sub(1, 1) ~= \"x\"\
    \ and extension:sub(1, 1) ~= \"y\" and extension:sub(1, 1) ~= \"z\" then\n   \
    \     return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kabykxl.lua:40:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0kabykxl.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\"):find(\"0\")\n    if dot_index == nil then\n        return false\n    end\n\
    \    local file_name = file_name:sub(1, dot_index)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n    local file_name = file_name:lower()\n\
    \    local file_name = file_name:sub(1, 1)\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptme6ermp.lua:105: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \  -- Check that the file name contains exactly one dot '.'\n  if file_name ~=\
    \ nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n \
    \     return \"No\"\n    end\n    -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n        local first_letter = file_name:sub(1, 1):lower()\n\
    \        if first_letter ~= nil and first_letter ~= \"\" then\n          if first_letter\
    \ ~= \"a\" and first_letter ~= \"b\" and first_letter ~= \"c\" and first_letter\
    \ ~= \"d\" and first_letter ~= \"e\" and first_letter ~= \"f\" and first_letter\
    \ ~= \"g\" and first_letter ~= \"h\" and first_letter ~= \"i\" and first_letter\
    \ ~= \"j\" and first_letter ~= \"k\" and first_letter ~= \"l\" and first_letter\
    \ ~= \"m\" and first_letter ~= \"n\" and first_letter ~= \"o\" and first_letter\
    \ ~= \"p\" and first_letter ~= \"q\" and first_letter ~= \"r\" and first_letter\
    \ ~= \"s\" and first_letter ~= \"t\" and first_letter ~= \"u\" and first_letter\
    \ ~= \"v\" and first_letter ~= \"w\" and first_letter ~= \"x\" and first_letter\
    \ ~= \"y\" and first_letter ~= \"z\" then\n            return \"No\"\n       \
    \   end\n        end\n      end\n    end\n  end\n  return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24uhkhev.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp24uhkhev.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local file_name = file_name:lower()\n    local file_ext = file_name:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_ext:sub(1,4)\n\
    \    local file_ext = file_ext:lower()\n    local file_ext = file_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzpoe2vhf.lua:98: 'end' expected (to close 'function' at line\
    \ 13) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \    local num_digits = string.len(file_name) - string.len(string.sub(file_name,1,1))\n\
    \    if num_digits > 3 then\n        return 'No'\n    end\n    local dot_index\
    \ = string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ 'No'\n    end\n    local dot_string = string.sub(file_name,dot_index+1,dot_index)\n\
    \    if dot_string ~= '' then\n        if string.find(dot_string, \"a..z\") ~=\
    \ nil then\n            return 'No'\n        end\n        if string.find(dot_string,\
    \ \"A..Z\") ~= nil then\n            return 'No'\n        end\n    end\n    return\
    \ 'Yes'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n  \
    \  lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jivk52y.lua:37:\
    \ expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_jivk52y.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if file_name == nil then\n      return nil\n   end\n   if #file_name > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \" \") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"..\") then\n      return nil\n   end\n \
    \  if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"^\") then\n      return nil\n   end\n   if string.find(file_name, \"$\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"[\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"]\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"{\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"}\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return nil\n   end\n   if string.find(file_name, \"~\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"`\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"'\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"<\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \">\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"?\") then\n      return nil\n   end\n   if string.find(file_name, \"/\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"\\\\\") then\n     \
    \ return nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n\
    \   end\n   if string.find(file_name, \"^\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"$\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"|\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"~\") then\n      return nil\n   end\n   if string.find(file_name, \"`\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"'\") then\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkz7n4q2b.lua:143: 'end' expected (to close 'if' at line 110)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 0\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 1) ~= string.byte('a'..'z')\
    \ then\n      return false\n   end\n   if file_name:sub(1, #file_name) ~= string.byte('0'..'9')\
    \ then\n      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinx86gwn.lua:35:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmpinx86gwn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function which takes a string representing a file's name,\
    \ and returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    -- A file's name is considered to be valid if and only if all the following conditions\
    \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n-- the latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"\
    example.txt\") # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\nlocal function file_name_check(file_name)\n\
    \   if #file_name > 3 then\n      return false\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return false\n   end\n   if string.sub(file_name,1,1)\
    \ ~= 'a' then\n      return false\n   end\n   if string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name)) ~= 'txt' then\n      return false\n   end\n  \
    \ if string.sub(file_name,string.find(file_name, \".\"),string.len(file_name))\
    \ ~= 'exe' then\n      return false\n   end\n   if string.sub(file_name,string.find(file_name,\
    \ \".\"),string.len(file_name)) ~= 'dll' then\n      return false\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = file_name_check\n    lu.assertEquals(candidate('example.txt'), 'Yes')\n\
    \    lu.assertEquals(candidate('1example.dll'), 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'),\
    \ 'No')\n    lu.assertEquals(candidate('K.dll'), 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'), 'No')\n    lu.assertEquals(candidate('_Y.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('?aREYA.exe'), 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'),\
    \ 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'), 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'),\
    \ 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'),\
    \ 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
    \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
    \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
    \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
    \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
    \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10b3em9z.lua:38:\
    \ expected: \"Yes\"\nactual: false\nstack traceback:\n\t/tmp/tmp10b3em9z.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
