language: lua
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8cd3rji.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa8cd3rji.lua:14: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\
    \t...\n\t/tmp/tmpa8cd3rji.lua:15: in local 'candidate'\n\t/tmp/tmpa8cd3rji.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.180 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- The Euclidean algorithm\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Lua\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8seda651.lua:50: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_x0n8d_l.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local c = a % i\n\
    \    if c == 0 then return i end\n    i = i + 1\n  end\n  return b\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2nyhz9k.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpz2nyhz9k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use \"a\" and \"b\" as the parameters to avoid confusion with\n\
    \  -- local variables in the function definition.\n  local remainder\n  local\
    \ remainder_a\n  local remainder_b\n  local quotient\n  local quotient_a\n  local\
    \ quotient_b\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvevkfeec.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.gcd(a, b)\n  return div * div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32jt9oc9.lua:10:\
    \ attempt to call a nil value (field 'gcd')\nstack traceback:\n\t/tmp/tmp32jt9oc9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp32jt9oc9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == a then return b\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8l6qvscp.lua:17:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmp8l6qvscp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_x0n8d_l.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  local i = 1\n  while\
    \ a % i == 0 do\n    i = i + 1\n  end\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87brxfai.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp87brxfai.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngg7vil7.lua:17:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpngg7vil7.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif a ==\
    \ b then return a\n  else\n    local c = a\n    while c > 0 do\n      local d\
    \ = b\n      while d > 0 do\n        if c % d == 0 then\n          b = d\n   \
    \     else\n          d = d / 2\n        end\n      end\n      c = c / 2\n   \
    \ end\n    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8cd3rji.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa8cd3rji.lua:14: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\
    \t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15:\
    \ in upvalue 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue\
    \ 'greatest_common_divisor'\n\t/tmp/tmpa8cd3rji.lua:15: in upvalue 'greatest_common_divisor'\n\
    \t...\n\t/tmp/tmpa8cd3rji.lua:15: in local 'candidate'\n\t/tmp/tmpa8cd3rji.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.180 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then return greatest_common_divisor(b, a) end\n  local c = a\n  while b > 0\
    \ do\n    local q = math.floor((b / c))\n    b = c - q * c\n    c = q\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjs2hrhly.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjs2hrhly.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if a % i == 0 then\n\
    \      local j = b\n      while j <= a do\n        if a % j == 0 then\n      \
    \    local k = i\n          while k <= b do\n            if b % k == 0 then\n\
    \              return k\n            end\n            k = k + 1\n          end\n\
    \        end\n        j = j + 1\n      end\n      return i\n    end\n    i = i\
    \ + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiv3l7uf.lua:37:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpsiv3l7uf.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
