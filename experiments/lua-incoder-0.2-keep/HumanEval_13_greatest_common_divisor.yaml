name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  -- The Euclidean algorithm\n\
    \  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Lua\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Perl\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#PHP\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#C\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Java\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python3\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python2\n  -- https://rosettacode.org/wiki/Euclidean_algorithm#Python\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Ruby\n  -- ", "  -- If\
    \ b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if a == 0\
    \ then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i <= a do\n    local c = a % i\n    if c == 0\
    \ then return i end\n    i = i + 1\n  end\n  return b\nend", "  -- We use \"a\"\
    \ and \"b\" as the parameters to avoid confusion with\n  -- local variables in\
    \ the function definition.\n  local remainder\n  local remainder_a\n  local remainder_b\n\
    \  local quotient\n  local quotient_a\n  local quotient_b", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local div = math.gcd(a, b)\n  return div * div\nend", "  if b == 0 then return\
    \ a\n  elseif b == a then return b\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend", " \
    \ -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if b\
    \ == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  local i = 1\n  while a % i ==\
    \ 0 do\n    i = i + 1\n  end\n  return i\nend", "  if b == 0 then return a\n \
    \ elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend", " \
    \ if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n \
    \   return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return\
    \ a\n  elseif a == 0 then return b\n  elseif a == b then return a\n  else\n  \
    \  local c = a\n    while c > 0 do\n      local d = b\n      while d > 0 do\n\
    \        if c % d == 0 then\n          b = d\n        else\n          d = d /\
    \ 2\n        end\n      end\n      c = c / 2\n    end\n    return b\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then return greatest_common_divisor(b, a) end\n  local c = a\n  while\
    \ b > 0 do\n    local q = math.floor((b / c))\n    b = c - q * c\n    c = q\n\
    \  end\n  return c\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   if a % i == 0 then\n      local j = b\n      while j <= a do\n        if a\
    \ % j == 0 then\n          local k = i\n          while k <= b do\n          \
    \  if b % k == 0 then\n              return k\n            end\n            k\
    \ = k + 1\n          end\n        end\n        j = j + 1\n      end\n      return\
    \ i\n    end\n    i = i + 1\n  end\n  return b\nend", "  if b == 1 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  else\n    local r = math.gcd(a, b)\n    return r and greatest_common_divisor(r,\
    \ b)\n  end\nend", "  -- If b is 0, return a\n  if b == 0 then\n    return a\n\
    \  end", "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a\
    \ > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 and m % b == 0 then return m end\n    if m % a == 0 then a\
    \ = m end\n    if m % b == 0 then b = m end\n    i = i + 1\n  end\n  return a\n\
    end", "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a >\
    \ b then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if i % b == 0\
    \ then return i end\n    i = i + 1\n  end\n  return a\nend", "  -- If b is 0,\
    \ then return 0\n  if b == 0 then\n    return 0\n  end", "  if b == 0 then return\
    \ a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  -- If b is\
    \ 0, then return a\n  if b == 0 then\n    return a\n  end", "  -- We use \"a\"\
    \ as the numerator and \"b\" as the denominator\n  -- The greatest common divisor\
    \ is then \"a\" / gcd(a,b)\n  -- If gcd(a,b) is 1, then a divides b\n  -- If gcd(a,b)\
    \ = 0, then a does not divide b\n  -- If gcd(a,b) = 1, then a divides b\n  --\
    \ If gcd(a,b) = a, then a divides b\n  -- If gcd(a,b) = b, then a does not divide\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- If gcd(a,b) = b, then a divides\
    \ b\n  -- If gcd(a,b) = b, then a divides b\n  -- ", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local t = b\n\
    \    b = a % t\n    a = t\n  end\n  return a\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if a == 0 then return b end\n  if b == 0 then return a end\n \
    \ if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a\
    \ = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then\n    return b\n \
    \ elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n  else\n\
    \    local c = math.gcd(a, b)\n    return c * greatest_common_divisor(b, a % c)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if b == 1 then\n    return a\n  elseif b == 0 then\n   \
    \ return 0\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- The Euclidean algorithm for finding the greatest\
    \ common divisor\n  -- between two integers is the \"Euclid's algorithm\", which\
    \ finds the\n  -- greatest common divisor of a and b by repeatedly subtracting\
    \ b\n  -- from the dividend until it is zero. https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- The greatest common divisor is the largest integer that divides both\n \
    \ -- a and b. https://en.wikipedia.org/wiki/Greatest_common_divisor\n  -- The\
    \ Euclidean algorithm is also known as the extended Euclidean algorithm.\n  --\
    \ The extended Euclidean algorithm is also known as the binary GCD.\n  -- The\
    \ binary GCD is commonly called the extended GCD.\n  -- The greatest common divisor\
    \ of two integers a and b is defined as:\n  --\n  --   gcd(a, b) = gcd(b, a mod\
    \ b)\n  --\n  -- The Euclidean algorithm uses the extended Euclidean algorithm.\n\
    \  -- The extended Euclidean algorithm uses the binary GCD.\n  -- The binary GCD\
    \ is commonly called the extended GCD.\n  -- The extended GCD algorithm is also\
    \ known as the Euclid's algorithm.\n  -- The Euclid's algorithm is also known\
    \ as the Extended Euclidean algorithm.\n  -- The Extended Euclidean algorithm\
    \ is also known as the binary GCD.\n  -- The binary GCD is commonly called the\
    \ extended GCD.\n  -- The Extended GCD algorithm is also known as the Euclid's\
    \ algorithm.\n  -- The Euclid's algorithm is also known as the Extended Euclidean\
    \ algorithm.\n  -- The Extended Euclidean algorithm is also known as the binary\
    \ GCD.\n  -- The binary GCD is commonly called the extended GCD.\n  -- The Extended\
    \ GCD algorithm is also known as the Euclid's algorithm.\n  -- The Euclid's algorithm\
    \ is also known as the Extended Euclidean algorithm.\n  -- The Extended Euclidean\
    \ algorithm is also known as the binary GCD.\n  -- The binary GCD is commonly\
    \ called the extended GCD.\n  -- The Extended GCD algorithm is also known as the\
    \ Euclid's algorithm.\n  -- The Euclid's algorithm is also known as the Extended\
    \ Euclidean algorithm.\n  -- The Extended Euclidean algorithm is also known as\
    \ the binary GCD.\n  -- The binary GCD is commonly called the extended GCD.\n\
    \  -- The Extended GCD algorithm is also known as the Euclid's algorithm.", " \
    \ if b == 0 then return a\n  elseif a == 0 then return b\n  elseif a == b then\
    \ return a\n  elseif a > b then return greatest_common_divisor(b, a) end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif b\
    \ == a then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif\
    \ b == a then return b\n  else\n    local c = greatest_common_divisor(b, a % b)\n\
    \    return c + (a % b) / b\n  end\nend", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  local function gcd(a, b)\n    if b == 0 then\n      return\
    \ a\n    end\n    return gcd(b, a % b)\n  end\n  return gcd(a, b)\nend", "  if\
    \ a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local i = 1\n  while i <= a do\n    local t = b\n    b = a %\
    \ t\n    a = t\n    i = i + 1\n  end\n  return b\nend", "  if b == 0 then return\
    \ a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  local c = 1\n  while a % b == 0 do\n    a = a / b\n    c = c *\
    \ b\n  end\n  return c\nend", "  if b == 0 then\n    return a\n  elseif b == 1\
    \ then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n \
    \ end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif b\
    \ > a then\n    return greatest_common_divisor(b, a%b)\n  else\n    return greatest_common_divisor(a%b,\
    \ b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return b\n  elseif a == 0 then\
    \ return 0\n  elseif a == 1 then return 1\n  elseif a == b then return a\n  elseif\
    \ a > b then return greatest_common_divisor(b, a) end\nend", "  -- Special case:\
    \ if a and b are equal, return b\n  if a == b then return b end\n  -- Special\
    \ case: if b is zero, return a\n  if b == 0 then return a end\n  -- Special case:\
    \ if b is less than a, return b\n  if b < a then return b end\n  -- Otherwise,\
    \ loop through all numbers from 1 to b\n  for i = 1, b do\n    -- If b is divisible\
    \ by a, return b\n    if b % a == 0 then return b end\n    -- Otherwise, subtract\
    \ a from b\n    local new_b = b - a\n    -- If new_b is less than a, return new_b\n\
    \    if new_b < a then return new_b end\n    -- Otherwise, subtract a from new_b\n\
    \    local new_a = a - new_b\n    -- If new_a is less than b, return new_a\n \
    \   if new_a < b then return new_a end\n    -- Otherwise, return a\n    return\
    \ a\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return\
    \ a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a +\
    \ b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n   \
    \ return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  -- The Euclidean\
    \ algorithm for finding the greatest common divisor\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- The algorithm is as follows:\n  --\n  --     1. Initialize a to be the smaller\
    \ of the two given numbers.\n  --     2. Repeat while a is greater than or equal\
    \ to b:\n  --         1. Remove a from both numbers a and b\n  --         2. Find\
    \ the remainder of a/b\n  --         3. Add this remainder to b\n  --     3. Return\
    \ b\n  --\n  -- This algorithm is O(log(n)) and O(1) in memory.\n  -- The algorithm\
    \ is also known as \"Euclid's algorithm\".\n  -- See http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- See http://en.wikipedia.org/wiki/Euclid%27s_algorithm", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local i = 1\n  while i <= a do\n    local m = math.floor((a + b) / 2)\n   \
    \ if m % a == 0 and m % b == 0 then return m end\n    if m % a == 0 then a = m\
    \ end\n    if m % b == 0 then b = m end\n    i = i + 1\n  end\n  return b\nend",
  "  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if b\
    \ == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  --\
    \ If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if b ==\
    \ 0 then return a\n  else return greatest_common_divisor(b, a % b) end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  local gcd = math.gcd(a,\
    \ b)\n  if gcd == 1 then\n    return a\n  else\n    return b\n  end\nend", " \
    \ if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif b\
    \ == a then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif\
    \ a == b then return a\n  elseif a > b then return greatest_common_divisor(b,\
    \ a) end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  local\
    \ function gcd(a, b)\n    if b == 0 then\n      return a\n    else\n      return\
    \ gcd(b, a % b)\n    end\n  end\n  return gcd(a, b)\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  -- If b is 0, then a is\
    \ also 0\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- If b is 0, return 0\n  if b == 0 then\n    return 0\n  end", "  if b == 0\
    \ then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ > b then\n    return greatest_common_divisor(b, a % b)\n  else\n    return greatest_common_divisor(a,\
    \ (b % a) + a)\n  end\nend", "  -- We don't need to worry about negative numbers,\
    \ as long as we don't\n  -- divide by zero.\n  if b == 0 then\n    return a\n\
    \  end\n  if a == 0 then\n    return b\n  end\n  -- If b is greater than a, then\
    \ a is greater than the greatest common divisor\n  -- of b and a.\n  if b > a\
    \ then\n    return greatest_common_divisor(b, a/b)\n  end\n  -- If b is less than\
    \ a, then a is greater than the greatest common divisor\n  -- of b and a.\n  if\
    \ b < a then\n    return greatest_common_divisor(a/b, b)\n  end\n  -- If b is\
    \ equal to a, then a is greater than the greatest common divisor\n  -- of b and\
    \ a.\n  if b == a then\n    return a\n  end\n  -- If b is divisible by a, then\
    \ a is greater than the greatest common\n  -- divisor of b and a.\n  if b % a\
    \ == 0 then\n    return greatest_common_divisor(b/a, a)\n  end\n  -- If b is divisible\
    \ by a, then a is greater than the greatest common\n  -- divisor of b and a.\n\
    \  if a % b == 0 then\n    return greatest_common_divisor(a, a/b)\n  end\n  --\
    \ If b is divisible by a, then a is greater than the greatest common\n  -- divisor\
    \ of b and a.\n  if b % a == 0 then\n    return greatest_common_divisor(b/a, a)\n\
    \  end\n  -- If b is divisible by a, then a is greater than the greatest common\n\
    \  -- divisor of b and a.\n  if a % b == 0 then\n    return greatest_common_divisor(a,\
    \ a/b)\n  end\n  -- If b is divisible by a, then a is greater than the greatest\
    \ common\n  -- divisor of b and a.\n  if b % a == 0 then\n    return greatest_common_divisor(b/a,\
    \ a)\n  end\n  -- If b is divisible by a, then a is greater than the greatest\
    \ common\n  -- divisor of b and a.\n  if a % b == 0 then\n    return greatest_common_divisor(a,\
    \ a/b)\n  end\n  -- If b is divisible by a, then a is greater than the greatest\
    \ common\n  -- divisor of b and a.\n  if b % a == 0 then\n    return greatest_common_divisor(b/a,\
    \ a)\n  end\n  -- If b is divisible by a, then a is greater than ", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a + b) /\
    \ 2)\n    if m == a then return b end\n    if m == b then return a end\n    if\
    \ m % a == 0 then a = m end\n    if m % b == 0 then b = m end\n    i = i + 1\n\
    \  end\n  return b\nend", "  local remainder\n  local gcd = math.gcd(a, b)\n \
    \ if gcd == 1 then\n    return a\n  elseif gcd == 0 then\n    return b\n  else\n\
    \    remainder = math.mod(a, gcd)\n    return greatest_common_divisor(b, remainder)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  local\
    \ gcd = math.gcd(a, b)\n  if gcd == 1 then return b end\n  if gcd == 0 then return\
    \ a end\n  return greatest_common_divisor(b, gcd)\nend", "  -- We assume a > b\n\
    \  assert(a > b)\n  local div = a % b\n  if div == 0 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a - div)\n  end\nend", "  -- We assume\
    \ a >= b\n  -- We also assume a >= 0\n  -- We also assume b > 0\n  -- We also\
    \ assume b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We\
    \ also assume b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  --\
    \ We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n\
    \  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume b >\
    \ 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n  -- We also assume b > 0\n  -- We also assume b > 0\n  -- We also assume\
    \ b > 0\n", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local t = b\n\
    \    b = a % t\n    a = t\n  end\n  return a\nend", "  -- We use \"a\" as the\
    \ numerator and \"b\" as the denominator\n  -- The greatest common divisor is\
    \ then \"b\" divided by \"a\".\n  -- We start by checking if \"a\" is less than\
    \ \"b\".\n  if a < b then\n    -- If \"a\" is less than \"b\", then \"a\" divides\
    \ \"b\".\n    return b / a\n  else\n    -- If \"a\" is greater than \"b\", then\
    \ \"b\" divides \"a\".\n    return a / b\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ i = 1\n  while i <= a do\n    local t = b\n    b = a % t\n    a = t\n    i =\
    \ i + 1\n  end\n  return b\nend", "  if a == 0 then\n    return b\n  elseif b\
    \ == 0 then\n    return a\n  elseif a == b then\n    return a\n  else\n    local\
    \ m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n\
    \  else return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  while b > 0 do\n    local r = a % b\n    a = b\n    b = r\n  end\n  return\
    \ a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i < a do\n    local t = b\n    b = a % t\n   \
    \ a = t\n    i = i + 1\n  end\n  return b\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a == 0 then return b\n  elseif a == 1\
    \ then return b\n  elseif a == b then return a\n  elseif a == b + 1 then return\
    \ a\n  elseif a == b - 1 then return a\n  elseif a == b * 2 then return a\n  elseif\
    \ a == b * 3 then return a\n  elseif a == b * 4 then return a\n  elseif a == b\
    \ * 5 then return a\n  elseif a == b * 6 then return a\n  elseif a == b * 7 then\
    \ return a\n  elseif a == b * 8 then return a\n  elseif a == b * 9 then return\
    \ a\n  elseif a == b * 10 then return a\n  elseif a == b * 11 then return a\n\
    \  elseif a == b * 12 then return a\n  elseif a == b * 13 then return a\n  elseif\
    \ a == b * 14 then return a\n  elseif a == b * 15 then return a\n  elseif a ==\
    \ b * 16 then return a\n  elseif a == b * 17 then return a\n  elseif a == b *\
    \ 18 then return a\n  elseif a == b * 19 then return a\n  elseif a == b * 20 then\
    \ return a\n  elseif a == b * 21 then return a\n  elseif a == b * 22 then return\
    \ a\n  elseif a == b * 23 then return a\n  elseif a == b * 24 then return a\n\
    \  elseif a == b * 25 then return a\n  elseif a == b * 26 then return a\n  elseif\
    \ a == b * 27 then return a\n  elseif a == b * 28 then return a\n  elseif a ==\
    \ b * 29 then return a\n  elseif a == b * 30 then return a\n  elseif a == b *\
    \ 31 then return a\n  elseif a == b * 32 then return a\n  elseif a == b * 33 then\
    \ return a\n  elseif a == b * 34 then return a\n  elseif a == b * 35 then return\
    \ a\n  elseif a == b * 36 then return a\n  elseif a == b * 37 then return a\n\
    \  elseif a == b * 38 then return a\n  elseif a == b * 39 then return a\n  elseif\
    \ a == b * 40 then return a\n  elseif a == b * 41 then return a\n  else", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  local div = math.gcd(a, b)\n  return div\nend", "  if b == 0 then\
    \ return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local i = 1\n  while i <= a do\n    local t = b\n    b = a % t\n    a = t\n\
    \    i = i + 1\n  end\n  return b\nend", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n   \
    \ return a\n  elseif b > a then\n    return greatest_common_divisor(b, a%b)\n\
    \  else\n    return greatest_common_divisor(a%b, b)\n  end\nend", "  if b == 0\
    \ then\n    return a\n  elseif b == 1 then\n    return a\n  elseif b == a then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local div = math.floor((a % b) / b)\n  if div == 0 then return\
    \ b end\n  return greatest_common_divisor(b, div)\nend", "  if b == 0 then\n \
    \   return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- The Euclidean algorithm\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Two_variables\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Three_variables\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Euclidean_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_2\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_3\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_4\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_5\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_6\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_7\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_8\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_9\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_10\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_11\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_12\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_13\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_14\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_15\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_16\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_17\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_18\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_19\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_20\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_21\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_22\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_23\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_24\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_25\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_26\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_27\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_28\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_29\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_30\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_31\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_32\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_33\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_34\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Example_35\n  -- http://en.wikipedia.org/wiki/Euclide",
  "  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif a > b then return\
    \ greatest_common_divisor(b, a) end\n  local i = 1\n  while i <= a do\n    if\
    \ a % i == 0 then\n      local r = a / i\n      if r == a then return i end\n\
    \      if r > b then return i end\n    end\n    i = i + 1\n  end\n  return a\n\
    end", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a %\
    \ b == 0 then return greatest_common_divisor(b, a / b) end\n  local i = 1\n  while\
    \ a % i == 0 do\n    a = a / i\n    i = i + 1\n  end\n  return i\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n\
    \  while i <= a do\n    local m = math.floor((a + b) / 2)\n    if m == a then\
    \ return m end\n    if m == b then return m end\n    if m % a == 0 then a = m\
    \ end\n    if m % b == 0 then b = m end\n    i = i + 1\n  end\n  return b\nend",
  "  -- We use \"a\" as the numerator and \"b\" as the denominator\n  -- The greatest\
    \ common divisor is defined as the largest integer that divides both \"a\" and\
    \ \"b\".\n  -- This means that it is the largest integer that divides both \"\
    a\" and \"b\" without remainder.\n  -- If \"a\" divides \"b\" without remainder,\
    \ then \"a\" divides \"b\" with remainder \"0\"\n  -- If \"a\" divides \"b\" with\
    \ remainder, then \"a\" divides \"b\" without remainder and remainder \"b\".\n\
    \  -- If \"a\" divides \"b\" with remainder \"b\" then \"a\" divides \"b\" with\
    \ remainder \"b\".\n  -- If \"a\" divides \"b\" with remainder \"0\" then \"a\"\
    \ divides \"b\" without remainder.\n  -- If \"a\" divides \"b\" with remainder\
    \ \"a\" then \"a\" divides \"b\" without remainder.\n  -- If \"a\" divides \"\
    b\" with remainder \"b\" then \"a\" divides \"b\" with remainder \"b\".\n  --\
    \ If \"a\" divides \"b\" with remainder \"a\" then \"a\" divides \"b\" with remainder\
    \ \"a\".\n  -- If \"a\" divides \"b\" with remainder \"b\" then \"a\" divides\
    \ \"b\" with remainder \"b\".\n  -- If \"a\" divides \"b\" with remainder \"a\"\
    \ then \"a\" divides \"b\" with remainder \"a\".\n  -- If \"a\" divides \"b\"\
    \ with remainder \"b\" then \"a\" divides \"b\" with remainder \"b\".\n  -- If\
    \ \"a\" divides \"b\" with remainder \"a\" then \"a\" divides \"b\" with remainder\
    \ \"a\".\n  -- If \"a\" divides \"b\" with remainder \"b\" then \"a\" divides\
    \ \"b\" with remainder \"b\".\n  -- If \"a\" divides \"b\" with remainder \"a\"\
    \ then \"a\" divides \"b\" with remainder \"a\".\n  -- If \"a\" divides \"b\"\
    \ with remainder \"b\" then \"a\" divides \"b\" with remainder \"b\".\n  -- If\
    \ \"a\" divides \"b\" with remainder \"a\" then \"a\" divides \"b\" with remainder\
    \ \"", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n \
    \ elseif b == -1 then\n    return a\n  elseif b == -2 then\n    return a\n  elseif\
    \ b == -3 then\n    return a\n  elseif b == -4 then\n    return a\n  elseif b\
    \ == -5 then\n    return a\n  elseif b == -6 then\n    return a\n  elseif b ==\
    \ -7 then\n    return a\n  elseif b == -8 then\n    return a\n  elseif b == -9\
    \ then\n    return a\n  elseif b == -10 then\n    return a\n  elseif b == -11\
    \ then\n    return a\n  elseif b == -12 then\n    return a\n  elseif b == -13\
    \ then\n    return a\n  elseif b == -14 then\n    return a\n  elseif b == -15\
    \ then\n    return a\n  elseif b == -16 then\n    return a\n  elseif b == -17\
    \ then\n    return a\n  elseif b == -18 then\n    return a\n  elseif b == -19\
    \ then\n    return a\n  elseif b == -20 then\n    return a\n  elseif b == -21\
    \ then\n    return a\n  elseif b == -22 then\n    return a\n  elseif b == -23\
    \ then\n    return a\n  elseif b == -24 then\n    return a\n  elseif b == -25\
    \ then\n    return a\n  elseif b == -26 then\n    return a\n  elseif b == -27\
    \ then\n    return a\n  elseif b == -28 then\n    return a\n  elseif b == -29\
    \ then\n    return a\n  elseif b == -30 then\n    return a\n  elseif b == -31\
    \ then\n    return a\n  elseif b == -32 then\n    return a\n  elseif b == -33\
    \ then\n    return a\n  elseif b == -34 then\n    return a\n  elseif b == -35\
    \ then\n    return a\n  elseif b == -36 then\n    return a\n  elseif b == -37\
    \ then\n    return a\n  elseif b == -38 then\n    return a\n  elseif b == -39\
    \ then\n    return a\n  elseif b == -40 then\n    return a\n  elseif b == -41\
    \ then\n    return a", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return b\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a / b) + 1\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n  \
    \  return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local div = math.floor((a + b) / 2)\n\
    \  if div == a then return b end\n  if div == b then return a end\n  return greatest_common_divisor(div,\
    \ a)\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return a\n  elseif b == -1 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end\n  -- If b is negative, then return greatest common divisor of a and\
    \ -b\n  if b < 0 then\n    return greatest_common_divisor(-a, -b)\n  end\n  --\
    \ If b is positive, then return greatest common divisor of a and b\n  if b > 0\
    \ then\n    -- If b is greater than a, then return greatest common divisor of\
    \ a and a\n    if b > a then\n      return a\n    end\n    -- If b is less than\
    \ a, then return greatest common divisor of a and b\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_common_divisor(25,\
    \ 15)\n    -- 5\n    -- >>> greatest_common_divisor(25, 15)\n    -- 5\n    --\
    \ >>> greatest_common_divisor(25, 15)\n    -- 5\n    -- >>> greatest_", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local i = 1\n  while i < a do\n    local t = b\n    b = a %\
    \ t\n    a = t\n    i = i + 1\n  end\n  return b\nend", "  if a == 0 then\n  \
    \  return b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return\
    \ a\n  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ d = 0\n  while b > 0 do\n    local t = b\n    b = a % t\n    a = t\n    d =\
    \ d + 1\n  end\n  return d\nend", "  if a == 0 then\n    return b\n  elseif b\
    \ == 0 then\n    return a\n  else\n    local c = math.gcd(a, b)\n    return greatest_common_divisor(b,\
    \ c) if c > a else c\n  end\nend", "  -- We use \"a\" as the numerator and \"\
    b\" as the denominator\n  -- The greatest common divisor is defined as the largest\
    \ integer that divides both \"a\" and \"b\".\n  -- This can be seen by noting\
    \ that \"a\" divides \"b\" evenly and \"b\" divides \"a\" evenly.\n  -- If \"\
    a\" divides \"b\" evenly, then \"a\" is the greatest common divisor of \"a\" and\
    \ \"b\".\n  -- If \"b\" divides \"a\" evenly, then \"b\" is the greatest common\
    \ divisor of \"a\" and \"b\".\n  -- If \"a\" divides \"b\" oddly, then \"a\" is\
    \ the greatest common divisor of \"a\" and \"b\".\n  -- If \"b\" divides \"a\"\
    \ oddly, then \"b\" is the greatest common divisor of \"a\" and \"b\".\n  -- The\
    \ greatest common divisor of two integers \"a\" and \"b\" is called \"gcd\".\n\
    \  -- >>> greatest_common_divisor(7, 3)\n  -- 3\n  -- >>> greatest_common_divisor(7,\
    \ 5)\n  -- 1\n  -- >>> greatest_common_divisor(7, 7)\n  -- 1\n  -- >>> greatest_common_divisor(7,\
    \ 11)\n  -- 1\n  -- >>> greatest_common_divisor(11, 7)\n  -- 1\n  -- >>> greatest_common_divisor(11,\
    \ 11)\n  -- 1\n  -- >>> greatest_common_divisor(11, 13)\n  -- 3\n  -- >>> greatest_common_divisor(13,\
    \ 11)\n  -- 3\n  -- >>> greatest_common_divisor(13, 13)\n  -- 1\n  -- >>> greatest_common_divisor(13,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(15, 13)\n  -- 5\n  -- >>> greatest_common_divisor(15,\
    \ 15)\n  -- 1\n  -- >>> greatest_common_divisor(15, 17)\n  -- 5\n  -- >>> greatest_common_divisor(17,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(17, 17)\n  -- 1\n  -- >>> greatest_common_divisor(17,\
    \ 19)\n  -- 5\n  -- >>> greatest_common_divisor(19, 17)\n  -- 5\n  -- >>> greatest_common_divisor(19,\
    \ 19)\n  -- 1\n  -- >>> greatest_common_divisor(19, 21)\n  ", "  if a == 0 then\n\
    \    return b\n  elseif b == 0 then\n    return a\n  elseif b == a then\n    return\
    \ a\n  else\n    local c = math.gcd(a, b)\n    return greatest_common_divisor(b,\
    \ c) -- recurse\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then\
    \ return a\n  elseif b == 2 then return a\n  elseif b == 3 then return a\n  elseif\
    \ b == 4 then return a\n  elseif b == 5 then return a\n  elseif b == 6 then return\
    \ a\n  elseif b == 7 then return a\n  elseif b == 8 then return a\n  elseif b\
    \ == 9 then return a\n  elseif b == 10 then return a\n  elseif b == 11 then return\
    \ a\n  elseif b == 12 then return a\n  elseif b == 13 then return a\n  elseif\
    \ b == 14 then return a\n  elseif b == 15 then return a\n  elseif b == 16 then\
    \ return a\n  elseif b == 17 then return a\n  elseif b == 18 then return a\n \
    \ elseif b == 19 then return a\n  elseif b == 20 then return a\n  elseif b ==\
    \ 21 then return a\n  elseif b == 22 then return a\n  elseif b == 23 then return\
    \ a\n  elseif b == 24 then return a\n  elseif b == 25 then return a\n  elseif\
    \ b == 26 then return a\n  elseif b == 27 then return a\n  elseif b == 28 then\
    \ return a\n  elseif b == 29 then return a\n  elseif b == 30 then return a\n \
    \ elseif b == 31 then return a\n  elseif b == 32 then return a\n  elseif b ==\
    \ 33 then return a\n  elseif b == 34 then return a\n  elseif b == 35 or b == 36\
    \ or b == 37 or b == 38 or b == 39 then return a\n  elseif b == 40  then return\
    \ a\n  elseif b == 41 then return a\n  elseif b == 42 then return a\n  elseif\
    \ b == 43 then return a\n  elseif b == 44 then return a\n  elseif b == 45 then\
    \ return a\n  elseif b == 46 then return a\n  elseif b == 47 then return a\n \
    \ elseif b == 48 then return a\n  elseif b == 49 then return a\n  elseif b ==\
    \ 50 then return a\n  elseif b == 51 then return a\n  elseif b == 52 then return\
    \ a\n  elseif b == 53 then return a\n  elseif ", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif a == 0 then return b\n  elseif a > b then return greatest_common_divisor(b,\
    \ a) end\n  local c = a\n  while c > 1 do\n    local d = b\n    while d > 1 do\n\
    \      if c % d == 0 then return d end\n      d = d / 2\n    end\n    c = c /\
    \ 2\n  end\n  return c\nend", "  -- If b is 0, then return a\n  if b == 0 then\n\
    \    return a\n  end\n  -- If b is negative, then return greatest common divisor\
    \ of a and -b\n  if b < 0 then\n    return greatest_common_divisor(-a, -b)\n \
    \ end\n  -- If b is positive, then return greatest common divisor of a and b\n\
    \  if b > 0 then\n    -- If b is greater than a, then return greatest common divisor\
    \ of a and a\n    if b > a then\n      return a\n    end\n    -- If b is smaller\
    \ than a, then return greatest common divisor of a and b\n    -- If b is equal\
    \ to a, then return a\n    if b == a then\n      return a\n    end\n    -- If\
    \ b is equal to a, then return a\n    if b == a then\n      return a\n    end\n\
    \    -- If b is greater than a, then return greatest common divisor of a and a\n\
    \    if b > a then\n      return a\n    end\n    -- If b is smaller than a, then\
    \ return greatest common divisor of a and b\n    -- If b is equal to a, then return\
    \ a\n    if b == a then\n      return a\n    end\n    -- If b is equal to a, then\
    \ return a\n    if b == a then\n      return a\n    end\n    -- If b is greater\
    \ than a, then return greatest common divisor of a and a\n    if b > a then\n\
    \      return a\n    end\n    -- If b is smaller than a, then return greatest\
    \ common divisor of a and b\n    -- If b is equal to a, then return a\n    if\
    \ b == a then\n      return a\n    end\n    -- If b is equal to a, then return\
    \ a\n    if b == a then\n      return a\n    end\n    -- If b is greater than\
    \ a, then return greatest common divisor of a and a\n    if b > a then\n     \
    \ return a\n    end\n    -- If b is smaller than a, then return greatest common\
    \ divisor of a and b\n    -- If b is equal to a, then return a\n    if b == a\
    \ then\n      return a\n    end\n    -- If b is equal to a, then return a\n  \
    \  if b == a then\n      return a\n    end\n    -- If b is greater than a, then\
    \ return greatest common divisor of a and a\n    if b > a then\n      return a\n\
    \    end\n    -- If b is smaller than a, then return greatest common divisor of\
    \ a and b\n    -- If b is equal to a, then return a\n    if b == a then\n    \
    \  return a\n    end\n    -- If b is equal to a, ", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- Special case: if the divisor is 1, return 1\n  if\
    \ a == 1 then return 1 end\n  -- Special case: if the divisor is zero, return\
    \ 0\n  if b == 0 then return 0 end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == b then return 1 end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == 1 then return 1 end\n  -- Special case: if the divisor is zero,\
    \ return 0\n  if b == 1 then return 0 end\n  -- Special case: if the divisor is\
    \ 1, return 1\n  if a == b then return 1 end\n  -- Special case: if the divisor\
    \ is zero, return 0\n  if b == 1 then return 0 end\n  -- Special case: if the\
    \ divisor is 1, return 1\n  if a == b then return 1 end\n  -- Special case: if\
    \ the divisor is zero, return 0\n  if b == 1 then return 0 end\n  -- Special case:\
    \ if the divisor is 1, return 1\n  if a == b then return 1 end\n  -- Special case:\
    \ if the divisor is zero, return 0\n  if b == 1 then return 0 end\n  -- Special\
    \ case: if the divisor is 1, return 1\n  if a == b then return 1 end\n  -- Special\
    \ case: if the divisor is zero, return 0\n  if b == 1 then return 0 end\n  --\
    \ Special case: if the divisor is 1, return 1\n  if a == b then return 1 end\n\
    \  -- Special case: if the divisor is zero, return 0\n  if b == 1 then return\
    \ 0 end\n  -- Special case: if the divisor is 1, return 1\n  if a == b then return\
    \ 1 end\n  -- Special case: if the divisor is zero, return 0\n  if b == 1 then\
    \ return 0 end\n  -- Special case: if the divisor is 1, return 1\n  if a == b\
    \ then return 1 end\n  -- Special case: if the divisor is zero, return 0\n  if\
    \ b == 1 then return 0 end\n  -- Special case: if the divisor is 1, return 1\n\
    \  if a == b then return 1 end\n  -- Special case: if the divisor is zero, return\
    \ 0\n  if b == 1 then return 0 end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == b then return 1 end\n  -- Special case: if the divisor is zero,\
    \ return 0\n  if b == 1 then return 0 end\n  -- Special case: if the divisor is\
    \ 1, return 1\n  if a == b then ", "  if b == 0 then\n    return a\n  elseif b\
    \ == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  local\
    \ gcd = math.gcd(a, b)\n  if gcd == 1 then return b end\n  if gcd == 0 then return\
    \ a end\n  return greatest_common_divisor(b, gcd)\nend", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  -- If b is 0, return a\n\
    \  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n\
    \  elseif a % b == 0 then return greatest_common_divisor(b, a / b) end\n  local\
    \ i = 1\n  while a % i == 0 do\n    a = a / i\n    i = i + 1\n  end\n  return\
    \ i\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  if b == 0 then\
    \ return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  -- Return greatest\
    \ common divisor of a and b\n  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return b\n  else return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ b\n  elseif a % b == 0 then return greatest_common_divisor(b, a / b) end\n \
    \ return greatest_common_divisor(b, a % b)\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n\
    \  elseif a % b == 0 then\n    return greatest_common_divisor(b, a / b)\n  else\n\
    \    return greatest_common_divisor(b, a / b) + 1\n  end\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local i = 1\n  while i <= a do\n    if i % b == 0 then return i end\n    i\
    \ = i + 1\n  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  -- Return greatest common divisor of a and b\n  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return a\
    \ end\n  if a > b then a, b = b, a end\n  local div = math.floor((a + b) / 2)\n\
    \  return greatest_common_divisor(a - div, b - div)\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif a == 0 then return\
    \ b\n  elseif a > b then return greatest_common_divisor(b, a % b) end\n  return\
    \ greatest_common_divisor(a % b, b)\nend", "  if b == 0 then\n    return a\n \
    \ elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then return a\n  elseif b == 1 then return a\n  else return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ a\n  elseif a == 0 then return b\n  elseif a == 1 then return b\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  local div = math.gcd(a, b)\n  return div and div or\
    \ a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then return a\n  elseif a == 0 then return b\n  elseif a == b then return\
    \ a\n  else\n    local x = a\n    local y = b\n    while y > 0 do\n      local\
    \ t = y\n      y = x % y\n      x = t\n    end\n    return x\n  end\nend", " \
    \ -- TODO: This can be optimized by using \"a\" as the starting point and then\n\
    \  -- incrementing \"a\" until it reaches b. However this would require a more\n\
    \  -- complex algorithm.\n  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif a == 0 then return\
    \ b\n  else return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a + b) /\
    \ 2)\n    if m == a then return b end\n    if m == b then return a end\n    if\
    \ m % a == 0 then return m end\n    if m % b == 0 then return m end\n    if m\
    \ % a == 0 and m % b == 0 then return m end\n    if m % a == 0 and m % b != 0\
    \ then return m end\n    if m % a != 0 and m % b == 0 then return m end\n    if\
    \ m % a != 0 and m % b != 0 then return m end\n    i = i + 1\n  end\nend", " \
    \ if b == 0 then return a\n  elseif b == 1 then return a\n  else return greatest_common_divisor(b,\
    \ a % b) end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n  \
    \  return a\n  elseif b > a then\n    return greatest_common_divisor(b, a%b)\n\
    \  else\n    return greatest_common_divisor(a%b, b)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
