language: lua
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_words[#new_words + 1] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqknhu0il.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpqknhu0il.lua:13: in local 'candidate'\n\t/tmp/tmpqknhu0il.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      local new_ascii = ascii\n\
    \      if ascii < 65 then\n        new_ascii = ascii + 26\n      elseif ascii\
    \ < 91 then\n        new_ascii = ascii - 26\n      else\n        new_ascii = ascii\
    \ - 64\n      end\n      new_word = new_word .. string.char(new_ascii)\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words, '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5cd87n7.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpe5cd87n7.lua:13: in local 'candidate'\n\t/tmp/tmpe5cd87n7.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(word)\n      local new_c = string.byte(new_word)\n\
    \      if c < new_c then\n        new_word = new_word .. string.sub(word, j, j\
    \ + 1)\n        j = j + 1\n      else\n        new_word = new_word .. string.sub(word,\
    \ j + 1, j + 2)\n        j = j + 2\n      end\n      if j > #word then\n     \
    \   new_word = new_word .. string.sub(word, 1, j)\n        break\n      end\n\
    \    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpslqlhc.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpnpslqlhc.lua:13: in local 'candidate'\n\t/tmp/tmpnpslqlhc.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%w])', function(c)\n\
    \    return string.char(tonumber(c))\n  end)\n  return sorted_words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqi94uqp.lua:13:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpcqi94uqp.lua:13:\
    \ in function </tmp/tmpcqi94uqp.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpcqi94uqp.lua:12: in local 'candidate'\n\t/tmp/tmpcqi94uqp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  local\
    \ new_s = ''\n  for _, word in pairs(new_words) do\n    new_s = new_s .. word\
    \ .. ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpestvv9ba.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpestvv9ba.lua:13: in local 'candidate'\n\t/tmp/tmpestvv9ba.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Hello World!!!' -- Your code goes here\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpceles_g4.lua:20:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpceles_g4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjc82tr37.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpjc82tr37.lua:13: in local 'candidate'\n\t/tmp/tmpjc82tr37.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '([^ ]+)')\n  local sorted_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(sorted_words, word)\n\
    \  end\n  table.sort(sorted_words)\n  local new_s = ''\n  for _, word in pairs(sorted_words)\
    \ do\n    new_s = new_s .. word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6t5cvy2o.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp6t5cvy2o.lua:14: in local 'candidate'\n\t/tmp/tmp6t5cvy2o.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      local n = string.byte(word[j+1])\n\
    \      if c > n then\n        new_word = new_word .. string.char(n - c)\n    \
    \  else\n        new_word = new_word .. string.char(c)\n      end\n    end\n \
    \   new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkpzjw8r.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpqkpzjw8r.lua:13: in local 'candidate'\n\t/tmp/tmpqkpzjw8r.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2e85bs95.lua:110: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      if ascii < 128 then\n  \
    \      new_word = new_word .. string.char(ascii)\n      else\n        new_word\
    \ = new_word .. string.char(math.random(128))\n      end\n    end\n    new_words[i]\
    \ = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2uw4uf2z.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp2uw4uf2z.lua:13: in local 'candidate'\n\t/tmp/tmp2uw4uf2z.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii > 127\
    \ then\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1)\n\
    \    else\n      new_s = new_s .. char\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkijagbzb.lua:29:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpkijagbzb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkwqqzis.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmphkwqqzis.lua:13: in local 'candidate'\n\t/tmp/tmphkwqqzis.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '%w+') -- get all words\
    \ in the string\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words\
    \ + 1] = words[i] -- add each word to the sorted list\n  end\n  table.sort(sorted_words)\
    \ -- sort the words in ascending order\n  local new_s = ''\n  for i = 1, #sorted_words\
    \ do\n    new_s = new_s .. sorted_words[i] .. ' '\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwemrsbe.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpgwemrsbe.lua:14: in local 'candidate'\n\t/tmp/tmpgwemrsbe.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '([^ ]+)')\n  local result = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    for j = 1, #word\
    \ do\n      local c = string.sub(word, j, j)\n      local ascii = string.byte(c)\n\
    \      if ascii < 97 then\n        ascii = ascii + 26\n      elseif ascii < 123\
    \ then\n        ascii = ascii - 26\n      else\n        ascii = ascii - 26 + 26\n\
    \      end\n      new_word = new_word .. string.char(ascii)\n    end\n    result[#result\
    \ + 1] = new_word\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumb07wpv.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpumb07wpv.lua:13: in local 'candidate'\n\t/tmp/tmpumb07wpv.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = s:gsub(' ', ' '):gsub(' ', ' ')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words)\n  return table.concat(sorted_words, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_1yql_g.lua:24:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd_1yql_g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = s:gsub(' ', '').gsub('%w+', function(w)\n  \
    \  return string.char(tonumber(w))\n  end)\n  local sorted_words = table.sort(words)\n\
    \  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6odv22mg.lua:12:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmp6odv22mg.lua:12: in local 'candidate'\n\t/tmp/tmp6odv22mg.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps23xb1xz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps23xb1xz.lua:13: in local 'candidate'\n\t/tmp/tmps23xb1xz.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c =\
    \ string.sub(s,i,i)\n    if string.find(c, \"[%a]\") then\n      local new_c =\
    \ string.gsub(c, \"[%a]\", function(c)\n        return string.char(tonumber(c)\
    \ + 64)\n      end)\n      new_s = new_s .. new_c\n    else\n      new_s = new_s\
    \ .. c\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcrsvbfe.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkcrsvbfe.lua:17:\
    \ in function </tmp/tmpkcrsvbfe.lua:16>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpkcrsvbfe.lua:16: in local 'candidate'\n\t/tmp/tmpkcrsvbfe.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return '...'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrex_z4l.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprrex_z4l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words)\n  local\
    \ new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. sorted_words[i] ..\
    \ ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmx7z_dqh.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpmx7z_dqh.lua:13: in local 'candidate'\n\t/tmp/tmpmx7z_dqh.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words)\n  local\
    \ new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. sorted_words[i]\n \
    \ end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmc5ya41.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpjmc5ya41.lua:13: in local 'candidate'\n\t/tmp/tmpjmc5ya41.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local words = string.gmatch(s,\
    \ '[^ ]+')\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words\
    \ + 1] = words[i]\n  end\n  table.sort(sorted_words, function(a, b) return string.byte(a)\
    \ < string.byte(b) end)\n  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped7x1l32.lua:15:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmped7x1l32.lua:15: in local 'candidate'\n\t/tmp/tmped7x1l32.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local new_s = ''\n  for\
    \ i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ~= ' ' then\n      new_s\
    \ = new_s .. string.char(string.byte(c) + 64)\n    else\n      new_s = new_s ..\
    \ c\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5u4eixj.lua:28:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv5u4eixj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = s:gsub(' ', ' ')\n  local words = s:gmatch('([^\
    \ ]+)')\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[i]\
    \ = words[i]:byte()\n  end\n  table.sort(sorted_words, function(a, b) return a\
    \ < b end)\n  local new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. words[i]\
    \ .. sorted_words[i]\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_6w8rki.lua:15:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn_6w8rki.lua:15: in local 'candidate'\n\t/tmp/tmpn_6w8rki.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      if ascii < 97 then\n   \
    \     ascii = ascii + 26\n      elseif ascii < 123 then\n        ascii = ascii\
    \ - 26\n      end\n      new_word = new_word .. string.char(ascii)\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words, '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqlhjqrw.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpaqlhjqrw.lua:13: in local 'candidate'\n\t/tmp/tmpaqlhjqrw.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_77kf4h.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3_77kf4h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 32\
    \ then\n      new_s = new_s .. char\n    else\n      new_s = new_s .. string.sub(s,i,i-1)\
    \ .. string.sub(s,i+1,i)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelblbyi9.lua:28:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpelblbyi9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch(\"%w+\") -- get all words in the string\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[i] = words[i] -- put them in\
    \ ascending order\n  end\n  local new_s = ''\n  for i = 1, #words do\n    new_s\
    \ = new_s .. sorted_words[i] .. ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cihcnbj.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp2cihcnbj.lua:13: in local 'candidate'\n\t/tmp/tmp2cihcnbj.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = s:gsub(' ','')\n  local new_s = ''\n  local\
    \ i = 0\n  while i < #s do\n    local j = math.random(#s)\n    local temp = s[i]\n\
    \    s[i] = s[j]\n    s[j] = temp\n    i = i + 1\n  end\n  return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7dc3fuu.lua:18:\
    \ attempt to index a string value (local 's')\nstack traceback:\n\t/tmp/tmpc7dc3fuu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpc7dc3fuu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(s, ' ') then\n      local words = string.gsub(s, '[^ ]+',\
    \ ' ')\n      local sorted_words = table.sort(words)\n      new_s = new_s .. sorted_words[1]\
    \ .. sorted_words[#sorted_words] .. c\n    else\n      new_s = new_s .. c\n  \
    \  end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rlxjsc7.lua:30:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp7rlxjsc7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + 32)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfynaz6r.lua:27:\
    \ expected: \"Hi\"\nactual: \"h\"\nstack traceback:\n\t/tmp/tmpmfynaz6r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', ' ', 'g')\n  local words = string.gsub(words,\
    \ '(%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(\
    \ +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7f12zn_t.lua:12: unfinished string near ''''(%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)( +%S+)(
    ''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c, \"[%z\\1-\\127\\194-\\244\\377]\") then\n      new_s =\
    \ new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.char((string.byte(c)\
    \ + 32) % 256)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp0zcra9ap.lua:15: decimal escape too large near '\"[%z\x01\
    -\x7F-\\377]'\n"
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0mrn3yh.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpo0mrn3yh.lua:14: in local 'candidate'\n\t/tmp/tmpo0mrn3yh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local shuffled_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      local new_ascii = ascii\n\
    \      if ascii < 97 then\n        new_ascii = 97 + ascii\n      elseif ascii\
    \ < 123 then\n        new_ascii = 123 + ascii\n      else\n        new_ascii =\
    \ 127 + ascii\n      end\n      new_word = string.sub(word, 1, j-1) .. string.char(new_ascii)\n\
    \    end\n    shuffled_words[#shuffled_words+1] = new_word\n  end\n  return table.concat(shuffled_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6l4t_860.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp6l4t_860.lua:13: in local 'candidate'\n\t/tmp/tmp6l4t_860.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local result = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuw5nu2v.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpvuw5nu2v.lua:13: in local 'candidate'\n\t/tmp/tmpvuw5nu2v.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char\
    \ = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n\
    \      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1) .. char\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr5ex3uv.lua:28:\
    \ expected: \"Hi\"\nactual: \"iHi\"\nstack traceback:\n\t/tmp/tmpvr5ex3uv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = word[j]\n      new_word = new_word .. string.char((string.byte(c)\
    \ + 65) % 256)\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam5ohqfj.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpam5ohqfj.lua:13: in local 'candidate'\n\t/tmp/tmpam5ohqfj.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_words =\
    \ {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n  end\n\
    \  table.sort(new_words)\n  local new_s = ''\n  for _, word in pairs(new_words)\
    \ do\n    new_s = new_s .. word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwrx2w0d.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpwwrx2w0d.lua:14: in local 'candidate'\n\t/tmp/tmpwwrx2w0d.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+') -- Split string into words\n  local new_words\
    \ = {}\n  for _, word in ipairs(words) do\n    table.insert(new_words, word:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end))\n  end\n  return table.concat(new_words,\
    \ ' ') -- Join words back into string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 65\
    \ then\n      new_s = new_s .. string.char(ascii + 32)\n    elseif ascii < 91\
    \ then\n      new_s = new_s .. string.char(ascii - 32)\n    else\n      new_s\
    \ = new_s .. char\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6hc88v3.lua:30:\
    \ expected: \"Hi\"\nactual: \"(i\"\nstack traceback:\n\t/tmp/tmpj6hc88v3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 96 and c or c - 32))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpodvnm3tg.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpodvnm3tg.lua:13: in local 'candidate'\n\t/tmp/tmpodvnm3tg.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= \" \" then\n      new_s = new_s .. string.char(string.byte(c) + 64)\n\
    \    else\n      new_s = new_s .. c\n    end\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1fj4lhp.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpb1fj4lhp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaci1b06.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqaci1b06.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfyg7uvgl.lua:89: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local words = string.gmatch(s,\
    \ '%w+')\n  local new_words = {}\n  for _, word in pairs(words) do\n    table.insert(new_words,\
    \ word)\n  end\n  table.sort(new_words)\n  local new_s = ''\n  for _, word in\
    \ pairs(new_words) do\n    new_s = new_s .. word .. ' '\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe06k38j1.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpe06k38j1.lua:15: in local 'candidate'\n\t/tmp/tmpe06k38j1.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      new_word[j] = string.char((c\
    \ > 127 and c - 256 or c) + 256)\n    end\n    new_words[i] = new_word\n  end\n\
    \  return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b361zji.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp2b361zji.lua:13: in local 'candidate'\n\t/tmp/tmp2b361zji.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfyg7uvgl.lua:89: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return '...'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrex_z4l.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprrex_z4l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char,1,1)\n    if ascii > 96 then\n      ascii\
    \ = ascii - 96\n    else\n      ascii = ascii + 32\n    end\n    local new_char\
    \ = string.char(ascii)\n    new_s = new_s .. new_char\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifuh4u2q.lua:30:\
    \ expected: \"Hi\"\nactual: \"h\t\"\nstack traceback:\n\t/tmp/tmpifuh4u2q.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_words =\
    \ {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n  end\n\
    \  table.sort(new_words)\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk46gqwlb.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpk46gqwlb.lua:14: in local 'candidate'\n\t/tmp/tmpk46gqwlb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[^ ]+', ' ')\n  local sorted_words\
    \ = table.sort(words)\n  local new_s = ''\n  for i = 1, #sorted_words do\n   \
    \ new_s = new_s .. sorted_words[i] .. ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx7d7sypc.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpx7d7sypc.lua:13: in local 'candidate'\n\t/tmp/tmpx7d7sypc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[^ ]+', ' ', 'g')\n  local\
    \ sorted_words = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words +\
    \ 1] = words[i]\n  end\n  table.sort(sorted_words)\n  local new_s = ''\n  for\
    \ i = 1, #sorted_words do\n    new_s = new_s .. sorted_words[i] .. ' '\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrl73ikt.lua:12:\
    \ bad argument #4 to 'gsub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpqrl73ikt.lua:12: in local 'candidate'\n\t/tmp/tmpqrl73ikt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = {}\n  local sorted_word = ''\n  for i = 1,#words do\n    local char = string.sub(words,i,i)\n\
    \    local ascii = string.byte(char,1,1)\n    local next_char = string.sub(words,i+1,i)\n\
    \    local next_ascii = string.byte(next_char,1,1)\n    if ascii < next_ascii\
    \ then\n      table.insert(sorted_words,char)\n    else\n      table.insert(sorted_words,next_char)\n\
    \    end\n  end\n  sorted_word = table.concat(sorted_words,' ')\n  return sorted_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbbo2bno0.lua:20:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbbo2bno0.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpbbo2bno0.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    local n = string.len(c)\n    local m = math.floor(n/2)\n    local r = math.floor(n/2)\n\
    \    local s = string.sub(c,1,m)\n    local t = string.sub(c,m+1,n)\n    local\
    \ u = string.sub(c,1,r)\n    local v = string.sub(c,r+1,n)\n    local w = string.sub(c,1,1)\n\
    \    new_s = new_s .. s .. t .. u .. v .. w\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ep6a1v7.lua:31:\
    \ expected: \"Hi\"\nactual: \"HHHiii\"\nstack traceback:\n\t/tmp/tmp7ep6a1v7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 32\
    \ then\n      new_s = new_s .. char\n    else\n      new_s = new_s .. string.char(ascii-32)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9oka0jyx.lua:28:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmp9oka0jyx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  local new_s = ''\n  for i = 1, #sorted_words do\n    new_s = new_s .. sorted_words[i]\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoek0l3y.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpdoek0l3y.lua:13: in local 'candidate'\n\t/tmp/tmpdoek0l3y.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(word)\n      local new_c = c\n      if\
    \ c > 127 then\n        new_c = string.byte(string.sub(word, 1, j - 1)) + 256\n\
    \      else\n        new_c = string.byte(string.sub(word, j + 1, #word))\n   \
    \   end\n      if new_c > 127 then\n        new_c = string.byte(string.sub(word,\
    \ 1, j - 1)) + 256\n      else\n        new_c = string.byte(string.sub(word, j\
    \ + 1, #word))\n      end\n      if new_c < c then\n        break\n      end\n\
    \      j = j + 1\n    end\n    new_word = new_word .. string.char(new_c)\n   \
    \ new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj02w4x3.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbj02w4x3.lua:13: in local 'candidate'\n\t/tmp/tmpbj02w4x3.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local words = words:gsub('.', function(c) return\
    \ string.char(tonumber(c)) end)\n  local words = words:gsub(' ', ' ')\n  local\
    \ words = words:gsub('%w+', function(c) return string.char(tonumber(c)) end)\n\
    \  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+', function(c)\
    \ return string.char(tonumber(c)) end)\n  local words = words:gsub(' ', ' ')\n\
    \  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local words = words:gsub(' ', ' ')\n  local words = words:gsub('%w+',\
    \ function(c) return string.char(tonumber(c)) end)\n  local words = words:gsub('\
    \ ', ' ')\n  local words = words:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end)\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgadtsfio.lua:57: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = table.sort(words)\n  local sorted_s = table.concat(sorted_words,' ')\n  return\
    \ sorted_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkgumvpwx.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpkgumvpwx.lua:13: in local 'candidate'\n\t/tmp/tmpkgumvpwx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[^ ]+', '') -- remove all\
    \ non-space characters\n  local sorted_words = table.sort(words) -- sort words\n\
    \  local sorted_words_string = table.concat(sorted_words, ' ') -- join words\n\
    \  return sorted_words_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxg282hd.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmphxg282hd.lua:13: in local 'candidate'\n\t/tmp/tmphxg282hd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[%z\\1-\\127]+', ' ')\n  local new_words = {}\n  for\
    \ _, word in ipairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvq1dwcr.lua:23:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwvq1dwcr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c,'[%z]')==nil then\n      new_s = new_s .. c\n    else\n\
    \      local new_c = string.sub(s,i,i)\n      local new_i = i\n      while string.find(new_c,'[%z]')~=nil\
    \ do\n        new_i = string.find(new_c,'[%z]')\n        new_c = string.sub(s,new_i,new_i)\n\
    \      end\n      new_s = new_s .. new_c\n      new_s = new_s .. string.sub(s,new_i,new_i)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7hmsbc3.lua:35:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpw7hmsbc3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '[%w]+')\n  local sorted_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(sorted_words, word)\n\
    \  end\n  table.sort(sorted_words)\n  local result = table.concat(sorted_words,\
    \ ' ')\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppb8pu6n1.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmppb8pu6n1.lua:14: in local 'candidate'\n\t/tmp/tmppb8pu6n1.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char\
    \ = string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    local new_char = string.char(ascii-32) -- ascii value of char - 32\n    new_s\
    \ = new_s .. new_char\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe683yx4b.lua:25:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpe683yx4b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      local new_ascii = ascii\n\
    \      if ascii < 97 then\n        new_ascii = 97 + ascii - 1\n      elseif ascii\
    \ < 123 then\n        new_ascii = 122 - ascii - 1\n      else\n        new_ascii\
    \ = ascii - 32\n      end\n      new_word = new_word .. string.char(new_ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo85dmopi.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpo85dmopi.lua:13: in local 'candidate'\n\t/tmp/tmpo85dmopi.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', '').split(' ')\n  local result = {}\n  for i\
    \ = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words\
    \ do\n    table.insert(result, words[i])\n  end\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  for i = 1, #words do\n    table.insert(result, words[i])\n  end\n  for\
    \ i = 1, #words do\n    table.insert(result, words[i])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp60jo5dfk.lua:118: ''end'' expected (to close ''for'' at line
    103) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = string.gsub(s, \"(%S+)\", function (x)\n   \
    \ return string.char(tonumber(x)+32)\n  end)\n  s = string.gsub(s, \"(%S+)\",\
    \ function (x)\n    return string.char(tonumber(x)-32)\n  end)\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfysjkft.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnfysjkft.lua:13:\
    \ in function </tmp/tmpnfysjkft.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpnfysjkft.lua:12: in local 'candidate'\n\t/tmp/tmpnfysjkft.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Don't forget to return\
    \ the result\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sojd7wb.lua:21:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp3sojd7wb.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    local n = string.len(c)\n    local m = math.floor(n/2)\n    local r = string.sub(c,m,n)\n\
    \    new_s = new_s .. string.sub(c,1,m) .. r\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5mch4qi.lua:27:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpi5mch4qi.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7feigtu.lua:28:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpf7feigtu.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_words =\
    \ {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n  end\n\
    \  table.sort(new_words)\n  local new_s = ''\n  for _, word in pairs(new_words)\
    \ do\n    new_s = new_s .. word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwrx2w0d.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpwwrx2w0d.lua:14: in local 'candidate'\n\t/tmp/tmpwwrx2w0d.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    table.insert(sorted_words,words[i])\n  end\n\
    \  table.sort(sorted_words,function(a,b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words,' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwytc4s4i.lua:24:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwytc4s4i.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for _, word in ipairs(words)\
    \ do\n    local new_word = word\n    for _, c in ipairs(string.gsub(word, '%c',\
    \ function(c)\n      return string.char(tonumber(c))\n    end)) do\n      new_word\
    \ = new_word .. c\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', ' ')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 255 and 255 or c))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdm4uo79i.lua:16:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpdm4uo79i.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpdm4uo79i.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    local j = 1\n\
    \    while true do\n      local c = string.byte(new_word)\n      local new_c =\
    \ c + j\n      new_word = string.char(new_c)\n      if new_c > 127 then\n    \
    \    break\n      end\n      j = j + 1\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk032rer.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpwk032rer.lua:13: in local 'candidate'\n\t/tmp/tmpwk032rer.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local words = string.gsub(s,'\
    \ ','')\n  local sorted_words = {}\n  for i = 1,#words do\n    sorted_words[#sorted_words+1]\
    \ = words[i]\n  end\n  table.sort(sorted_words,function(a,b) return string.byte(a)\
    \ <  string.byte(b) end)\n  local new_s = ''\n  for i = 1,#sorted_words do\n \
    \   new_s = new_s .. sorted_words[i]\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3fk2yms.lua:29:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpl3fk2yms.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.char((string.byte(c) + string.byte(string.sub(s,i+1,i+1)))\
    \ %\n          256)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz422sruc.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpz422sruc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpz422sruc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,\"[^ ]+\",\"\")\n  local sorted_words\
    \ = table.sort(words)\n  local new_s = \"\"\n  for i = 1,#sorted_words do\n  \
    \  new_s = new_s .. sorted_words[i] .. \" \"\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizdjxwsc.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpizdjxwsc.lua:13: in local 'candidate'\n\t/tmp/tmpizdjxwsc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[%z\\s]+', ' ')\n  local\
    \ sorted_words = string.gsub(words, '(%A)(%z)', function(w1, w2)\n    return string.char(((string.byte(w1)\
    \ or 128) - string.byte(w2)) or 128)\n  end)\n  return string.gsub(sorted_words,\
    \ '(%A)(%z)', function(w1, w2)\n    return string.char(((string.byte(w2) or 128)\
    \ - string.byte(w1)) or 128)\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc6e1ik95.lua:12: invalid escape sequence near ''''[%z\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words)\n  local new_s = ''\n  for i = 1, #sorted_words\
    \ do\n    new_s = new_s .. sorted_words[i]\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8dnw9nb_.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp8dnw9nb_.lua:14: in local 'candidate'\n\t/tmp/tmp8dnw9nb_.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s,' ','').split(' ')\n  local\
    \ new_words = {}\n  for i = 1,#words do\n    local word = words[i]\n    local\
    \ new_word = word\n    for j = 1,#word do\n      local c = string.byte(word[j])\n\
    \      new_word = new_word .. string.char((c+j-1)%26)\n    end\n    new_words[i]\
    \ = new_word\n  end\n  s = table.concat(new_words,' ')\n  return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxv53bqe.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpgxv53bqe.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgxv53bqe.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    local new_char = string.char(ascii + 1)\n    new_s = new_s .. new_char\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe71j1tn.lua:25:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmpoe71j1tn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s,\"[%z\\s]+\",\" \")\n  local\
    \ sorted_words = table.sort(words)\n  return table.concat(sorted_words,\" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpamr9o17j.lua:12: invalid escape sequence near ''"[%z\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char\
    \ = string.sub(s,i,i)\n    if char == \" \" then\n      new_s = new_s .. char\n\
    \    else\n      new_s = new_s .. string.char(string.byte(char) + 1)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8my3t96z.lua:27:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmp8my3t96z.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch('([^ ]+)')\n  local result = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7j7jnil5.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7j7jnil5.lua:13: in local 'candidate'\n\t/tmp/tmp7j7jnil5.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.char(string.byte(c) + string.byte(string.sub(s,i+1,i+1))\
    \ - string.byte(c))\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfnrjm5h.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjfnrjm5h.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjfnrjm5h.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = string.gsub(s, \"(%S+)\", function (x)\n   \
    \ local s = string.gsub(x, '%S+', function(y)\n      return string.char(tonumber(y)\
    \ - 97)\n    end)\n    return s\n  end)\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdg1ai1r.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpxdg1ai1r.lua:14:\
    \ in function </tmp/tmpxdg1ai1r.lua:13>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpxdg1ai1r.lua:13: in function </tmp/tmpxdg1ai1r.lua:12>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpxdg1ai1r.lua:12: in local 'candidate'\n\t/tmp/tmpxdg1ai1r.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxutu2ixl.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxutu2ixl.lua:14: in local 'candidate'\n\t/tmp/tmpxutu2ixl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,\" \",\"\")\n  local sorted_words\
    \ = table.sort(words)\n  local new_s = \"\"\n  for i = 1,#sorted_words do\n  \
    \  new_s = new_s .. sorted_words[i] .. \" \"\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvkaiwjss.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpvkaiwjss.lua:13: in local 'candidate'\n\t/tmp/tmpvkaiwjss.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[^ ]+', ' ')\n  local sorted_words\
    \ = table.sort(words)\n  local result = table.concat(sorted_words, '')\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyyf_8qvo.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpyyf_8qvo.lua:13: in local 'candidate'\n\t/tmp/tmpyyf_8qvo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ua2x7f1.lua:28:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9ua2x7f1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '%w+')\n  local new_s =\
    \ ''\n  for i = 1, #words do\n    local word = words[i]\n    local new_word =\
    \ word\n    for j = 1, #word do\n      local c = string.byte(word[j])\n      local\
    \ new_c = c\n      if c > 127 then\n        new_c = string.byte(string.sub(word,\
    \ 1, j - 1)) + 256 + string.byte(string.sub(word, j + 1))\n      end\n      new_word\
    \ = new_word .. string.char(new_c)\n    end\n    new_s = new_s .. new_word\n \
    \ end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl23e1g04.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpl23e1g04.lua:14: in local 'candidate'\n\t/tmp/tmpl23e1g04.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 128 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.char(ascii-128) .. string.sub(s,i,i)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5ejw5h6.lua:29:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmph5ejw5h6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypikg2ie.lua:19:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpypikg2ie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    local new_char = string.char(ascii + 1)\n    new_s = new_s .. new_char\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe71j1tn.lua:25:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmpoe71j1tn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmiwlx5zb.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpmiwlx5zb.lua:13: in local 'candidate'\n\t/tmp/tmpmiwlx5zb.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words)\n  local result = {}\n  for i = 1, #words do\n\
    \    table.insert(result, sorted_words[i])\n  end\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbha4xm1l.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbha4xm1l.lua:14: in local 'candidate'\n\t/tmp/tmpbha4xm1l.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqaci1b06.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqaci1b06.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,\"[^ ]+\",\" \")\n  local sorted_words\
    \ = {}\n  for i = 1,#words do\n    sorted_words[#sorted_words+1] = words[i]\n\
    \  end\n  table.sort(sorted_words,function(a,b) return string.byte(a) <  string.byte(b)\
    \ end)\n  local new_s = \"\"\n  for i = 1,#sorted_words do\n    new_s = new_s\
    \ .. sorted_words[i] .. \" \"\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_wx7c8_.lua:28:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd_wx7c8_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsytx9w_s.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpsytx9w_s.lua:14: in local 'candidate'\n\t/tmp/tmpsytx9w_s.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Example: anti_shuffle('Hi') returns 'Hi'\n  -- Example:\
    \ anti_shuffle('hello') returns 'ehllo'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp794rwl_r.lua:50: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub('([^\
    \ ])([A-Z])', '\\\\2\\\\1')\n  return sorted_words:gsub('([^ ])([A-Z])', '\\\\\
    1\\\\2')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkj68ocf.lua:19:\
    \ expected: \"Hi\"\nactual: \" \"\nstack traceback:\n\t/tmp/tmptkj68ocf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local sorted_words = words:gsub(' ', ' '):gsub('%w+',\
    \ function(x)\n    return string.char(tonumber(x)+32)\n  end)\n  return sorted_words:gsub('%w+',\
    \ function(x)\n    return string.char(tonumber(x)-32)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90hsua9j.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp90hsua9j.lua:13:\
    \ in function </tmp/tmp90hsua9j.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp90hsua9j.lua:12: in local 'candidate'\n\t/tmp/tmp90hsua9j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = table.sort(words)\n  local sorted_s = ''\n  for i = 1,#sorted_words do\n \
    \   sorted_s = sorted_s .. sorted_words[i] .. ' '\n  end\n  return sorted_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqtgp_s5.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmppqtgp_s5.lua:13: in local 'candidate'\n\t/tmp/tmppqtgp_s5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = s:gsub(' ', ' ')\n  local t = {}\n  for i =\
    \ 1, #s do\n    local c = string.sub(s,i,i)\n    table.insert(t, string.char(tonumber(c)))\n\
    \  end\n  return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd4leo85.lua:16:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpgd4leo85.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgd4leo85.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([A-Za-z])', function(c)\n\
    \    return string.char(tonumber(c) + 26)\n  end)\n  return sorted_words:gsub('%S+',\
    \ function(c)\n    return string.char(tonumber(c) + 26)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvb43p17.lua:13:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpyvb43p17.lua:13:\
    \ in function </tmp/tmpyvb43p17.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpyvb43p17.lua:12: in local 'candidate'\n\t/tmp/tmpyvb43p17.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[^ ]+', ' ')\n  local sorted_words\
    \ = table.sort(words)\n  return table.concat(sorted_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppdwwjjm.lua:13:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpppdwwjjm.lua:13: in local 'candidate'\n\t/tmp/tmpppdwwjjm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = s:gsub(' ','')\n  local t = {}\n  for i = 1,#s\
    \ do\n    local c = string.sub(s,i,i)\n    local n = tonumber(c)\n    if n then\n\
    \      table.insert(t,n)\n    end\n  end\n  table.sort(t)\n  local ans = ''\n\
    \  for i = 1,#t do\n    ans = ans .. string.sub(s,i,i)\n  end\n  return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhc95mhr.lua:32:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqhc95mhr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = s:gsub(' ', ' ')\n  local sorted_words =\
    \ words:gsub(' ', ' '):gsub('%w+', function(x)\n    return string.char(tonumber(x)\
    \ + 32)\n  end)\n  return sorted_words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvb2dr64.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpfvb2dr64.lua:14:\
    \ in function </tmp/tmpfvb2dr64.lua:13>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpfvb2dr64.lua:13: in local 'candidate'\n\t/tmp/tmpfvb2dr64.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    local n = string.len(c)\n    if n > 0 then\n      local j = 1\n      while\
    \ j <= n do\n        local k = j + j\n        if k < n then\n          local m\
    \ = string.sub(c,j,k)\n          new_s = new_s .. m\n          j = k + 1\n   \
    \     else\n          new_s = new_s .. c\n          j = n + 1\n        end\n \
    \     end\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs58_9zg.lua:38:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpbs58_9zg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  local new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. sorted_words[i]\
    \ .. ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwo9sui3_.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpwo9sui3_.lua:14: in local 'candidate'\n\t/tmp/tmpwo9sui3_.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2e85bs95.lua:110: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local new_s = ''\n  for\
    \ i = 1, #s do\n    local char = string.sub(s,i,i)\n    if char == ' ' then\n\
    \      new_s = new_s .. char\n    else\n      new_s = new_s .. string.char(string.byte(char)\
    \ + #new_s)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6x9bx6l.lua:28:\
    \ expected: \"Hi\"\nactual: \"Hj\"\nstack traceback:\n\t/tmp/tmpm6x9bx6l.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.char(string.byte(c) + string.byte(string.sub(s,i+1,i+1))\
    \ - string.byte(c))\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfnrjm5h.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjfnrjm5h.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjfnrjm5h.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local new_words = {}\n  for i\
    \ = 1, #words do\n    local word = words[i]\n    local new_word = ''\n    for\
    \ j = 1, #word do\n      local ascii = string.byte(word[j])\n      if ascii >=\
    \ 97 and ascii <= 122 then\n        ascii = ascii - 32\n      else\n        ascii\
    \ = ascii + 32\n      end\n      new_word = new_word .. string.char(ascii)\n \
    \   end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp87ql7__.lua:16:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpp87ql7__.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp87ql7__.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. '!'\n   \
    \ else\n      new_s = new_s .. char\n    end\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0xnbvt_.lua:28:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpn0xnbvt_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80bo06gi.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp80bo06gi.lua:13: in local 'candidate'\n\t/tmp/tmp80bo06gi.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      if c > 127 then\n        c =\
    \ string.byte(string.sub(word, 1, j))\n      end\n      new_word = new_word ..\
    \ string.char(c)\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2gsm4224.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp2gsm4224.lua:13: in local 'candidate'\n\t/tmp/tmp2gsm4224.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,\" \",\"\")\n  local new_words\
    \ = {}\n  for i = 1,#words do\n    local char = string.sub(words,i,i)\n    local\
    \ ascii = string.byte(char,1,1)\n    local new_char = string.char(ascii+1,ascii,ascii+1)\n\
    \    table.insert(new_words,new_char)\n  end\n  return table.concat(new_words,\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hrqj77w.lua:26:\
    \ expected: \"Hi\"\nactual: \"IHI jij\"\nstack traceback:\n\t/tmp/tmp0hrqj77w.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '[%w\\s]+')\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    table.insert(new_words, word)\n\
    \  end\n  table.sort(new_words)\n  return table.concat(new_words, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfugrx6wl.lua:12: invalid escape sequence near ''''[%w\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '([^ ]+)')\n  local new_words\
    \ = {}\n  for _, word in pairs(words) do\n    local new_word = word\n    local\
    \ new_word_len = 0\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      if c < 128 then\n        new_word = new_word .. string.char(c - 32)\n \
    \     else\n        new_word = new_word .. string.char(c - 128)\n      end\n \
    \     new_word_len = new_word_len + 1\n    end\n    new_words[#new_words + 1]\
    \ = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfaqsjqol.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpfaqsjqol.lua:14: in local 'candidate'\n\t/tmp/tmpfaqsjqol.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_77kf4h.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3_77kf4h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c, \"[%z\\1-\\127\\194-\\244\\377\\370-\\377]\") then\n  \
    \    new_s = new_s .. string.sub(s,i,i)\n    else\n      new_s = new_s .. string.char(string.byte(c)\
    \ + 32)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpz4fucduj.lua:15: decimal escape too large near '\"[%z\x01\
    -\x7F-\\377\\'\n"
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for _, word in\
    \ ipairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec6j3mc0.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpec6j3mc0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  local new_s = ''\n  for\
    \ i = 1, #s do\n    local char = string.sub(s,i,i)\n    local ascii = string.byte(char)\
    \ -- ascii value of char\n    local new_char = string.char(ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96,ascii-96\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6s3u3mrp.lua:18: '')'' expected (to close ''('' at line 17)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_77kf4h.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3_77kf4h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s,\" \",\"\")\n  local new_words\
    \ = {}\n  for i = 1,#words do\n    local char = string.sub(words,i,i)\n    local\
    \ ascii = string.byte(char,1,1)\n    if ascii < 65 then\n      new_words[#new_words+1]\
    \ = string.sub(words,i,i)\n    end\n  end\n  return table.concat(new_words,\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd3vr16a.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxd3vr16a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + 64)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_77kf4h.lua:27:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3_77kf4h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', ' ')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_words[#new_words + 1] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplc2ej2bw.lua:16:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmplc2ej2bw.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmplc2ej2bw.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_s = ''\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = word\n\
    \    local j = 1\n    while j <= #word do\n      local c = string.byte(word[j],\
    \ j)\n      local new_c = c\n      if c > 127 then\n        new_c = string.byte(string.sub(word,\
    \ 1, j-1), j-1)\n      end\n      new_word = new_word .. string.char(new_c)\n\
    \      j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzll9x_92.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpzll9x_92.lua:14: in local 'candidate'\n\t/tmp/tmpzll9x_92.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 97 then\n      new_s = new_s .. string.sub(s,i,i)\n    elseif\
    \ ascii < 123 then\n      new_s = new_s .. string.sub(s,i,i-1)\n    else\n   \
    \   new_s = new_s .. string.sub(s,i-1,i-1)\n    end\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x6teh7e.lua:30:\
    \ expected: \"Hi\"\nactual: \"H\"\nstack traceback:\n\t/tmp/tmp5x6teh7e.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch(\"([^ ]+)\") -- split string into words\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_g4d8j4.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpj_g4d8j4.lua:13: in local 'candidate'\n\t/tmp/tmpj_g4d8j4.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local sorted_words\
    \ = {}\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxutu2ixl.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxutu2ixl.lua:14: in local 'candidate'\n\t/tmp/tmpxutu2ixl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return '...'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrex_z4l.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprrex_z4l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local result = {}\n  for i = 1, #words do\n\
    \    table.insert(result, words[i])\n  end\n  table.sort(result)\n  local new_s\
    \ = ''\n  for i = 1, #words do\n    new_s = new_s .. words[i] .. ' '\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvckk3114.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpvckk3114.lua:13: in local 'candidate'\n\t/tmp/tmpvckk3114.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,' ','')\n  local sorted_words\
    \ = nil\n  local sorted_words_index = 0\n  local sorted_words_length = 0\n  local\
    \ sorted_words_string = ''\n  for i = 1, #words do\n    local word_length = string.len(words[i])\n\
    \    if sorted_words_length < word_length then\n      sorted_words_length = word_length\n\
    \      sorted_words_index = i\n    end\n  end\n  sorted_words = string.sub(words,1,sorted_words_index)\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n  sorted_words = sorted_words &\
    \ sorted_words\n  sorted_words = sorted_words & sorted_words\n  sorted_words =\
    \ sorted_words & sorted_words\n  sorted_words = sorted_words & sorted_words\n\
    \  sorted_words = sorted_words & sorted_words\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8q3i0jtf.lua:85: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local sorted_words = table.sort(words)\n\
    \  local result = table.concat(sorted_words, ' ')\n  return result:gsub('%S+',\
    \ function(w) return w:lower() end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4k1s392.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpz4k1s392.lua:12: in local 'candidate'\n\t/tmp/tmpz4k1s392.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch(\"[^ ]+\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaeucryb0.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpaeucryb0.lua:13: in local 'candidate'\n\t/tmp/tmpaeucryb0.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words do\n \
    \   local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = word[j]\n      local ascii = string.byte(c)\n      if ascii <\
    \ 65 then\n        c = string.char((ascii + 32) % 256)\n      elseif ascii < 123\
    \ then\n        c = string.char(ascii - 64)\n      end\n      new_word = new_word\
    \ .. c\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprahbdxz.lua:16:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpprahbdxz.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpprahbdxz.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch(\"%w+\") -- Split string into words\n  local new_words = {}\n\
    \  for _, word in ipairs(words) do\n    local new_word = word\n    for i = 1,\
    \ #word do\n      new_word = new_word .. string.char(string.byte(word[i]) - 97)\n\
    \    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s, '[%z\\s]+', ' ')\n  local\
    \ sorted_words = table.sort(words)\n  local result = \"\"\n  for i = 1, #sorted_words\
    \ do\n    local word = sorted_words[i]\n    local new_word = word\n    for j =\
    \ 1, #word do\n      local c = string.byte(word[j])\n      if c > 127 then\n \
    \       c = string.byte(string.sub(word, 1, j))\n      end\n      new_word = new_word\
    \ .. string.char(c)\n    end\n    result = result .. new_word\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrnti0vz.lua:12: invalid escape sequence near ''''[%z\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80bo06gi.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp80bo06gi.lua:13: in local 'candidate'\n\t/tmp/tmp80bo06gi.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local result = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_faw4t4.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1_faw4t4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Example: anti_shuffle('Hi') returns 'Hi'\n  -- Example:\
    \ anti_shuffle('hello') returns 'ehllo'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns\
    \ 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello\
    \ !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\
    \  -- Example: anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example:\
    \ anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!')\
    \ returns 'Hello !!!Wdlor'\n  -- Example: anti_shuffle('Hello World!!!\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp794rwl_r.lua:50: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return '...'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrex_z4l.lua:18:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprrex_z4l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = string.gsub(words,'[^a-zA-Z0-9]','')\n  local sorted_words_sorted = string.gsub(sorted_words,'(%a+)','%1')\n\
    \  return sorted_words_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lryr5m9.lua:22:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp5lryr5m9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+') -- Split string into words\n  local sorted_words\
    \ = {}\n  local new_word = ''\n  for _, word in ipairs(words) do\n    table.insert(sorted_words,\
    \ word) -- Insert word into sorted list\n  end\n  for _, word in ipairs(sorted_words)\
    \ do\n    local new_word = new_word .. word:gsub('%w+', function(c) return string.char(tonumber(c))\
    \ end) -- Replace each word with its ascii value\n  end\n  return new_word\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    local n = string.len(c)\n    if n > 1 then\n      local j = string.len(s)\n\
    \      local k = string.len(new_s)\n      while j > 0 do\n        if string.sub(s,j,j)\
    \ == c then\n          new_s = new_s .. string.sub(s,j,j)\n          j = j - 1\n\
    \        else\n          new_s = new_s .. c\n          j = j - 1\n        end\n\
    \      end\n      new_s = new_s .. c\n    end\n  end\n  return new_s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsn7vlad.lua:37:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmsn7vlad.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.char(string.byte(c) + 1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6eon8coo.lua:25:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmp6eon8coo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words do\n \
    \   local char = string.sub(words, i, i)\n    local ascii = string.byte(char):tostring()\n\
    \    if ascii < 97 then\n      new_words[i] = char\n    elseif ascii < 123 then\n\
    \      new_words[i] = string.char(ascii - 32 + 97)\n    else\n      new_words[i]\
    \ = string.char(ascii - 96 + 123)\n    end\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4w3ri63i.lua:15:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmp4w3ri63i.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4w3ri63i.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: -1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c,'[%w]') then\n      local new_c = string.sub(s,i,i)\n  \
    \    local j = 1\n      while string.find(new_c,'[%w]') do\n        new_c = string.sub(s,i,i+j)\n\
    \        j = j + 1\n      end\n      new_s = new_s .. new_c\n    else\n      new_s\
    \ = new_s .. c\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800321
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfyg7uvgl.lua:89: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = s:gsub(' ', ' ')\n  local sorted_words = {}\n\
    \  for i = 1, #words do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  local result = \"\"\n  for i = 1, #words do\n    result = result .. sorted_words[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0so8bgj_.lua:20:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0so8bgj_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp0so8bgj_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch(\"[%w-]+\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word:gsub(\"%W\", \"%0\"))\n  end\n  return\
    \ table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyjr8iek.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpjyjr8iek.lua:13: in local 'candidate'\n\t/tmp/tmpjyjr8iek.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', ' ')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local c = string.byte(word[j])\n      local n = string.byte(word[j+1])\n\
    \      if c > n then\n        new_word = new_word .. string.char(c - n)\n    \
    \  else\n        new_word = new_word .. string.char(c + n)\n      end\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3wtd0en.lua:16:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpk3wtd0en.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpk3wtd0en.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint:\
    \ Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use string.gsub and\
    \ string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n  -- Hint: Use\
    \ string.gsub and string.gmatch\n  -- Hint: Use string.gsub and string.gmatch\n\
    \  -- Hint: Use string.gsub and string.g\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm6nkm0t5.lua:64: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1) .. char\n    end\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8x2y34f.lua:28:\
    \ expected: \"Hi\"\nactual: \"iHi\"\nstack traceback:\n\t/tmp/tmpp8x2y34f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s, '[%z\\s]+', ' ')\n  local sorted_words\
    \ = table.sort(words)\n  local result = table.concat(sorted_words, \" \")\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph7grrpzd.lua:12: invalid escape sequence near ''''[%z\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(word)\n      if c < 97 then\n        local\
    \ new_c = c + j\n        if new_c > 122 then\n          new_c = new_c - 26\n \
    \       end\n        new_word = string.char(new_c)\n      else\n        local\
    \ new_c = c - 26\n        if new_c > 122 then\n          new_c = new_c - 26\n\
    \        end\n        new_word = string.char(new_c)\n      end\n      if new_word\
    \ ~= word then\n        break\n      end\n      j = j + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps781c1h_.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps781c1h_.lua:13: in local 'candidate'\n\t/tmp/tmps781c1h_.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmiwlx5zb.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpmiwlx5zb.lua:13: in local 'candidate'\n\t/tmp/tmpmiwlx5zb.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(word)\n      if c < 65 then\n        local\
    \ new_c = c + j\n        if new_c > 122 then\n          new_c = new_c - 26\n \
    \       end\n        new_word = string.char(new_c)\n      else\n        local\
    \ new_c = c + j\n        if new_c > 122 then\n          new_c = new_c - 26\n \
    \       end\n        new_word = string.char(new_c)\n        break\n      end\n\
    \      j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kbnv38w.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7kbnv38w.lua:13: in local 'candidate'\n\t/tmp/tmp7kbnv38w.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub('%w+',\
    \ function(w)\n    local sorted_w = ''\n    for i = 1, #w do\n      local c =\
    \ string.byte(w, i)\n      local n = math.floor((c - 65 + 0.5) / 26)\n      if\
    \ n ~= 0 then\n        sorted_w = sorted_w .. string.char(65 + n * 26)\n     \
    \ end\n    end\n    return sorted_w\n  end)\n  return sorted_words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wk8rf39.lua:29:\
    \ expected: \"Hi\"\nactual: \" \"\nstack traceback:\n\t/tmp/tmp1wk8rf39.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii > 127 then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n\
    \      new_s = new_s .. string.char(ascii + 32)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p5elslg.lua:28:\
    \ expected: \"Hi\"\nactual: \"h\"\nstack traceback:\n\t/tmp/tmp1p5elslg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local new_char = string.char(string.byte(char) + 1)\n\
    \    new_s = new_s .. new_char\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z0dvz5d.lua:24:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmp2z0dvz5d.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 32\
    \ then\n      new_s = new_s .. char\n    else\n      new_s = new_s .. string.sub(s,i,i+1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p0fj7ct.lua:28:\
    \ expected: \"Hi\"\nactual: \"Hii\"\nstack traceback:\n\t/tmp/tmp9p0fj7ct.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_s = ''\n\
    \  for _, word in ipairs(words) do\n    local new_word = word\n    for i = 1,\
    \ #word do\n      new_word = new_word .. string.char(string.byte(word[i]) + 64)\n\
    \    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gsub('([^ ]+)', '%%%1%%%2'):gsub(' ', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ ' %%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2',\
    \ '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub('%%%1%%%2', '%%%1%%%2'):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpewvissko.lua:12: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local s = s:gsub(' ', ' ')\n  local t = {}\n  for i =\
    \ 1, #s do\n    local c = string.sub(s,i,i)\n    local n = tonumber(c)\n    if\
    \ n then\n      table.insert(t, n)\n    end\n  end\n  table.sort(t)\n  local s\
    \ = ''\n  for i = 1, #t do\n    s = s .. string.char(t[i])\n  end\n  return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5s3tj97.lua:32:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpb5s3tj97.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = word[j]\n      local ascii = string.byte(c)\n      if ascii <\
    \ 32 then\n        new_word = new_word .. string.char((ascii + 32) % 256)\n  \
    \    else\n        new_word = new_word .. c\n      end\n    end\n    new_words[i]\
    \ = new_word\n  end\n  return table.concat(new_words)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0sxiytd.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpp0sxiytd.lua:13: in local 'candidate'\n\t/tmp/tmpp0sxiytd.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local s = string.gsub(s, \"(%S+)\", function (x)\n    local\
    \ word = string.lower(x)\n    local new_word = \"\"\n    local i = 0\n    while\
    \ i < #word do\n      local c = string.byte(word, i)\n      local j = i + 1\n\
    \      while j < #word do\n        local c2 = string.byte(word, j)\n        if\
    \ c < c2 then\n          new_word = new_word .. string.sub(word, i, j)\n     \
    \     i = j\n        else\n          j = j + 1\n        end\n      end\n     \
    \ i = i + 1\n    end\n    return new_word\n  end)\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1mfzj5k.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc1mfzj5k.lua:21:\
    \ in function </tmp/tmpc1mfzj5k.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpc1mfzj5k.lua:12: in local 'candidate'\n\t/tmp/tmpc1mfzj5k.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gsub(s, '[%z\\s]+', ' ')\n  local new_words\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    for j = 1, #word do\n      local c = string.byte(word[j])\n    \
    \  new_word = new_word .. string.char((c > 96 and c < 123 and c or 96 + c))\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk_y_rize.lua:12: invalid escape sequence near ''''[%z\s''

    '
  stdout: ''
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gsub(s, '[^ ]+', ' ')\n  local sorted_words = table.sort(words)\n\
    \  local result = table.concat(sorted_words, ' ')\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e_zou0y.lua:12:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp0e_zou0y.lua:12: in local 'candidate'\n\t/tmp/tmp0e_zou0y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi')\
    \ returns 'Hi'\n-- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local\
    \ words = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  local new_s = ''\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n\
    \    for j = 1, #word do\n      local c = string.byte(word[j])\n      local n\
    \ = string.byte(string.sub(word, 1, j))\n      local o = string.byte(string.sub(word,\
    \ j + 1, #word))\n      if c > n then\n        new_word = new_word .. string.sub(word,\
    \ 1, j - 1)\n      elseif c < n then\n        new_word = new_word .. string.sub(word,\
    \ j + 1, #word)\n      else\n        new_word = new_word .. string.sub(word, j\
    \ + 1, #word)\n      end\n    end\n    new_words[#new_words + 1] = new_word\n\
    \  end\n  for i = 1, #words do\n    new_s = new_s .. new_words[i]\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42j0m9a0.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp42j0m9a0.lua:14: in local 'candidate'\n\t/tmp/tmp42j0m9a0.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800316
