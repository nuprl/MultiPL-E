name: HumanEval_31_is_prime
language: lua
results:
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime can be factored\
    \ into a product of primes less than or equal to n. For example, 6 is a prime\
    \ since it has no positive divisors other than 1 and itself.\n  -- http://en.wikipedia.org/wiki/Prime_number\n\
    \  -- http://primes.utm.edu/lists/small/1000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000001.txt\n  -- http://primes.utm.edu/lists/small/10000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000.txt\n  -- http://primes.utm.edu/lists/small/10000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000100.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000010000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000010000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000100000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000010000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001000000000100.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000100\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8l6n2je5.lua:63: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 109 == 0 then return\
    \ false end\n  if n % 113 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 129 == 0\
    \ then return false end\n  if n % 131 == 0 then return false end\n  if n % 133\
    \ == 0 then return false end\n  if n % 137 == 0 then return false end\n  if n\
    \ % 139 == 0 then return false end\n  if n % 141 == 0 then return false end\n\
    \  if n % 143 == 0 then return false end\n  if n % 147 == 0 then return \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoz3ozykr.lua:71: 'end' expected (to close 'if' at line 70)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  if is_odd_prime(n) then\n    return false\n  end\n  -- Check\
    \ odd-even primality of n-1\n  if is_odd_prime(n-1) then\n    return true\n  end\n\
    \  -- Check odd-even primality of n+1\n  if is_odd_prime(n+1) then\n    return\
    \ true\n  end\n  -- Check odd-even primality of n+2\n  if is_odd_prime(n+2) then\n\
    \    return true\n  end\n  -- Check odd-even primality of n+3\n  if is_odd_prime(n+3)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+4\n  if is_odd_prime(n+4)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+5\n  if is_odd_prime(n+5)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+6\n  if is_odd_prime(n+6)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+7\n  if is_odd_prime(n+7)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+8\n  if is_odd_prime(n+8)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+9\n  if is_odd_prime(n+9)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+10\n  if is_odd_prime(n+10)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+11\n  if is_odd_prime(n+11)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+12\n  if is_odd_prime(n+12)\
    \ then\n    return true\n  end\n  -- Check odd-even primality of n+13\n  if is_odd_prime(n+13)\
    \ then\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwflipzru.lua:116: 'end' expected (to close 'if' at line 96)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://primes.utm.edu/lists/small/millions/\n  -- http://primes.utm.edu/lists/small/millions/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/\n  -- http://primes.utm.edu/lists/small/millions/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/\n  -- http://primes.utm.edu/lists/small/millions/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/\n  -- http://primes.utm.edu/lists/small/millions/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/large/\n  -- http://primes.utm.edu/lists/small/millions/medium/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/small/\n  -- http://primes.utm.edu/lists/small/millions/large/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/large/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/large/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/large/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/medium/large/small/\n \
    \ -- http://primes.utm.edu/lists/small/millions/small/medium/large/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/medium/large/small/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/medium/large/small/test.html\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxogrxnlq.lua:61: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == -1\
    \ then return false end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 0 then\n    return false\n  end\n  if n == 1 or n == -1 then\n    return\
    \ true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1 then\n\
    \    return true\n  end\n  if n % \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaypxnf44.lua:123: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0qonw3s2.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ is only conjectured to be composite if all prime factors are > 2.\n  -- This\
    \ implementation is based on the Sieve of Eratosthenes algorithm.\n  -- The algorithm\
    \ is as follows:\n  --\n  --   1. Generate a list of all prime numbers less than\
    \ or equal to n.\n  --   2. For each prime number p, divide n by p and test the\
    \ remainder.\n  --   3. If a remainder is found then p is not prime, else p is\
    \ prime.\n  --\n  -- The first step in the algorithm is to generate a list of\
    \ all primes\n  -- in the range [2, n].\n  -- The second step is to divide the\
    \ input number by each prime and\n  -- test the remainder. If the remainder is\
    \ zero then the number is prime.\n  -- The third step is to repeat the second\
    \ step until there is no more\n  -- remainder.\n  -- The final step is to test\
    \ whether all prime factors have been found.\n  -- If not then n is not prime\
    \ and we return false.\n  -- If all prime factors have been found then n is prime\
    \ and we return\n  -- true.\n  -- The algorithm is described in more detail here:\n\
    \  --\n  --   http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  --\n  -- The\
    \ algorithm is implemented in Lua by Robert J. Hankins at\n  --\n  --   http://robertjankins.com/blog/2011/03/07/the-six-prime-number-problem-in-eratosthenes-sieve-of-eratosthenes/\n\
    \  --\n  -- The algorithm is also described in detail here:\n  --\n  --   http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  --\n  -- The algorithm is implemented in Lua by Robert J. Hankins at\n  --\n\
    \  --   http://robertjankins.com/blog/2011/03/07/the-six-prime-number-problem-in-eratosthenes-sieve-of-eratosthenes/\n\
    \  --\n  -- The algorithm is also described in detail here:\n  --\n  --   http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  --\n  -- The algorithm is implemented in Lua by Robert J. Hankins at\n  --\n\
    \  --   http://robertjankins.com/blog/2011/03/07/the-six-prime-number-problem-in-eratosthenes-sieve-of-eratosthene\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0vbe9ki1.lua:78: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- The first\
    \ prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29.\n  -- The first composite\
    \ numbers are 3, 5, 7, 11, 13, 17, 19, 23, 29.\n  -- The first composite number\
    \ greater than 1 that has no positive divisors other than 1 is a prime number.\n\
    \  -- >>> is_prime(6)\n  -- False\n  -- >>> is_prime(101)\n  -- True\n  -- >>>\
    \ is_prime(11)\n  -- True\n  -- >>> is_prime(13441)\n  -- True\n  -- >>> is_prime(61)\n\
    \  -- True\n  -- >>> is_prime(4)\n  -- False\n  -- >>> is_prime(1)\n  -- False\n\
    \  -- >>> is_prime(13)\n  -- False\n  -- >>> is_prime(13)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n  -- >>> is_prime(13441)\n  -- False\n  -- >>>\
    \ is_prime(13441)\n  -- False\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfw7k60b0.lua:105: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers.\n  -- The first prime number\
    \ is named p and is defined as the product of two prime numbers.\n  -- The second\
    \ prime number is named q and is defined as the product of three prime numbers.\n\
    \  -- The smallest prime number is named n and can be calculated using the following\
    \ formula:\n  -- n = p * q * 2 (where p and q are the first and second primes)\n\
    \  -- The largest prime number is named m and can be calculated using the following\
    \ formula:\n  -- m = p * q * 3 (where p and q are the first and second primes)\n\
    \  -- Therefore, we can use the following formula to determine whether a number\
    \ is prime:\n  -- n = ((p * q) * 2) + (p * q * 3)\n  -- The formula above can\
    \ be simplified using the following observation:\n  -- If n is divisible by any\
    \ prime number other than 2 and 3, then n is prime.\n  -- Therefore, we can use\
    \ the following formula to determine whether a number is prime:\n  -- n = ((p\
    \ * q) * 2) + (p * q * 3)\n  -- The above formula can be simplified using the\
    \ following observation:\n  -- If n is divisible by any prime number other than\
    \ 2 and 3, then n is prime.\n  -- Therefore, we can use the following formula\
    \ to determine whether a number is prime:\n  -- n = ((p * q) * 2) + (p * q * 3)\n\
    \  -- The above formula can be simplified using the following observation:\n \
    \ -- If n is divisible by any prime number other than 2 and 3, then n is prime.\n\
    \  -- Therefore, we can use the following formula to determine whether a number\
    \ is prime:\n  -- n = ((p * q) * 2) + (p * q * 3)\n  -- The above formula can\
    \ be simplified using the following observation:\n  -- If n is divisible by any\
    \ prime number other than 2 and 3, then n is prime.\n  -- Therefore, we can use\
    \ the following formula to determine whether a number is prime:\n  -- n = ((p\
    \ * q) * 2) + (p * q * 3)\n  -- The above formula can be simplified using the\
    \ following observation:\n  -- If n is divisible by any prime number other than\
    \ 2 and 3, then n is prime.\n  -- Therefore, we can use the following formula\
    \ to determine whether a number is prime:\n  -- n = ((p * q) * 2) + (p * q * 3)\n\
    \  -- The above formula can be simplified using the following observation:\n \
    \ -- If n is divisible by any prime \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg5dvs5gu.lua:67: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 5, n, 2 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_w2dyel.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_w2dyel.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd and n/2 is even.\n  if n % 2 == 1 then\n    return not (n / 2)\n\
    \  end\n  -- If n is odd, then (n-1)/2 is even, and n/2 is odd.\n  return not\
    \ (n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfyaed6p.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdfyaed6p.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime is called a\
    \ prime.\n  -- Source: http://en.wikipedia.org/wiki/Prime_number\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000.txt\n  -- Source: http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/1000001.txt\n  -- Source: http://primes.utm.edu/lists/small/1000000.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/10000001.txt\n  -- Source: http://primes.utm.edu/lists/small/100000000.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/1000000001.txt\n  -- Source: http://primes.utm.edu/lists/small/10000000000.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/100000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000000000000.txt\n  -- Source: http://primes.utm.edu/lists/small/10000000000001.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/100000000000000.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000000000000001.txt\n  -- Source: http://primes.utm.edu/lists/small/10000000000000000.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/100000000000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000000000000000000.txt\n  -- Source: http://primes.utm.edu/lists/small/10000000000000000001.txt\n\
    \  -- Source: http://primes.utm.edu/lists/small/100000000000000000000.txt\n  --\
    \ Source: http://primes.utm.edu/lists/small/1000000000000000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/10000000000000000000000.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/100000000000000000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000000000000000000000000.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/10000000000000000000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/100000000000000000000000000.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/1000000000000000000000000001.txt\n  -- Source:\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000.txt\n  -- Source:\
    \ http://primes.ut\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu87w4nla.lua:65: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == -1\
    \ then return false end\n  if n == -2 then return false end\n  if n == -3 then\
    \ return false end\n  if n == -4 then return false end\n  if n == -5 then return\
    \ false end\n  if n == -6 then return false end\n  if n == -7 then return false\
    \ end\n  if n == -8 then return false end\n  if n == -9 then return false end\n\
    \  if n == -10 then return false end\n  if n == -11 then return false end\n  if\
    \ n == -12 then return false end\n  if n == -13 then return false end\n  if n\
    \ == -14 then return false end\n  if n == -15 then return false end\n  if n ==\
    \ -16 then return false end\n  if n == -17 then return false end\n  if n == -18\
    \ then return false end\n  if n == -19 then return false end\n  if n == -20 then\
    \ return false end\n  if n == -21 then return false end\n  if n == -22 then return\
    \ false end\n  if n == -23 then return false end\n  if n == -24 then return false\
    \ end\n  if n == -25 then return false end\n  if n == -26 then return false end\n\
    \  if n == -27 then return false end\n  if n == -28 then return false end\n  if\
    \ n == -29 then return false end\n  if n == -30 then return false end\n  if n\
    \ == -31 then return false end\n  if n == -32 then return false end\n  if n ==\
    \ -33 then return false end\n  if n == -34 then return false end\n  if n == -35\
    \ then return false end\n  if n == -36 then return false end\n  if n == -37 then\
    \ return false end\n  if n == -38 then return false end\n  if n == -39 then return\
    \ false end\n  if n == -40 then return false end\n  if n == -41 then return false\
    \ end\n  if n == -42 then return false end\n  if n == -43 then return false end\n\
    \  if n == -44 then return false end\n  if n == -45 then return false end\n  if\
    \ n == -46 then return false end\n  if n == -47 then return false end\n  if n\
    \ == -48 then return false end\n  if n == -49 \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfytckkr2.lua:74: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers.\n  -- The first prime number\
    \ is named p and is defined as the product of two prime numbers: (p-1)*(q-1)\n\
    \  -- The second prime number is named q and is defined as the product of three\
    \ prime numbers: (p-2)*(q-2)*(q-1)\n  -- The general formula for the sum of two\
    \ prime numbers is as follows:\n  -- (p-1)*(q-1) = q(p+q-1)\n  -- The general\
    \ formula for the sum of three prime numbers is as follows:\n  -- (p-2)*(q-2)*(q-1)\
    \ = p(p+q)(p+q+1)\n  -- The general formula for the product of two prime numbers\
    \ is as follows:\n  -- (p-1)(q-1) = p(p-1)(q-2)\n  -- The general formula for\
    \ the product of three prime numbers is as follows:\n  -- (p-2)(q-2)(q-1) = p(p-2)(q-1)(p-2)(q-1)\n\
    \  -- The general formula for the product of two prime numbers is as follows:\n\
    \  -- (p-1)(q-2) = p(p-1)(q-1)(p-2)(q-2)\n  -- The general formula for the product\
    \ of three prime numbers is as follows:\n  -- (p-2)(q-1)(p-2)(q-1) = p(p-2)(q-1)(p-2)(q-2)(p-1)(q-1)\n\
    \  -- The general formula for the product of two prime numbers is as follows:\n\
    \  -- (p-1)(q-2) = p(p-1)(q-1)(p-2)(q-2)(p-1)(q-1)\n  -- The general formula for\
    \ the product of three prime numbers is as follows:\n  -- (p-2)(q-1)(p-2)(q-1)\
    \ = p(p-2)(q-1)(p-2)(q-2)(p-1)(q-1)\n  -- The general formula for the product\
    \ of two prime numbers is as follows:\n  -- (p-1)(q-2) = p(p-1)(q-1)(p-2)(q-2)(p-1)(q-1)\n\
    \  -- The general formula for the product of three prime numbers is as follows:\n\
    \  -- (p-2)(q-1)(p-2)(q-1) = p(p-2)(q-1)(p-2)(q-2)(p-1)(q-1)\n  -- The general\
    \ formula for the product of two prime numbers is as follows:\n  -- (p-1)(q-2)\
    \ = p(p-1)(q-1)(p-2)(q-2)(p-1)(q-1)\n  -- The general formula for the product\
    \ of three prime numbers is as follows:\n  -- (p-2)(q-1)(p-2)(q-1) = p(p-2)(q-1)(p-2)(q-2)(p-1)(q-1)\n\
    \  -- The general formula for the product of two prime \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7jvdccrc.lua:64: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n == 10 then return true end\n  if n == 11 then\
    \ return true end\n  if n == 12 then return true end\n  if n == 13 then return\
    \ true end\n  if n == 14 then return true end\n  if n == 15 then return true end\n\
    \  if n == 16 then return true end\n  if n == 17 then return true end\n  if n\
    \ == 18 then return true end\n  if n == 19 then return true end\n  if n == 20\
    \ then return true end\n  if n == 21 then return true end\n  if n == 22 then return\
    \ true end\n  if n == 23 then return true end\n  if n == 24 then return true end\n\
    \  if n == 25 then return true end\n  if n == 26 then return true end\n  if n\
    \ == 27 then return true end\n  if n == 28 then return true end\n  if n == 29\
    \ then return true end\n  if n == 30 then return true end\n  if n == 31 then return\
    \ true end\n  if n == 32 then return true end\n  if n == 33 then return true end\n\
    \  if n == 34 then return true end\n  if n == 35 then return true end\n  if n\
    \ == 36 then return true end\n  if n == 37 then return true end\n  if n == 38\
    \ then return true end\n  if n == 39 then return true end\n  if n == 40 then return\
    \ true end\n  if n == 41 then return true end\n  if n == 42 then return true end\n\
    \  if n == 43 then return true end\n  if n == 44 then return true end\n  if n\
    \ == 45 then return true end\n  if n == 46 then return true end\n  if n == 47\
    \ then return true end\n  if n == 48 then return true end\n  if n == 49 then return\
    \ true end\n  if n == 50 then return true end\n  if n == 51 then return true end\n\
    \  if n == 52 then return true end\n  if n == 53 then return true end\n  if n\
    \ == 54 then return true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxddi2925.lua:98: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcly22e7.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjcly22e7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 217 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvaypffvc.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime can be factored\
    \ into a product of primes less than or equal to n. For example, 6 is a prime\
    \ since it has no positive divisors other than 1 and itself.\n  -- http://en.wikipedia.org/wiki/Prime_number\n\
    \  -- http://primes.utm.edu/lists/small/1000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000001.txt\n  -- http://primes.utm.edu/lists/small/10000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/10000000000000000000000000000000.txt\n  --\
    \ http://primes.utm.edu/lists/small/1000000000000000000000000000000000.txt\n \
    \ -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000002.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000003.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000004.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000005.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000006.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000007.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000009.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000a.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000b.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000c.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000d.txt\n\
    \  -- http://\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpne_3tnxm.lua:64: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- If n is even, return false\
    \ right away\n  if n % 2 == 0 then return false end\n  -- If n is odd, return\
    \ true after checking for divisibility by all odd numbers\n  for i = 2, n do\n\
    \    if n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppygnvswt.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppygnvswt.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is even, and (n-1)/2+1 is odd.\n  local i = 3\n  while i <= math.floor(n/2)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primality\n  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd-even\
    \ numbers for primality\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check\
    \ odd-even numbers for primality\n  if n % 7 == 0 then\n    return false\n  end\n\
    \  -- Check odd-even numbers for primality\n  if n % 11 == 0 then\n    return\
    \ false\n  end\n  -- Check odd-even numbers for primality\n  if n % 13 == 0 then\n\
    \    return false\n  end\n  -- Check odd-even numbers for primality\n  if n %\
    \ 17 == 0 then\n    return false\n  end\n  -- Check odd-even numbers for primality\n\
    \  if n % 19 == 0 then\n    return false\n  end\n  -- Check odd-even numbers for\
    \ primality\n  if n % 23 == 0 then\n    return false\n  end\n  -- Check odd-even\
    \ numbers for primality\n  if n % 29 == 0 then\n    return false\n  end\n  --\
    \ Check odd-even numbers for primality\n  if n % 31 == 0 then\n    return false\n\
    \  end\n  -- Check odd-even numbers for primality\n  if n % 37 == 0 then\n   \
    \ return false\n  end\n  -- Check odd-even numbers for primality\n  if n % 41\
    \ == 0 then\n    return false\n  end\n  -- Check odd-even numbers for primality\n\
    \  if n % 43 == 0 then\n    return false\n  end\n  -- Check odd-even numbers for\
    \ primality\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check odd-even\
    \ numbers for primality\n  if n % 53 == 0 then\n    return false\n  end\n  --\
    \ Check odd-even numbers for primality\n  if n % 59 == 0 then\n    return false\n\
    \  end\n  -- Check odd-even numbers for primality\n  if n % 61 == 0 then\n   \
    \ return false\n  end\n  -- Check odd-even numbers for primality\n  if n % 67\
    \ == 0 then\n    return false\n  end\n  -- Check odd-even numbers for primality\n\
    \  if n % 71 == 0 then\n    return false\n  end\n  -- Check odd-even numbers for\
    \ primality\n  if n % 73 == 0 then\n    return false\n  end\n  -- \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2us9e0b8.lua:126: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var2.txt\n  -- http://primes.utm.edu/lists/small/10000ln10.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr2.txt\n  -- http://primes.utm.edu/lists/small/10000sqr4.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr6.txt\n  -- http://primes.utm.edu/lists/small/10000sqr8.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr10.txt\n  -- http://primes.utm.edu/lists/small/10000sqr12.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr14.txt\n  -- http://primes.utm.edu/lists/small/10000sqr16.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr18.txt\n  -- http://primes.utm.edu/lists/small/10000sqr20.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr22.txt\n  -- http://primes.utm.edu/lists/small/10000sqr24.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr26.txt\n  -- http://primes.utm.edu/lists/small/10000sqr28.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr30.txt\n  -- http://primes.utm.edu/lists/small/10000sqr32.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr34.txt\n  -- http://primes.utm.edu/lists/small/10000sqr36.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr38.txt\n  -- http://primes.utm.edu/lists/small/10000sqr40.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr42.txt\n  -- http://primes.utm.edu/lists/small/10000sqr44.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr46.txt\n  -- http://primes.utm.edu/lists/small/10000sqr48.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000sqr50.txt\n  -- http://primes.utm.edu/lists/small/10000sqr52.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwu5d2h4_.lua:67: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 7, 2, -1 do\n    if n % i == 0 then return false end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvxtuiuc.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfvxtuiuc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  if is_odd_prime(n) then\n    return false\n  end\n  -- Check\
    \ odd-even primality of n-1\n  local function is_odd_prime_prev(n)\n    if n %\
    \ 2 == 0 then\n      return false\n    end\n    local i = 3\n    while i * i <=\
    \ n do\n      if n % i == 0 then\n        return false\n      end\n      i = i\
    \ + 2\n    end\n    return true\n  end\n  if is_odd_prime_prev(n) then\n    return\
    \ false\n  end\n  -- Check odd-even primality of n+1\n  local function is_odd_prime_next(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n) then\n\
    \    return false\n  end\n  -- Check odd-even primality of n+2\n  local function\
    \ is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n    end\n\
    \    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n)\
    \ then\n    return false\n  end\n  -- Check odd-even primality of n+3\n  local\
    \ function is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return false\n      end\n      i = i + 2\n    end\n    return true\n\
    \  end\n  if is_odd_prime_next(n) then\n    return false\n  end\n  -- Check odd-even\
    \ primality of n+4\n  local function is_odd_prime_next(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr33x36px.lua:120: 'end' expected (to close 'if' at line 118)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  -- If n is odd, then it can only be prime if n-1 is prime\n  -- If\
    \ n is even, then it can only be prime if n-1 is NOT prime\n  if n % 2 == 1 then\n\
    \    return not is_prime(n - 1)\n  end\n  -- If n is odd, then it can only be\
    \ prime if n-1 is prime\n  -- If n is even, then it can only be prime if n-1 is\
    \ NOT prime\n  -- If n is odd, then it can only be prime if n-1 is prime\n  if\
    \ n % 2 == 1 then\n    return is_prime(n - 1)\n  end\n  -- If n is odd, then it\
    \ can only be prime if n-1 is prime\n  -- If n is even, then it can only be prime\
    \ if n-1 is NOT prime\n  -- If n is odd, then it can only be prime if n-1 is prime\n\
    \  if n % 2 == 1 then\n    return is_prime(n - 1)\n  end\n  -- If n is odd, then\
    \ it can only be prime if n-1 is prime\n  -- If n is even, then it can only be\
    \ prime if n-1 is NOT prime\n  -- If n is odd, then it can only be prime if n-1\
    \ is prime\n  if n % 2 == 1 then\n    return is_prime(n - 1)\n  end\n  -- If n\
    \ is odd, then it can only be prime if n-1 is prime\n  -- If n is even, then it\
    \ can only be prime if n-1 is NOT prime\n  -- If n is odd, then it can only be\
    \ prime if n-1 is prime\n  if n % 2 == 1 then\n    return is_prime(n - 1)\n  end\n\
    \  -- If n is odd, then it can only be prime if n-1 is prime\n  -- If n is even,\
    \ then it can only be prime if n-1 is NOT prime\n  -- If n is odd, then it can\
    \ only be prime if n-1 is prime\n  if n % 2 == 1 then\n    return is_prime(n -\
    \ 1)\n  end\n  -- If n is odd, then it can only be prime if n-1 is prime\n  --\
    \ If n is even, then it can only be prime if n-1 is NOT prime\n  -- If n is odd,\
    \ then it can only be prime if n-1 is prime\n  if n % 2 == 1 then\n    return\
    \ is_prime(n - 1)\n  end\n  -- If n is odd, then it can only be prime if n-1 is\
    \ prime\n  -- If n is even, then it can only be prime \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3bqo9hhb.lua:89: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n == 1 or n == 0 then\n  \
    \  return false\n  end\n  for i = 5, 7, 9 do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1i8g5ao.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm1i8g5ao.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 1 has only\
    \ two distinct prime factors: 1 and itself.\n  -- >>> is_prime(6)\n  -- False\n\
    \  -- >>> is_prime(7)\n  -- True\n  -- >>> is_prime(8)\n  -- True\n  -- >>> is_prime(9)\n\
    \  -- True\n  -- >>> is_prime(10)\n  -- False\n  -- >>> is_prime(11)\n  -- True\n\
    \  -- >>> is_prime(12)\n  -- True\n  -- >>> is_prime(13)\n  -- True\n  -- >>>\
    \ is_prime(14)\n  -- True\n  -- >>> is_prime(15)\n  -- True\n  -- >>> is_prime(16)\n\
    \  -- True\n  -- >>> is_prime(17)\n  -- True\n  -- >>> is_prime(18)\n  -- True\n\
    \  -- >>> is_prime(19)\n  -- True\n  -- >>> is_prime(20)\n  -- True\n  -- >>>\
    \ is_prime(21)\n  -- True\n  -- >>> is_prime(22)\n  -- True\n  -- >>> is_prime(23)\n\
    \  -- True\n  -- >>> is_prime(24)\n  -- True\n  -- >>> is_prime(25)\n  -- True\n\
    \  -- >>> is_prime(26)\n  -- True\n  -- >>> is_prime(27)\n  -- True\n  -- >>>\
    \ is_prime(28)\n  -- True\n  -- >>> is_prime(29)\n  -- True\n  -- >>> is_prime(30)\n\
    \  -- True\n  -- >>> is_prime(31)\n  -- True\n  -- >>> is_prime(32)\n  -- True\n\
    \  -- >>> is_prime(33)\n  -- True\n  -- >>> is_prime(34)\n  -- True\n  -- >>>\
    \ is_prime(35)\n  -- True\n  -- >>> is_prime(36)\n  -- True\n  -- >>> is_prime(37)\n\
    \  -- True\n  -- >>> is_prime(38)\n  -- True\n  -- >>> is_prime(39)\n  -- True\n\
    \  -- >>> is_prime(40)\n  -- True\n  -- >>> is_prime(41)\n  -- True\n  -- >>>\
    \ is_prime(42)\n  -- True\n  -- >>> is_prime(43)\n  -- True\n  -- >>> is_prime(44)\n\
    \  -- True\n  -- >>> is_prime\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1010d_08.lua:116: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptbzqziq_.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even.\n\
    \  for i = 3, n, 2 do\n    if n % i == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl491_522.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl491_522.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test the odds.\n \
    \ for i = 2, n do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzwd0vxe.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkzwd0vxe.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  for i=3,math.floor(n/2),2 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpio3qqptl.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test for divisibility\
    \ by all prime factors up to sqrt(n).\n  for i = 2, math.floor(math.sqrt(n)) +\
    \ 1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ n\n  local function is_odd(n)\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    -- Check odd-ness of n/2\n    return is_odd(n / 2)\n  end\n  if\
    \ is_odd(n) then\n    return false\n  end\n  -- Check odd-ness of n-1\n  local\
    \ function is_odd_one(n)\n    if n % 2 == 0 then\n      return false\n    end\n\
    \    -- Check odd-ness of n/2\n    return is_odd_one(n / 2)\n  end\n  if is_odd_one(n)\
    \ then\n    return false\n  end\n  -- Check odd-ness of n+1\n  local function\
    \ is_odd_two(n)\n    if n % 2 == 0 then\n      return false\n    end\n    -- Check\
    \ odd-ness of n/2\n    return is_odd_two(n / 2)\n  end\n  if is_odd_two(n) then\n\
    \    return false\n  end\n  -- Check odd-ness of n+2\n  local function is_odd_three(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    -- Check odd-ness of\
    \ n/2\n    return is_odd_three(n / 2)\n  end\n  if is_odd_three(n) then\n    return\
    \ false\n  end\n  -- Check odd-ness of n+3\n  local function is_odd_four(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    -- Check odd-ness of\
    \ n/2\n    return is_odd_four(n / 2)\n  end\n  if is_odd_four(n) then\n    return\
    \ false\n  end\n  -- Check odd-ness of n+4\n  local function is_odd_five(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    -- Check odd-ness of\
    \ n/2\n    return is_odd_five(n / 2)\n  end\n  if is_odd_five(n) then\n    return\
    \ false\n  end\n  -- Check odd-ness of n+5\n  local function is_odd_six(n)\n \
    \   if n % 2 == 0 then\n      return false\n    end\n    -- Check odd-ness of\
    \ n/2\n    return is_odd_six(n / 2)\n  end\n  if is_odd_six(n) then\n    return\
    \ false\n  end\n  -- Check odd-ness of n+6\n  local function is_odd_seven(n)\n\
    \    if n % 2 == 0 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpytli6i7m.lua:106: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test the odd factors\
    \ starting from 3\n  for i = 2, n do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpip1x38.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptpip1x38.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100025.txt\n\
    \  -- http://primes.utm.edu/lists/small/100026.txt\n  -- http://primes.utm.edu/lists/small/100027.txt\n\
    \  -- http://primes.utm.edu/lists/small/100028.txt\n  -- http://primes.utm.edu/lists/small/100029.txt\n\
    \  -- http://primes.utm.edu/lists/small/100032.txt\n  -- http://primes.utm.edu/lists/small/100033.txt\n\
    \  -- http://primes.utm.edu/lists/small/100034.txt\n  -- http://primes.utm.edu/lists/small/100035.txt\n\
    \  -- http://primes.utm.edu/lists/small/100036.txt\n  -- http://primes.utm.edu/lists/small/100037.txt\n\
    \  -- http://primes.utm.edu/lists/small/100038.txt\n  -- http://primes.utm.edu/lists/small/100039.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd_waimb5.lua:69: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 217 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppim8a81_.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 1 then return false end\n  if n % 13\
    \ == 1 then return false end\n  if n % 17 == 1 then return false end\n  if n %\
    \ 19 == 1 then return false end\n  if n % 23 == 1 then return false end\n  if\
    \ n % 29 == 1 then return false end\n  if n % 31 == 1 then return false end\n\
    \  if n % 37 == 1 then return false end\n  if n % 41 == 1 then return false end\n\
    \  if n % 43 == 1 then return false end\n  if n % 47 == 1 then return false end\n\
    \  if n % 53 == 1 then return false end\n  if n % 59 == 1 then return false end\n\
    \  if n % 63 > 1 then return false end\n  if n % 67 > 1 then return false end\n\
    \  if n % 71 > 1 then return false end\n  if n % 73 > 1 then return false end\n\
    \  if n % 79 > 1 then return false end\n  if n % 83 > 1 then return false end\n\
    \  if n % 87 > 1 then return false end\n  if n % 91 > 1 then return false end\n\
    \  if n % 97 > 1 then return false end\n  if n % 103 > 1 then return false end\n\
    \  if n % 105 > 1 then return false end\n  if n % 111 > 1 then return false end\n\
    \  if n % 113 > 1 then return false end\n  if n % 121 > 1 then return false end\n\
    \  if n % 123 > 1 then return false end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y3k7v0_.lua:68:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5y3k7v0_.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpatsmcrhf.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Check special cases (all primes except 2 and 3)\n  if n < 2 then\n    return\
    \ false\n  end\n  if n < 3 then\n    return n == 2\n  end\n  -- Check even numbers\n\
    \  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd numbers\n  if n\
    \ % 2 == 1 then\n    -- Check whether n is even\n    if n % 4 == 0 then\n    \
    \  return false\n    end\n    -- Check whether n is odd\n    return true\n  end\n\
    \  -- Check whether n is prime\n  -- If n is even, then it's prime\n  if n % 2\
    \ == 0 then\n    return true\n  end\n  -- If n is odd, then it's composite\n \
    \ -- If n is divisible by 3, then it's prime\n  if n % 2 == 1 then\n    -- If\
    \ n is divisible by 5, then it's prime\n    if n % 5 == 0 then\n      return true\n\
    \    end\n    -- If n is divisible by 3 and 5, then it's composite\n    return\
    \ false\n  end\n  -- If n is divisible by 3 and 5, then it's composite\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf2gvp0e.lua:69:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvf2gvp0e.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers.\n  -- The first prime number\
    \ is called p, and the second is called q (for \"prime\").\n  -- If p + q = n,\
    \ then p * q = n.\n  -- In our case, we know that p * q < n, and that p + q is\
    \ even.\n  -- Therefore, we can just test if n is divisible by p or q.\n  -- If\
    \ n is divisible by both, then n cannot be prime.\n  -- If n is divisible by p,\
    \ then it must be divisible by q.\n  -- If n is not divisible by any of p and\
    \ q, then, it is prime.\n  -- Therefore, we can just test if n is divisible by\
    \ p.\n  -- If n is divisible by p, then it must be divisible by q.\n  -- If n\
    \ is not divisible by p, then it must be divisible by q.\n  -- Therefore, we can\
    \ just test if n is divisible by q.\n  -- If n is divisible by q, then n must\
    \ be prime.\n  return n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0\
    \ and n % 11 == 0 and n % 13 == 0 and n % 17 == 0 and n % 19 == 0 and n % 23 ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva4audsn.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpva4audsn.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ false end\n  if n == 5 then return false end\n  if n == 6 then return true end\n\
    \  if n == 7 then return false end\n  if n == 8 then return false end\n  if n\
    \ == 9 then return true end\n  if n == 10 or n == 11 or n == 12 or n == 13 or\
    \ n == 14 or n == 15 or n == 16 or n == 17 or n == 18 or n == 19 or n == 20 or\
    \ n == 21 or n == 22 or n == 23 or n == 24 or n == 25 or n == 26 or n == 27 or\
    \ n == 28 or n == 29 or n == 30 or n == 31 or n == 32 or n == 33 or n == 34 or\
    \ n == 35 or n == 36 or n == 37 or n == 38 or n == 39 or n == 40 or n == 41 or\
    \ n == 42 or n == 43 or n == 44 or n == 45 or n == 46 or n == 47 or n == 48 or\
    \ n == 49 or n == 50 or n == 51 or n == 52 or n == 53 or n == 54 or n == 55 or\
    \ n == 56 or n == 57 or n == 58 or n == 59 or n == 60 or n == 61 or n == 62 or\
    \ n == 63 or n == 64 or n == 65 or n == 66 or n == 67 or n == 68 or n == 69 or\
    \ n == 70 or n == 71 or n == 72 or n == 73 or n == 74 or n == 75 or n == 76 or\
    \ n == 77 or n == 78 or n == 79 or n == 80 or n == 81 or n == 82 or n == 83 or\
    \ n == 84 or n == 85 or n == 86 or n == 87 or n == 88 or n == 89 or n == 90 or\
    \ n == 91 or n == 92 or n == 93 or n == 94 and n == 95 then return false end\n\
    \  if n == 101 or n == 102 or n == 103 or n == 104 or n == 105 or n == 106 or\
    \ n == 107 or n == 108 or n == 109 or n == 111 or n == 112 or n == 113 or n ==\
    \ 114 or n == 115 or n == 116 or n == 117 or n == 118 or n == 119 or n == 121\
    \ or n == 122 or n == 123 or n == 124 or n == 125 then return false end\n  if\
    \ n == 126 or n == 127 or n == 128 or n == 129 or n == 130 or n == 131 or n ==\
    \ 132 or n == 133 or n == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpalf4g3u5.lua:36: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then\n    return true\n  end\n\
    \  if n == 1 or n == 0 then\n    return false\n  end\n  if n % 2 == 0 or n % 3\
    \ == 0 or n % 5 == 0 or n % 7 == 0 then\n    return false\n  end\n  if n % 2 ==\
    \ 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 1 then\n    return true\n  end\n\
    \  if n % 2 == 0 and n % 3 == 1 and n % 5 == 0 and n % 7 == 0 then\n    return\
    \ true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 1 and n % 7 == 0 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 1 and n %\
    \ 7 == 1 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n %\
    \ 5 == 1 and n % 7 == 2 then\n    return true\n  end\n  if n % 2 == 0 and n %\
    \ 3 == 1 and n % 5 == 2 and n % 7 == 1 then\n    return true\n  end\n  if n %\
    \ 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 3 then\n  \
    \  return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7\
    \ == 3 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5\
    \ == 2 and n % 7 == 4 then\n    return true\n  end\n  if n % 2 == 0 and n % 3\
    \ == 1 and n % 5 == 2 and n % 7 == 4 then\n    return true\n  end\n  if n % 2\
    \ == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 5 then\n    return true\n  end\n\
    \  if n % 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 5 then\n    return\
    \ true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 6 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n % 5 == 2 and n %\
    \ 7 == 6 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 1 and n %\
    \ 5 == 2 and n % 7 == 7 then\n    return true\n  end\n  if n % 2 == 0 and n %\
    \ 3 == 1 and n % 5 == 2 and n % 7 == 7 then\n    return true\n  end\n  if n %\
    \ 2 == 0 and n % 3 == 1 and n % 5 == 2 and n % 7 == 8 then\n    return true\n\
    \  end\n  if n % 2 == 0 and n % 3 == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjo3wofpi.lua:89: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  if is_odd_prime(n) then\n    return false\n  end\n  -- Check\
    \ odd-even primality of n-1\n  local function is_odd_prime_prev(n)\n    if n %\
    \ 2 == 0 then\n      return false\n    end\n    local i = 3\n    while i * i <=\
    \ n do\n      if n % i == 0 then\n        return false\n      end\n      i = i\
    \ + 2\n    end\n    return true\n  end\n  if is_odd_prime_prev(n) then\n    return\
    \ false\n  end\n  -- Check odd-even primality of n+1\n  local function is_odd_prime_next(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n) then\n\
    \    return false\n  end\n  -- Check odd-even primality of n+2\n  local function\
    \ is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n    end\n\
    \    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n)\
    \ then\n    return false\n  end\n  -- Check odd-even primality of n+3\n  local\
    \ function is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return false\n      end\n      i = i + 2\n    end\n    return true\n\
    \  end\n  if is_odd_prime_next(n) then\n    return false\n  end\n  -- Check odd-even\
    \ primality of n+4\n  local function is_odd_prime_next(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpia6h2gcr.lua:120: 'end' expected (to close 'if' at line 118)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 5, n, 2 do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1n964zt.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg1n964zt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers.\n\
    \  if n % 2 == 1 then\n    return not is_prime(n - 2)\n  end\n  -- Check odd-prime\
    \ numbers.\n  local m = math.floor(math.sqrt(n))\n  for i = 2, m do\n    if n\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk52ovuux.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk52ovuux.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == -1\
    \ then return false end\n  if n == -2 then return false end\n  if n == -3 then\
    \ return false end\n  if n == -4 then return false end\n  if n == -5 then return\
    \ false end\n  if n == -6 then return false end\n  if n == -7 then return false\
    \ end\n  if n == -8 then return false end\n  if n == -9 then return false end\n\
    \  if n == -10 then return false end\n  if n == -11 then return false end\n  if\
    \ n == -12 then return false end\n  if n == -13 then return false end\n  if n\
    \ == -14 then return false end\n  if n == -15 then return false end\n  if n ==\
    \ -16 then return false end\n  if n == -17 then return false end\n  if n == -18\
    \ then return false end\n  if n == -19 then return false end\n  if n == -20 then\
    \ return false end\n  if n == -21 then return false end\n  if n == -22 then return\
    \ false end\n  if n == -23 then return false end\n  if n == -24 then return false\
    \ end\n  if n == -25 then return false end\n  if n == -26 then return false end\n\
    \  if n == -27 then return false end\n  if n == -28 then return false end\n  if\
    \ n == -29 then return false end\n  if n == -30 then return false end\n  if n\
    \ == -31 then return false end\n  if n == -32 then return false end\n  if n ==\
    \ -33 then return false end\n  if n == -34 then return false end\n  if n == -35\
    \ then return false end\n  if n == -36 then return false end\n  if n == -37 then\
    \ return false end\n  if n == -38 then return false end\n  if n == -39 then return\
    \ false end\n  if n == -40 then return false end\n  if n == -41 then return false\
    \ end\n  if n == -42 then return false end\n  if n == -43 then return false end\n\
    \  if n == -44 then return false end\n  if n == -45 then return false end\n  if\
    \ n == -46 then return false end\n  if n == -47 then return false end\n  if n\
    \ == -48 then return false end\n  if n == -49 \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7493eom.lua:74: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test for primeness\
    \ up to sqrt(n)\n  for i = 2, math.floor(n/2) do\n    if n % i == 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even number\n\
    \  if n % 2 == 1 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd-even\
    \ number\n  if n % 3 == 0 then\n    return not is_prime(n - 2)\n  end\n  -- Check\
    \ odd-even number\n  if n % 5 == 0 then\n    return not is_prime(n - 3)\n  end\n\
    \  -- Check odd-even number\n  if n % 7 == 0 then\n    return not is_prime(n -\
    \ 4)\n  end\n  -- Check odd-even number\n  if n % 11 == 0 then\n    return not\
    \ is_prime(n - 5)\n  end\n  -- Check odd-even number\n  if n % 13 == 0 then\n\
    \    return not is_prime(n - 6)\n  end\n  -- Check odd-even number\n  if n % 17\
    \ == 0 then\n    return not is_prime(n - 7)\n  end\n  -- Check odd-even number\n\
    \  if n % 19 == 0 then\n    return not is_prime(n - 8)\n  end\n  -- Check odd-even\
    \ number\n  if n % 23 == 0 then\n    return not is_prime(n - 9)\n  end\n  -- Check\
    \ odd-even number\n  if n % 29 == 0 then\n    return not is_prime(n - 10)\n  end\n\
    \  -- Check odd-even number\n  if n % 31 == 0 then\n    return not is_prime(n\
    \ - 11)\n  end\n  -- Check odd-even number\n  if n % 37 == 0 then\n    return\
    \ not is_prime(n - 12)\n  end\n  -- Check odd-even number\n  if n % 41 == 0 then\n\
    \    return not is_prime(n - 13)\n  end\n  -- Check odd-even number\n  if n %\
    \ 47 == 0 then\n    return not is_prime(n - 14)\n  end\n  -- Check odd-even number\n\
    \  if n % 53 == 0 then\n    return not is_prime(n - 15)\n  end\n  -- Check odd-even\
    \ number\n  if n % 59 == 0 then\n    return not is_prime(n - 16)\n  end\n  --\
    \ Check odd-even number\n  if n % 61 == 0 then\n    return not is_prime(n - 17)\n\
    \  end\n  -- Check odd-even number\n  if n % 67 == 0 then\n    return not is_prime(n\
    \ - 18)\n  end\n  -- Check odd-even number\n  if n % 71 == 0 then\n    return\
    \ not is_prime(n - 19)\n  end\n  -- Check odd-even number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyzt8e348.lua:122: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n == 10 or n == 11 or n == 12 or n == 13 or n ==\
    \ 14 or n == 15 or n == 16 or n == 17 or n == 18 or n == 19 or n == 20 or n ==\
    \ 21 or n == 22 or n == 23 or n == 24 or n == 25 or n == 26 or n == 27 or n ==\
    \ 28 or n == 29 or n == 30 or n == 31 or n == 32 or n == 33 or n == 34 or n ==\
    \ 35 or n == 36 or n == 37 or n == 38 or n == 39 or n == 40 or n == 41 or n ==\
    \ 42 or n == 43 or n == 44 or n == 45 or n == 46 or n == 47 or n == 48 or n ==\
    \ 49 or n == 50 or n == 51 or n == 52 or n == 53 or n == 54 or n == 55 or n ==\
    \ 56 or n == 57 or n == 58 or n == 59 or n == 60 or n == 61 or n == 62 or n ==\
    \ 63 or n == 64 or n == 65 or n == 66 or n == 67 or n == 68 or n == 69 or n ==\
    \ 70 or n == 71 or n == 72 or n == 73 or n == 74 or n == 75 or n == 76 or n ==\
    \ 77 or n == 78 or n == 79 or n == 80 or n == 81 or n == 82 or n == 83 or n ==\
    \ 84 or n == 85 or n == 86 or n == 87 or n == 88 or n == 89 or n == 90 or n ==\
    \ 91 or n == 92 or n == 93 or n == 94 and n == 95 then return true end\n  if n\
    \ == 1 or n == 2 or n == 3 or n == 4 or n == 5 or n == 6 or n == 7 or n == 8 or\
    \ n == 9 or n == 10 then return true end\n  if n == 11 then return true end\n\
    \  if n == 12 then return true end\n  if n == 13 then return true end\n  if n\
    \ == 14 then return true end\n  if n == 15 then return true end\n  if n == 16\
    \ then return true end\n  if n == 17 then return true end\n  if n == 18 then return\
    \ true end\n  if n == 19 then return true end\n  if n == 20 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcvv92730.lua:45: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes:\n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Lua\n  -- The sieve is\
    \ computed only once per given number.\n  -- The sieve is computed using the Sieve\
    \ of Atkin algorithm.\n  -- The sieve is computed using the Sieve of Eratosthenes\
    \ algorithm.\n  -- The sieve is computed using the Sieve of Atkin algorithm with\
    \ a\n  -- slightly optimized implementation.\n  -- The sieve is computed using\
    \ the Sieve of Atkin algorithm with a\n  -- slightly optimized implementation\
    \ and with a slightly optimized sieve.\n  -- The sieve is computed using the Sieve\
    \ of Atkin algorithm with a\n  -- slightly optimized implementation and with a\
    \ slightly optimized sieve.\n  -- The sieve is computed using the Sieve of Atkin\
    \ algorithm with a\n  -- slightly optimized implementation and with a slightly\
    \ optimized sieve.\n  -- The sieve is computed using the Sieve of Atkin algorithm\
    \ with a\n  -- slightly optimized implementation and with a slightly optimized\
    \ sieve.\n  -- The sieve is computed using the Sieve of Atkin algorithm with a\n\
    \  -- slightly optimized implementation and with a slightly optimized sieve.\n\
    \  -- The sieve is computed using the Sieve of Atkin algorithm with a\n  -- slightly\
    \ optimized implementation and with a slightly optimized sieve.\n  -- The sieve\
    \ is computed using the Sieve of Atkin algorithm with a\n  -- slightly optimized\
    \ implementation and with a slightly optimized sieve.\n  -- The sieve is computed\
    \ using the Sieve of Atkin algorithm with a\n  -- slightly optimized implementation\
    \ and with a slightly optimized sieve.\n  -- The sieve is computed using the Sieve\
    \ of Atkin algorithm with a\n  -- slightly optimized implementation and with a\
    \ slightly optimized sieve.\n  -- The sieve is computed using the Sieve of Atkin\
    \ algorithm with a\n  -- slightly optimized implementation and with a slightly\
    \ optimized sieve.\n  -- The sieve is computed using the Sieve of Atkin algorithm\
    \ with a\n  -- slightly optimized implementation and with a slightly optimized\
    \ sieve.\n  -- The sieve is computed using the Sieve \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpssm8mp8o.lua:67: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == -1\
    \ then return false end\n  if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7\
    \ == 0 then\n    return false\n  end\n  local i\n  for i = 5, n do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dliqm9b.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8dliqm9b.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test for primeness\
    \ up to sqrt(n)\n  for i = 2, n do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxbd8g9u.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuxbd8g9u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1.\n  if n < 1 then return false end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgoz2ll_i.lua:38: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 3\n  if n % 3 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 5\n  if n % 5 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 7\n  if n % 7 == 0 then\n    return false\n\
    \  end\n  -- Test if n is evenly divisible by 11\n  if n % 11 == 0 then\n    return\
    \ false\n  end\n  -- Test if n is evenly divisible by 13\n  if n % 13 == 0 then\n\
    \    return false\n  end\n  -- Test if n is evenly divisible by 17\n  if n % 17\
    \ == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible by 19\n\
    \  if n % 19 == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible\
    \ by 23\n  if n % 23 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 29\n  if n % 29 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 31\n  if n % 31 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 37\n  if n % 37 == 0 then\n    return false\n\
    \  end\n  -- Test if n is evenly divisible by 41\n  if n % 41 == 0 then\n    return\
    \ false\n  end\n  -- Test if n is evenly divisible by 43\n  if n % 43 == 0 then\n\
    \    return false\n  end\n  -- Test if n is evenly divisible by 47\n  if n % 47\
    \ == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible by 53\n\
    \  if n % 53 == 0 then\n    return false\n  end\n  -- Test if n is evenly divisible\
    \ by 59\n  if n % 59 == 0 then\n    return false\n  end\n  -- Test if n is evenly\
    \ divisible by 61\n  if n % 61 == 0 then\n    return false\n  end\n  -- Test if\
    \ n is evenly divisible by 67\n  if n % 67 == 0 then\n    return false\n  end\n\
    \  -- Test if n is evenly divisible by 71\n  if n % 71 == 0 then\n    return false\n\
    \  end\n  -- Test if n is even\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz63q16w6.lua:122: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are special cases.\n  if n % 2 == 1 then\n    return not\
    \ is_prime(n - 1)\n  end\n  -- Check odd and even numbers since they are special\
    \ cases.\n  if n % 3 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check\
    \ odd and even numbers since they are special cases.\n  if n % 5 == 0 then\n \
    \   return not is_prime(n - 1)\n  end\n  -- Check odd and even numbers since they\
    \ are special cases.\n  if n % 7 == 0 then\n    return not is_prime(n - 1)\n \
    \ end\n  -- Check odd and even numbers since they are special cases.\n  if n %\
    \ 11 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd and even\
    \ numbers since they are special cases.\n  if n % 13 == 0 then\n    return not\
    \ is_prime(n - 1)\n  end\n  -- Check odd and even numbers since they are special\
    \ cases.\n  if n % 17 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check\
    \ odd and even numbers since they are special cases.\n  if n % 19 == 0 then\n\
    \    return not is_prime(n - 1)\n  end\n  -- Check odd and even numbers since\
    \ they are special cases.\n  if n % 23 == 0 then\n    return not is_prime(n -\
    \ 1)\n  end\n  -- Check odd and even numbers since they are special cases.\n \
    \ if n % 29 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd and\
    \ even numbers since they are special cases.\n  if n % 31 == 0 then\n    return\
    \ not is_prime(n - 1)\n  end\n  -- Check odd and even numbers since they are special\
    \ cases.\n  if n % 37 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check\
    \ odd and even numbers since they are special cases.\n  if n % 41 == 0 then\n\
    \    return not is_prime(n - 1)\n  end\n  -- Check odd and even numbers since\
    \ they are special cases.\n  if n % 43 == 0 then\n    return not is_prime(n -\
    \ 1)\n  end\n  -- Check odd and even numbers since they are special cases.\n \
    \ if n % 47 == 0 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd and\
    \ even numbers since they are special cases.\n  if n % 53 == 0 then\n    return\
    \ not is_prime(n - 1)\n  end\n  -- Check odd and even numbers since they are special\
    \ cases.\n  if n % 59 == 0 then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfd7vpezm.lua:112: 'end' expected (to close 'if' at line 91)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 115 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 143 == 0 then return false end\n  if n % 149 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 163 == 0 then return false end\n  if n % 169 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 185 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 203 == 0 then return false end\n  if n % 209 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 221 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm0j568oc.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  if n < 1 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  -- Check all the numbers\
    \ from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) + 1, 4 do\n    if\
    \ n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x8q89n6.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1x8q89n6.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpn2tlnwzi.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var2.txt\n  -- http://primes.utm.edu/lists/small/10000var3.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var4.txt\n  -- http://primes.utm.edu/lists/small/10000var5.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var6.txt\n  -- http://primes.utm.edu/lists/small/10000var7.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var8.txt\n  -- http://primes.utm.edu/lists/small/10000var9.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var10.txt\n  -- http://primes.utm.edu/lists/small/10000var11.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var12.txt\n  -- http://primes.utm.edu/lists/small/10000var13.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var14.txt\n  -- http://primes.utm.edu/lists/small/10000var15.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var16.txt\n  -- http://primes.utm.edu/lists/small/10000var17.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var18.txt\n  -- http://primes.utm.edu/lists/small/10000var19.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var20.txt\n  -- http://primes.utm.edu/lists/small/10000var21.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var22.txt\n  -- http://primes.utm.edu/lists/small/10000var23.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var24.txt\n  -- http://primes.utm.edu/lists/small/10000var25.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var26.txt\n  -- http://primes.utm.edu/lists/small/10000var27.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000var28.txt\n  -- http://primes.utm.edu/lists/small/10000var29.txt\n\
    \  -- http://primes.utm.edu/lists/small/\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp30jes501.lua:67: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 10 == 1 then return false end\n  if n % 10\
    \ == 2 then return false end\n  if n % 10 == 3 then return false end\n  if n %\
    \ 10 == 5 then return false end\n  if n % 10 == 7 then return false end\n  if\
    \ n % 10 == 9 then return false end\n  if n % 11 == 0 then return false end\n\
    \  if n % 12 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 14 == 0 then return false end\n  if n % 15 == 0 then return false end\n\
    \  if n % 16 == 0 then return false end\n  if n % 17 == 0 then return false end\n\
    \  if n % 18 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 20 == 0 then return false end\n  if n % 21 == 0 then return false end\n\
    \  if n % 22 == 0 then return false end\n  if n % 23 == 0 then return false end\n\
    \  if n % 24 == 0 then return false end\n  if n % 25 == 0 then return false end\n\
    \  if n % 26 == 0 then return false end\n  if n % 27 == 0 then return false end\n\
    \  if n % 28 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 30 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 32 == 0 then return false end\n  if n % 33 == 0 then return false end\n\
    \  if n % 34 == 0 then return false end\n  if n % 35 == 0 then return false end\n\
    \  if n % 36 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 38 == 0 then return false end\n  if n % 39 == 0 then return false end\n\
    \  if n % 40 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 42 == 0 then return false end\n  if n % \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_x1cj55m.lua:72: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  return n > 1 and\
    \ n % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph43kbhfg.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph43kbhfg.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://primes.utm.edu/lists/small/millions/\n  -- http://primes.utm.edu/lists/small/millions/prime.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/odd.htm\n  -- http://primes.utm.edu/lists/small/millions/even.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/primesby2.htm\n  -- http://primes.utm.edu/lists/small/millions/probablyprime/\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/odd.htm\n  -- http://primes.utm.edu/lists/small/millions/probablyprime/even.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/primesby2.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/odd.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/even.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/primesby2.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/probablyprime/\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/probablyprime/odd.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/probablyprime/even.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/probablyprime/primesby2.htm\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime/probablyprime/probablyprime/\n\
    \  -- http://primes.utm.edu/lists/small/millions/probablyprime/probablyprime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4fdaax9l.lua:55: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then return true end\n  if\
    \ n == 1 or n == 0 then return false end\n  if n == 0 then return false end\n\
    \  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then return true\
    \ end\n  if n == 1 or n == 0 then return false end\n  if n == 0 then return false\
    \ end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then return\
    \ true end\n  if n == 1 or n == 0 then return false end\n  if n == 0 then return\
    \ false end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then\
    \ return true end\n  if n == 1 or n == 0 then return false end\n  if n == 0 then\
    \ return false end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 ==\
    \ 0 then return true end\n  if n == 1 or n == 0 then return false end\n  if n\
    \ == 0 then return false end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and\
    \ n % 7 == 0 then return true end\n  if n == 1 or n == 0 then return false end\n\
    \  if n == 0 then return false end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 ==\
    \ 0 and n % 7 == 0 then return true end\n  if n == 1 or n == 0 then return false\
    \ end\n  if n == 0 then return false end\n  if n % 2 == 0 and n % 3 == 0 and n\
    \ % 5 == 0 and n % 7 == 0 then return true end\n  if n == 1 or n == 0 then return\
    \ false end\n  if n == 0 then return false end\n  if n % 2 == 0 and n % 3 == 0\
    \ and n % 5 == 0 and n % 7 == 0 then return true end\n  if n == 1 or n == 0 then\
    \ return false end\n  if n == 0 then return false end\n  if n % 2 == 0 and n %\
    \ 3 == 0 and n % 5 == 0 and n % 7 == 0 then return true end\n  if n == 1 or n\
    \ == 0 then return false end\n  if n == 0 then return false end\n  if n % 2 ==\
    \ 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then return true end\n  if n\
    \ == 1 or n == 0 then return false end\n  if n == 0 then return false end\n  if\
    \ n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then return true end\n\
    \  if n == 1 or n == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpogwxta9y.lua:60: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then return false end\n \
    \ -- If n is even, then (n-1)/2 is even, and (n-1)/2 does not divide n.\n  --\
    \ If n is odd, then (n-1)/2 is odd, and n-1/2 does not divide n.\n  if n % 2 ==\
    \ 0 then return not (n % n % n) end\n  -- If n is odd, then n divides n-1/2, and\
    \ n-1/2 does not divide n.\n  -- So n-1/2 must divide n.\n  return not (n % n\
    \ % n % n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h4y1hqr.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7h4y1hqr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, n, 2 do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh5ch970.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfh5ch970.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  for\
    \ i = 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997\ndo\n  if n % i == 0 then return false end\nend\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbfejq_09.lua:23: 'do' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes:\n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- The sieve is computed once per thread, instead of once per number.\n  --\
    \ This makes the function much faster.\n  -- The sieve is also more compact than\
    \ a trial division method.\n  -- The sieve is also more efficient than a trial\
    \ division method.\n  -- The sieve is also more efficient than a trial division\
    \ method.\n  -- The sieve is also more efficient than a trial division method.\n\
    \  -- The sieve is also more efficient than a trial division method.\n  -- The\
    \ sieve is also more efficient than a trial division method.\n  -- The sieve is\
    \ also more efficient than a trial division method.\n  -- The sieve is also more\
    \ efficient than a trial division method.\n  -- The sieve is also more efficient\
    \ than a trial division method.\n  -- The sieve is also more efficient than a\
    \ trial division method.\n  -- The sieve is also more efficient than a trial division\
    \ method.\n  -- The sieve is also more efficient than a trial division method.\n\
    \  -- The sieve is also more efficient than a trial division method.\n  -- The\
    \ sieve is also more efficient than a trial division method.\n  -- The sieve is\
    \ also more efficient than a trial division method.\n  -- The sieve is also more\
    \ efficient than a trial division method.\n  -- The sieve is also more efficient\
    \ than a trial division method.\n  -- The sieve is also more efficient than a\
    \ trial division method.\n  -- The sieve is also more efficient than a trial division\
    \ method.\n  -- The sieve is also more efficient than a trial division method.\n\
    \  -- The sieve is also more efficient than a trial division method.\n  -- The\
    \ sieve is also more efficient than a trial division method.\n  -- The sieve is\
    \ also more efficient than a trial division method.\n  -- The sieve is also more\
    \ efficient than a trial division method.\n  -- The sieve is also more efficient\
    \ than a trial division method.\n  -- The sieve is also more efficient than a\
    \ trial division method.\n  -- The sieve is also more efficient than a trial \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptro5jwnv.lua:67: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of a prime and an even number.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://oeis.org/A000045\n  -- http://oeis.org/A000045#section=7\n  -- http://oeis.org/A000045#section=8\n\
    \  -- http://oeis.org/A000045#section=9\n  -- http://oeis.org/A000045#section=10\n\
    \  -- http://oeis.org/A000045#section=11\n  -- http://oeis.org/A000045#section=12\n\
    \  -- http://oeis.org/A000045#section=13\n  -- http://oeis.org/A000045#section=14\n\
    \  -- http://oeis.org/A000045#section=15\n  -- http://oeis.org/A000045#section=16\n\
    \  -- http://oeis.org/A000045#section=17\n  -- http://oeis.org/A000045#section=18\n\
    \  -- http://oeis.org/A000045#section=19\n  -- http://oeis.org/A000045#section=20\n\
    \  -- http://oeis.org/A000045#section=21\n  -- http://oeis.org/A000045#section=22\n\
    \  -- http://oeis.org/A000045#section=23\n  -- http://oeis.org/A000045#section=24\n\
    \  -- http://oeis.org/A000045#section=25\n  -- http://oeis.org/A000045#section=26\n\
    \  -- http://oeis.org/A000045#section=27\n  -- http://oeis.org/A000045#section=28\n\
    \  -- http://oeis.org/A000045#section=29\n  -- http://oeis.org/A000045#section=30\n\
    \  -- http://oeis.org/A000045#section=31\n  -- http://oeis.org/A000045#section=32\n\
    \  -- http://oeis.org/A000045#section=33\n  -- http://oeis.org/A000045#section=34\n\
    \  -- http://oeis.org/A000045#section=35\n  -- http://oeis.org/A000045#section=36\n\
    \  -- http://oeis.org/A000045#section=\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpstpjmw2a.lua:70: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd, so only need to check odd numbers.\n  if n % 2 == 1 then\n \
    \   return not is_prime((n - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is\
    \ even, so only need to check even numbers.\n  return not is_prime((n - 1) / 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4co7u5z.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu4co7u5z.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes. It is a\n  -- very\
    \ efficient algorithm for finding if a number is prime.\n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- The sieve is very easy to implement and requires only a single\n  -- pass\
    \ over the numbers. Here we use a sieve of Eratosthenes to\n  -- find out if a\
    \ number is prime.\n  -- The sieve is also very easy to understand and very efficient.\n\
    \  -- For this reason we use the sieve of Eratosthenes here.\n  -- The sieve is\
    \ very easy to implement and requires only a single\n  -- pass over the numbers.\n\
    \  -- The sieve is also very easy to understand and very efficient.\n  -- For\
    \ this reason we use the sieve of Eratosthenes here.\n  -- The sieve is very easy\
    \ to implement and requires only a single\n  -- pass over the numbers.\n  -- The\
    \ sieve is very easy to understand and very efficient.\n  -- For this reason we\
    \ use the sieve of Eratosthenes here.\n  -- The sieve is very easy to implement\
    \ and requires only a single\n  -- pass over the numbers.\n  -- The sieve is very\
    \ easy to understand and very efficient.\n  -- For this reason we use the sieve\
    \ of Eratosthenes here.\n  -- The sieve is very easy to implement and requires\
    \ only a single\n  -- pass over the numbers.\n  -- The sieve is very easy to understand\
    \ and very efficient.\n  -- For this reason we use the sieve of Eratosthenes here.\n\
    \  -- The sieve is very easy to implement and requires only a single\n  -- pass\
    \ over the numbers.\n  -- The sieve is very easy to understand and very efficient.\n\
    \  -- For this reason we use the sieve of Eratosthenes here.\n  -- The sieve is\
    \ very easy to implement and requires only a single\n  -- pass over the numbers.\n\
    \  -- The sieve is very easy to understand and very efficient.\n  -- For this\
    \ reason we use the sieve of Eratosthenes here.\n  -- The sieve is very easy to\
    \ implement and requires only a single\n  -- pass over the numbers.\n  -- The\
    \ sieve is very easy to understand and very efficient.\n  -- For this reason we\
    \ use the sieve of Eratosthenes here.\n  -- The sieve is very easy to implement\
    \ and requires only a single\n  -- pass over the numbers.\n  -- The sieve is very\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoyvohh74.lua:75: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ false end\n  if n == 5 then return false end\n  if n == 6 then return true end\n\
    \  if n == 7 then return false end\n  if n == 8 then return false end\n  if n\
    \ == 9 then return true end\n  if n == 10 or n == 11 or n == 12 or n == 13 or\
    \ n == 14 or n == 15 or n == 16 or n == 17 or n == 18 or n == 19 or n == 20 or\
    \ n == 21 or n == 22 or n == 23 or n == 24 or n == 25 or n == 26 or n == 27 or\
    \ n == 28 or n == 29 or n == 30 or n == 31 or n == 32 or n == 33 or n == 34 or\
    \ n == 35 or n == 36 or n == 37 or n == 38 or n == 39 or n == 40 or n == 41 or\
    \ n == 42 or n == 43 or n == 44 or n == 45 or n == 46 or n == 47 or n == 48 or\
    \ n == 49 or n == 50 or n == 51 or n == 52 or n == 53 or n == 54 or n == 55 or\
    \ n == 56 or n == 57 or n == 58 or n == 59 or n == 60 or n == 61 or n == 62 or\
    \ n == 63 or n == 64 or n == 65 or n == 66 or n == 67 or n == 68 or n == 69 or\
    \ n == 70 or n == 71 or n == 72 or n == 73 or n == 74 or n == 75 or n == 76 or\
    \ n == 77 or n == 78 or n == 79 or n == 80 or n == 81 or n == 82 or n == 83 or\
    \ n == 84 or n == 85 or n == 86 or n == 87 or n == 88 or n == 89 or n == 90 or\
    \ n == 91 or n == 92 or n == 93 or n == 94 and n == 95 then return false end\n\
    \  if n == 1 or n == 2 then return true end\n  if n == 3 then return false end\n\
    \  if n == 4 then return false end\n  if n == 5 then return false end\n  if n\
    \ == 6 then return false end\n  if n == 7 then return false end\n  if n == 8 then\
    \ return false end\n  if n == 9 then return false end\n  if n == 10 or n == 11\
    \ or n == 12 or n == 13 or n == 14 or n == 15 or n == 16 or n == 17 or n == 18\
    \ or n == 19 or n == 20 or n == 21 or n == 22 or n == 23 \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpddb8at1b.lua:43: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n % 2 ==\
    \ 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then\n    return false\n  end\n\
    \  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43w3yjiy.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp43w3yjiy.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(n/2)\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of a prime and another positive integer. \n  --\
    \ This makes the math easy. \n  -- The first prime number is 2. \n  -- The prime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97.\n  -- The sum of these two numbers is the original\
    \ number. \n  -- The first ten prime numbers are: 2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29.\n  -- By taking any two numbers greater than 1, we can get the sum of\
    \ their prime factors.\n  -- If we take 6 and 29, we get 51 and 39. \n  -- If\
    \ we take 10 and 29, we get 105 and 39. \n  -- If we take 13 and 29, we get 131\
    \ and 39. \n  -- If we take 17 and 29, we get 171 and 39. \n  -- If we take 19\
    \ and 29, we get 191 and 39. \n  -- If we take 23 and 29, we get 231 and 39. \n\
    \  -- If we take 29 and 29, we get 291 and 39. \n  -- If we take 31 and 29, we\
    \ get 311 and 39. \n  -- If we take 37 and 29, we get 371 and 39. \n  -- If we\
    \ take 41 and 29, we get 411 and 39. \n  -- If we take 43 and 29, we get 431 and\
    \ 39. \n  -- If we take 47 and 29, we get 471 and 39. \n  -- If we take 53 and\
    \ 29, we get 529 and 39. \n  -- If we take 59 and 29, we get 591 and 39. \n  --\
    \ If we take 61 and 29, we get 613 and 39. \n  -- If we take 67 and 29, we get\
    \ 671 and 39. \n  -- If we take 71 and 29, we get 711 and 39. \n  -- If we take\
    \ 73 and 29, we get 733 and 39. \n  -- If we take 79 and 29, we get 791 and 39.\
    \ \n  -- If we take 83 and 29, we get 831. \n  -- If we take 89 and 29, we get\
    \ 899. \n  -- If we take 97 and 29, we get 997. \n  -- If we take 101 and 29,\
    \ we get 1019. \n  -- If we take 11 and 29, we get 111. \n  -- If we take 13 and\
    \ 29, we get 131. \n  -- If we take 17 and 29, we get 171. \n  -- If we take 19\
    \ and 29, we get 191. \n  -- If we take 23 and 29, we get \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6a_v3og0.lua:71: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n %\
    \ 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if n\
    \ == 1 then return false end\n  if n == 0 then return false end\n  if n % 2 ==\
    \ 0 then return false end\n  if n % 3 == 0 then return false end\n  if n % 5 ==\
    \ 0 then return false end\n  if n % 7 == 0 then return false end\n  if n == 1\
    \ then return false end\n  if n == 0 then return false end\n  if n % 2 == 0 then\
    \ return false end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then\
    \ return false end\n  if n % 7 == 0 then return false end\n  if n == 1 then return\
    \ false end\n  if n == 0 then return false end\n  if n % 2 == 0 then return false\
    \ end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false\
    \ end\n  if n % 7 == 0 then return false end\n  if n == 1 then return false end\n\
    \  if n == 0 then return false end\n  if n % 2 == 0 then return false end\n  if\
    \ n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if\
    \ n % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n\
    \ == 0 then return false end\n  if n % 2 == 0 then return false end\n  if n %\
    \ 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if n\
    \ % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n ==\
    \ 0 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n == 1 then return false end\n  if n == 0 then\
    \ return false end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then\
    \ return false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then\
    \ return false end\n  if n == 1 then return false end\n  if n == 0 then return\
    \ false end\n  if n % 2 == 0 then return false end\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2jja806k.lua:75: 'then' expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  if n % 2 == 1 then\n    return not is_prime(n - 1)\n\
    \  end\n  -- Check odd and even numbers for primeness\n  if n % 3 == 0 then\n\
    \    return not is_prime(n - 2)\n  end\n  -- Check odd and even numbers for primeness\n\
    \  if n % 5 == 0 then\n    return not is_prime(n - 3)\n  end\n  -- Check odd and\
    \ even numbers for primeness\n  if n % 7 == 0 then\n    return not is_prime(n\
    \ - 4)\n  end\n  -- Check odd and even numbers for primeness\n  if n % 11 == 0\
    \ then\n    return not is_prime(n - 5)\n  end\n  -- Check odd and even numbers\
    \ for primeness\n  if n % 13 == 0 then\n    return not is_prime(n - 6)\n  end\n\
    \  -- Check odd and even numbers for primeness\n  if n % 17 == 0 then\n    return\
    \ not is_prime(n - 7)\n  end\n  -- Check odd and even numbers for primeness\n\
    \  if n % 19 == 0 then\n    return not is_prime(n - 8)\n  end\n  -- Check odd\
    \ and even numbers for primeness\n  if n % 23 == 0 then\n    return not is_prime(n\
    \ - 9)\n  end\n  -- Check odd and even numbers for primeness\n  if n % 29 == 0\
    \ then\n    return not is_prime(n - 10)\n  end\n  -- Check odd and even numbers\
    \ for primeness\n  if n % 31 == 0 then\n    return not is_prime(n - 11)\n  end\n\
    \  -- Check odd and even numbers for primeness\n  if n % 37 == 0 then\n    return\
    \ not is_prime(n - 12)\n  end\n  -- Check odd and even numbers for primeness\n\
    \  if n % 41 == 0 then\n    return not is_prime(n - 13)\n  end\n  -- Check odd\
    \ and even numbers for primeness\n  if n % 47 == 0 then\n    return not is_prime(n\
    \ - 14)\n  end\n  -- Check odd and even numbers for primeness\n  if n % 53 ==\
    \ 0 then\n    return not is_prime(n - 15)\n  end\n  -- Check odd and even numbers\
    \ for primeness\n  if n % 59 == 0 then\n    return not is_prime(n - 16)\n  end\n\
    \  -- Check \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpabolk8cy.lua:110: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Primality Test\n  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial\
    \ division test\n  -- If n is even, then (n-1)/2 is even, and (n-1)/2+1 is not\
    \ even.\n  -- If n is odd, then (n-1)/2 is odd, and (n-1)/2+1 is not odd.\n  --\
    \ The only exception is n = 1, which is even.\n  -- Therefore, we can use (n-1)/2+1\
    \ to test primality\n  -- by incrementing n by 1 until it reaches n.\n  -- If\
    \ n is even, then the loop will stop before we reach n.\n  -- If n is odd, then\
    \ the loop will stop before we reach n.\n  -- If n is 1, then the loop will stop\
    \ before we reach n.\n  -- If n is even, then the loop will stop before we reach\
    \ n.\n  -- If n is odd, then the loop will stop before we reach n.\n  -- If n\
    \ is 1, then the loop will stop before we reach n.\n  -- If n is even, then the\
    \ loop will stop before we reach n.\n  -- If n is odd, then the loop will stop\
    \ before we reach n.\n  -- If n is 1, then the loop will stop before we reach\
    \ n.\n  -- If n is even, then the loop will stop before we reach n.\n  -- If n\
    \ is odd, then the loop will stop before we reach n.\n  -- If n is 1, then the\
    \ loop will stop before we reach n.\n  -- If n is even, then the loop will stop\
    \ before we reach n.\n  -- If n is odd, then the loop will stop before we reach\
    \ n.\n  -- If n is 1, then the loop will stop before we reach n.\n  -- If n is\
    \ even, then the loop will stop before we reach n.\n  -- If n is odd, then the\
    \ loop will stop before we reach n.\n  -- If n is 1, then the loop will stop before\
    \ we reach n.\n  -- If n is even, then the loop will stop before we reach n.\n\
    \  -- If n is odd, then the loop will stop before we reach n.\n  -- If n is 1,\
    \ then the loop will stop before we reach n.\n  -- If n is even, then the loop\
    \ will stop before we reach n.\n  -- If n is odd, then the loop will stop before\
    \ we reach n.\n  -- If n is 1, then the loop will stop before we reach n.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk4wvhuz5.lua:76: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfsst8mjk.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://oeis.org/A001490\n  -- http://oeis.org/A001492\n  -- http://oeis.org/A001493\n\
    \  -- http://oeis.org/A001494\n  -- http://oeis.org/A001495\n  -- http://oeis.org/A001496\n\
    \  -- http://oeis.org/A001497\n  -- http://oeis.org/A001498\n  -- http://oeis.org/A001499\n\
    \  -- http://oeis.org/A001500\n  -- http://oeis.org/A001501\n  -- http://oeis.org/A001502\n\
    \  -- http://oeis.org/A001503\n  -- http://oeis.org/A001504\n  -- http://oeis.org/A001505\n\
    \  -- http://oeis.org/A001506\n  -- http://oeis.org/A001507\n  -- http://oeis.org/A001508\n\
    \  -- http://oeis.org/A001509\n  -- http://oeis.org/A001510\n  -- http://oeis.org/A001511\n\
    \  -- http://oeis.org/A001512\n  -- http://oeis.org/A001513\n  -- http://oeis.org/A001514\n\
    \  -- http://oeis.org/A001515\n  -- http://oeis.org/A001516\n  -- http://oeis.org/A001517\n\
    \  -- http://oeis.org/A001518\n  -- http://oeis.org/A001519\n  -- http://oeis.org/A001520\n\
    \  -- http://oeis.org/A001521\n  -- http://oeis.org/A001522\n  -- http://oeis.org/A001523\n\
    \  -- http://oeis.org/A001524\n  -- http://oeis.org/A001525\n  -- http://oeis.org/A001526\n\
    \  -- http://oeis.org/A001527\n  -- http://oeis.org/A001528\n  -- http://oeis.org/A001529\n\
    \  -- http://oeis.org/A00\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk1drmx2c.lua:78: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test for divisibility\
    \ by all prime factors.\n  -- This should terminate quickly.\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo7t786em.lua:71: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd and n is prime.\n  if n % 2 == 1 then\n    return not is_prime((n\
    \ - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is even, and n is prime.\n\
    \  return not is_prime((n - 1) / 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qc45jjx.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0qc45jjx.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://oeis.org/A000045\n  -- http://oeis.org/A000045#section=7\n  -- http://oeis.org/A000045#section=8\n\
    \  -- http://oeis.org/A000045#section=9\n  -- http://oeis.org/A000045#section=10\n\
    \  -- http://oeis.org/A000045#section=11\n  -- http://oeis.org/A000045#section=12\n\
    \  -- http://oeis.org/A000045#section=13\n  -- http://oeis.org/A000045#section=14\n\
    \  -- http://oeis.org/A000045#section=15\n  -- http://oeis.org/A000045#section=16\n\
    \  -- http://oeis.org/A000045#section=17\n  -- http://oeis.org/A000045#section=18\n\
    \  -- http://oeis.org/A000045#section=19\n  -- http://oeis.org/A000045#section=20\n\
    \  -- http://oeis.org/A000045#section=21\n  -- http://oeis.org/A000045#section=22\n\
    \  -- http://oeis.org/A000045#section=23\n  -- http://oeis.org/A000045#section=24\n\
    \  -- http://oeis.org/A000045#section=25\n  -- http://oeis.org/A000045#section=26\n\
    \  -- http://oeis.org/A000045#section=27\n  -- http://oeis.org/A000045#section=28\n\
    \  -- http://oeis.org/A000045#section=29\n  -- http://oeis.org/A000045#section=30\n\
    \  -- http://oeis.org/A000045#section=31\n  -- http://oeis.org/A000045#section=32\n\
    \  -- http://oeis.org/A000045#section=33\n  -- http://oeis.org/A000045#section=34\n\
    \  -- http://oeis.org/A000045#section=35\n  -- http://oeis.org/A000045#section=36\n\
    \  -- http://oeis.org/A000045#section=37\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp99l8cc_n.lua:70: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpci4rtn5o.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n ==\
    \ 2 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 169 == 0 then return false\
    \ end\n  if n % 173 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 185 == 0 then return\
    \ false end\n  if n % 189 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmd16slql.lua:88: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n ==\
    \ 2 then return false end\n  if n % 2 == 0 then return false end\n  for i=3,math.floor(n/2),2\
    \ do\n    if n % i == 0 then return false end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  -- Check odd-even primality of n\n  local function is_even_prime(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_prime_fast(n)\n    if n < 2 then\n      return false\n\
    \    end\n    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Check odd-even primality of n\n  local function\
    \ is_prime_fast(n)\n    if n < 2 then\n      return false\n    end\n    if n ==\
    \ 2 then\n      return true\n    end\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return false\n      end\n      i = i + 2\n    end\n    return true\n\
    \  end\n  -- Check odd-even primality of n\n  local function is_prime_fast(n)\n\
    \    if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  -- Check odd-even\
    \ primality of n\n  local function is_prime_fast(n)\n    if n < 2 then\n     \
    \ return false\n    end\n    if n == 2 then\n      return true\n    end\n    if\
    \ n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while i *\
    \ i <= n do\n      if n % i == 0 then\n        return false\n      end\n     \
    \ i = i + 2\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9dsp518m.lua:153: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of a prime and a single non-positive integer.\
    \ \n  -- This conclusion means that any positive integer greater than 1 is either\
    \ prime or can be expressed as the sum of two primes.\n  -- The first prime is\
    \ 2, and the first non-positive integer greater than 2 is 3.\n  -- The second\
    \ prime is 3, and the second non-positive integer greater than 3 is 5.\n  -- Therefore,\
    \ any integer greater than 1 can be expressed as the sum of two primes.\n  --\
    \ The first prime is 2, and the first non-positive integer greater than 2 is 3.\n\
    \  -- The second prime is 3, and the second non-positive integer greater than\
    \ 3 is 5.\n  -- Therefore, any integer greater than 1 can be expressed as the\
    \ sum of two primes.\n  -- The first prime is 2, and the first non-positive integer\
    \ greater than 2 is 3.\n  -- The second prime is 3, and the second non-positive\
    \ integer greater than 3 is 5.\n  -- Therefore, any integer greater than 1 can\
    \ be expressed as the sum of two primes.\n  -- The first prime is 2, and the first\
    \ non-positive integer greater than 2 is 3.\n  -- The second prime is 3, and the\
    \ second non-positive integer greater than 3 is 5.\n  -- Therefore, any integer\
    \ greater than 1 can be expressed as the sum of two primes.\n  -- The first prime\
    \ is 2, and the first non-positive integer greater than 2 is 3.\n  -- The second\
    \ prime is 3, and the second non-positive integer greater than 3 is 5.\n  -- Therefore,\
    \ any integer greater than 1 can be expressed as the sum of two primes.\n  --\
    \ The first prime is 2, and the first non-positive integer greater than 2 is 3.\n\
    \  -- The second prime is 3, and the second non-positive integer greater than\
    \ 3 is 5.\n  -- Therefore, any integer greater than 1 can be expressed as the\
    \ sum of two primes.\n  -- The first prime is 2, and the first non-positive integer\
    \ greater than 2 is 3.\n  -- The second prime is 3, and the second non-positive\
    \ integer greater than 3 is 5.\n  -- Therefore, any integer greater than 1 can\
    \ be expressed as the sum of two primes.\n  -- The first prime is 2, and the first\
    \ non-positive integer greater than 2 is 3.\n  -- The second prime is 3, and the\
    \ second non-positive integer greater than 3 is 5.\n  -- Therefore, any integer\
    \ greater than 1 can be expressed as the sum of two primes.\n  -- The first prime\
    \ is 2, and the first non-positive integer greater than 2 is 3.\n  -- The second\
    \ prime is 3, and the second non-positive integer greater than 3 is 5.\n  -- Therefore,\
    \ any integer greater than 1 \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7gzd688j.lua:65: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997\n    do\n      if n % i == 0 then return false end\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpco21344k.lua:24: 'do' expected near ','\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_even(n)\n    return n % 2 ==\
    \ 0 and n % 4 ~= 0\n  end\n  -- Check odd and even numbers for primeness\n  local\
    \ function is_odd_prime(n)\n    return n % 2 == 0 and n % 4 ~= 0 and n % 6 ==\
    \ 0\n  end\n  -- Check odd and even numbers for primeness\n  local function is_even_prime(n)\n\
    \    return n % 2 == 0 and n % 4 == 0\n  end\n  -- Check odd and even numbers\
    \ for primeness\n  local function is_odd_prime_even(n)\n    return n % 2 == 0\
    \ and n % 4 == 0 and n % 6 == 0\n  end\n  -- Check odd and even numbers for primeness\n\
    \  local function is_even_prime_even(n)\n    return n % 2 == 0 and n % 4 == 0\
    \ and n % 6 == 0\n  end\n  -- Check odd and even numbers for primeness\n  local\
    \ function is_odd_prime_odd_even(n)\n    return n % 2 == 0 and n % 4 == 0 and\
    \ n % 6 == 0 and n % 8 == 0\n  end\n  -- Check odd and even numbers for primeness\n\
    \  local function is_even_prime_odd_even(n)\n    return n % 2 == 0 and n % 4 ==\
    \ 0 and n % 6 == 0 and n % 8 == 0\n  end\n  -- Check odd and even numbers for\
    \ primeness\n  local function is_odd_prime_even_even(n)\n    return n % 2 == 0\
    \ and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_even_prime_even_even(n)\n    return\
    \ n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0\n  end\n  -- Check odd\
    \ and even numbers for primeness\n  local function is_odd_prime_odd_even(n)\n\
    \    return n % 2 == 0 and n % 4 == 0 and n % 6 == 0 and n % 8 == 0 and n % 10\
    \ == 0\n  end\n  -- Check odd and even numbers for primeness\n  local function\
    \ is_even_prime_odd_even(n)\n    return n % 2 == 0 and n % 4 == 0 and n % 6 ==\
    \ 0 and n % 8 == 0 and n % 10 == 0\n  end\n  -- Check odd and even numbers for\
    \ primeness\n  local function is_odd_prime_even_even(n)\n    return n % 2 == 0\
    \ and \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyabepyip.lua:73: 'end' expected (to close 'function' at line\
    \ 71) near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Primality test. Based on http://en.wikipedia.org/wiki/Primality_test\n \
    \ -- >>> is_prime(6)\n  -- False\n  -- >>> is_prime(101)\n  -- True\n  -- >>>\
    \ is_prime(11)\n  -- True\n  -- >>> is_prime(13441)\n  -- True\n  -- >>> is_prime(61)\n\
    \  -- True\n  -- >>> is_prime(4)\n  -- False\n  -- >>> is_prime(1)\n  -- False\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test for primality\
    \ up to sqrt of n\n  -- (only odd numbers are prime here)\n  local function is_odd(n)\n\
    \    return not n % 2\n  end\n  local i = 3\n  while i <= math.sqrt(n) do\n  \
    \  if is_odd(n) then\n      -- Skip even numbers\n      i = i + 1\n    else\n\
    \      -- Found a prime\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulqy1rmn.lua:44:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpulqy1rmn.lua:48:\
    \ in function 'candidate'\n\t/tmp/tmpulqy1rmn.lua:63: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  -- If n is odd, then it is divisible by all odd numbers.\n  -- If n is even,\
    \ then it is divisible by all even numbers.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 2 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 2 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 2 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 2 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 2 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is prime.\n  -- If n is divisible by all numbers\
    \ from 1 to sqrt(n), then it is not prime.\n  -- If n is divisible by all numbers\
    \ from 3 to sqrt(n), then it is prime.\n  -- If n is divisible by all number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo5v2p30j.lua:70: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers.\n  -- http://en.wikipedia.org/wiki/Prime_number\n\
    \  -- The first prime number is named Sieve of Eratosthenes and is a prime number\
    \ if and only if its only divisors are 1 and itself.\n  -- The second prime number\
    \ is named Sieve of Atkin's algorithm and is a prime number if and only if its\
    \ only divisors are 1 and itself.\n  -- The third prime number is named Sieve\
    \ of Erathosthenes and is a prime number if and only if its only divisors are\
    \ 1 and itself.\n  -- The fourth prime number is named Sieve of Atkin's algorithm\
    \ and is a prime number if and only if its only divisors are 1 and itself.\n \
    \ -- The fifth prime number is named Sieve of Ramanujan and is a prime number\
    \ if and only if its only divisors are 1 and itself.\n  -- The sixth prime number\
    \ is named Sieve of Ramanujan and is a prime number if and only if its only divisors\
    \ are 1 and itself.\n  -- The seventh prime number is named Sieve of Ramanujan\
    \ and is a prime number if and only if its only divisors are 1 and itself.\n \
    \ -- The eighth prime number is named Sieve of Ramanujan and is a prime number\
    \ if and only if its only divisors are 1 and itself.\n  -- The ninth prime number\
    \ is named Sieve of Ramanujan and is a prime number if and only if its only divisors\
    \ are 1 and itself.\n  -- The tenth prime number is named Sieve of Ramanujan and\
    \ is a prime number if and only if its only divisors are 1 and itself.\n  -- The\
    \ eleventh prime number is named Sieve of Ramanujan and is a prime number if and\
    \ only if its only divisors are 1 and itself.\n  -- The twelfth prime number is\
    \ named Sieve of Ramanujan and is a prime number if and only if its only divisors\
    \ are 1 and itself.\n  -- The thirteenth prime number is named Sieve of Ramanujan\
    \ and is a prime number if and only if its only divisors are 1 and itself.\n \
    \ -- The fourteenth prime number is named Sieve of Ramanujan and is a prime number\
    \ if and only if its only divisors are 1 and itself.\n  -- The fifteenth prime\
    \ number is named Sieve of Ramanujan and is a prime number if and only if its\
    \ only divisors are 1 and itself.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphdwutwrn.lua:53: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Primality test\n  if n < 2 then\n    return false\n  end\n  -- Trial division\
    \ test\n  if n == 2 then\n    return true\n  end\n  -- Sieve of Eratosthenes\n\
    \  local function sieve(primes, n)\n    local i\n    for i = 2, n do\n      primes[i]\
    \ = true\n    end\n    for i = 2, n do\n      if primes[i] then\n        for j\
    \ = i * i, primes, i do\n          primes[j] = false\n        end\n      end\n\
    \    end\n  end\n  -- Sieve of Eratosthenes\n  sieve({}, n)\n  -- Test if n is\
    \ prime\n  return primes[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneaooioo.lua:33:\
    \ 'for' limit must be a number\nstack traceback:\n\t/tmp/tmpneaooioo.lua:40: in\
    \ function 'candidate'\n\t/tmp/tmpneaooioo.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i=3,math.floor(n/2),2\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Primality test for the first few numbers: 2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29\n  -- See http://en.wikipedia.org/wiki/Primality_test\n  -- The number must\
    \ be greater than 1.\n  if n < 2 then\n    return false\n  end\n  if n == 1 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers separately.\n  if n % 3 == 0 then\n    return false\n \
    \ end\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check all the numbers\
    \ in the range from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) + 1,\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps50myuqy.lua:55:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps50myuqy.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are the only ones that\n  -- have all prime factors other\
    \ than 1 and themselves.\n  if n % 3 == 0 then\n    return false\n  end\n  if\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check all the numbers from 3\
    \ to n / 2 since they are the only ones\n  -- that have all prime factors other\
    \ than 1 and themselves.\n  for i = 4, n / 2 do\n    if n % i == 0 then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplznt1_sl.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplznt1_sl.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime can be factored\
    \ into exactly 1 positive integer and 1 negative integer. For example, 6 is prime\
    \ since it can be factored into 1, 2, and 3, and 12 is prime since it can be factored\
    \ into 1, 2, 3, and 4.\n  -- http://en.wikipedia.org/wiki/Prime_number\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/lists/small/100033.txt\n  -- http://primes.utm.edu/lists/small/100034.txt\n\
    \  -- http://prime\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeefuea2g.lua:66: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ candidate.\n  for i = 3, n, 2 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uas4sox.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_uas4sox.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers. \n  -- This theorem states\
    \ that every positive integer greater than 1 can be expressed as the sum of two\
    \ prime numbers. \n  -- This theorem states that every positive integer greater\
    \ than 1 can be expressed as the sum of two prime numbers. \n  -- This theorem\
    \ states that every positive integer greater than 1 can be expressed as the sum\
    \ of two prime numbers. \n  -- This theorem states that every positive integer\
    \ greater than 1 can be expressed as the sum of two prime numbers. \n  -- This\
    \ theorem states that every positive integer greater than 1 can be expressed as\
    \ the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This theorem states that every positive\
    \ integer greater than 1 can be expressed as the sum of two prime numbers. \n\
    \  -- This theorem states that every positive integer greater than 1 can be expressed\
    \ as the sum of two prime numbers. \n  -- This the\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpt311j9k4.lua:59: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd, so only need to check odd numbers.\n  if n % 2 == 1 then\n \
    \   return not is_prime((n - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is\
    \ even, so only need to check even numbers.\n  return not is_prime((n - 1) / 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob4drk2r.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpob4drk2r.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Primality test\n  if n < 2 then return false end\n  if n == 1 then return\
    \ true end\n  if n == 2 then return false end\n  if n % 2 == 0 then return false\
    \ end\n  -- Check odd-even test\n  if n % 2 == 1 then return false end\n  -- Check\
    \ odd-even test\n  if n % 3 == 0 then return false end\n  -- Check odd-even test\n\
    \  if n % 5 == 0 then return false end\n  -- Check odd-even test\n  if n % 7 ==\
    \ 0 then return false end\n  -- Check odd-even test\n  if n % 11 == 0 then return\
    \ false end\n  -- Check odd-even test\n  if n % 13 == 0 then return false end\n\
    \  -- Check odd-even test\n  if n % 17 == 0 then return false end\n  -- Check\
    \ odd-even test\n  if n % 19 == 0 then return false end\n  -- Check odd-even test\n\
    \  if n % 23 == 0 then return false end\n  -- Check odd-even test\n  if n % 29\
    \ == 0 then return false end\n  -- Check odd-even test\n  if n % 31 == 0 then\
    \ return false end\n  -- Check odd-even test\n  if n % 37 == 0 then return false\
    \ end\n  -- Check odd-even test\n  if n % 41 == 0 then return false end\n  --\
    \ Check odd-even test\n  if n % 43 == 0 then return false end\n  -- Check odd-even\
    \ test\n  if n % 47 == 0 then return false end\n  -- Check odd-even test\n  if\
    \ n % 53 == 0 then return false end\n  -- Check odd-even test\n  if n % 59 ==\
    \ 0 then return false end\n  -- Check odd-even test\n  if n % 61 == 0 then return\
    \ false end\n  -- Check odd-even test\n  if n % 67 == 0 then return false end\n\
    \  -- Check odd-even test\n  if n % 71 == 0 then return false end\n  -- Check\
    \ odd-even test\n  if n % 73 == 0 then return false end\n  -- Check odd-even test\n\
    \  if n % 79 == 0 then return false end\n  -- Check odd-even test\n  if n % 83\
    \ == 0 then return false end\n  -- Check odd-even test\n  if n % 89 == 0 then\
    \ return false end\n  -- Check odd-even test\n  if n % 97 == 0 then return false\
    \ end\n  -- Check odd-even test\n  if n % 101 == 0 then return false end\n  --\
    \ Check odd-even \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgwuuv4jr.lua:94: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jtakvrh.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8jtakvrh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n <= 30 or n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 then\n    return\
    \ false\n  end\n  for i = 5, 7, 9 do\n    if n % i == 0 then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpuk7ojl.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphpuk7ojl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  -- Check odd and even numbers since they are\
    \ prime by definition.\n  if n % 3 == 0 then return false end\n  if n % 5 == 0\
    \ then return false end\n  -- Check all the numbers in the range from 3 to n /\
    \ 2.\n  for i = 4, math.floor(n/2), 2 do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxisq3iw3.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxisq3iw3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even number\n\
    \  if n % 2 == 1 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd-odd\
    \ number\n  local m = math.floor(n/2)\n  return not is_prime(m - 1) and not is_prime(m)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjkw1s1e.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnjkw1s1e.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 then\n    return true\n  end\n\
    \  if n == 1 or n == 0 then\n    return false\n  end\n  if n % 2 == 0 and n %\
    \ 3 == 0 and n % 5 == 0 and n % 7 == 1 then\n    return true\n  end\n  if n %\
    \ 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 3 then\n  \
    \  return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7\
    \ == 4 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5\
    \ == 0 and n % 7 == 5 then\n    return true\n  end\n  if n % 2 == 0 and n % 3\
    \ == 0 and n % 5 == 0 and n % 7 == 6 then\n    return true\n  end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 7 then\n    return true\n  end\n\
    \  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 8 then\n    return\
    \ true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 9 then\n\
    \    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 10 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n %\
    \ 5 == 0 and n % 7 == 11 then\n    return true\n  end\n  if n % 2 == 0 and n %\
    \ 3 == 0 and n % 5 == 0 and n % 7 == 12 then\n    return true\n  end\n  if n %\
    \ 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 13 then\n    return true\n\
    \  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 14 then\n \
    \   return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n %\
    \ 7 == 15 then\n    return true\n  end\n  if n % 2 == 0 and n % 3 == 0 and n %\
    \ 5 == 0 and n % 7 == 16 then\n    return true\n  end\n  if n % 2 == 0 and n %\
    \ 3 == 0 and n % 5 == 0 and n % 7 == 17 then\n    return true\n  end\n  if n %\
    \ 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 18 then\n    return true\n\
    \  end\n  if n % 2 == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 19 then\n \
    \   return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6humwdoh.lua:107: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even number\n\
    \  if n % 2 == 1 then\n    return false\n  end\n  -- Check odd-even number\n \
    \ if n % 3 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n\
    \ % 7 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 11 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 13 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 17 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 19 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 23 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 29 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 31 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 37 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 41 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 43 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 47 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 53 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 59 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 61 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 67 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 71 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 73 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 79 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 83 == 0 then\n    return false\n  end\n  -- Check odd-even number\n  if n %\
    \ 89 == 0 then\n    return false\n  end\n  -- Check \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr6f5aoqs.lua:142: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq7sez3xr.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100012.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100021.txt\n  -- http://primes.utm.edu/lists/small/100022.txt\n\
    \  -- http://primes.utm.edu/lists/small/100023.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100030.txt\n\
    \  -- http://primes.utm.edu/lists/small/100031.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu7skzk0_.lua:69: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 113 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 129 == 0\
    \ then return false end\n  if n % 131 == 0 then return false end\n  if n % 133\
    \ == 0 then return false end\n  if n % 137 == 0 then return false end\n  if n\
    \ % 139 == 0 then return false end\n  if n % 141 == 0 then return false end\n\
    \  if n % 143 == 0 then return false end\n  if n % 147 == 0 then return \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz16h52cz.lua:71: 'end' expected (to close 'if' at line 70)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 and itself is prime is called a\
    \ prime.\n  -- Source: Wikipedia\n  -- >>> is_prime(6)\n  -- False\n  -- >>> is_prime(101)\n\
    \  -- True\n  -- >>> is_prime(11)\n  -- True\n  -- >>> is_prime(13441)\n  -- True\n\
    \  -- >>> is_prime(61)\n  -- True\n  -- >>> is_prime(4)\n  -- False\n  -- >>>\
    \ is_prime(1)\n  -- False\n  if n < 2 then\n    return false\n  end\n  -- The\
    \ first few prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  -- Source: Wikipedia\n  --\
    \ >>> is_prime(6)\n  -- False\n  -- >>> is_prime(101)\n  -- True\n  -- >>> is_prime(11)\n\
    \  -- True\n  -- >>> is_prime(13441)\n  -- True\n  -- >>> is_prime(61)\n  -- True\n\
    \  -- >>> is_prime(4)\n  -- False\n  -- >>> is_prime(1)\n  -- False\n  local function\
    \ is_prime(n)\n    if n < 2 then\n      return false\n    end\n    local function\
    \ is_prime(n)\n      -- The prime number theorem states that every positive integer\
    \ greater than 1 that has no positive divisors other than 1 and itself is prime\
    \ is called a prime.\n      -- Source: Wikipedia\n      if n < 2 then\n      \
    \  return false\n      end\n      -- The first few prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97.\n      -- Source: Wikipedia\n      if n < 2 then\n        return false\n\
    \      end\n      local function is_prime(n)\n        if n < 2 then\n        \
    \  return false\n        end\n        local function is_prime(n)\n          if\
    \ n < 2 then\n            return false\n          end\n          local function\
    \ is_prime(n)\n            if n < 2 then\n              return false\n       \
    \     end\n            local function is_prime(n)\n              if n < 2 then\n\
    \                return false\n              end\n              local function\
    \ is_prime(n)\n                if n < 2 then\n                  return false\n\
    \                end\n                local function is_prime(n)\n           \
    \       if n < 2 then\n                    return false\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwwcs_wsi.lua:91: 'end' expected (to close 'if' at line 88)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  local i = 1\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjdblk38.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptjdblk38.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 169 == 0 then return false\
    \ end\n  if n % 173 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 185 == 0 then return\
    \ false end\n  if n % 189 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps7do0mim.lua:88: 'end' expected (to close 'if' at line 68)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime test is taken from http://en.wikipedia.org/wiki/Primality_test\n\
    \  -- The test is simple and very fast.\n  -- The only possible failure mode is\
    \ for n = 0 or 1.\n  -- In that case we return immediately.\n  if n == 0 then\
    \ return false end\n  if n == 1 then return true end\n  -- Test for divisibility\
    \ by 2, 3, 5, and 7.\n  for i = 2, n do\n    if n % i == 0 then return false end\n\
    \  end\n  -- If we get here, n has no factors.\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp104p3bgg.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp104p3bgg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Check odd numbers for primeness\n  if is_odd_prime(n)\
    \ then\n    return false\n  end\n  -- Check even numbers for primeness\n  local\
    \ i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return false\n \
    \   end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sv7da7x.lua:59:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4sv7da7x.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 12 == 0 then return false end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduoa5gxq.lua:59:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpduoa5gxq.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps_tdepyl.lua:71: 'end' expected (to close 'if' at line 70)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 215 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5uiqeips.lua:69: 'end' expected (to close 'if' at line 68)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of two prime numbers.\n  -- The first prime number\
    \ is named p and is defined as the product of two prime numbers.\n  -- The second\
    \ prime number is named q and is defined as the product of the prime factors of\
    \ n.\n  -- The smallest prime number greater than 1 is named n and can be expressed\
    \ as the product of prime numbers.\n  -- The smallest prime number greater than\
    \ 1 is named n and can be expressed as the product of prime numbers.\n  -- The\
    \ smallest prime number greater than 1 is named n and can be expressed as the\
    \ product of prime numbers.\n  -- The smallest prime number greater than 1 is\
    \ named n and can be expressed as the product of prime numbers.\n  -- The smallest\
    \ prime number greater than 1 is named n and can be expressed as the product of\
    \ prime numbers.\n  -- The smallest prime number greater than 1 is named n and\
    \ can be expressed as the product of prime numbers.\n  -- The smallest prime number\
    \ greater than 1 is named n and can be expressed as the product of prime numbers.\n\
    \  -- The smallest prime number greater than 1 is named n and can be expressed\
    \ as the product of prime numbers.\n  -- The smallest prime number greater than\
    \ 1 is named n and can be expressed as the product of prime numbers.\n  -- The\
    \ smallest prime number greater than 1 is named n and can be expressed as the\
    \ product of prime numbers.\n  -- The smallest prime number greater than 1 is\
    \ named n and can be expressed as the product of prime numbers.\n  -- The smallest\
    \ prime number greater than 1 is named n and can be expressed as the product of\
    \ prime numbers.\n  -- The smallest prime number greater than 1 is named n and\
    \ can be expressed as the product of prime numbers.\n  -- The smallest prime number\
    \ greater than 1 is named n and can be expressed as the product of prime numbers.\n\
    \  -- The smallest prime number greater than 1 is named n and can be expressed\
    \ as the product of prime numbers.\n  -- The smallest prime number greater than\
    \ 1 is named n and can be expressed as the product of prime numbers.\n  -- The\
    \ smallest prime number greater than 1 is named n and can be expressed as the\
    \ product of prime numbers.\n  -- The smallest prime number greater than 1 is\
    \ named n and can be expressed as the product of prime numbers.\n  -- The smallest\
    \ prime number greater than 1 is named n and can be expressed as the product of\
    \ prime numbers.\n  -- The smallest prime number greater than 1 is named n and\
    \ can be expressed as the product of prime numbers.\n  -- The smallest prime number\
    \ greater than 1 is named n and can be expressed as the product of prime numbers.\n\
    \  -- The smallest prime number greater than 1 is named n and can be expressed\
    \ as the product of prime numbers.\n  -- The smallest prime number greater than\
    \ 1 is named n and can be expres\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprq83oe3t.lua:62: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp07m5jrt9.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_even(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local function is_odd(n)\n      if n % 2 ==\
    \ 0 then\n        return false\n      end\n      local function is_even(n)\n \
    \       if n % 2 == 0 then\n          return false\n        end\n        return\
    \ true\n      end\n      return is_even(n * 2)\n    end\n    return is_odd(n *\
    \ 2)\n  end\n  return is_odd_even(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6qgv6bt.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg6qgv6bt.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ false end\n  if n == 5 then return false end\n  if n == 6 then return true end\n\
    \  if n == 7 then return false end\n  if n == 8 then return false end\n  if n\
    \ == 9 then return true end\n  if n == 10 or n == 11 or n == 12 or n == 13 or\
    \ n == 14 or n == 15 or n == 16 or n == 17 or n == 18 or n == 19 or n == 20 or\
    \ n == 21 then return false end\n  if n == 22 or n == 23 or n == 24 or n == 25\
    \ or n == 26 or n == 27 or n == 28 or n == 29 or n == 30 or n == 31 or n == 32\
    \ or n == 33 or n == 34 or n == 35 or n == 36 or n == 37 or n == 38 or n == 39\
    \ or n == 40 or n == 41 or n == 42 or n == 43 or n == 44 or n == 45 or n == 46\
    \ or n == 47 or n == 48 or n == 49 or n == 50 or n == 51 or n == 52 or n == 53\
    \ or n == 54 or n == 55 or n == 56 or n == 57 or n == 58 or n == 59 or n == 60\
    \ or n == 61 or n == 62 or n == 63 or n == 64 or n == 65 or n == 66 or n == 67\
    \ or n == 68 or n == 69 or n == 70 or n == 71 or n == 72 or n == 73 or n == 74\
    \ or n == 75 or n == 76 or n == 77 or n == 78 or n == 79 or n == 80 or n == 81\
    \ or n == 82 or n == 83 or n == 84 or n == 85 or n == 86 or n == 87 or n == 88\
    \ or n == 89 or n == 90 or n == 91 or n == 92 or n == 93 or n == 94 and n == 95\
    \ then return false end\n  if n == 96 or n == 97 or n == 98 or n == 99 or n ==\
    \ 101 or n == 102 or n == 103 or n == 104 or n == 105 or n == 106 or n == 107\
    \ or n == 108 or n == 109 or n == 111 or n == 112 or n == 113 or n == 114 or n\
    \ == 115 or n == 116 or n == 117 or n == 118 or n == 119 or n == 121 or n == 122\
    \ or n == 123 or n == 124 or n == 125 then return false end\n  if n == 126 then\
    \ return true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp23y0mkxq.lua:57: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 123 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return\
    \ false end\n  if n % 169 == 0 then return false \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplkvrt698.lua:71: 'end' expected (to close 'if' at line 70)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return true end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 1 then return false end\n  if n % 13\
    \ == 1 then return false end\n  if n % 17 == 1 then return false end\n  if n %\
    \ 19 == 1 then return false end\n  if n % 23 == 1 then return false end\n  if\
    \ n % 29 == 1 then return false end\n  if n % 31 == 1 then return false end\n\
    \  if n % 37 == 1 then return false end\n  if n % 41 == 1 then return false end\n\
    \  if n % 43 == 1 then return false end\n  if n % 47 == 1 then return false end\n\
    \  if n % 53 == 1 then return false end\n  if n % 59 == 1 then return false end\n\
    \  if n % 63 ~= 1 then return false end\n  if n % 67 ~= 1 then return false end\n\
    \  if n % 71 ~= 1 then return false end\n  if n % 73 ~= 1 then return false end\n\
    \  if n % 79 ~= 1 then return false end\n  if n % 83 ~= 1 then return false end\n\
    \  if n % 87 ~= 1 then return false end\n  if n % 91 ~= 1 then return false end\n\
    \  if n % 97 ~= 1 then return false end\n  if n % 103 ~= 1 then return false end\n\
    \  if n % 105 ~= 1 then return false end\n  if n % 111 ~= 1 then return false\
    \ end\n  if n % 117 ~= 1 then return false end\n  if n % 123 ~= 1 then return\
    \ false end\n  if n % 127 ~= 1 then return false end\n  if n % 131 ~= 1 then return\
    \ false end\n  if n % 137 ~= 1 then return false end\n  if n % 143 ~= 1 then return\
    \ false end\n  if n % 147 ~= 1 then return false end\n  if n % 151 ~= 1 then return\
    \ false end\n  if n % 157 ~= 1 then return false end\n  if n % 163 ~= 1 \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpngrl67a0.lua:68: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  -- If n is even, then it's prime.\n  -- If n is odd, then it's composite.\n\
    \  -- If n is divisible by 2, then it's prime.\n  -- If n is divisible by 3, then\
    \ it's composite.\n  -- If n is divisible by 5, then it's prime.\n  -- If n is\
    \ divisible by 7, then it's composite.\n  -- If n is divisible by 11, then it's\
    \ prime.\n  -- If n is divisible by 13, then it's composite.\n  -- If n is divisible\
    \ by 17, then it's prime.\n  -- If n is divisible by 19, then it's composite.\n\
    \  -- If n is divisible by 23, then it's prime.\n  -- If n is divisible by 29,\
    \ then it's composite.\n  -- If n is divisible by 31, then it's prime.\n  -- If\
    \ n is divisible by 37, then it's composite.\n  -- If n is divisible by 41, then\
    \ it's prime.\n  -- If n is divisible by 43, then it's composite.\n  -- If n is\
    \ divisible by 47, then it's prime.\n  -- If n is divisible by 53, then it's composite.\n\
    \  -- If n is divisible by 59, then it's prime.\n  -- If n is divisible by 61,\
    \ then it's composite.\n  -- If n is divisible by 67, then it's prime.\n  -- If\
    \ n is divisible by 71, then it's composite.\n  -- If n is divisible by 73, then\
    \ it's prime.\n  -- If n is divisible by 79, then it's composite.\n  -- If n is\
    \ divisible by 83, then it's prime.\n  -- If n is divisible by 89, then it's composite.\n\
    \  -- If n is divisible by 97, then it's prime.\n  -- If n is divisible by 101,\
    \ then it's composite.\n  -- If n is divisible by 103, then it's prime.\n  --\
    \ If n is divisible by 107, then it's composite.\n  -- If n is divisible by 113,\
    \ then it's prime.\n  -- If n is divisible by 119, then it's composite.\n  --\
    \ If n is divisible by 127, then it's prime.\n  -- If \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvh39f798.lua:80: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  -- Check odd-even primality of n+1\n  local function is_odd_prime_plus_one(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  -- Check odd-even primality\
    \ of n-1\n  local function is_odd_prime_minus_one(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i - 2\n    end\n\
    \    return true\n  end\n  -- Check odd-even primality of n+2\n  local function\
    \ is_odd_prime_plus_two(n)\n    if n % 2 == 0 then\n      return false\n    end\n\
    \    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      i = i + 2\n    end\n    return true\n  end\n  -- Check\
    \ odd-even primality of n-2\n  local function is_odd_prime_minus_two(n)\n    if\
    \ n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while i *\
    \ i <= n do\n      if n % i == 0 then\n        return false\n      end\n     \
    \ i = i - 2\n    end\n    return true\n  end\n  -- Check odd-even primality of\
    \ n+3\n  local function is_odd_prime_plus_three(n)\n    if n % 2 == 0 then\n \
    \     return false\n    end\n    local i = 3\n    while i * i <= n do\n      if\
    \ n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Check odd-even primality of n-3\n  local function\
    \ is_odd_prime_minus_three(n)\n    if n % 2 == 0 then\n      return false\n  \
    \  end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n \
    \       return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplok5awsu.lua:119: 'end' expected (to close 'if' at line 117)\
    \ near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n\
    -- True\n-- >>> is_prime(13441)\n-- True\n-- >>> is_prime(61)\n-- True\n-- >>>\
    \ is_prime(4)\n-- False\n-- >>> is_prime(1)\n-- False\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbgi32s_a.lua:40: 'end' expected (to close 'function' at line\
    \ 16) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
