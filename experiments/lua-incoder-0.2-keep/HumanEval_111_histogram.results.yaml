language: lua
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2je4krw.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpf2je4krw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local maxCount = 1\n  local maxLetter\n  for letter, count in\
    \ pairs(counts) do\n    if count > maxCount then\n      maxCount = count\n   \
    \   maxLetter = letter\n    end\n  end\n  if maxCount == 1 then\n    return {\
    \ maxLetter = maxLetter, count = counts[maxLetter] }\n  end\n  local maxCounts\
    \ = {}\n  for letter, count in pairs(counts) do\n    if count > maxCounts[count]\
    \ then\n      maxCounts[count] = letter\n    end\n  end\n  return maxCounts\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt32aqrl.lua:29:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptt32aqrl.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmptt32aqrl.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    local count = result[letter] or 0\n    result[letter] = count + 1\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj12ugqxz.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpj12ugqxz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      result = {letter = letter,\
    \ count = count}\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45dylldl.lua:30:\
    \ expected: {a=2, b=2}\nactual: {count=2, letter=\"a\"}\nstack traceback:\n\t\
    /tmp/tmp45dylldl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd979ejex.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpd979ejex.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    local count = result[letter] or 0\n    result[letter] = count + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvue7rck.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpbvue7rck.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for letter, count in\
    \ pairs(counts) do\n    if count > max then\n      max = count\n      maxLetter\
    \ = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i0iv00o.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmp6i0iv00o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  if\
    \ maxLetter == nil then\n    return result\n  end\n  return { maxLetter = maxLetter,\
    \ result = result }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjhte8y_.lua:39:\
    \ expected: {a=2, b=2}\nactual: {maxLetter=\"b\", result={a=2, b=2}}\nstack traceback:\n\
    \t/tmp/tmptjhte8y_.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      result = {letter = letter,\
    \ count = count}\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45dylldl.lua:30:\
    \ expected: {a=2, b=2}\nactual: {count=2, letter=\"a\"}\nstack traceback:\n\t\
    /tmp/tmp45dylldl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd979ejex.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpd979ejex.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    local count = result[letter] or 0\n    result[letter] = count +\
    \ 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67p5l0dx.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp67p5l0dx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter,\
    \ count in pairs(counts) do\n    if count > max then\n      max = count\n    \
    \  maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtb0hbvx.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmprtb0hbvx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for letter, count in\
    \ pairs(counts) do\n    if count > max then\n      max = count\n      maxLetter\
    \ = letter\n    end\n  end\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count == max then\n      result[letter] = count\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for letter, count in\
    \ pairs(counts) do\n    if count > max then\n      max = count\n      maxLetter\
    \ = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xe4ul04.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp0xe4ul04.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for letter, count in\
    \ pairs(counts) do\n    if count > max then\n      max = count\n      maxLetter\
    \ = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i0iv00o.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmp6i0iv00o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter, count in pairs(test:gsub('\
    \ ', ''):gmatch'(.-)') do\n    count = tonumber(count)\n    if count > result[letter]\
    \ then\n      result[letter] = count\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bw21s4k.lua:12:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp0bw21s4k.lua:12: in local 'candidate'\n\t/tmp/tmp0bw21s4k.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter,\
    \ count in pairs(counts) do\n    if count > max then\n      max = count\n    \
    \  maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_dsncsj.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmpq_dsncsj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2je4krw.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpf2je4krw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter,\
    \ count in pairs(counts) do\n    if count > max then\n      max = count\n    \
    \  maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_dsncsj.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmpq_dsncsj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for\
    \ letter, count in pairs(counts) do\n    if count > max then\n      max = count\n\
    \      maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw14m4o5p.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmpw14m4o5p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd979ejex.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpd979ejex.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hhedy7.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpe7hhedy7.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpe7hhedy7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z])\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8as2g9b.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpv8as2g9b.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hhedy7.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpe7hhedy7.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpe7hhedy7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local maxCount = 1\n  local maxLetter\n  for letter, count in\
    \ pairs(counts) do\n    if count > maxCount then\n      maxCount = count\n   \
    \   maxLetter = letter\n    end\n  end\n  return maxLetter, maxCount\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
    \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
    \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp7sq6_y.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmplp7sq6_y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    local count = result[letter] or 0\n    result[letter] = count + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvue7rck.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpbvue7rck.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter = \"\"\n  for letter, count in\
    \ pairs(counts) do\n    if count > max then\n      max = count\n      maxLetter\
    \ = letter\n    end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i0iv00o.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"b\"\nstack traceback:\n\t/tmp/tmp6i0iv00o.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    local count = result[letter] or 0\n    result[letter] = count + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvue7rck.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpbvue7rck.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local result = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    local count = result[letter] or 0\n    result[letter] = count +\
    \ 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67p5l0dx.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmp67p5l0dx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+) \") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cmpxpq2.lua:22:\
    \ expected: {a=2, b=2}\nactual: {a=1, b=2}\nstack traceback:\n\t/tmp/tmp3cmpxpq2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n\
    \    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
    \ b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([%a]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_22vqoq.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpu_22vqoq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n\
    \    if count == max then\n      result[letter] = count\n    end\n  end\n  if\
    \ #result == 0 then\n    return {}\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51tpwcdq.lua:39:\
    \ expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp51tpwcdq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] =\
    \ counts[letter] + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_d9imu.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpfb_d9imu.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2je4krw.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpf2je4krw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytk6fdts.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpytk6fdts.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"%a\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi16is_eg.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpi16is_eg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in test:gmatch(\"[%a]+\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a\
    \ b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'),\
    \ {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a']\
    \ = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
    \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b\
    \ b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1,\
    \ ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98phhsq2.lua:30:\
    \ expected: {a=2, b=2}\nactual: \"a\"\nstack traceback:\n\t/tmp/tmp98phhsq2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n-- of the letter with the most repetition and containing the corresponding\
    \ count.\n-- If several letters have the same occurrence, return all of them.\n\
    -- Example:\n-- histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n-- histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n-- histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    -- histogram('b b b b a') == {'b': 4}\n-- histogram('') == {}\nlocal function\
    \ histogram(test)\n  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a']\
    \ = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b']\
    \ = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c']\
    \ = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r']\
    \ = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b']\
    \ = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g']\
    \ = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
    \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxer_nyn.lua:23:\
    \ expected: {a=2, b=2}\nactual: {a=2, b=2, c=1}\nstack traceback:\n\t/tmp/tmpcxer_nyn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799342
