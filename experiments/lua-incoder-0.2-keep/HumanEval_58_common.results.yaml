language: lua
name: HumanEval_58_common
results:
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      elseif l1[i1] < l2[j1] then\n\
    \        j2 = j2 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n  \
    \  while j1 <= j2 do\n      table.insert(common, l2[j1])\n      j1 = j1 + 1\n\
    \    end\n    while i1 <= i2 do\n      table.insert(common, l1[i1])\n      i1\
    \ = i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[j2]\n    if e1 == e2 then\n      i1 = i1 + 1\n      j2 = j2\
    \ + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n      j2 = j2 + 1\n\
    \    end\n  end\n  return l1[i1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpero7dnmt.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpero7dnmt.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpero7dnmt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rmbra8b.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp4rmbra8b.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      elseif j1 > j2 then\n   \
    \     break\n      end\n      j1 = j1 + 1\n    end\n    j2 = j2 + 1\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      elseif l1[i1] < l2[j1] then\n\
    \        j2 = j2 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n  \
    \  j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    local e1 = l1[i1]\n    local e2 = l2[j1]\n    if e1 == e2 then\n      common[e1]\
    \ = common[e1] or 1\n      j1 = j1 + 1\n    elseif common[e1] > common[e2] then\n\
    \      common[e2] = common[e2] + 1\n    else\n      common[e1] = common[e1] +\
    \ 1\n    end\n    i1 = i1 + 1\n  end\n  local i1, i2 = 1, #l1\n  while i1 <= i2\
    \ do\n    common[l1[i1]] = common[l1[i1]] or 1\n    i1 = i1 + 1\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpth2uzxof.lua:16:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpth2uzxof.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpth2uzxof.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbj0ne7m.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpbbj0ne7m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      elseif l1[i1] < l2[j1] then\n\
    \        j2 = j2 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n  \
    \  while j1 <= j2 do\n      table.insert(common, l2[j1])\n      j2 = j2 + 1\n\
    \    end\n    while i1 <= i2 do\n      table.insert(common, l1[i1])\n      i1\
    \ = i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
    \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        break\n      end\n      j1 = j1 + 1\n\
    \    end\n    j1 = 1\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpch53vqpp.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmpch53vqpp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
