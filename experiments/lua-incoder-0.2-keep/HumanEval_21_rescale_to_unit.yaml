name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = max - min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #new_numbers do\n    new_numbers[i]\
    \ = new_numbers[i] / scale\n  end\n  return new_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  assert(#numbers > 1)\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  assert(#numbers > 1)\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n    scaled_numbers[i]\
    \ = ((numbers[i] - min) / range)\n  end\n  return scaled_numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  assert(#numbers > 1)\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects a list of at least two numbers\")\n  local min\
    \ = numbers[1]\n  local max = numbers[2]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n \
    \ local new_min = min - scale\n  local new_max = max + scale\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale + new_min\n  end\n  return numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * (numbers[i] -\
    \ min)\n  end\n  return result\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * i\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local results = {}\n  for _, v in ipairs(numbers) do\n    results[v]\
    \ = min + (v - min) * scale\n  end\n  return results\nend", "  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  return new_min, new_max\n\
    end", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n  \
    \  new_numbers[i] = new_min + (new_max - new_min) * numbers[i] / range\n  end\n\
    \  return new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range)\n  end\n  return scaled_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n  return\
    \ numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n  end\n  local new_min = numbers[1]\n  local new_max = numbers[#numbers]\n\
    \  for i = 1, #numbers do\n    new_min = new_min + numbers[i] * scale\n    new_max\
    \ = new_max + numbers[i] * scale\n  end\n  return new_min, new_max\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / 2.0\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = numbers[i] + scale\n  end\n  return new_numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = new_min + (numbers[i] - min) / range * new_max\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n  local max =\
    \ math.max(numbers)\n  local range = max - min\n  local scale = 1.0 / range\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n\
    \  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n\
    \  return numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / scale) + min\n  end\n  return new_numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max -\
    \ min\n  local scale = (range == 0) and 1 or range / max\n  return function(x)\n\
    \    return (x - min) * scale\n  end\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    \  return numbers\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n \
    \ local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers\
    \ do\n    scaled_numbers[i] = min + (numbers[i] - min) / range\n  end\n  return\
    \ scaled_numbers\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\n  return numbers\nend",
  "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = ((numbers[i] - min)\
    \ / range)\n  end\n  return scaled_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects at least two numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return\
    \ result\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    table.insert(result, min + scale\
    \ * i)\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return\
    \ result\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 2, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n \
    \ local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local range = max - min\n  local new_min = min - range\
    \ * 0.1\n  local new_max = max + range * 0.1\n  return new_min, new_max\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects a list of numbers of at least 2 elements\")\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale\
    \ * (numbers[i] - min)\n  end\n  return numbers\nend", "  assert(#numbers >= 2,\
    \ \"rescale_to_unit() expects a list of at least two numbers\")\n  local min =\
    \ numbers[1]\n  local max = numbers[2]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n\
    \  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  return new_min, new_max\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\n  return numbers\nend", "  local min = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i]\
    \ - min)\n  end\n  return new_numbers\nend", "  assert(#numbers >= 2, \"rescale_to_unit()\
    \ expects a list of at least two numbers\")\n  local min = numbers[1]\n  local\
    \ max = numbers[2]\n  local scale = (max - min) / (#numbers - 1)\n  for i = 1,\
    \ #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n  return numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\n\
    end", "  assert(#numbers >= 2, \"rescale_to_unit expects at least two numbers\"\
    )\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[#result + 1] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = 1.0\n  if min > max then\n    scale = 1.0 / (max - min)\n    for i = 2, #numbers\
    \ do\n      numbers[i] = numbers[i] - min * scale\n    end\n  end\n  return numbers\n\
    end", "  assert(#numbers >= 2, \"rescale_to_unit expects a list of at least two\
    \ numbers\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  local new_min = numbers[1]\n  local new_max = numbers[#numbers]\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale + new_min\n  end\n\
    \  return numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n    numbers[i] *= scale\n  end\n  return numbers\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  local scale = (range == 0)\n    or (range == 1)\n    or (range == -1)\n\
    \    or (range == -2)\n    or (range == -3)\n    or (range == -4)\n    or (range\
    \ == -5)\n    or (range == -6)\n    or (range == -7)\n    or (range == -8)\n \
    \   or (range == -9)\n    or (range == -10)\n    or (range == -11)\n    or (range\
    \ == -12)\n    or (range == -13)\n    or (range == -14)\n    or (range == -15)\n\
    \    or (range == -16)\n    or (range == -17)\n    or (range == -18)\n    or (range\
    \ == -19)\n    or (range == -20)\n    or (range == -21)\n    or (range == -22)\n\
    \    or (range == -23)\n    or (range == -24)\n    or (range == -25)\n    or (range\
    \ == -26)\n    or (range == -27)\n    or (range == -28)\n    or (range == -29)\n\
    \    or (range == -30)\n    or (range == -31)\n    or (range == -32)\n    or (range\
    \ == -33)\n    or (range == -34)\n    or (range == -35)\n    or (range == -36)\n\
    \    or (range == -37)\n    or (range == -38)\n    or (range == -39)\n    or (range\
    \ == -40)\n    or (range == -41)\n    or (range == -42)\n    or (range == -43)\n\
    \    or (range == -44)\n    or (range == -45)\n    or (range == -46)\n    or (range\
    \ == -47)\n    or (range == -48)\n    or (range == -49)\n    or (range == -50)\n\
    \    or (range == -51)\n    or (range == -52)\n    or (range == -53)\n    or (range\
    \ == -54)\n    or (range == -55)\n    or (range == -56)\n    or (range == -57)\n\
    \    or (range == -58)\n    or (range == -59)\n    or (range == -60)\n    or (range\
    \ == -61)\n    or (range == -60)\n    or (range == -60)\n    or (range == -",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\nend", " \
    \ assert(#numbers >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  return new_min, new_max\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  assert(#numbers >= 2)\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ table.insert(result, min + scale * i)\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2, \"rescale_to_unit() expects a list of at least two elements\")\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  return new_min, new_max\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  assert(#numbers >= 2, \"rescale_to_unit\
    \ expects at least 2 numbers\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers\
    \ do\n    scaled_numbers[i] = min + (numbers[i] - min) / range\n  end\n  return\
    \ scaled_numbers\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = min + (numbers[i] -\
    \ min) / range\n  end\n  return scaled_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / 2.0\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] + scale\n  end\n\
    \  return new_numbers\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale\
    \ * (numbers[i] - min)\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / 2.0\n  local results\
    \ = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n    results[i] = min\
    \ + (n - min) * scale\n  end\n  return results\nend", "  assert(#numbers > 1)\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale\
    \ * (numbers[i] - min)\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scale = 1.0 / range\n  local new_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = number\
    \ * scale\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * numbers[i]\n  end\n  return result\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2, \"rescale_to_unit expects a list of at least two\
    \ elements\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\n\
    end", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * i\n  end\n  return new_numbers\nend", "  assert(#numbers >= 2)\n \
    \ local min = numbers[1]\n  local max = numbers[#numbers]\n  local range = max\
    \ - min\n  local new_min = min - range * 0.1\n  local new_max = max + range *\
    \ 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = new_min + (numbers[i] - min) / range * new_max\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local scale = (range == 0)\n    or (range == 1)\n    or\
    \ (range == -1)\n    or (range == -2)\n    or (range == -2^32)\n    or (range\
    \ == -2^64)\n    or (range == -2^128)\n    or (range == -2^256)\n    or (range\
    \ == -2^512)\n    or (range == -2^1024)\n    or (range == -2^2048)\n    or (range\
    \ == -2^4096)\n    or (range == -2^8192)\n    or (range == -2^16384)\n    or (range\
    \ == -2^32768)\n    or (range == -2^65536)\n    or (range == -2^131072)\n    or\
    \ (range == -2^262144)\n    or (range == -2^524288)\n    or (range == -2^1048576)\n\
    \    or (range == -2^2097152)\n    or (range == -2^4194304)\n    or (range ==\
    \ -2^8388608)\n    or (range == -2^16777216)\n    or (range == -2^33554432)\n\
    \    or (range == -2^67108864)\n    or (range == -2^134217728)\n    or (range\
    \ == -2^268435456)\n    or (range == -2^536870912)\n    or (range == -2^1073741824)\n\
    \    or (range == -2^2147483648)\n    or (range == -2^4294967296)\n    or (range\
    \ == -2^8589934592)\n    or (range == -2^17179869184)\n    or (range == -2^34359738368)\n\
    \    or (range == -2^68719476736)\n    or (range == -2^137438953472) -- 2^32\n\
    \    or (range == -2^274877906944) -- 2^64\n    or (range == -2^549755813888)\
    \ -- 2^128\n    or (range == -2^1099511627776) -- 2^256\n    or (range == -2^2199023255552)\
    \ -- 2^512\n    or (range == -2^4398046511104)\n    or (range == -2^8796093022208)\n\
    \    or (range == -2^17592186044416)\n    or (range == -2^", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min\
    \ + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = (number\
    \ - min) / range\n  end\n  return scaled_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  assert(#numbers >= 2)\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * i\n  end\n  return new_numbers\nend", "  assert(#numbers >=\
    \ 2, \"rescale_to_unit expects a list of at least 2 elements\")\n  local min =\
    \ numbers[1]\n  local max = numbers[2]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n\
    \    numbers[i] *= scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n \
    \   new_numbers[number] = min + ((number - min) * scale)\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2, \"rescale_to_unit expects at least two numbers\"\
    )\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers >= 2, \"rescale_to_unit expects at least two numbers\")\n  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  if range == 0 then\n    return numbers\n  else\n    local scale = (range\
    \ / 2.0) + min\n    return numbers:map(function(x) return (x - min) / scale end)\n\
    \  end\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale\
    \ * i\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n \
    \ local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = (number\
    \ - min) / range\n  end\n  return scaled_numbers\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] + scale\n  end\n\
    \  return new_numbers\nend", "  assert(#numbers >= 2)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n    numbers[i] =\
    \ numbers[i] * scale\n  end\n  return numbers\nend", "  assert(#numbers >= 2,\
    \ \"rescale_to_unit expects a list of at least two numbers\")\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = min + (numbers[i] -\
    \ min) / range\n  end\n  return scaled_numbers\nend", "  assert(#numbers >= 2)\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  local scale = (range == 0)\n    or (range == 1)\n    or (range == -1)\n\
    \    or (range == -2)\n    or (range == -3)\n    or (range == -4)\n    or (range\
    \ == -5)\n    or (range == -6)\n    or (range == -7)\n    or (range == -8)\n \
    \   or (range == -9)\n    or (range == -10)\n    or (range == -11)\n    or (range\
    \ == -12)\n    or (range == -13)\n    or (range == -14)\n    or (range == -15)\n\
    \    or (range == -16)\n    or (range == -17)\n    or (range == -18)\n    or (range\
    \ == -19)\n    or (range == -20)\n    or (range == -21)\n    or (range == -22)\n\
    \    or (range == -23)\n    or (range == -24)\n    or (range == -25)\n    or (range\
    \ == -26)\n    or (range == -27)\n    or (range == -28)\n    or (range == -29)\n\
    \    or (range == -30)\n    or (range == -31)\n    or (range == -32)\n    or (range\
    \ == -33)\n    or (range == -34)\n    or (range == -35)\n    or (range == -36)\n\
    \    or (range == -37)\n    or (range == -38)\n    or (range == -39)\n    or (range\
    \ == -40)\n    or (range == -41)\n    or (range == -42)\n    or (range == -43)\n\
    \    or (range == -44)\n    or (range == -45)\n    or (range == -46)\n    or (range\
    \ == -47)\n    or (range == -48)\n    or (range == -49)\n    or (range == -50)\n\
    \    or (range == -51)\n    or (range == -52)\n    or (range == -53)\n    or (range\
    \ == -54)\n    or (range == -55)\n    or (range == -56)\n    or (range == -57)\n\
    \    or (range == -58)\n    or (range == -59)\n    or (range == -60)\n    or (range\
    \ == -61)\n    or (range == -60)\n    or (range == -59)\n    or (range == -58)\n\
    \    or (range ", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for\
    \ i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    \  return numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n    numbers[i] = numbers[i] * scale\n  end\n  return numbers\nend", " \
    \ local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = numbers[i] - min\n \
    \ end\n  for i = 1, #scaled_numbers do\n    scaled_numbers[i] = scaled_numbers[i]\
    \ / range\n  end\n  return scaled_numbers\nend", "  assert(#numbers >= 2, \"rescale_to_unit\
    \ expects at least two numbers\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[#result + 1] = min + scale * i\n  end\n  return result\n\
    end", "  assert(#numbers >= 2, \"rescale_to_unit() expects a list of at least\
    \ two elements\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = 1.0\n\
    \  if min > max then\n    scale = 1.0 / (max - min)\n    min = min - min * scale\n\
    \    max = max + max * scale\n  end\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = numbers[i] * scale + min\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n    scaled_numbers[i]\
    \ = min + (numbers[i] - min) / range\n  end\n  return scaled_numbers\nend", " \
    \ local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  assert(#numbers >= 2, \"\
    rescale_to_unit expects at least two numbers\")\n  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\n  return numbers\nend", "  assert(#numbers > 1)\n  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend", "  assert(#numbers > 1)\n  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n \
    \ local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0 and 1 or range) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    result[#result + 1] = min + (v - min) * scale\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] * scale\n\
    \  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n \
    \ local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n\
    \  end\n  return numbers\nend", "  assert(#numbers >= 2, \"rescale_to_unit expects\
    \ a list of at least two numbers\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_range = new_max - new_min\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local n = numbers[i]\n    local new_n = ((n - min) *\
    \ new_range) / range\n    new_numbers[i] = new_n\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  assert(#numbers >= 2)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return\
    \ result\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  for i =\
    \ 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n  end\n \
    \ return numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend", "  assert(#numbers >= 2)\n  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + (new_max - new_min)\
    \ * numbers[i] / range\n  end\n  return new_numbers\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    table.insert(result, min + scale * i)\n  end\n  return result\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min\
    \ + scale\n  end\n  return numbers\nend", "  local min = numbers[1]\n  local max\
    \ = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i]\
    \ - min)\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = min\
    \ + scale * i\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  assert(#numbers >= 2, \"rescale_to_unit expects\
    \ a list of at least two numbers\")\n  local min = numbers[1]\n  local max = numbers[2]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
