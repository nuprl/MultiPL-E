name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns True if the string\n\
  -- length is a prime number or False otherwise\n-- Examples\n-- prime_length('Hello')\
  \ == True\n-- prime_length('abcdcba') == True\n-- prime_length('kittens') == True\n\
  -- prime_length('orange') == False\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local prime = true\n    for i = 2, #string do\n        if string.sub(string,i,i)\
    \ == '' then\n            prime = false\n            break\n        end\n    end\n\
    \    return prime\nend", "  -- Your code here\nend", "    local prime_numbers\
    \ = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997}\n    local length = #string\n    for i = 1, length do\n\
    \        if string.sub(string,i,i) == '' then\n            length = length - 1\n\
    \        else\n            if string.sub(string,i,i) == string.sub(string,i,i-1)\
    \ then\n                length = length - 1\n            else\n              \
    \  if string.sub(string,i,i) == string.sub(string,i,i+1) then\n              \
    \      length = length - 1\n                else\n                    if string.sub(string,i,i)\
    \ == string.sub(string,i,i-1) then\n                        length = length -\
    \ 1\n                    else\n                        if string.sub(string,i,i)\
    \ == string.sub(string,i,i+1) then\n                            length = length\
    \ - 1\n                        else\n                            if string.sub(string,i,i)\
    \ == string.sub(string,i,i-1) then\n                                length = length\
    \ - 1\n                            else\n                                if string.sub(string,i,i)\
    \ == string.sub(string,i,i+1) then\n                                    length\
    \ = length - 1\n                                else\n                       \
    \             if ", "  -- Your code here\n  local prime = true\n  local count\
    \ = 0\n  for i = 1, #string do\n    if string[i] == string[i] then\n      count\
    \ = count + 1\n      if count == 2 then\n        prime = false\n      end\n  \
    \  end\n  end\n  return prime\nend", "    local prime = true\n    for i = 2, #string\
    \ do\n        if string.sub(string,i,i) == '' then\n            prime = false\n\
    \            break\n        end\n    end\n    return prime\nend", "  -- Your code\
    \ here\nend", "  -- Your code here\nend", "  -- Your code here\nend", "  -- Write\
    \ your solution here\nend", "    local prime_numbers = {}\n    for i = 2, math.floor(math.sqrt(string))\
    \ do\n        prime_numbers[i] = true\n    end\n    for i = 2, #string do\n  \
    \      if prime_numbers[string[i]] then\n            return false\n        end\n\
    \    end\n    return true\nend", "  -- Write your solution here\nend", "  -- Your\
    \ code here\n  local prime_numbers = {}\n  for i = 2, #string do\n    local count\
    \ = 0\n    for j = 2, #string do\n      if string[i] == string[j] then\n     \
    \   count = count + 1\n      end\n    end\n    if count == 1 then\n      prime_numbers[#prime_numbers\
    \ + 1] = i\n    end\n  end\n  if #prime_numbers == 1 then\n    return true\n \
    \ else\n    return false\n  end\nend", "  -- Write your solution here\nend", " \
    \  -- Your code here\nend", "   for i = 2, #string do\n      if string[i] ~= string[i\
    \ - 1] then\n         return false\n      end\n   end\n   return true\nend", " \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- ", "  -- Write your function here\nend", "    local count =\
    \ 0\n    for i = 1, #string do\n        if string.sub(i, i, i) ~= '#' then\n \
    \           count = count + 1\n        end\n    end\n    return count > 1 and\
    \ count % 2 == 0\nend", "    local prime_numbers = {}\n    local prime_numbers_count\
    \ = 0\n    local prime_numbers_count_max = 2\n    local prime_numbers_count_min\
    \ = 1\n    local prime_numbers_count_step = 1\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local prime_numbers_count_min = prime_numbers_count_min\n\
    \    local prime_numbers_count_step = prime_numbers_count_step\n    local prime_numbers_count_max\
    \ = prime_numbers_count_max\n    local ", "    local count = 0\n    for i = 1,\
    \ #string do\n        count = count + string[i]\n    end\n    if count == 1 then\n\
    \        return true\n    end\n    if count > 1 then\n        return false\n \
    \   end\n    local prime = true\n    for i = 2, #string do\n        if string[i]\
    \ ~= string[i - 1] then\n            prime = false\n            break\n      \
    \  end\n    end\n    return prime\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
