language: lua
name: HumanEval_0_has_close_elements
results:
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  for _, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - min_distance)\n    if distance > threshold then\n      return\
    \ false\n    end\n    min_distance = number\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3tfjdj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra3tfjdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  for _, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - min_distance)\n    if distance > threshold then\n      return\
    \ false\n    end\n    min_distance = number\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3tfjdj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra3tfjdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.abs(numbers[1] - numbers[2])\n  for _, value in ipairs(numbers) do\n\
    \    local distance = math.abs(value - numbers[2])\n    if distance < min_distance\
    \ then\n      min_distance = distance\n    end\n  end\n  return min_distance <=\
    \ threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilakcl1o.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpilakcl1o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close_count\
    \ = 0\n  local close_sum = 0\n  for _, number in ipairs(numbers) do\n    close_sum\
    \ = close_sum + number\n    if close_sum > threshold then\n      close_count =\
    \ close_count + 1\n    end\n  end\n  return close_count > 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfizf2208.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfizf2208.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = threshold\n  local min_diff_index = 1\n  local min_diff_element = numbers[1]\n\
    \  for i = 2, #numbers do\n    local diff = abs(numbers[i] - min_diff_element)\n\
    \    if diff < min_diff then\n      min_diff = diff\n      min_diff_index = i\n\
    \      min_diff_element = numbers[i]\n    end\n  end\n  return min_diff_index\
    \ == #numbers and min_diff < threshold\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrhrt74.lua:12:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpbtrhrt74.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbtrhrt74.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = {}\n  for _, x in ipairs(numbers) do\n    for _, y in ipairs(numbers) do\n\
    \      if math.abs(x - y) < threshold then\n        table.insert(close, x)\n \
    \     end\n    end\n  end\n  return #close ~= 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmcn6pfn.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppmcn6pfn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = math.abs(numbers[1] - numbers[2])\n  for i = 2, #numbers do\n    local close2\
    \ = math.abs(numbers[i] - numbers[i - 1])\n    if close > threshold and close2\
    \ > threshold then\n      return true\n    end\n    close = close2\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytcv4c91.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpytcv4c91.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = threshold\n  local min_diff_index = 1\n  local min_diff_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local diff = abs(numbers[i] - min_diff_number)\n\
    \    if diff < min_diff then\n      min_diff = diff\n      min_diff_index = i\n\
    \      min_diff_number = numbers[i]\n    end\n  end\n  return min_diff_index ==\
    \ #numbers and min_diff < threshold\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyuup41i.lua:12:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpkyuup41i.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkyuup41i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num_pairs\
    \ = #numbers - 1\n  local max_diff = 0\n  local max_index\n  for i = 1, num_pairs\
    \ do\n    local diff = abs(numbers[i + 1] - numbers[i])\n    if diff > max_diff\
    \ then\n      max_diff = diff\n      max_index = i\n    end\n  end\n  return max_diff\
    \ < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi0re8phk.lua:12:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpi0re8phk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpi0re8phk.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  for _, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - min_distance)\n    if distance > threshold then\n      return\
    \ false\n    end\n    min_distance = number\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3tfjdj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra3tfjdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.inf\n  local min_number\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - threshold)\n    if distance < min_distance then\n\
    \      min_distance = distance\n      min_number = number\n    end\n  end\n  return\
    \ min_number ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphu5asa9x.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphu5asa9x.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphu5asa9x.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = threshold\n  local min_diff_index = 1\n  for i = 1, #numbers do\n    local\
    \ diff = abs(numbers[i] - numbers[min_diff_index])\n    if diff < min_diff then\n\
    \      min_diff = diff\n      min_diff_index = i\n    end\n  end\n  return min_diff_index\
    \ == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00jsf7az.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp00jsf7az.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp00jsf7az.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  local min_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    local distance = math.abs(number - min_number)\n    if\
    \ distance < min_distance then\n      min_distance = distance\n      min_number\
    \ = number\n    end\n  end\n  return min_distance < threshold\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ieqyz_0.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ieqyz_0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  assert(threshold:type()\
    \ == \"Real\")\n  local min_dist = threshold\n  local min_dist_index = nil\n \
    \ local min_dist_value = nil\n  for i = 1, #numbers do\n    local dist = math.abs(numbers[i]\
    \ - threshold)\n    if min_dist > dist then\n      min_dist = dist\n      min_dist_index\
    \ = i\n      min_dist_value = numbers[i]\n    end\n  end\n  return min_dist_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ry8q5v1.lua:8:\
    \ attempt to index a number value (local 'threshold')\nstack traceback:\n\t/tmp/tmp5ry8q5v1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5ry8q5v1.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  for _, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - min_distance)\n    if distance > threshold then\n      return\
    \ false\n    end\n    min_distance = number\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3tfjdj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra3tfjdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.min(numbers[1])\n  for _, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - min_distance)\n    if distance > threshold then\n      return\
    \ false\n    end\n    min_distance = number\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra3tfjdj.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra3tfjdj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close_count\
    \ = 0\n  local close_index = 1\n  local close_value\n  for _, value in ipairs(numbers)\
    \ do\n    if close_count > 1 then\n      break\n    end\n    close_value = value\n\
    \    close_count = 1\n    while close_index < #numbers and close_value - numbers[close_index]\
    \ < threshold do\n      close_index = close_index + 1\n      close_count = close_count\
    \ + 1\n    end\n  end\n  return close_index > 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo_e0gt4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuo_e0gt4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local num_set\
    \ = setmetatable({}, {__mode=\"k\"})\n  for _, num in pairs(numbers) do\n    table.insert(num_set,\
    \ num)\n  end\n  for _, num in pairs(numbers) do\n    local num_set = num_set[num]\n\
    \    if num_set == nil then\n      return false\n    end\n  end\n  for _, num\
    \ in pairs(numbers) do\n    local num_set = num_set[num]\n    if num_set == nil\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nrubs8b.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4nrubs8b.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = nil\n  for _, v in ipairs(numbers) do\n    local close = close or v\n    if\
    \ abs(v - close) < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprv142own.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmprv142own.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprv142own.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local close\
    \ = {}\n  for _, number in ipairs(numbers) do\n    for _, other_number in ipairs(numbers)\
    \ do\n      if number ~= other_number then\n        local dist = math.abs(number\
    \ - other_number)\n        if dist < threshold then\n          table.insert(close,\
    \ other_number)\n        end\n      end\n    end\n  end\n  return #close == #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhnsaak8.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfhnsaak8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
