language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local current_max = numbers[i]\n    if rolling_max ~= nil then\n   \
    \   if rolling_max < current_max then\n        rolling_max = current_max\n   \
    \     rolling_max_index = i\n      end\n    else\n      rolling_max = current_max\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xz7eece.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5xz7eece.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max + 1]\
    \ = max_value\n      max_value = numbers[i]\n    else\n      max_value = numbers[i]\n\
    \    end\n  end\n  rolling_max[#rolling_max + 1] = max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpqdb8_7.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmpjpqdb8_7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  table.insert(rolling_max,\
    \ max_value)\n  for i = 1, max_index do\n    table.insert(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwrs3p4d.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpqwrs3p4d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg_egkpg.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpcg_egkpg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  local max_index =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6dgwcob.lua:16:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmph6dgwcob.lua:16: in local 'candidate'\n\
    \t/tmp/tmph6dgwcob.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp26g259vb.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n    else\n      if rolling_max_value <\
    \ value then\n        rolling_max_value = value\n        rolling_max_index = i\n\
    \      end\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ax5nwht.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ax5nwht.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = 1, i do\n      if numbers[j] > max_value then\n        max_value\
    \ = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max + 1]\
    \ = max_value\n      max_value = numbers[i]\n    else\n      rolling_max[#rolling_max\
    \ + 1] = numbers[i]\n    end\n  end\n  rolling_max[#rolling_max + 1] = max_value\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx3xggbt.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {3, 2, 1, 4}\nstack traceback:\n\t/tmp/tmpvx3xggbt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7njnkmju.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7njnkmju.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7njnkmju.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7njnkmju.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7njnkmju.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7njnkmju.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7njnkmju.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7njnkmju.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7njnkmju.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde8l1n1_.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl5if02oe.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cxco37f.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp6cxco37f.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6cxco37f.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    table.insert(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mfrmsv8.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmp1mfrmsv8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max + 1]\
    \ = numbers[i]\n      max_value = numbers[i]\n    else\n      rolling_max[#rolling_max]\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m5ddpra.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {2, 3, 4}\nstack traceback:\n\t/tmp/tmp2m5ddpra.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= nil then\n        if rolling_max_value\
    \ <= value then\n          rolling_max = rolling_max_value\n          rolling_max_index\
    \ = i\n        end\n      else\n        rolling_max = value\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max = value\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm62mc3qu.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpm62mc3qu.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5jxuyp7.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpp5jxuyp7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpp5jxuyp7.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcs5b54k.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdcs5b54k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element\
    \ then\n        rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max\
    \ = rolling_max or rolling_max_element\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcs5b54k.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpdcs5b54k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  for i = 1, #numbers\
    \ do\n    if numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n \
    \     max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w6mdzev.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp6w6mdzev.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6w6mdzev.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7njnkmju.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7njnkmju.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7njnkmju.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max = numbers[rolling_max_index]\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxq4eam84.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpxq4eam84.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcogifxnm.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcogifxnm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcogifxnm.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde8l1n1_.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w0f_niw.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp6w0f_niw.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6w0f_niw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local index = 1\n  local max_value = numbers[index]\n\
    \  rolling_max[index] = max_value\n  index = index + 1\n  while index <= #numbers\
    \ do\n    if numbers[index] > max_value then\n      max_value = numbers[index]\n\
    \    end\n    index = index + 1\n    rolling_max[index] = max_value\n  end\n \
    \ return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8h2ntp9.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 3=2, 4=3, 5=4}\nstack traceback:\n\t/tmp/tmpg8h2ntp9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5jxuyp7.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpp5jxuyp7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpp5jxuyp7.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde8l1n1_.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_value = rolling_max\n  for\
    \ i = 1, #numbers do\n    if numbers[i] ~= rolling_max then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yfprltw.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp3yfprltw.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3yfprltw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  for i = 1, #numbers do\n    local rolling_max =\
    \ numbers[i]\n    for j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max\
    \ then\n        rolling_max = numbers[j]\n      end\n    end\n    table.insert(rolling_maxes,\
    \ rolling_max)\n  end\n  return rolling_maxes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o93615h.lua:10:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_o93615h.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_o93615h.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde8l1n1_.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    rolling_max = rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r1mvro0.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5r1mvro0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 1\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_index = max_index + 1\n      max_value = numbers[i]\n\
    \    else\n      rolling_max[max_index] = numbers[i]\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdidnkgh7.lua:27:\
    \ expected: {4, 4, 4, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpdidnkgh7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv61gc741.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpv61gc741.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_count = 0\n  for i = 2, #numbers do\n    if\
    \ numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_count = rolling_max_count + 1\n\
    \    end\n  end\n  rolling_max[rolling_max_count] = rolling_max_value\n  for i\
    \ = 1, rolling_max_count do\n    rolling_max[i] = numbers[rolling_max_index +\
    \ i]\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r26ls5h.lua:28:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp_r26ls5h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde8l1n1_.lua:6: <name> expected near ''[''

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_element = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n      rolling_max\
    \ = numbers[i]\n    end\n    if numbers[i] == max_element then\n      break\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y4mrot5.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp3y4mrot5.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3y4mrot5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgosot1r1.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_value then\n      \
    \  max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max, max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcldanre.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpdcldanre.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cxco37f.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp6cxco37f.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6cxco37f.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i = 1,\
    \ #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvemoqgbb.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpvemoqgbb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvemoqgbb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  local max_index = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil or numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  if max_value\
    \ == nil then\n    return nil\n  end\n  rolling_max = numbers[max_index]\n  for\
    \ i = max_index + 1, #numbers do\n    if numbers[i] < max_value then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfx6un9n.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcfx6un9n.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  for i\
    \ = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuc17fjp.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmphuc17fjp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphuc17fjp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index == 0 then\n    rolling_max = numbers\n \
    \ else\n    rolling_max = table.concat(numbers, rolling_max_index, rolling_max_index\
    \ + 1)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm_ly441.lua:27:\
    \ expected: {1, 2, 3, 4}\nactual: \"\"\nstack traceback:\n\t/tmp/tmprm_ly441.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659795095
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
