language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local current_max = numbers[i]\n    if rolling_max ~= nil then\n   \
    \   if rolling_max < current_max then\n        rolling_max = current_max\n   \
    \     rolling_max_index = i\n      end\n    else\n      rolling_max = current_max\n\
    \      rolling_max_index = i\n    end\n  end\n  return rolling_max, rolling_max_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xz7eece.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5xz7eece.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max + 1]\
    \ = max_value\n      max_value = numbers[i]\n    else\n      max_value = numbers[i]\n\
    \    end\n  end\n  rolling_max[#rolling_max + 1] = max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpqdb8_7.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {1}\nstack traceback:\n\t/tmp/tmpjpqdb8_7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  table.insert(rolling_max,\
    \ max_value)\n  for i = 1, max_index do\n    table.insert(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwrs3p4d.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpqwrs3p4d.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz02yncs.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprz02yncs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg_egkpg.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4=4}\nstack traceback:\n\t/tmp/tmpcg_egkpg.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexhi0oow.lua:6: <name> expected near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = numbers[1]\n  local max_index =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max[max_index] = max_value\n      max_value = numbers[i]\n    \
    \  max_index = i\n    end\n  end\n  rolling_max[max_index] = max_value\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6dgwcob.lua:16:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmph6dgwcob.lua:16: in local 'candidate'\n\
    \t/tmp/tmph6dgwcob.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp26g259vb.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n    else\n      if rolling_max_value <\
    \ value then\n        rolling_max_value = value\n        rolling_max_index = i\n\
    \      end\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ax5nwht.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp_ax5nwht.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd7pb4u9.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnd7pb4u9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
