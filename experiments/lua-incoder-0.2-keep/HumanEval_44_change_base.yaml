name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = \"\"\n  local basestring\n  if base == 10 then\n    basestring\
    \ = \"0123456789\"\n  elseif base == 16 then\n    basestring = \"0123456789abcdef\"\
    \n  else\n    error(\"invalid base\")\n  end\n  for i = 1, x do\n    s = s ..\
    \ basestring[math.floor(x/base)]\n    x = x % base\n  end\n  return s\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits2 = math.floor(x/base)\n  x = x - digits2\
    \ * base\n  return tostring(digits, base) + tostring(digits2, base)\nend", " \
    \ local digits = math.floor(x/base)+1\n  if digits == 0 then\n    return \"\"\n\
    \  elseif digits == 1 then\n    return string.format(\"%0*d\", base, x)\n  else\n\
    \    return string.format(\"%0*d\", base, x)\n  end\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    local carry = digit > 0 and 1 or 0\n    local digit = digit - carry + 10\n\
    \    result = result .. string.format(\"%0d\", digit)\n    x = math.floor(x/10)\n\
    \  end\n  return result .. string.format(\"%0d\", x)\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return tostring(digits) .. change_base(rest, base)\nend",
  "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base*base)+1\n    result = result .. digit\n\
    \    x = x - digit*base\n  end\n  return result\nend", "  local digits = math.floor(math.log(abs(x),\
    \ base))\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor((x / base) * base)\n    result = result .. tostring(digit)\n\
    \    x = x - digit\n    i = i + 1\n  end\n  if x > 0 then\n    result = result\
    \ .. tostring(x)\n  end\n  return result\nend", "  -- base is less than 10\n \
    \ if base < 10 then\n    -- convert base to string\n    local s = ''\n    for\
    \ i = 1, base do\n      s = s .. '0'\n    end\n    -- convert x to string\n  \
    \  local s = s .. x\n    -- convert string to number\n    local n = tonumber(s)\n\
    \    -- convert number to base string\n    local s = tonumber(s, base)\n    --\
    \ convert base to string\n    local s = s .. s\n    -- return converted number\n\
    \    return s\n  else\n    -- convert base to string\n    local s = ''\n    for\
    \ i = 1, base do\n      s = s .. '0'\n    end\n    -- convert x to string\n  \
    \  local s = s .. x\n    -- convert string to number\n    local n = tonumber(s)\n\
    \    -- convert number to base string\n    local s = tonumber(s, 10)\n    -- convert\
    \ base to string\n    local s = s .. s\n    -- return converted number\n    return\
    \ s\n  end\nend", "  local digits = math.floor(math.log(abs(x), base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    x = math.floor(x/base)\n    result = result .. digit\n  end\n  if x > 0 then\n\
    \    result = result .. x\n  end\n  return result\nend", "  if x < 10 then\n \
    \   return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) .. tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  local power = base\n\
    \  while digits > 0 do\n    local digit = x % power\n    local remainder = x /\
    \ power\n    local result = result .. string.format(\"%d\", digit)\n    x = remainder\n\
    \    power = power * base\n    digits = digits - 1\n  end\n  return result ..\
    \ string.format(\"%d\", x)\nend", "    if x < 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    local mod = x % base\n  \
    \  if mod > 0 then\n        return tostring(digits) .. tostring(mod)\n    else\n\
    \        return tostring(digits)\n    end\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return tostring(base*digits) .. tostring(x)\nend", "    if x < 10 then\n  \
    \      return tostring(x)\n    end\n    local digits = math.floor(x/base)\n  \
    \  local rest = x - base*digits\n    return tostring(base*digits) + change_base(rest,\
    \ base)\nend", "  local digits = math.floor(x/base)+1\n  local result = {}\n \
    \ for i = 1, digits do\n    result[#result+1] = base*i\n  end\n  return table.concat(result,\
    \ '') .. tostring(base^digits)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x", "  -- Base 10\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  -- Base 2\n  if base == 2 then\n    local s = tostring(x)\n    local\
    \ n = tonumber(s)\n    if n then\n      return tostring(n / 2)\n    end\n  end\n\
    \  -- Base 16\n  if base == 16 then\n    local s = tostring(x)\n    local n =\
    \ tonumber(s)\n    if n then\n      return tostring(n / 16)\n    end\n  end\n\
    \  -- Base 8\n  if base == 8 then\n    local s = tostring(x)\n    local n = tonumber(s)\n\
    \    if n then\n      return tostring(n / 8)\n    end\n  end\n  -- Base 16\n \
    \ if base == 16 then\n    local s = tostring(x)\n    local n = tonumber(s)\n \
    \   if n then\n      return tostring(n / 16)\n    end\n  end\n  -- Base 10\n \
    \ if base == 10 then\n    local s = tostring(x)\n    local n = tonumber(s)\n \
    \   if n then\n      return tostring(n / 10)\n    end\n  end\n  -- Base 2\n  if\
    \ base == 2 then\n    local s = tostring(x)\n    local n = tonumber(s)\n    if\
    \ n then\n      return tostring(n / 2)\n    end\n  end\n  -- Base 16\n  if base\
    \ == 16 then\n    local s = tostring(x)\n    local n = tonumber(s)\n    if n then\n\
    \      return tostring(n / 16)\n    end\n  end\n  -- Base 8\n  if base == 8 then\n\
    \    local s = tostring(x)\n    local n = tonumber(s)\n    if n then\n      return\
    \ tostring(n / 8)\n    end\n  end\n  -- Base 16\n  if base == 16 then\n    local\
    \ s = tostring(x)\n    local n = tonumber(s)\n    if n then\n      return tostring(n\
    \ / 16)\n    end\n  end\n  -- Base 10\n  if base == 10 then\n    local s = tostring(x)\n\
    \    local n = tonumber(s)\n    if n then\n      return tostring(n / 10)\n   \
    \ end\n  end\n  -- Base 2\n  if base == 2 then\n    local s = tostring(x)\n  \
    \  local n = tonumber(s)\n    if n then\n      return tostring(n / 2)\n    end\n\
    \  end\n  -- Base 16\n  if base == 16 then\n    local s = tostring(x)\n    local\
    \ n = tonumber(s)\n    if n then\n      return tostring(n / 16)\n    end\n  end\n\
    \  -- ", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base * digits\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = x / base\n    result = digit .. result\n \
    \ end\n  return result .. tostring(digits)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local i = 0\n  while digits > 0 do\n    local\
    \ digit = math.floor(x/base%10)\n    i = i + 1\n    if i == digits then\n    \
    \  result = result .. digit\n      i = 0\n    end\n    result = result .. string.char(digit+48)\n\
    \    x = math.floor(x/10)\n  end\n  return result\nend", "  local s = \"\"\n \
    \ local factor = 1\n  while x >= base do\n    factor = (factor * base) + x\n \
    \   x = x - factor\n    s = s .. tostring(x)\n  end\n  return s\nend", "  local\
    \ digits = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n\
    \    local digit = base*i\n    local remainder = x - digit\n    if remainder <\
    \ 0 then\n      remainder = -remainder\n      digit = -digit\n    end\n    result\
    \ = result .. string.format(\"%c\", digit)\n    if remainder > 0 then\n      result\
    \ = result .. string.format(\"%c\", '0')\n    end\n  end\n  return result\nend",
  "    if x < 10 then\n        return string.format(\"%0*d\", base, x)\n    else\n\
    \        return string.format(\"%0*d\", base, x)\n    end\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base*digits\n  local result = \"\"\n  while x > 0 do\n    local digit\
    \ = tostring(x%base)\n    x = x/base\n    result = digit .. result\n  end\n  return\
    \ result .. tostring(x)\nend", "  local s = \"\"\n  local power = 1\n  while x\
    \ >= base do\n    local digit = x % base\n    s = string.rep(\"0\", power - digit)\
    \ + s + string.rep(\"1\", digit)\n    x = math.floor(x/base)\n    power = power\
    \ * base\n  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  -- base is less than 10\n  if base < 10 then\n    local\
    \ digits = math.floor(x/base)\n    local remainder = x - digits * base\n    return\
    \ digits .. change_base(remainder, base)\n  end\n  -- base is 10\n  if base ==\
    \ 10 then\n    return tostring(x)\n  end\n  -- base is greater than 10\n  local\
    \ digits = math.floor(x/base)\n  local remainder = x - digits * base\n  return\
    \ change_base(digits, base) .. tostring(remainder)\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n\
    \    local digit = x%base\n    s = string.format(\"%d%s\", digit, s)\n    x =\
    \ math.floor(x/base)\n  end\n  return s\nend", "  -- base numbers are less than\
    \ 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..change_base(rest, base)\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = x / base\n    local mod = digits % base\n\
    \    local remainder = digits % base\n    local digit = math.floor(digit)\n  \
    \  local mod = math.floor(mod)\n    local remainder = math.floor(remainder)\n\
    \    result = result .. string.sub(tostring(mod), -2)\n    result = result ..\
    \ string.sub(tostring(remainder), -1)\n    x = math.floor(x / base)\n    digits\
    \ = digits - 1\n  end\n  return result .. string.sub(tostring(x), -1)\nend", " \
    \ local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format('%d',\
    \ x)\nend", "  local s = ''\n  local i = 1\n  while x > 0 do\n    local digit\
    \ = x % base\n    s = string.format('%s%d', s, digit)\n    x = math.floor(x /\
    \ base)\n    i = i + 1\n  end\n  return s\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  if digits == 0 then\n    return x\n  else\n    local digits = digits\
    \ + 1\n    local base = base * 10\n    local digit = x / base\n    local result\
    \ = \"\"\n    while digit > 0 do\n      result = string.format(\"%0*d\", digits,\
    \ digit) + result\n      digit = math.floor(digit / base)\n    end\n    return\
    \ result\n  end\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  local rest = x - base*digits\n  return change_base(rest,\
    \ base) .. tostring(digits)\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.char(digit)\n    x = math.floor(x/10)\n  end\n\
    \  return result .. x\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(math.log(x / base))\n  local digits_str = tostring(digits)\n\
    \  local digits_len = #digits_str\n  local digits_pow = math.pow(base, digits)\n\
    \  local digits_div = digits_pow / x\n  local digits_mod = digits_pow % x\n  local\
    \ digits_str = digits_str:sub(1, digits_len - 1)\n  local digits_str = digits_str\
    \ .. tostring(digits_div)\n  local digits_str = digits_str .. tostring(digits_mod)\n\
    \  return digits_str\nend", "  if x < 10 then\n    return string.format(\"%0*d\"\
    , base, x)\n  else\n    return string.format(\"%0*d\", base, x)\n  end\nend",
  "    if base < 2 then\n        error('Base must be greater than 1.')\n    end\n\
    \    local digits = math.floor(math.log(abs(x), base))\n    local digits_str =\
    \ string.format('%0', digits)\n    local digits_len = digits_str:len() - 1 --\
    \ Remove leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n  \
    \  local digits_str = digits_str:gsub('%d+', function(a)\n        return string.format('%d',\
    \ tonumber(a) / tonumber(base))\n    end)\n    local digits_len = digits_str:len()\
    \ - 1 -- Remove leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n\
    \    local digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d',\
    \ tonumber(a))\n    end)\n    local digits_len = digits_str:len() - 1 -- Remove\
    \ leading 0.\n    local digits_str = digits_str:sub(1, digits_len)\n    local\
    \ digits_str = digits_str:gsub('%d', function(a)\n        return string.format('%d', ",
  "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x % base\n\
    \    x = x / base\n    s = string.sub(tostring(digit), -i-1, -i-1) + s\n    i\
    \ = i + 1\n  end\n  return s\nend", "  -- base numbers are less than 10.\n  assert(base\
    \ < 10)\n  local digits = math.floor(x/base)*base\n  local result = \"\"\n  while\
    \ digits > 0 do\n    local digit = math.floor((digits-1)/base)*base\n    local\
    \ remainder = digits-(digit*base)\n    if remainder > 0 then\n      result = result\
    \ .. digit\n      remainder = remainder - digit*base\n    end\n    digits = remainder\n\
    \  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(math.log(x / base))\n  local digits_str = tostring(digits)\n\
    \  local digits_len = #digits_str\n  local digits_pow = math.pow(base, digits)\n\
    \  local digits_div = x / digits_pow\n  local digits_div_base = math.floor(digits_div)\n\
    \  local digits_div_str = tostring(digits_div)\n  local digits_div_len = #digits_div_str\n\
    \  local digits_div_base2 = math.pow(base, digits_len)\n  local digits_div_base2_str\
    \ = tostring(digits_div_base2)\n  local digits_div_base2_len = #digits_div_base2_str\n\
    \  local digits_div_base2_pow = math.pow(base, digits_len - 1)\n  local digits_div_base2_pow_str\
    \ = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n\
    \  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len\
    \ = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n\
    \  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str\
    \ = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n\
    \  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len\
    \ = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n\
    \  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str\
    \ = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n\
    \  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n  local digits_div_base2_pow_len\
    \ = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str = tostring(digits_div_base2_pow)\n\
    \  local digits_div_base2_pow_len = #digits_div_base2_pow_str\n  local digits_div_base2_pow_str\
    \ = tostring(", "  local digits = math.floor(x/base)\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = math.mod(x, base)\n    result = string.format(\"\
    %s%s\", digit, result)\n    x = math.floor(x / base)\n    digits = math.floor(x/base)\n\
    \  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result =\
    \ \"\"\n  while x ~= 0 do\n    local digit = math.floor(x/10)\n    result = tostring(digit)\
    \ + result\n    x = x - 10*digit\n  end\n  return result\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  if x < 10 then\n    return tostring(x) + tostring(base)\n  end\n\
    \  return tostring(x) + tostring(base)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x > 9\
    \ then\n    digits = digits + 1\n  end\n  return tostring(digits) .. tostring(x)\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local result = \"\"\n  while x do\n    local digit =\
    \ tostring(x%base)\n    x = x/base\n    if x ~= 0 then\n      result = digit ..\
    \ result\n    end\n  end\n  return result .. tostring(digits)\nend", "    if x\
    \ < 10 then\n        return string.format(\"%u\", x)\n    end\n    local digits\
    \ = math.floor(math.log(x / base))\n    if digits < 0 then\n        digits = -digits\n\
    \    end\n    local digits_str = string.format(\"%0.\" .. digits .. \"u\", x /\
    \ base)\n    return change_base(digits_str, base)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local power = base\n  for i = 1, digits do\n\
    \    local digit = x % power\n    local remainder = x / power\n    local result\
    \ = result .. string.format(\"%d\", digit)\n    x = remainder\n    power = power\
    \ * base\n  end\n  return result .. string.format(\"%d\", x)\nend", "  local digits\
    \ = math.floor(x/base)*base\n  local result = \"\"\n  while digits > 0 do\n  \
    \  local digit = math.floor(digits)\n    digits = digits - digit\n    result =\
    \ result .. digit\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(math.log(x / base))\n  local digits_str = tostring(digits)\n  local\
    \ digits_len = #digits_str\n  local digits_pow = math.pow(base, digits)\n  local\
    \ digits_div = digits - digits_pow\n  local digits_div_base = math.pow(base, digits_div)\n\
    \  local digits_div_base2 = math.pow(base, digits_div - digits_div_base)\n  local\
    \ digits_div_base3 = math.pow(base, digits_div - digits_div_base2)\n  local digits_div_base4\
    \ = math.pow(base, digits_div - digits_div_base3)\n  local digits_div_base5 =\
    \ math.pow(base, digits_div - digits_div_base4)\n  local digits_div_base6 = math.pow(base,\
    \ digits_div - digits_div_base5)\n  local digits_div_base7 = math.pow(base, digits_div\
    \ - digits_div_base6)\n  local digits_div_base8 = math.pow(base, digits_div -\
    \ digits_div_base7)\n  local digits_div_base9 = math.pow(base, digits_div - digits_div_base8)\n\
    \  local digits_div_base10 = math.pow(base, digits_div - digits_div_base9)\n \
    \ local digits_div_base11 = math.pow(base, digits_div - digits_div_base10)\n \
    \ local digits_div_base12 = math.pow(base, digits_div - digits_div_base11)\n \
    \ local digits_div_base13 = math.pow(base, digits_div - digits_div_base12)\n \
    \ local digits_div_base14 = math.pow(base, digits_div - digits_div_base13)\n \
    \ local digits_div_base15 = math.pow(base, digits_div - digits_div_base14)\n \
    \ local digits_div_base16 = math.pow(base, digits_div - digits_div_base15)\n \
    \ local digits_div_base17 = math.pow(base, digits_div - digits_div_base16)\n \
    \ local digits_div_base18 = math.pow(base, digits_div - digits_div_base17)\n \
    \ local digits_div_base19 = math.pow(base, digits_div - digits_div_base18)\n \
    \ local digits_div_base20 = math.pow(base, digits_div - digits_div_base19)\n \
    \ local digits_div_base21 = math.pow(base, digits_div - digits_div_base20)\n \
    \ local digits_div_base22 = math.pow(base, digits_div - digits_div_base21)", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return tostring(base*digits) + change_base(rest,\
    \ base)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "\tlocal digits = math.floor(x/base);\n\tx = x - base*digits;\n\
    \tlocal result = \"\";\n\twhile x > 0 do\n\t\tresult = string.format(\"%0\" ..\
    \ digits .. \"d\", x%base) .. result;\n\t\tx = x/base;\n\tend\n\treturn result;\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format('%d',\
    \ x) + string.format('%0*d', base, digits)\nend", "  -- Base must be greater than\
    \ 0.\n  assert(base > 0)\n  -- Convert x to a string.\n  local s = tostring(x)\n\
    \  -- If the string has leading zeros, remove them.\n  if s:sub(1, 1) == '0' then\n\
    \    s = s:sub(2)\n  end\n  -- If the string has trailing zeros, remove them.\n\
    \  if s:sub(s, s - 1) ~= '0' then\n    s = s:sub(1, s - 1)\n  end\n  -- If the\
    \ string has leading zeros, remove them.\n  if s:sub(1, 1) == '0' then\n    s\
    \ = s:sub(2)\n  end\n  -- If the string has trailing zeros, remove them.\n  if\
    \ s:sub(s, s - 1) ~= '0' then\n    s = s:sub(1, s - 1)\n  end\n  -- Convert the\
    \ string to a number.\n  local n = tonumber(s)\n  -- If the string was empty or\
    \ invalid, return nil.\n  if n == nil then\n    return nil\n  end\n  -- If the\
    \ string was too big, return nil.\n  if n > math.pow(10, base) then\n    return\
    \ nil\n  end\n  -- If the string was too small, return nil.\n  if n < math.pow(10,\
    \ base) then\n    return nil\n  end\n  -- Convert the number to a string in base\
    \ base.\n  local s = tostring(math.pow(10, base))\n  -- Convert the number to\
    \ a string in base 10.\n  local t = tostring(n)\n  -- If the string was too big,\
    \ return nil.\n  if t:sub(1, t) ~= '0' then\n    return nil\n  end\n  -- If the\
    \ string was too small, return nil.\n  if t:sub(1, t) ~= '0' then\n    return\
    \ nil\n  end\n  -- If the string was too big, return nil.\n  if s:sub(s, s - 1)\
    \ ~= '0' then\n    return nil\n  end\n  -- If the string was too small, return\
    \ nil.\n  if s:sub(s, s - 1) ~= '0' then\n    return nil\n  end\n  -- Return the\
    \ converted string.\n  return s:sub(1, s - 1)\nend", "  if base < 2 then\n   \
    \ error('Base must be >= 2')\n  end\n  local digits = math.floor(x/base^0)\n \
    \ x = x - base*digits\n  return string.format('%d', x)\nend", "  local digits\
    \ = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n    result\
    \ = result .. string.rep(\"0\", base-i) .. tostring(base%base)\n    base = base//base\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  local digits_str = tostring(digits)\n\
    \  if digits_str ~= '0' then\n    digits_str = tostring(base*digits + digits)\n\
    \  end\n  return digits_str\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return tostring(digits)..change_base(rest, base)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits do\n    local digit = x / base\n\
    \    local remainder = x % base\n    local digitstr = string.format(\"%0*d\",\
    \ digits, digit)\n    local remainderstr = string.format(\"%0*d\", digits, remainder)\n\
    \    result = result .. digitstr .. remainderstr\n    x = x\n    digits = digits\
    \ - 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    result = string.format(\"%s%s\",\
    \ result, tostring(base))\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return string.format('%d', digits)..string.format('%d',\
    \ rest)\nend", "  local digits = math.floor(x/base)+1\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n    if digit\
    \ < 10 then\n      result = result .. \"0\" .. digit\n    else\n      result =\
    \ result .. digit\n    end\n    x = x - digit*base\n  end\n  return result\nend",
  "\tlocal digits = math.floor(math.log(x, base))\n\tlocal result = \"\"\n\tlocal\
    \ power = base\n\twhile digits > 0 do\n\t\tlocal digit = x % power\n\t\tx = x\
    \ / power\n\t\tresult = string.format(\"%s%s\", digit, result)\n\t\tpower = power\
    \ * base\n\t\tdigits = digits - 1\n\tend\n\tif x > 1 then\n\t\tresult = string.format(\"\
    %s%s\", x, result)\n\tend\n\treturn result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    local remainder = x / base\n    local remainder_digits = math.floor(math.log(remainder,\
    \ base))\n    local remainder_result = \"\"\n    while remainder_digits > 0 do\n\
    \      remainder_result = remainder_result .. digit\n      remainder_digits =\
    \ remainder_digits - 1\n    end\n    result = result .. remainder_result\n   \
    \ x = remainder\n    digits = digits - 1\n  end\n  return result .. x\nend", " \
    \ local digits = math.floor(math.log(abs(x), base))\n  local result = \"\"\n \
    \ for i = 1, digits do\n    local digit = math.floor((x / base) % (base))\n  \
    \  result = string.sub(result, 1, i-1) + digit\n    x = x / (base^i)\n  end\n\
    \  return result .. x\nend", "  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%d',\
    \ rest)\nend", "    if base < 2 then\n        error('base must be >= 2')\n   \
    \ end\n    if base == 10 then\n        return tostring(x)\n    end\n    local\
    \ digits = math.floor(x/base)\n    local remainder = x - base * digits\n    return\
    \ tostring(base * digits) + change_base(remainder, base)\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return tostring(digits) .. change_base(rest, base)\nend",
  "  local digits = math.floor(math.log(abs(x), base))\n  if digits == 0 then\n  \
    \  return \"\"\n  end\n  local factor = 10^(digits - 1)\n  local digit = math.floor(x/factor)\n\
    \  x = x - factor * digit\n  local result = \"\"\n  while x >= base do\n    local\
    \ digit = math.floor(x/base)\n    x = x - base * digit\n    result = result ..\
    \ digit\n  end\n  return result .. digit\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x/base)\n\
    \    digits = digits-1 \n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  if digits == 0 then\n    return string.format(\"%g\", x)\n  else\n\
    \    local factor = 10^(digits - 1)\n    return string.format(\"%g\", x * factor)\
    \ / factor\n  end\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format('%0*d', base, digits)\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ base)\n    result = result .. string.char(digit+base)\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return string.format(\"%0*d\", base, digits)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x % base\n  local result = \"\"\n  while x do\n    local digit = digits\
    \ % base\n    digits = digits / base\n    result = tostring(digit) + result\n\
    \    x = x * base + digit\n  end\n  return result\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n\
    \    result = string.format(\"%s%d\", result, digit)\n    x = x - digit*base\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log(abs(x), base))\n\
    \  local result = \"\"\n  local factor = 1\n  for i = 1, digits do\n    local\
    \ digit = math.floor(x/factor) % base\n    result = tostring(digit) + result\n\
    \    x = x - digit * factor\n    factor = factor * base\n  end\n  return tostring(x)\
    \ + result\nend", "  local s = ''\n  local i = 1\n  while x > 0 do\n    local\
    \ digit = math.floor(x/base)\n    s = string.format('%s%d', s, digit)\n    x =\
    \ x - digit*base\n    i = i + 1\n  end\n  return s\nend", "\tlocal digits = math.floor(math.log(x,\
    \ base))\n\tlocal result = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = math.floor(x/base%10)\n\
    \t\tx = x % base\n\t\tresult = result .. digit\n\t\tdigits = digits - 1\n\tend\n\
    \treturn result .. x\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    result = result .. string.format(\"%d\"\
    , base^i)\n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  if digits == 0 then\n    return string.format(\"%g\", x)\n  else\n\
    \    local digits = digits + 1\n    local base10 = math.pow(base, digits)\n  \
    \  return string.format(\"%g\", x / base10)\n  end\nend", "  if base < 2 then\n\
    \    error(\"base must be >= 2\")\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local result = \"\"\n  while x > 0 do\n    local digit\
    \ = math.floor(x/10)\n    local remainder = x - 10*digit\n    if digit == 0 then\n\
    \      result = result .. \"0\"\n    elseif digit == 1 then\n      result = result\
    \ .. \"b\"\n    elseif digit == 2 then\n      result = result .. \"o\"\n    elseif\
    \ digit == 3 then\n      result = result .. \"x\"\n    elseif digit == 4 then\n\
    \      result = result .. \"l\"\n    elseif digit == 5 then\n      result = result\
    \ .. \"h\"\n    elseif digit == 6 then\n      result = result .. \"d\"\n    elseif\
    \ digit == 7 then\n      result = result .. \"s\"\n    elseif digit == 8 then\n\
    \      result = result .. \"z\"\n    elseif digit == 9 then\n      result = result\
    \ .. \"t\"\n    else\n      error(\"invalid base\")\n    end\n    x = remainder\n\
    \  end\n  return result .. digits\nend", "    if base < 10 then\n        error('base\
    \ must be less than 10')\n    end\n    local s = ''\n    local i = 0\n    while\
    \ x > 0 do\n        local digit = x % base\n        s = string.format('%s%d',\
    \ s, digit)\n        x = math.floor(x/base)\n        i = i + 1\n    end\n    if\
    \ i == 0 then\n        s = string.format('%s%d', s, '0')\n    end\n    return\
    \ s\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits =\
    \ math.floor(x/base)\n  local rest = x - base*digits\n  return change_base(rest,\
    \ base):reverse()\nend", "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n\
    \  return string.format(\"%0*d\", digits, x)\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  local result = \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n\
    \    x = x/base\n    result = digit .. result\n  end\n  return result .. tostring(x)\n\
    end", "  local digits = math.floor(x/base)\n  x = x - digits * base\n  return\
    \ string.format('%d', x) + string.format('%0*d', base, digits)\nend", "  local\
    \ digits = math.floor(x/base)+1\n  local result = {}\n  for i = 1, digits do\n\
    \    table.insert(result, math.floor(x/base)*base+(i-1)*base)\n  end\n  return\
    \ table.concat(result, \"\")\nend", "  if base < 2 then\n    error('Base must\
    \ be greater than 2.')\n  end\n  local digits = math.floor(x/base)\n  local remainder\
    \ = x - base*digits\n  if remainder < 0 then\n    digits = digits + 1\n    remainder\
    \ = 0\n  end\n  return table.concat(digits, '') .. base\nend", "  local digits\
    \ = math.floor(x/base)\n  local result = \"\"\n  for i = 1, digits do\n    local\
    \ digit = math.mod(x, base)\n    result = result .. string.char(digit+base)\n\
    \    x = math.floor(x/base)\n  end\n  return result\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) .. tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base%10)\n    result = string.format(\"%s%d%s\"\
    , result, digit, base > 10 and \"0\" or \"\")\n    x = math.floor(x/base)\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/base)\n  local mod = x\
    \ % base\n  return string.format('%d', digits) .. string.format('%0*d', base,\
    \ mod)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local result = \"\"\n  while\
    \ x >= base do\n    result = tostring(digits%base) + result\n    x = x / base\n\
    \  end\n  return tostring(digits%base) + result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local i = 0\n  while i < digits do\n    local\
    \ digit = math.floor(x/base%10)\n    result = string.sub(result, 1, i-1) + digit\n\
    \    x = math.floor(x/10)\n    i = i + 1\n  end\n  return result + x\nend", " \
    \ local digits = math.floor(x/base)\n  local rest = x - base*digits\n  return\
    \ string.format('%d', digits)..string.format('%b', rest)\nend", "  local digits\
    \ = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format('%d',\
    \ digits)..string.format('%b', rest)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(math.log(x / base))\n  local digit = digits\
    \ % base\n  local new_x = x / base\n  local new_base = base * digits\n  return\
    \ change_base(new_x, new_base):sub(1, digit)\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n\
    \    if digit > 9 then\n      digit = digit - 9\n    end\n    result = result\
    \ .. string.char(digit)\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format(\"%0\" .. digits .. \"d\", x)\n\
    end", "\tlocal digits = math.floor(math.log(x, base))\n\tlocal digits_str = string.sub(tostring(x),\
    \ 1, digits)\n\tlocal digits_base = string.sub(tostring(base), 1, digits)\n\t\
    local digits_x = string.sub(tostring(x), digits)\n\tlocal digits_x_base = string.sub(tostring(x),\
    \ digits)\n\tlocal digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal digits_x_base\
    \ = digits_x_base:gsub(\"^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^\", \"\")\n\tlocal\
    \ digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"\
    ^\", \"\")\n\tlocal digits_x_base = digits_x_base:gsub(\"^0\", \"\")\n\tlocal\
    \ digits_x_base = digit", "    if base < 2 then\n        error('base must be >=\
    \ 2')\n    end\n    if base == 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(x/base)\n    local rest = x - base*digits\n   \
    \ return tostring(digits) .. change_base(rest, base)\nend", "  local s = \"\"\n\
    \  local i = 0\n  while x > 0 do\n    local digit = x % base\n    s = string.format(\"\
    %s%d\", s, digit)\n    x = math.floor(x/base)\n    i = i + 1\n  end\n  return\
    \ s\nend", "  local digits = math.floor(x/base)+1\n  if digits == 0 then\n   \
    \ return \"\"\n  end\n  local result = \"\"\n  local i = 1\n  while digits > 0\
    \ do\n    local digit = math.floor(x/base*base)+1\n    local digits = digits-1\n\
    \    if digit > 9 then\n      result = result .. \"0\"\n    end\n    result =\
    \ result .. string.char(digit+48)\n    x = x - digit*base\n  end\n  return result\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - digits * base\n\
    \  return digits * base + tostring(remainder)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. digit\n    x = math.floor(x/10)\n  end\n  if x > 0 then\n\
    \    result = result .. x\n  end\n  return result\nend", "  if x < 10 then\n \
    \   return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) + tostring(x)\nend", "  local digits\
    \ = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n    local\
    \ digit = math.mod(x, base)\n    result = string.format(\"%s%s\", digit, result)\n\
    \    x = math.floor(x/base)\n    digits = math.floor(x/base)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(x/base)\n  local result = \"\"\n\
    \  local remainder = x - base*digits\n  if remainder == 0 then\n    result = \"\
    0\"\n  else\n    local i = 1\n    while i <= digits do\n      result = string.format(\"\
    %s%d\", result, base)\n      i = i + 1\n    end\n  end\n  return result\nend",
  "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", digits, x)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = x % base\n    local\
    \ remainder = x / base\n    result = result .. string.format(\"%d\", digit)\n\
    \    x = remainder\n  end\n  if x > 1 then\n    result = result .. string.format(\"\
    %d\", x)\n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.format(\"%s%d%s\", result, digit, base)\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "\tlocal s = \"\"\n\tlocal digits = math.floor(x/base)\n\
    \tx = x - digits * base\n\twhile x >= base do\n\t\ts = string.format(\"%0\" ..\
    \ digits .. \"d\", x%base) .. s\n\t\tx = x/base\n\tend\n\treturn s\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  for i = 1, digits do\n\
    \    local digit = math.mod(x, base)\n    result = result .. string.sub(tostring(digit),\
    \ -base) .. tostring(digit)\n    x = math.floor(x/base)\n  end\n  return result\
    \ .. tostring(x)\nend", "  local digits = math.floor(math.log(x, base))\n  if\
    \ digits == 0 then\n    return string.format(\"%g\", x)\n  else\n    local factor\
    \ = 10^digits\n    return string.format(\"%g\", x * factor / base)\n  end\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return tostring(base*digits) + tostring(change_base(remainder,\
    \ base))\nend", "  local digits = math.floor(x/base)+1\n  local result = \"\"\n\
    \  local i = 0\n  while digits > 0 do\n    local digit = math.floor(x/base*base)+1\n\
    \    if digit > 9 then\n      result = result .. \"0\"\n    end\n    result =\
    \ result .. string.char(digit+48)\n    x = x - digit*base\n    digits = math.floor(x/base)+1\n\
    \    i = i + 1\n  end\n  return result\nend", "  -- base numbers are less than\
    \ 10.\n  assert(base < 10)\n  local s = ''\n  while x ~= 0 do\n    local digit\
    \ = x % base\n    s = string.format('%s%d', s, digit)\n    x = math.floor(x/base)\n\
    \  end\n  return s\nend", "    if base < 2 then\n        error('Base must be greater\
    \ than or equal to 2')\n    end\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    if base == 2 then\n        local s = tostring(x)\n        local\
    \ n = tonumber(s)\n        if n then\n            if n < 10 then\n           \
    \     return s\n            else\n                local m = math.floor(n / 10)\n\
    \                local r = n % 10\n                return string.format('%d%d',\
    \ m, r)\n            end\n        end\n    end\n    error('Base must be either\
    \ 10 or 2')\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format(\"%0\" .. digits .. \"d\", x)\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x", "  local s = \"\"\n  local\
    \ i = 1\n  while x > 0 do\n    local digit = x%base\n    s = string.rep(\"0\"\
    , digit) + s\n    x = math.floor(x/base)\n    i = i + 1\n  end\n  return s\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) .. tostring(x)\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return tostring(digits)..change_base(rest,\
    \ base)\nend", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n\
    \  else\n    return string.format(\"%0*d\", base, x)\n  end\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - digits * base\n  local result = \"\"\n  while x > 0 do\n    local digit\
    \ = tostring(x%base)\n    x = x / base\n    result = digit .. result\n  end\n\
    \  return result .. tostring(x)\nend", "  if x < 10 then\n    return string.format(\"\
    %0*d\", base, x)\n  else\n    return string.format(\"%0*d\", base, x)\n  end\n\
    end", "  -- base is less than 10\n  if base < 10 then\n    local digits = math.floor(x/base)\n\
    \    return digits * base + x%base\n  end\n  -- base is greater than 10\n  local\
    \ digits = math.floor(x/base)\n  local remainder = x - digits * base\n  return\
    \ digits * base + change_base(remainder, base) -- recursive call\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = x / base\n    result = digit .. result\n \
    \ end\n  return result .. tostring(digits)\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return tostring(base*digits) + tostring(x)\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x % base\n  local\
    \ result = \"\"\n  while x do\n    local digit = tostring(x)\n    if digits >\
    \ 0 then\n      result = result .. tostring(digits)\n    end\n    if digit ==\
    \ 0 then\n      break\n    end\n    digits = digits - 1\n    x = x / base\n  end\n\
    \  return result .. tostring(digits)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - digits * base\n  return\
    \ tostring(x) + tostring(base):sub(1, digits)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local i = 0\n  while i < digits do\n    local\
    \ digit = math.floor(x/base%10)\n    local carry = digit*base\n    if carry >\
    \ 9 then\n      carry = math.floor(carry/10)\n    end\n    result = string.format(\"\
    %s%d\", result, carry)\n    x = x - digit*base\n    i = i + 1\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n  \
    \  result = string.format(\"%s%d%s\", result, digit, base.to_string(digit))\n\
    \    x = math.floor(x/base)\n  end\n  return result\nend", "    if base < 2 then\n\
    \        error(\"base must be >= 2\")\n    end\n    if base == 10 then\n     \
    \   return tostring(x)\n    end\n    local digits = math.floor(x/base)\n    local\
    \ remainder = x - base*digits\n    return tostring(base*digits) + change_base(remainder,\
    \ base)\nend", "  local digits = math.floor(x/base)\n  local result = \"\"\n \
    \ while digits > 0 do\n    local digit = math.mod(x, base)\n    result = string.format(\"\
    %s%d\", result, digit)\n    x = math.floor(x/base)\n    digits = digits - 1\n\
    \  end\n  return result\nend", "    if base < 2 then\n        error(\"base must\
    \ be >= 2\")\n    end\n    local s = \"\"\n    while x > 0 do\n        local digit\
    \ = x%base\n        s = string.format(\"%d%s\", digit, s)\n        x = math.floor(x/base)\n\
    \    end\n    return s\nend", "  local digits = math.floor(x/base)\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n    result\
    \ = string.format(\"%s%s\", digit, result)\n    x = math.floor(x / base)\n   \
    \ digits = digits - 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base)\n\
    \    local remainder = x - digit*base\n    if remainder > 0 then\n      result\
    \ = string.format(\"%0*d\", base, digit) + result\n    else\n      result = string.format(\"\
    %0*d\", base, digit) + result\n    end\n    x = remainder\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  while digits > 0 do\n    local digit = x / base\n    local mod = digits % base\n\
    \    local digit = math.floor(digit)\n    local mod = math.floor(mod)\n    local\
    \ digits = digits - mod\n    result = result .. string.sub(tostring(digit), -mod)\
    \ .. mod\n  end\n  return result\nend", "\t-- Base numbers are less than 10.\n\
    \tassert(base < 10)\n\t-- Convert x to string.\n\tx = tostring(x)\n\t-- Convert\
    \ base to string.\n\tbase = tostring(base)\n\t-- Convert x to base string.\n\t\
    local x_str = string.sub(x, 1, string.len(x) - 2)\n\t-- Convert base to base string.\n\
    \tlocal base_str = string.sub(base, 1, string.len(base) - 2)\n\t-- Convert base\
    \ to integer.\n\tlocal base_int = tonumber(base_str)\n\t-- Convert x to integer.\n\
    \tlocal x_int = tonumber(x_str)\n\t-- Convert x to string.\n\tlocal x_str = tonumber(x_str)\
    \ * base_int / base\n\t-- Convert base to string.\n\tlocal base_str = tostring(base_int\
    \ % base)\n\t-- Convert base to string.\n\tlocal x_str = x_str * base_str\n\t\
    -- Convert x to string.\n\tlocal x_str = tostring(x_str)\n\t-- Return string.\n\
    \treturn x_str\nend", "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n\
    \  local result = \"\"\n  while x >= base do\n    result = string.format(\"%0*d\"\
    , digits, x%base) + result\n    x = x/base\n  end\n  if x ~= 1 then\n    result\
    \ = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\nend",
  "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0\" .. digits .. \"d\", x)\nend", "  local digits = math.floor(x/base)+1\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    result = result .. string.format(\"\
    %d\", base^i)\n  end\n  return result\nend", "  local digits = math.floor(x/base);\n\
    \  x = x - base*digits;\n  return string.format(\"%0\" .. digits .. \"d\", x);\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = math.floor(x/base)\n    result = digit ..\
    \ result\n  end\n  return result .. digits\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - digits *\
    \ base\n  local result = \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n\
    \    x = x / base\n    result = digit .. result\n  end\n  return result .. tostring(x)\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  return change_base(digits, base) + tostring(mod)\n\
    end", "  local s = \"\"\n  local factor = 1\n  while x > 0 do\n    local digit\
    \ = x%base\n    s = string.rep(\"0\", digit) + s\n    x = math.floor(x/base)\n\
    \    factor = factor * base\n  end\n  return factor * s\nend", "  -- base numbers\
    \ are less than 10.\n  assert(base < 10)\n  local s = ''\n  -- Convert x to string\
    \ and split it into digits.\n  local digits = tostring(x).\n    split(''):reverse():map(function(digit)\n\
    \      -- Convert digit to integer and multiply by base.\n      return tonumber(digit)\
    \ * base\n    end)\n  -- Reverse the digits before joining them into string.\n\
    \  digits:reverse():map(function(digit)\n    -- Convert digit to string and concatenate\
    \ it to the result.\n    s = s .. tostring(digit)\n  end)\n  return s\nend", " \
    \   if x < 10 then\n        return string.format(\"%0*d\", base, x)\n    else\n\
    \        return string.format(\"%0*d\", base, x)\n    end\nend", "  local digits\
    \ = math.floor(x/base)\n  local mod = x % base\n  if digits == 0 then\n    return\
    \ mod\n  else\n    return change_base(digits, base) .. mod\n  end\nend", "  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", base, digits)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - digits * base\n  local result\
    \ = \"\"\n  while x ~= 0 do\n    local digit = tostring(x%base)\n    x = math.floor(x/base)\n\
    \    result = digit .. result\n  end\n  return result .. digits\nend", "  if x\
    \ < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return change_base(rest, base):reverse()\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local remainder = x % base\n  return change_base(digits, base) + tostring(remainder)\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - base*digits\n\
    \  return string.format('%d', digits)..string.format('%d', remainder)\nend", " \
    \ local digits = math.floor(x/base)+1\n  local result = \"\"\n  while digits >\
    \ 0 do\n    local digit = math.mod(x, base)\n    local remainder = math.floor(digit/base)\n\
    \    result = string.rep(digit, base-1) + result\n    x = remainder\n    digits\
    \ = math.floor(x/base)+1\n  end\n  return result\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ base)+1\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "\tlocal digits = math.floor(x/base)+1\n\tlocal\
    \ result = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = math.mod(x, base)\n\t\
    \tresult = string.format(\"%s%d\", result, digit)\n\t\tx = math.floor(x/base)\n\
    \t\tdigits = digits-1\n\tend\n\treturn result\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(math.log(x ^ base) / math.log(base))\n\
    \  return tostring(base * math.pow(base, digits))\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return base*digits .. rest\nend", "  -- base\
    \ numbers are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    local digitString = tostring(digit)\n    local digitBase = tostring(base)\n\
    \    if digitBase == \"10\" then\n      digitString = digitString .. \"0\"\n \
    \   end\n    result = result .. digitString\n    x = math.floor(x/base)\n    digits\
    \ = digits - 1\n  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n  \
    \  local t = x % base\n    s = string.rep(\"0\", i - 1) + string.rep(\"1\", t\
    \ - 1) + s\n    x = x / base\n    i = i + 1\n  end\n  return s\nend", "\tlocal\
    \ digits = math.floor(x/base)\n\tx = x - base*digits\n\tlocal result = \"\"\n\t\
    while x > 0 do\n\t\tresult = string.format(\"%d%s\", digits, result) -- Add leading\
    \ zeros.\n\t\tx = math.floor(x/base)\n\tend\n\treturn result\nend", "  local digits\
    \ = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"%0\" ..\
    \ digits .. \"d\", x)\nend", "  local s = \"\"\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  while x >= base do\n    s = string.format(\"%0\" ..\
    \ digits .. \"d\", x%base) .. s\n    x = math.floor(x/base)\n  end\n  return s\n\
    end", "  if x < 10 then\n    return string.format('%0', x) + string.format('%0',\
    \ base)\n  end\n  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return string.format('%0', digits) + string.format('%0', rest)\nend", "  --\
    \ base numbers are less than 10.\n  assert(base < 10)\n  local s = ''\n  -- convert\
    \ x to string and add leading zeros.\n  s = string.format('%0', base) .. s\n \
    \ -- convert x to string and add leading zeros.\n  s = string.format('%0', base)\
    \ .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  s = string.format('%0',\
    \ base) .. s\n  -- convert x to string and add leading zeros.\n  ", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  local i = 0\n  while\
    \ i < digits do\n    local digit = x % base\n    local remainder = x / base\n\
    \    local result = result .. string.format(\"%d\", digit)\n    x = remainder\n\
    \    i = i + 1\n  end\n  if x > 1 then\n    result = result .. string.format(\"\
    %d\", x)\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  for i = 1, digits do\n    result = base .. result\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.format(\"%s%d%s\", result, digit, base.chars[i])\n    x =\
    \ math.floor(x/base)\n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. digit\n    x = math.floor(x/10)\n  end\n  return result\
    \ .. x\nend", "    if base < 2 then\n        error('base must be >= 2')\n    end\n\
    \    if base == 10 then\n        return tostring(x)\n    end\n    local digits\
    \ = math.floor(x/base)\n    if digits == 0 then\n        return tostring(x)\n\
    \    end\n    local digits_str = tostring(digits)\n    local digits_len = #digits_str\n\
    \    local digits_remainder = x - digits * base\n    local digits_remainder_str\
    \ = tostring(digits_remainder)\n    local digits_remainder_len = #digits_remainder_str\n\
    \    local digits_remainder_str = string.sub(digits_remainder_str, 1, digits_len\
    \ - digits_remainder_len)\n    return digits_str .. digits_remainder_str\nend",
  "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    result = result .. string.format(\"%d\", base^i)\n  end\n  return result\n\
    end", "  -- base numbers are less than 10.\n  assert(base < 10)\n  local digits\
    \ = math.floor(x/base)\n  local result = \"\"\n  -- Convert from base 10 to base\
    \ 10.\n  while digits > 0 do\n    local digit = digits % base\n    digits = digits\
    \ / base\n    result = string.format(\"%s%s\", digit, result)\n  end\n  -- Convert\
    \ from base 10 to base 10.\n  while digits > 0 do\n    local digit = digits %\
    \ base\n    digits = digits / base\n    result = string.format(\"%s%s\", digit,\
    \ result)\n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local power = base\n  for i = 1, digits do\n\
    \    local digit = math.floor(x/power)\n    result = string.format(\"%s%0*d\"\
    , result, base, digit)\n    power = power * base\n  end\n  return result\nend",
  "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit = x%base\n \
    \   x = math.floor(x/base)\n    s = string.sub(tostring(digit), -i-1..-1, i-1..-1)\
    \ + s\n    i = i + 1\n  end\n  return s\nend", "  if base < 2 then\n    error(\"\
    Base must be greater than 1\")\n  end\n  local digits = math.floor(x/base^0)\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = x % base\n \
    \   result = string.format(\"%s%d\", result, digit)\n    x = x / base\n  end\n\
    \  if x > 1 then\n    result = string.format(\"%s%d\", result, x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  local i = 0\n  while digits > 0 do\n    local digit = math.floor(x/base%10)\n\
    \    local remainder = x/base%10\n    local digits = digits-1\n    if remainder\
    \ == 0 then\n      result = result .. digit\n    else\n      result = result ..\
    \ tostring(digit) .. tostring(remainder)\n    end\n    x = x%base\n    i = i +\
    \ 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n  x =\
    \ x - base*digits\n  return string.format(\"%0*d\", base, digits)\nend", "  if\
    \ base < 2 then\n    error('base must be >= 2')\n  end\n  local digits = math.floor(x/base^0)\n\
    \  x = x - base*digits\n  return string.format('%d', x)\nend", "  local digits\
    \ = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n    local\
    \ digit = math.mod(x, base)+1\n    result = string.format(\"%c%0*d\", digit, base,\
    \ digit)\n    x = math.floor(x / base)\n  end\n  return result\nend", "  if x\
    \ < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = math.floor(x/base)\n    result = tostring(digit) + result\n    x = x\
    \ - digit * base\n  end\n  return result\nend", "  -- base numbers are less than\
    \ 10.\n  assert(base < 10)\n  local s = ''\n  while x ~= 0 do\n    local digit\
    \ = x % base\n    s = string.format('%s%d', s, digit)\n    x = math.floor(x/base)\n\
    \  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n  end\n \
    \ local digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n \
    \ while x do\n    local digit = math.floor(x/base)\n    if digit == 0 then\n \
    \     result = result .. \"0\"\n    else\n      result = result .. tostring(digit)\n\
    \    end\n    x = x % base\n  end\n  return result .. tostring(digits)\nend",
  "  local digits = math.floor(math.log(x, base))\n  if digits == 0 then\n    return\
    \ x\n  end\n  local factor = 1\n  for i = 1, digits do\n    factor = (factor *\
    \ base) + x\n  end\n  return factor\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    local remainder = x / base\n    local new_digit = math.floor(remainder)\n\
    \    result = string.format(\"%s%s\", digit, result)\n    x = new_digit\n    digits\
    \ = digits - 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format('%d', x)\nend", "  local digits\
    \ = math.floor(x/base)+1\n  local result = {}\n  for i = 1, digits do\n    table.insert(result,\
    \ base*i)\n  end\n  return table.concat(result)\nend", "  -- base is less than\
    \ 10\n  if base < 10 then\n    -- base is less than 10\n    if base == 0 then\n\
    \      -- base is 0\n      return tostring(x)\n    else\n      -- base is less\
    \ than 10\n      return tostring(x * base^2)\n    end\n  else\n    -- base is\
    \ greater than 10\n    if base == 0 then\n      -- base is 0\n      return tostring(x)\n\
    \    else\n      -- base is greater than 10\n      local y = x / base\n      local\
    \ z = x % base\n      return change_base(y, base) + tostring(z) .. change_base(z,\
    \ base)\n    end\n  end\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(math.log(base * x + 1, base))\n  return tostring(base *\
    \ x + 1):sub(1, digits + 1):reverse()\nend", "\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_base(8, 3)\n\t-- '22'\n\t-- >>> change_base(8, 2)\n\t--\
    \ '1000'\n\t-- >>> change_base(7, 2)\n\t-- '111'\n\t-- base numbers are less than\
    \ 10.\n\t-- >>> change_", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x, base)\n    result\
    \ = result .. string.char(digit+base)\n    x = math.floor(x/base)\n  end\n  return\
    \ result\nend", "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n\
    \  else\n    return string.format(\"%0*d\", base, x)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
