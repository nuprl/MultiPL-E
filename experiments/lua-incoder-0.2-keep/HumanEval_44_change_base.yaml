name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = \"\"\n  local basestring\n  if base == 10 then\n    basestring\
    \ = \"0123456789\"\n  elseif base == 16 then\n    basestring = \"0123456789abcdef\"\
    \n  else\n    error(\"invalid base\")\n  end\n  for i = 1, x do\n    s = s ..\
    \ basestring[math.floor(x/base)]\n    x = x % base\n  end\n  return s\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits2 = math.floor(x/base)\n  x = x - digits2\
    \ * base\n  return tostring(digits, base) + tostring(digits2, base)\nend", " \
    \ local digits = math.floor(x/base)+1\n  if digits == 0 then\n    return \"\"\n\
    \  elseif digits == 1 then\n    return string.format(\"%0*d\", base, x)\n  else\n\
    \    return string.format(\"%0*d\", base, x)\n  end\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    local carry = digit > 0 and 1 or 0\n    local digit = digit - carry + 10\n\
    \    result = result .. string.format(\"%0d\", digit)\n    x = math.floor(x/10)\n\
    \  end\n  return result .. string.format(\"%0d\", x)\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return tostring(digits) .. change_base(rest, base)\nend",
  "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base*base)+1\n    result = result .. digit\n\
    \    x = x - digit*base\n  end\n  return result\nend", "  local digits = math.floor(math.log(abs(x),\
    \ base))\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor((x / base) * base)\n    result = result .. tostring(digit)\n\
    \    x = x - digit\n    i = i + 1\n  end\n  if x > 0 then\n    result = result\
    \ .. tostring(x)\n  end\n  return result\nend", "  -- base is less than 10\n \
    \ if base < 10 then\n    -- convert base to string\n    local s = ''\n    for\
    \ i = 1, base do\n      s = s .. '0'\n    end\n    -- convert x to string\n  \
    \  local s = s .. x\n    -- convert string to number\n    local n = tonumber(s)\n\
    \    -- convert number to base string\n    local s = tonumber(s, base)\n    --\
    \ convert base to string\n    local s = s .. s\n    -- return converted number\n\
    \    return s\n  else\n    -- convert base to string\n    local s = ''\n    for\
    \ i = 1, base do\n      s = s .. '0'\n    end\n    -- convert x to string\n  \
    \  local s = s .. x\n    -- convert string to number\n    local n = tonumber(s)\n\
    \    -- convert number to base string\n    local s = tonumber(s, 10)\n    -- convert\
    \ base to string\n    local s = s .. s\n    -- return converted number\n    return\
    \ s\n  end\nend", "  local digits = math.floor(math.log(abs(x), base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    x = math.floor(x/base)\n    result = result .. digit\n  end\n  if x > 0 then\n\
    \    result = result .. x\n  end\n  return result\nend", "  if x < 10 then\n \
    \   return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) .. tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  local power = base\n\
    \  while digits > 0 do\n    local digit = x % power\n    local remainder = x /\
    \ power\n    local result = result .. string.format(\"%d\", digit)\n    x = remainder\n\
    \    power = power * base\n    digits = digits - 1\n  end\n  return result ..\
    \ string.format(\"%d\", x)\nend", "    if x < 10 then\n        return tostring(x)\n\
    \    end\n    local digits = math.floor(x/base)\n    local mod = x % base\n  \
    \  if mod > 0 then\n        return tostring(digits) .. tostring(mod)\n    else\n\
    \        return tostring(digits)\n    end\nend", "  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return tostring(base*digits) .. tostring(x)\nend", "    if x < 10 then\n  \
    \      return tostring(x)\n    end\n    local digits = math.floor(x/base)\n  \
    \  local rest = x - base*digits\n    return tostring(base*digits) + change_base(rest,\
    \ base)\nend", "  local digits = math.floor(x/base)+1\n  local result = {}\n \
    \ for i = 1, digits do\n    result[#result+1] = base*i\n  end\n  return table.concat(result,\
    \ '') .. tostring(base^digits)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x", "  -- Base 10\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  -- Base 2\n  if base == 2 then\n    local s = tostring(x)\n    local\
    \ n = tonumber(s)\n    if n then\n      return tostring(n / 2)\n    end\n  end\n\
    \  -- Base 16\n  if base == 16 then\n    local s = tostring(x)\n    local n =\
    \ tonumber(s)\n    if n then\n      return tostring(n / 16)\n    end\n  end\n\
    \  -- Base 8\n  if base == 8 then\n    local s = tostring(x)\n    local n = tonumber(s)\n\
    \    if n then\n      return tostring(n / 8)\n    end\n  end\n  -- Base 16\n \
    \ if base == 16 then\n    local s = tostring(x)\n    local n = tonumber(s)\n \
    \   if n then\n      return tostring(n / 16)\n    end\n  end\n  -- Base 10\n \
    \ if base == 10 then\n    local s = tostring(x)\n    local n = tonumber(s)\n \
    \   if n then\n      return tostring(n / 10)\n    end\n  end\n  -- Base 2\n  if\
    \ base == 2 then\n    local s = tostring(x)\n    local n = tonumber(s)\n    if\
    \ n then\n      return tostring(n / 2)\n    end\n  end\n  -- Base 16\n  if base\
    \ == 16 then\n    local s = tostring(x)\n    local n = tonumber(s)\n    if n then\n\
    \      return tostring(n / 16)\n    end\n  end\n  -- Base 8\n  if base == 8 then\n\
    \    local s = tostring(x)\n    local n = tonumber(s)\n    if n then\n      return\
    \ tostring(n / 8)\n    end\n  end\n  -- Base 16\n  if base == 16 then\n    local\
    \ s = tostring(x)\n    local n = tonumber(s)\n    if n then\n      return tostring(n\
    \ / 16)\n    end\n  end\n  -- Base 10\n  if base == 10 then\n    local s = tostring(x)\n\
    \    local n = tonumber(s)\n    if n then\n      return tostring(n / 10)\n   \
    \ end\n  end\n  -- Base 2\n  if base == 2 then\n    local s = tostring(x)\n  \
    \  local n = tonumber(s)\n    if n then\n      return tostring(n / 2)\n    end\n\
    \  end\n  -- Base 16\n  if base == 16 then\n    local s = tostring(x)\n    local\
    \ n = tonumber(s)\n    if n then\n      return tostring(n / 16)\n    end\n  end\n\
    \  -- ", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base * digits\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = x / base\n    result = digit .. result\n \
    \ end\n  return result .. tostring(digits)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local i = 0\n  while digits > 0 do\n    local\
    \ digit = math.floor(x/base%10)\n    i = i + 1\n    if i == digits then\n    \
    \  result = result .. digit\n      i = 0\n    end\n    result = result .. string.char(digit+48)\n\
    \    x = math.floor(x/10)\n  end\n  return result\nend", "  local s = \"\"\n \
    \ local factor = 1\n  while x >= base do\n    factor = (factor * base) + x\n \
    \   x = x - factor\n    s = s .. tostring(x)\n  end\n  return s\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
