name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- tri(3) = [1, 3, 2,\
  \ 8]\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend", "  local result\
    \ = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result, i)\n    i\
    \ = i + 2\n  end\n  return result\nend", "    local a = 1\n    local b = 1\n \
    \   local c = 0\n    local result = {a}\n    for i = 1, n do\n        local tmp\
    \ = a\n        a = b\n        b = tmp + c\n        c = a + b\n        table.insert(result,\
    \ c)\n    end\n    return result\nend", "  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + d)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, b + c + b + d)\n    table.insert(a, c + b +\
    \ b + d)\n    table.insert(a, b + c + b + c + d)\n    table.insert(a, c + b +\
    \ b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c +\
    \ b + c + d)\n    table.insert(a, c + b + b + c + b + c + b + c + b + d)\n   \
    \ table.insert(a, b + c + b + c + b + c + b + c + b + c + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c +\
    \ b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, c + b +\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a,\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n   \
    \ table.insert(a, c + b + b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, c +\
    \ b + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c +\
    \ b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c +\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ c + b + d)\n    table.insert(a, c + b + b + c + b + c + b", "  local function\
    \ tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    end\n    if n == 1\
    \ then\n      return b\n    end\n    return tri_aux(n - 1, a + b, b)\n  end\n\
    \  return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n)\n    if n == 1\
    \ then\n      return 1\n    elseif n == 2 then\n      return 3\n    elseif n %\
    \ 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n\
    \    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    \n    local\
    \ tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc\
    \ + tri_aux_1)\n    \n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  \n  return\
    \ tri_aux(n, 3)\nend", "  local result = {n}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 0\n  local d = 1\n  local e = 1\n  local\
    \ f = 1\n  local g = 1\n  local h = 1\n  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local l = 1\n  local m = 1\n  local n = n + 1\n  while n >= 1 do\n  \
    \  a[#a + 1] = a[#a] + b\n    i = i + 2\n    j = j + 2\n    k = k + 2\n    l =\
    \ l + 2\n    m = m + 2\n    n = n - 1\n  end\n  a[#a + 1] = m + h\n  a[#a + 1]\
    \ = n + g\n  return a\nend", "  local function tri_aux(n, acc)\n    if n == 1\
    \ then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc +\
    \ 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1\
    \ + tri_aux_2 + acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local\
    \ b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + ", "    local result = {1}\n    local i = 1\n    while i <= n do\n     \
    \   table.insert(result, i)\n        i = i + 2\n    end\n    return result\nend",
  "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local result = {n}\n  local i = 1\n  while i <= n do\n    local\
    \ tmp = i\n    i = i + 2\n    table.insert(result, tmp)\n  end\n  return result\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 =\
    \ tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n\
    \ - 1, acc + tri_aux_2)\n  end\n  return tri_aux(n, 3)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    elseif\
    \ n == 2 then\n      table.insert(acc, 1)\n      table.insert(acc, 2)\n    else\n\
    \      local a, b, c = tri_aux(n - 1, acc)\n      table.insert(acc, a + b)\n \
    \     table.insert(acc, c + a)\n    end\n    return acc\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend", "  local result\
    \ = {1}\n  for i = 2, n do\n    table.insert(result, tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n  end\n  return result\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 1 then\n            return acc\n        else\n            return\
    \ tri_aux(n - 1, tri_aux(n - 1, acc) + tri(n - 2))\n        end\n    end\n   \
    \ return tri_aux(n, 3)\nend", "  local result = {n}\n  local i = 1\n  while i\
    \ <= n do\n    local tmp = i\n    i = i + 2\n    table.insert(result, tmp)\n \
    \ end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
