name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a list of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- tri(3) = [1, 3, 2,\
  \ 8]\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function tri_aux(n, a, b)\n    if n == 0 then\n      return\
    \ a\n    elseif n == 1 then\n      return b\n    else\n      return tri_aux(n\
    \ - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3, 1)\nend", "  local result\
    \ = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result, i)\n    i\
    \ = i + 2\n  end\n  return result\nend", "    local a = 1\n    local b = 1\n \
    \   local c = 0\n    local result = {a}\n    for i = 1, n do\n        local tmp\
    \ = a\n        a = b\n        b = tmp + c\n        c = a + b\n        table.insert(result,\
    \ c)\n    end\n    return result\nend", "  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + d)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, b + c + b + d)\n    table.insert(a, c + b +\
    \ b + d)\n    table.insert(a, b + c + b + c + d)\n    table.insert(a, c + b +\
    \ b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c +\
    \ b + c + d)\n    table.insert(a, c + b + b + c + b + c + b + c + b + d)\n   \
    \ table.insert(a, b + c + b + c + b + c + b + c + b + c + d)\n    table.insert(a,\
    \ c + b + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c +\
    \ b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, c + b +\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a,\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n   \
    \ table.insert(a, c + b + b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, c +\
    \ b + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c +\
    \ b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c +\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b +\
    \ c + b + d)\n    table.insert(a, c + b + b + c + b + c + b", "  local function\
    \ tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    end\n    if n == 1\
    \ then\n      return b\n    end\n    return tri_aux(n - 1, a + b, b)\n  end\n\
    \  return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n)\n    if n == 1\
    \ then\n      return 1\n    elseif n == 2 then\n      return 3\n    elseif n %\
    \ 2 == 0 then\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 3)\n\
    \    else\n      return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n - 1) + tri_aux(n\
    \ - 2) + tri_aux(n - 3)\n    end\n  end\n  return tri_aux(n)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    \n    local\
    \ tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc\
    \ + tri_aux_1)\n    \n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  \n  return\
    \ tri_aux(n, 3)\nend", "  local result = {n}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 0\n  local d = 1\n  local e = 1\n  local\
    \ f = 1\n  local g = 1\n  local h = 1\n  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local l = 1\n  local m = 1\n  local n = n + 1\n  while n >= 1 do\n  \
    \  a[#a + 1] = a[#a] + b\n    i = i + 2\n    j = j + 2\n    k = k + 2\n    l =\
    \ l + 2\n    m = m + 2\n    n = n - 1\n  end\n  a[#a + 1] = m + h\n  a[#a + 1]\
    \ = n + g\n  return a\nend", "  local function tri_aux(n, acc)\n    if n == 1\
    \ then\n      return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc +\
    \ 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1\
    \ + tri_aux_2 + acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local\
    \ b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, c + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ c + ", "    local result = {1}\n    local i = 1\n    while i <= n do\n     \
    \   table.insert(result, i)\n        i = i + 2\n    end\n    return result\nend",
  "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local result = {n}\n  local i = 1\n  while i <= n do\n    local\
    \ tmp = i\n    i = i + 2\n    table.insert(result, tmp)\n  end\n  return result\n\
    end", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n\
    \    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 =\
    \ tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n\
    \ - 1, acc + tri_aux_2)\n  end\n  return tri_aux(n, 3)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    elseif\
    \ n == 2 then\n      table.insert(acc, 1)\n      table.insert(acc, 2)\n    else\n\
    \      local a, b, c = tri_aux(n - 1, acc)\n      table.insert(acc, a + b)\n \
    \     table.insert(acc, c + a)\n    end\n    return acc\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 0 then\n      return tri_aux\n    else\n      return tri_aux\
    \ + tri(n - 1)\n    end\n  end\n  return tri_aux(n, 3)\nend", "  local result\
    \ = {1}\n  for i = 2, n do\n    table.insert(result, tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n  end\n  return result\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 1 then\n            return acc\n        else\n            return\
    \ tri_aux(n - 1, tri_aux(n - 1, acc) + tri(n - 2))\n        end\n    end\n   \
    \ return tri_aux(n, 3)\nend", "  local result = {n}\n  local i = 1\n  while i\
    \ <= n do\n    local tmp = i\n    i = i + 2\n    table.insert(result, tmp)\n \
    \ end\n  return result\nend", "  if n == 1 then\n    return [3]\n  elseif n ==\
    \ 2 then\n    return [1, 3]\n  elseif n % 2 == 0 then\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3)\n  end\nend", "  local function tri_aux(n, acc)\n    if n\
    \ == 1 then\n      return acc\n    elseif n == 2 then\n      return tri_aux(n\
    \ - 1, acc)\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc) + acc))\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc) + tri(n - 1) + tri(n - 2)))\n    end\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local\
    \ d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, b + c)\n\
    \    table.insert(a, b + d)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, c + d + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, ",
  "  local result = {1}\n  local i = 1\n  while i <= n do\n    table.insert(result,\
    \ i)\n    i = i + 2\n  end\n  return result\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    elseif n == 0 then\n      return\
    \ nil\n    elseif n % 2 == 0 then\n      return tri_aux(n / 2, acc + 1)\n    else\n\
    \      return tri_aux(n / 2, acc + 1) + tri_aux(n / 2, acc + 2)\n    end\n  end\n\
    \  return tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n\
    \  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n   \
    \ table.insert(a, c + d + b)\n    table.insert(a, c + d + b + a)\n    table.insert(a,\
    \ c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a)\n    table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b\
    \ + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d\
    \ + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a\
    \ + c + d + b + a + c + d + b + ", "    local function tri_aux(n)\n        if\
    \ n == 1 then\n            return 3\n        elseif n == 2 then\n            return\
    \ 1 + n / 2\n        else\n            return tri_aux(n - 1) + tri_aux(n - 2)\
    \ + tri(n + 1)\n        end\n    end\n    return tri_aux(n)\nend", "  local a\
    \ = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i\
    \ <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2\
    \ = tri_aux(n - 2, acc + tri_aux_1 + tri_aux_1)\n    return tri_aux_1 + tri_aux_2\
    \ + tri_aux_2\n  end\n  return tri_aux(n, 3)\nend", "  local a = 1\n  local b\
    \ = 1\n  local c = 0\n  local d = 1\n  local result = {a}\n  for i = 1, n do\n\
    \    local tmp = a\n    a = b\n    b = c\n    c = d\n    d = tmp + a + b + c\n\
    \    table.insert(result, d)\n  end\n  return result\nend", "  if n == 0 then\n\
    \    return nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  end\nend", "  local n1 = 1\n  local\
    \ n2 = 1\n  local n3 = 1\n  local n4 = 1\n  local n5 = 1\n  local n6 = 1\n  local\
    \ n7 = 1\n  local n8 = 1\n  local n9 = 1\n  local n10 = 1\n  local n11 = 1\n \
    \ local n12 = 1\n  local n13 = 1\n  local n14 = 1\n  local n15 = 1\n  local n16\
    \ = 1\n  local n17 = 1\n  local n18 = 1\n  local n19 = 1\n  local n20 = 1\n  local\
    \ n21 = 1\n  local n22 = 1\n  local n23 = 1\n  local n24 = 1\n  local n25 = 1\n\
    \  local n26 = 1\n  local n27 = 1\n  local n28 = 1\n  local n29 = 1\n  local n30\
    \ = 1\n  local n31 = 1\n  local n32 = 1\n  local n33 = 1\n  local n34 = 1\n  local\
    \ n35 = 1\n  local n36 = 1\n  local n37 = 1\n  local n38 = 1\n  local n39 = 1\n\
    \  local n40 = 1\n  local n41 = 1\n  local n42 = 1\n  local n43 = 1\n  local n44\
    \ = 1\n  local n45 = 1\n  local n46 = 1\n  local n47 = 1\n  local n48 = 1\n  local\
    \ n49 = 1\n  local n50 = 1\n  local n51 = 1\n  local n52 = 1\n  local n53 = 1\n\
    \  local n54 = 1\n  local n55 = 1\n  local n56 = 1\n  local n57 = 1\n  local n58\
    \ = 1\n  local n59 = 1\n  local n60 = 1\n  local n61 = 1\n  local n62 = 1\n  local\
    \ n63 = 1\n  local n64 = 1\n  local n65 = 1\n  local n66 = 1\n  local n67 = 1\n\
    \  local n68 = 1\n  local n69 = 1\n  local n70 = 1\n  local n71 = 1\n  local n72\
    \ = 1\n  local n73 = 1\n  local n74 = 1\n  local n75 = 1\n  local n76 = 1\n  local\
    \ n77 = 1\n  local n78 = 1\n  local n79 = 1\n  local n80 = 1\n  local n81 = 1\n\
    \  local n82 = 1\n  local ", "  local a = {}\n  local i = 1\n  while i <= n do\n\
    \    table.insert(a, i)\n    i = i + 2\n  end\n  return a\nend", "  local function\
    \ tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    end\n    if n ==\
    \ 1 then\n      return b\n    end\n    return tri_aux(n - 1, a + b, c, a + c)\n\
    \  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local a = {}\n  local b = 1\n \
    \ local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ b + d)\n    table.insert(a, c + b + d)\n    table.insert(a, b + c + d)\n   \
    \ table.insert(a, c + b + c + d)\n    table.insert(a, b + c + b + d)\n    table.insert(a,\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + d)\n    table.insert(a,\
    \ c + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b +\
    \ d)\n    table.insert(a, c + b + c + b + c + b + c + b + d)\n    table.insert(a,\
    \ b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, c + b + c + b +\
    \ c + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, c + b + c + b + c + b + c + b + c +\
    \ b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b + c +\
    \ b + c + b + d)\n    table.insert(a, c + b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + d)\n    table.insert(a, b + c + b + c + b + c + b + c + b +\
    \ c + b + c + b + c + b + d)\n    table.insert(a, c + b + c + b + c + b + c +\
    \ b + c + b + c + b + c + b + c + b + d)\n    table.insert(a, b + c + b + c +\
    \ b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n    table.insert(a,\
    \ c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + c + b + d)\n\
    \    table.insert(a, b + c + b + c + b + c + b + c + b + c + b + c + b + c + b\
    \ + c + b + c + b + d)\n    table.insert(a, c + b + c + b + c + b + c + b + c\
    \ + b + c + b + c + b + c + b + c + b + c + b + d)\n", "  local function tri_aux(n,\
    \ tri_aux, tri_sum)\n    if n == 0 then\n      return tri_sum\n    elseif n ==\
    \ 1 then\n      return tri_aux(n - 1, tri_aux, tri_sum + tri_aux(n - 1, tri_aux,\
    \ tri_sum))\n    else\n      return tri_aux(n - 1, tri_aux, tri_sum + tri_aux(n\
    \ - 2, tri_aux, tri_sum))\n    end\n  end\n  return tri_aux(n, {}, 0)\nend", " \
    \ local a = {}\n  local b = 1\n  local c = 1\n  local d = 1\n  local i = 1\n \
    \ while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ c + d + b + a)\n    table.insert(a, c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c + d + b + ", "  local function tri_aux(n, acc)\n \
    \   if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n -\
    \ 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux\
    \ + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local a = 1\n  local b = 1\n  local c = 3\n  local d = 1\n  local\
    \ f = 1\n  local g = 1\n  local h = 1\n  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local l = 1\n  local m = 1\n  local n = n + 1\n  local o = 1\n  local\
    \ p = 1\n  local q = 1\n  local r = 1\n  local s = 1\n  local t = 1\n  local u\
    \ = 1\n  local v = 1\n  local w = 1\n  local x = 1\n  local y = 1\n  local z =\
    \ 1\n  local a1 = 1\n  local b1 = 1\n  local c1 = 1\n  local d1 = 1\n  local f1\
    \ = 1\n  local g1 = 1\n  local h1 = 1\n  local i1 = 1\n  local j1 = 1\n  local\
    \ k1 = 1\n  local l1 = 1\n  local m1 = 1\n  local n1 = 1\n  local o1 = 1\n  local\
    \ p1 = 1\n  local q1 = 1\n  local r1 = 1\n  local s1 = 1\n  local t1 = 1\n  local\
    \ u1 = 1\n  local v1 = 1\n  local w1 = 1\n  local x1 = 1\n  local y1 = 1\n  local\
    \ z1 = 1\n  local a2 = 1\n  local b2 = 1\n  local c2 = 1\n  local d2 = 1\n  local\
    \ f2 = 1\n  local g2 = 1\n  local h2 = 1\n  local i2 = 1\n  local j2 = 1\n  local\
    \ k2 = 1\n  local l2 = 1\n  local m2 = 1\n  local n2 = 1\n  local o2 = 1\n  local\
    \ p2 = 1\n  local q2 = 1\n  local r2 = 1\n  local s2 = 1\n  local t2 = 1\n  local\
    \ u2 = 1\n  local v2 = 1\n  local w2 = 1\n  local x2 = 1\n  local y2 = 1\n  local\
    \ z2 = 1\n  local a3 = 1\n  local b3 = 1\n  local c3 = 1\n  local d3 = 1\n  local\
    \ f3 = 1\n  local g3 = 1\n  local h3 = 1\n  local i3 = 1\n  local j3 = 1\n  local\
    \ k3 = 1\n  local l3 = 1\n  local m3 = 1\n  local n3 = 1\n  local o3 = 1\n  local\
    \ p3 = 1\n  local q3 = 1\n  ", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n \
    \ local c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + a)\n   \
    \ table.insert(a, c + d + b + a + c)\n    table.insert(a, c + d + b + a + c +\
    \ d)\n    table.insert(a, c + d + b + a + c + d + b)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b +\
    \ a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c + d + b + ", "  local a = {}\n  local b = 1\n  local\
    \ c = 1\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c +\
    \ d)\n    table.insert(a, b + c)\n    table.insert(a, b + d)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, b + c + d)\n    table.insert(a, c + b + c +\
    \ d)\n    table.insert(a, b + c + b + d)\n    table.insert(a, c + b + b + c)\n\
    \    table.insert(a, b + c + b + d)\n    table.insert(a, c + b + b + c)\n    table.insert(a,\
    \ b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b +\
    \ c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c +\
    \ b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b +\
    \ c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n\
    \    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a,\
    \ c + b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c +\
    \ b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b +\
    \ b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b +\
    \ c)\n    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n\
    \    table.insert(a, b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a,\
    \ b + c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b +\
    \ c + b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c +\
    \ b + c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b +\
    \ c)\n    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n\
    \    table.insert(a, c + b + b + c)\n    table.insert(a, b + c + b + c)\n    table.insert(a,\
    \ c + ", "    local function tri_aux(n, acc)\n        if n == 1 then\n       \
    \     table.insert(acc, 1)\n        else\n            tri_aux(n - 1, acc)\n  \
    \          tri_aux(n - 2, acc + 1)\n        end\n    end\n    tri_aux(n, {})\n\
    end", "    local a = {}\n    local b = 1\n    local c = 0\n    for i = 1, n do\n\
    \        table.insert(a, b)\n        table.insert(a, c)\n        b = c\n     \
    \   c = b + c\n    end\n    return a\nend", "  local n1 = 1\n  local n2 = 1\n\
    \  local n3 = 1\n  local n4 = 1\n  local n5 = 1\n  local n6 = 1\n  local n7 =\
    \ 1\n  local n8 = 1\n  local n9 = 1\n  local n10 = 1\n  local n11 = 1\n  local\
    \ n12 = 1\n  local n13 = 1\n  local n14 = 1\n  local n15 = 1\n  local n16 = 1\n\
    \  local n17 = 1\n  local n18 = 1\n  local n19 = 1\n  local n20 = 1\n  local n21\
    \ = 1\n  local n22 = 1\n  local n23 = 1\n  local n24 = 1\n  local n25 = 1\n  local\
    \ n26 = 1\n  local n27 = 1\n  local n28 = 1\n  local n29 = 1\n  local n30 = 1\n\
    \  local n31 = 1\n  local n32 = 1\n  local n33 = 1\n  local n34 = 1\n  local n35\
    \ = 1\n  local n36 = 1\n  local n37 = 1\n  local n38 = 1\n  local n39 = 1\n  local\
    \ n40 = 1\n  local n41 = 1\n  local n42 = 1\n  local n43 = 1\n  local n44 = 1\n\
    \  local n45 = 1\n  local n46 = 1\n  local n47 = 1\n  local n48 = 1\n  local n49\
    \ = 1\n  local n50 = 1\n  local n51 = 1\n  local n52 = 1\n  local n53 = 1\n  local\
    \ n54 = 1\n  local n55 = 1\n  local n56 = 1\n  local n57 = 1\n  local n58 = 1\n\
    \  local n59 = 1\n  local n60 = 1\n  local n61 = 1\n  local n62 = 1\n  local n63\
    \ = 1\n  local n64 = 1\n  local n65 = 1\n  local n66 = 1\n  local n67 = 1\n  local\
    \ n68 = 1\n  local n69 = 1\n  local n70 = 1\n  local n71 = 1\n  local n72 = 1\n\
    \  local n73 = 1\n  local n74 = 1\n  local n75 = 1\n  local n76 = 1\n  local n77\
    \ = 1\n  local n78 = 1\n  local n79 = 1\n  local n80 = 1\n  local n81 = 1\n  local\
    \ n82 = 1\n  local ", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    elseif n == 2 then\n      return tri_aux(n - 1, acc)\n\
    \    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + acc))\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + acc))\n    end\n  end\n  return tri_aux(n, 0)\nend", "  local a\
    \ = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    a[#a\
    \ + 1] = d\n    local t = b\n    b = c\n    c = d + t\n    d = t\n    n = n -\
    \ 1\n  end\n  return a\nend", "  local result = {1}\n  for i = 2, n do\n    table.insert(result,\
    \ tri(i - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n  \
    \  local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n - 1, tri_aux_2)\n\
    \  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n  local\
    \ c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local function\
    \ tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    elseif n == 1 then\n\
    \      return b\n    else\n      return tri_aux(n - 1, a + b, a + b)\n    end\n\
    \  end\n  return tri_aux(n, 3, 1)\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 0 then\n            return acc\n        elseif n == 1 then\n\
    \            return tri_aux(n - 1, acc)\n        else\n            return tri_aux(n\
    \ - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + acc))\n        end\n    end\n    return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, tri_aux, tri_sum)\n    if\
    \ n == 0 then\n      tri_aux[1] = tri_sum\n      return\n    end\n    tri_aux[1]\
    \ = tri_sum + n / 2\n    tri_aux[2] = tri_aux[1]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n\
    \    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2]\
    \ = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1]\
    \ = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n\
    \    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2]\
    \ = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1]\
    \ = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n\
    \    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2]\
    \ = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1]\
    \ = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1]\
    \ + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2] = tri_aux[3] + tri_aux[2]\n\
    \    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1] = tri_aux[3]\n    tri_aux[2]\
    \ = tri_aux[3] + tri_aux[2]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n    tri_aux[1]\
    \ = tri_aux[3]\n    ", "  local function tri_aux(n, a, b)\n    if n == 0 then\n\
    \      return a\n    end\n    if n == 1 then\n      return b\n    end\n    return\
    \ tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n, 0, 1)\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux_1\
    \ = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + 1)\n \
    \   local tri_aux_3 = tri_aux(n - 3, acc + 1)\n    return tri_aux_1 + tri_aux_2\
    \ + tri_aux_3\n  end\n  return tri_aux(n, 3)\nend", "  if n == 1 then\n    return\
    \ [1]\n  else\n    local a, b, c = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    return\
    \ a + b + c\n  end\nend", "  local result = {1,3,2}\n  for i = 1, n do\n    table.insert(result,\
    \ result[i-1] + result[i-2])\n  end\n  return result\nend", "    local function\
    \ tri_aux(n, tri_aux, tri_sum)\n        if n == 0 then\n            tri_aux[1]\
    \ = tri_sum\n        else\n            tri_aux[1] = tri_sum + n / 2\n        \
    \    tri_aux[2] = tri_aux[1]\n            tri_aux[3] = tri_aux[1] + tri_aux[2]\n\
    \        end\n        return tri_aux\n    end\n    local tri_sum = 0\n    local\
    \ tri_aux = {}\n    tri_aux[1] = tri_aux[2]\n    tri_aux[3] = tri_aux[1] + tri_aux[2]\n\
    \    return tri_aux\nend", "    local function tri_aux(n, acc)\n        if n ==\
    \ 0 then\n            return acc\n        elseif n == 1 then\n            return\
    \ acc\n        else\n            return tri_aux(n - 1, acc + tri(n - 1) + tri(n\
    \ - 2))\n        end\n    end\n    return tri_aux(n, 3)\nend", "  local a = {}\n\
    \  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ",
  "    local function tri_aux(n, tri_aux, tri_sum)\n        if n == 0 then\n     \
    \       tri_aux[1] = tri_sum\n        elseif n == 1 then\n            tri_aux[1]\
    \ = tri_sum\n        else\n            tri_aux[1] = tri_sum + n / 2\n        \
    \    tri_aux[2] = tri_aux[1] + tri_aux[2]\n        end\n    end\n    tri_aux(n,\
    \ {}, 0)\nend", "  local function tri_aux(n, a, b)\n    if n == 0 then\n     \
    \ return a\n    end\n    if n == 1 then\n      return b\n    end\n    return tri_aux(n\
    \ - 1, a + b, b)\n  end\n  return tri_aux(n, 3, 1)\nend", "  if n == 1 then\n\
    \    return [3]\n  elseif n == 2 then\n    return [1, 3]\n  elseif n % 2 == 0\
    \ then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n  end\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n \
    \     return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n   \
    \ local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2\
    \ + acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 1\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local a = 1\n\
    \  local b = 1\n  local c = 0\n  local d = 1\n  local result = {a}\n  while n\
    \ ~= 0 do\n    local tmp = a + b + c + d\n    if n % 2 == 0 then\n      a = tmp\n\
    \    else\n      b = tmp\n    end\n    local tmp = a + b + c + d\n    if n % 2\
    \ == 1 then\n      c = tmp\n    else\n      d = tmp\n    end\n    table.insert(result,\
    \ tmp)\n    local tmp = a + b + c + d\n    table.insert(result, tmp)\n    n =\
    \ n / 2\n  end\n  return result\nend", "  if n == 1 then\n    return [3]\n  else\n\
    \    local n1 = tri(n - 1)\n    local n2 = tri(n - 2)\n    local n3 = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    return n1 + n2 + n3\n  end\nend", "  local\
    \ function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    elseif n\
    \ == 1 then\n      return b\n    else\n      return tri_aux(n - 1, b, a + b)\n\
    \    end\n  end\n  return tri_aux(n, 3, 1)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    elseif n == 2 then\n      return\
    \ tri_aux(n - 1, acc)\n    else\n      return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + tri(n - 2)))\n    end\n  end\n  return tri_aux(n, 0)\nend", "  if\
    \ n == 1 then\n    return [1]\n  else\n    local a, b, c = tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)\n    return a + b + c\n  end\nend", "  local n1 = 1\n  local\
    \ n2 = 1\n  local n3 = 1\n  local n4 = n\n  local n5 = n\n  local n6 = n\n  local\
    \ n7 = n\n  local n8 = n\n  local n9 = n\n  local n10 = n\n  local n11 = n\n \
    \ local n12 = n\n  local n13 = n\n  local n14 = n\n  local n15 = n\n  local n16\
    \ = n\n  local n17 = n\n  local n18 = n\n  local n19 = n\n  local n20 = n\n  local\
    \ n21 = n\n  local n22 = n\n  local n23 = n\n  local n24 = n\n  local n25 = n\n\
    \  local n26 = n\n  local n27 = n\n  local n28 = n\n  local n29 = n\n  local n30\
    \ = n\n  local n31 = n\n  local n32 = n\n  local n33 = n\n  local n34 = n\n  local\
    \ n35 = n\n  local n36 = n\n  local n37 = n\n  local n38 = n\n  local n39 = n\n\
    \  local n40 = n\n  local n41 = n\n  local n42 = n\n  local n43 = n\n  local n44\
    \ = n\n  local n45 = n\n  local n46 = n\n  local n47 = n\n  local n48 = n\n  local\
    \ n49 = n\n  local n50 = n\n  local n51 = n\n  local n52 = n\n  local n53 = n\n\
    \  local n54 = n\n  local n55 = n\n  local n56 = n\n  local n57 = n\n  local n58\
    \ = n\n  local n59 = n\n  local n60 = n\n  local n61 = n\n  local n62 = n\n  local\
    \ n63 = n\n  local n64 = n\n  local n65 = n\n  local n66 = n\n  local n67 = n\n\
    \  local n68 = n\n  local n69 = n\n  local n70 = n\n  local n71 = n\n  local n72\
    \ = n\n  local n73 = n\n  local n74 = n\n  local n75 = n\n  local n76 = n\n  local\
    \ n77 = n\n  local n78 = n\n  local n79 = n\n  local n80 = n\n  local n81 = n\n\
    \  local n82 = n\n  local ", "  local function tri_aux(n, acc)\n    if n == 1\
    \ then\n      return acc\n    elseif n == 2 then\n      return tri_aux(n - 1,\
    \ acc)\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2,\
    \ tri_aux(n - 1, acc) + acc))\n    else\n      return tri_aux(n - 1, tri_aux(n\
    \ - 2, tri_aux(n - 1, acc) + acc))\n    end\n  end\n  return tri_aux(n, 1)\nend",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local a = {}\n  local b = 1\n  local c = 1\n  local\
    \ d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    ", "  local result = {n}\n  local i = 1\n  while\
    \ i <= n do\n    local tmp = result[i]\n    result[i] = result[i-1] + result[i-2]\
    \ + result[i+2]\n    i = i+1\n  end\n  return result\nend", "  local result =\
    \ {n}\n  local i = 1\n  while i <= n do\n    local a = i - 1\n    local b = i\
    \ - 2\n    local c = i + 2\n    local d = a + b + c\n    local e = b + c + d\n\
    \    local f = a + c + d\n    local g = a + b + c\n    local h = a + c + d\n \
    \   local i = a + b + c + d\n    local j = b + c + d + e\n    local k = a + c\
    \ + d + e\n    local l = a + b + c + d + e\n    local m = b + c + d + e + f\n\
    \    local n = a + c + d + e + f\n    local o = a + b + c + d + e + f\n    local\
    \ p = b + c + d + e + f + g\n    local q = a + c + d + e + f + g\n    local r\
    \ = a + b + c + d + e + f + g\n    local s = b + c + d + e + f + g + h\n    local\
    \ t = a + c + d + e + f + g + h\n    local u = a + b + c + d + e + f + g + h\n\
    \    local v = b + c + d + e + f + g + h + i\n    local w = a + c + d + e + f\
    \ + g + h + i\n    local x = b + c + d + e + f + g + h + i\n    local y = a +\
    \ c + d + e + f + g + h + i\n    local z = b + c + d + e + f + g + h + i + j\n\
    \    local a = a + b + c + d + e + f + g + h + i + j\n    local b = b + c + d\
    \ + e + f + g + h + i + j\n    local c = c + d + e + f + g + h + i + j\n    local\
    \ d = d + e + f + g + h + i + j\n    local e = e + f + g + h + i + j\n    local\
    \ f = f + g + h + i + j\n    local g = g + h + i + j\n    local h = h + i + j\n\
    \    local i = i + j\n    table.insert(result, a)\n    table.insert(result, b)\n\
    \    table.insert(result, c)\n    table.insert(result, d)\n    table.insert(result,\
    \ e)\n    table.insert(result, f)\n    table.insert(result, g)\n    table.insert(result,\
    \ h)\n    table.insert(result, i)\n    table.insert(result, j)\n    table.insert(result,\
    \ k)\n    table.insert(result, l)\n    table.insert(result, m)\n    table.insert(result",
  "  local function tri_aux(n, acc)\n    if n == 1 then\n      table.insert(acc, 1)\n\
    \    else\n      table.insert(acc, tri_aux(n - 1, acc))\n      table.insert(acc,\
    \ tri_aux(n - 2, acc))\n    end\n    return acc\n  end\n  return tri_aux(n, {})\n\
    end", "  local result = {n}\n  for i = 2, n do\n    table.insert(result, tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1))\n  end\n  return result\nend", "    local function\
    \ tri_aux(n, acc)\n        if n == 1 then\n            return acc\n        else\n\
    \            return tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n        end\n\
    \    end\n    return tri_aux(n, 3)\nend", "    local a = 1\n    local b = 1\n\
    \    local c = 3\n    local result = {a}\n    for i = 1, n do\n        local tmp\
    \ = a + b + c\n        a = b\n        b = c\n        c = tmp\n        result[i]\
    \ = c\n    end\n    return result\nend", "  local result = {1}\n  local i = 1\n\
    \  while i <= n do\n    table.insert(result, i)\n    i = i + 2\n  end\n  return\
    \ result\nend", "    local function tri_aux(n, acc)\n        if n == 0 then\n\
    \            return acc\n        elseif n == 1 then\n            return tri_aux(n\
    \ - 1, acc)\n        else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n\
    \ - 1, acc) + acc))\n        end\n    end\n    return tri_aux(n, 3)\nend", " \
    \ local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return\
    \ acc\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local i = 1\n \
    \ while i <= n do\n    table.insert(a, i)\n    i = i + 2\n  end\n  return a\n\
    end", "  local result = {1,3,2}\n  for i = 1, n do\n    table.insert(result, result[i-1]\
    \ + result[i-2])\n  end\n  return result\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 0\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local a = {}\n\
    \  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n   \
    \ table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n    table.insert(a,\
    \ d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a, c + d + b)\n\
    \    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, d + b + c)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, c + ", "  local result = {1,3,2}\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(result, result[i-1] + result[i-2])\n    i = i +\
    \ 2\n  end\n  return result\nend", "  local a = 1\n  local b = 1\n  local c =\
    \ 3\n  local d = 1\n  local result = {a}\n  for i = 1, n do\n    local tmp = a\
    \ + b + c + d\n    a = b\n    b = c\n    c = d\n    d = tmp\n    table.insert(result,\
    \ d)\n  end\n  return result\nend", "  if n == 1 then\n    return [3]\n  elseif\
    \ n == 2 then\n    return [1, 3]\n  elseif n % 2 == 0 then\n    return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  end\nend", "  local function tri_aux(n, a, b)\n    if n\
    \ == 0 then\n      return a\n    end\n    if n == 1 then\n      return b\n   \
    \ end\n    return tri_aux(n - 1, b, a + b)\n  end\n  return tri_aux(n, 3, 1)\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n   \
    \ table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, c + d +\
    \ b)\n    table.insert(a, c + d + b + a)\n    table.insert(a, c + d + b + a +\
    \ c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a, c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a +\
    \ c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c +\
    \ d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + ", "  local a = {}\n  local b = 1\n  local c = 0\n\
    \  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local a = 1\n  local\
    \ b = 1\n  local c = 0\n  local result = {1}\n  for i = 1, n do\n    local tmp\
    \ = a\n    a = b\n    b = tmp + c\n    c = a + b\n    table.insert(result, c)\n\
    \  end\n  return result\nend", "  local a = {}\n  local i = 1\n  while i <= n\
    \ do\n    table.insert(a, i)\n    i = i + 2\n  end\n  return a\nend", "  if n\
    \ == 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n  elseif n\
    \ % 2 == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n   \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n   \
    \ table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    ", "  local function tri_aux(n, acc)\n    if n ==\
    \ 1 then\n      return acc\n    elseif n == 2 then\n      return tri_aux(n - 1,\
    \ acc)\n    elseif n % 2 == 0 then\n      return tri_aux(n - 1, tri_aux(n - 2,\
    \ tri_aux(n - 1, acc)))\n    else\n      return tri_aux(n - 1, tri_aux(n - 2,\
    \ tri_aux(n - 1, tri_aux(n - 2, acc)))))\n    end\n  end\n  return tri_aux(n,\
    \ {})\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1) + tri(n -\
    \ 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 0\n  local d = 1\n  local e = 1\n  local\
    \ f = 1\n  local g = 2\n  local h = 1\n  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local l = 1\n  local m = 1\n  local n = n + 1\n  while n >= 1 do\n  \
    \  table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ e)\n    table.insert(a, f)\n    table.insert(a, g)\n    table.insert(a, h)\n\
    \    table.insert(a, i)\n    table.insert(a, j)\n    table.insert(a, k)\n    table.insert(a,\
    \ l)\n    table.insert(a, m)\n    table.insert(a, n)\n    i = i + 1\n    j = j\
    \ + 2\n    k = k + 3\n    l = l + 4\n    m = m + 5\n    n = n - 1\n  end\n  return\
    \ a\nend", "  local result = {n}\n  local i = 1\n  while i <= n do\n    local\
    \ tmp1 = result[i]\n    local tmp2 = result[i + 1]\n    local tmp3 = result[i\
    \ + 2]\n    result[i] = tmp1 + tmp2 + tmp3\n    i = i + 3\n  end\n  return result\n\
    end", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return acc\n\
    \    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n\
    \    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local result = {n}\n\
    \  local i = 1\n  while i <= n do\n    table.insert(result, i)\n    i = i + 2\n\
    \  end\n  return result\nend", "  local a = {}\n  local b = 1\n  local c = 3\n\
    \  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    ", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local a = {}\n    local b = 1\n    local c = 3\n \
    \   local d = 1\n    for i = 1, n do\n        table.insert(a, b)\n        table.insert(a,\
    \ c)\n        table.insert(a, d)\n        b = c + d\n        c = d\n        d\
    \ = b\n    end\n    return a\nend", "    local function tri_aux(n, acc)\n    \
    \    if n == 0 then\n            return acc\n        elseif n == 1 then\n    \
    \        return tri_aux(n - 1, acc)\n        else\n            return tri_aux(n\
    \ - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 1)))\n        end\n    end\n\
    \    return tri_aux(n, {})\nend", "  local a = {}\n  local b = 1\n  local c =\
    \ 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + a)\n    table.insert(a,\
    \ c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a)\n    table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b\
    \ + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d\
    \ + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a\
    \ + c + d + b + a + c + d + b + ", "    local function tri_aux(n)\n        if\
    \ n == 1 then\n            return 1\n        elseif n == 2 then\n            return\
    \ 3\n        else\n            return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 3)\n        end\n    end\n    return tri_aux(n)\nend", "  local result = {n}\n\
    \  local i = 1\n  while i <= n do\n    local a = i - 1\n    local b = i - 2\n\
    \    local c = i + 2\n    local d = a + b + c\n    table.insert(result, d)\n \
    \   i = d\n  end\n  return result\nend", "  local function tri_aux(n, acc)\n \
    \   if n == 0 then\n      return acc\n    end\n    \n    local tri_aux_1 = tri_aux(n\
    \ - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    \n\
    \    return tri_aux_1 + tri_aux_2 + acc\n  end\n  \n  return tri_aux(n, 3)\nend",
  "  local result = {n}\n  if n == 1 then\n    return result\n  else\n    local first\
    \ = 1\n    local second = 1\n    local third = 1\n    for i = 2, n do\n      third\
    \ = first + second + third\n      first = second\n      second = third\n     \
    \ table.insert(result, third)\n    end\n    return result\n  end\nend", "  local\
    \ a = 1\n  local b = 1\n  local c = 3\n  local result = {a}\n  for i = 1, n do\n\
    \    local tmp = a\n    a = b\n    b = tmp + c\n    c = a + b\n    table.insert(result,\
    \ c)\n  end\n  return result\nend", "    local a = {}\n    local b = 1\n    local\
    \ c = 3\n    local d = 1\n    for i = 1, n do\n        table.insert(a, b)\n  \
    \      table.insert(a, c)\n        table.insert(a, d)\n        b = c\n       \
    \ c = d\n        d = a + b + c\n    end\n    return a\nend", "  local a = 1\n\
    \  local b = 1\n  local c = 3\n  local d = 1\n  local result = {a}\n  for i =\
    \ 1, n do\n    local tmp = a + b + c + d\n    a = b\n    b = c\n    c = d\n  \
    \  d = tmp\n    table.insert(result, d)\n  end\n  return result\nend", "  local\
    \ result = {n}\n  local i = 1\n  while i <= n do\n    local tmp1 = result[i]\n\
    \    local tmp2 = result[i + 1]\n    result[i] = tmp1 + tmp2\n    result[i + 1]\
    \ = tmp1 - tmp2\n    i = i + 2\n  end\n  return result\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n\
    \ - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    acc = tri_aux(n - 3, acc\
    \ + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "    local function\
    \ tri_aux(n, tri_aux, tri_sum)\n        if n == 0 then\n            table.insert(tri_aux,\
    \ tri_sum)\n        elseif n == 1 then\n            table.insert(tri_aux, 1)\n\
    \        else\n            tri_aux[n] = tri_aux[n-1] + tri_aux[n-2] + tri_aux[n+1]\n\
    \        end\n    end\n    tri_aux[n] = tri_aux[n-1] + tri_aux[n-2] + tri_aux[n+1]\n\
    \    return tri_aux\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local\
    \ d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n    local e = b\n    local f =\
    \ c\n    b = d\n    c = f + e\n    d = e + b\n    n = n - 1\n  end\n  return a\n\
    end", "  local a = {}\n  local b = 1\n  local c = 0\n  local d = 1\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n   \
    \ table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a, c + d +\
    \ b)\n    table.insert(a, c + d + b + a)\n    table.insert(a, c + d + b + a +\
    \ c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a, c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a +\
    \ c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c +\
    \ d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + ", "  local function tri_aux(n, acc)\n    if n ==\
    \ 0 then\n      return acc\n    elseif n == 1 then\n      return acc\n    elseif\
    \ n % 2 == 0 then\n      return tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n\
    \    else\n      return tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3))\n    end\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 0 then\n      return tri_aux\n\
    \    else\n      return tri_aux + tri(n - 1) + tri(n - 2)\n    end\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local result = {n}\n  local i = 1\n  while i <= n do\n\
    \    local tmp1 = result[i]\n    local tmp2 = result[i + 1]\n    local tmp3 =\
    \ result[i + 2]\n    local tmp4 = result[i + 3]\n    result[i] = tmp1 + tmp2 +\
    \ tmp3 + tmp4\n    i = i + 4\n  end\n  return result\nend", "  local result =\
    \ {n}\n  local i = 1\n  while i <= n do\n    local a = i - 1\n    local b = i\
    \ - 2\n    local c = i + 2\n    local d = a + b + c\n    table.insert(result,\
    \ d)\n    i = d\n  end\n  return result\nend", "  local function tri_aux(n, a,\
    \ b, c)\n    if n == 0 then\n      return a\n    end\n    if n == 1 then\n   \
    \   return b\n    end\n    return tri_aux(n - 1, b, a + b + c, a)\n  end\n  return\
    \ tri_aux(n, 0, 0, 1)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n \
    \ local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, c + d + b + a)\n    table.insert(a, c + d +\
    \ b + a + c)\n    table.insert(a, c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a)\n    table.insert(a, c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c +\
    \ d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b)\n\
    \    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b\
    \ + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a, c + d\
    \ + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c\
    \ + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a\
    \ + c + d + b + a + c + d + b + ", "  local function tri_aux(n, acc)\n    if n\
    \ == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc\
    \ = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n\
    \ ~= 0 do\n    a[#a + 1] = b\n    local tmp = b\n    b = c + d\n    c = d\n  \
    \  d = tmp\n    n = n - 1\n  end\n  return a\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1,\
    \ acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2\
    \ = tri_aux(n - 2, acc + 1)\n    return tri_aux_1 + tri_aux_2 + tri_aux(n - 1,\
    \ acc + 1)\n  end\n  return tri_aux(n, 3)\nend", "  local a = {}\n  local b =\
    \ 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n\
    \    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + c)\n    table.insert(a,\
    \ c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + a)\n    table.insert(a,\
    \ c + d + b + c + d + a + b)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c)\n    table.insert(a, c + d + b + c + d + a + b + c + d)\n    table.insert(a,\
    \ c + d + b + c + d + a + b + c + d + b)\n    table.insert(a, c + d + b + c +\
    \ d + a + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + a + b + c + d +\
    \ b + c + d + b)\n    table.insert(a, c + d + b + c + d + a + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + a + b + c + d + b +\
    \ c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + a + b + c + d +\
    \ b + c + d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c +\
    \ d + a + b + c + d + b + c + d + b + c + d + b + c + d)\n    table.insert(a,\
    \ c + d + b + c + d + a + b + c + d + b + c + d + b + c + d + b + c + d + b)\n\
    \    table.insert(a, c + d + b + c + d + a + b + c + d + b + c + d + b + c + d\
    \ + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + a + b + c + d\
    \ + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a, c\
    \ + d + b + c + d + a + b + c + d + b + c + d + b + c + d + b + c + d + b + c\
    \ + d + b + c)\n    table.insert(a, c + d + b + c + d + a + b + c + d + b + c\
    \ + d + b + c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d\
    \ + b", "  local function tri_aux(n)\n    if n == 0 then\n      return 0\n   \
    \ end\n    if n == 1 then\n      return 1\n    end\n    return tri_aux(n - 1)\
    \ + tri_aux(n - 2) + tri_aux(n - 3)\n  end\n  return tri_aux(n)\nend", "  local\
    \ result = {1,3,2}\n  for i = 1, n do\n    table.insert(result, result[i-1] +\
    \ result[i-2])\n  end\n  return result\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 0 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1)\
    \ + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux = tri_aux + tri(n - 1)\
    \ + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return tri_aux(n, 3)\nend",
  "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, c + d)\n    table.insert(a, b + c)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, b + c + d +\
    \ b)\n    table.insert(a, c + b + d + c + b)\n    table.insert(a, b + c + d +\
    \ b + c)\n    table.insert(a, c + b + d + c + b + c)\n    table.insert(a, b +\
    \ c + d + b + c + d)\n    table.insert(a, c + b + d + c + b + c + d)\n    table.insert(a,\
    \ b + c + d + b + c + d + b)\n    table.insert(a, c + b + d + c + b + c + d +\
    \ b)\n    table.insert(a, b + c + d + b + c + d + b + c)\n    table.insert(a,\
    \ c + b + d + c + b + c + d + b + c)\n    table.insert(a, b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + b + d + c + b + c + d + b + c + d)\n\
    \    table.insert(a, b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + b + d + c + b + c + d + b + c + d + b)\n    table.insert(a, b + c + d +\
    \ b + c + d + b + c + d + b + c)\n    table.insert(a, c + b + d + c + b + c +\
    \ d + b + c + d + b + c)\n    table.insert(a, b + c + d + b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + b + d + c + b + c + d + b + c + d +\
    \ b + c + d)\n    table.insert(a, b + c + d + b + c + d + b + c + d + b + c +\
    \ d + b)\n    table.insert(a, c + b + d + c + b + c + d + b + c + d + b + c +\
    \ d + b)\n    table.insert(a, b + c + d + b + c + d + b + c + d + b + c + d +\
    \ b + c)\n    table.insert(a, c + b + d + c + b + c + d + b + c + d + b + c +\
    \ d + b + c)\n    table.insert(a, b + c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + b + d + c + b + c + d + b + c + d +\
    \ b + c + ", "  local function tri_aux(n, acc)\n    if n == 0 then\n      return\
    \ acc\n    end\n    local tri_aux_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n\
    \ - 2))\n    return tri_aux_aux\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n   \
    \ table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, d + b + c)\n   \
    \ table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a,\
    \ b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n\
    \    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a,\
    \ b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a, d + c + b)\n\
    \    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n    table.insert(a,\
    \ c + b + d)\n    table.insert(a, d + c + b)\n    table.insert(a, b + c + d)\n\
    \    table.insert(a, b + d + c)\n    table.insert(a, c + b + d)\n    table.insert(a,\
    \ d + c + b)\n    table.insert(a, b + c + d)\n    table.insert(a, b + d + c)\n\
    \    table.insert(a, ", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n\
    \ - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i = 1\n  while\
    \ i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    ", "  local function tri_aux(n, acc)\n    if n == 1 then\n      return\
    \ acc\n    end\n    local tri_aux = tri_aux(n - 1, acc + tri(n - 1) + tri(n -\
    \ 2))\n    if n % 2 == 1 then\n      return tri_aux\n    end\n    return tri_aux(n\
    \ - 1, tri_aux(n - 2, tri_aux(n - 1, acc)))\n  end\n  return tri_aux(n, 0)\nend",
  "    local a = 1\n    local b = 1\n    local c = 0\n    local result = []\n    \n\
    \    for i = 1, n do\n        local tmp = a\n        a = b\n        b = tmp +\
    \ c\n        c = a + b\n        result[i] = c\n    end\n    \n    return result\n\
    end", "    local function tri_aux(n, acc)\n        if n == 0 then\n          \
    \  return acc\n        elseif n == 1 then\n            return tri_aux(n - 1, acc)\n\
    \        else\n            return tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1,\
    \ acc) + tri(n - 1)))\n        end\n    end\n    return tri_aux(n, 0)\nend", " \
    \   local function tri_aux(n, acc)\n        if n == 0 then\n            return\
    \ acc\n        elseif n == 1 then\n            return acc\n        else\n    \
    \        return tri_aux(n - 1, tri_aux(n - 2, acc + tri(n - 1) + tri(n - 2)))\n\
    \        end\n    end\n    return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    else\n      acc = tri_aux(n\
    \ - 1, acc)\n      acc = tri_aux(n - 2, acc + acc)\n      return acc\n    end\n\
    \  end\n  return tri_aux(n, 3)\nend", "    local a = {}\n    local b = 1\n   \
    \ local c = 3\n    local d = 1\n    local i = 1\n    while i <= n do\n       \
    \ table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a, d)\n\
    \        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.insert(a,\
    \ d)\n        table.insert(a, b)\n        table.insert(a, c)\n        table.",
  "  local function tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n\
    \    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n\
    \ - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2 + acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    else\n      return tri_aux(n - 1, acc + tri(n - 1) + tri(n\
    \ - 2))\n    end\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      table.insert(acc, 1)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local a = {}\n    local b = 1\n    local c = 3\n \
    \   local d = 1\n    for i = 1, n do\n        table.insert(a, b)\n        table.insert(a,\
    \ c)\n        table.insert(a, d)\n        b = c\n        c = d\n        d = a\
    \ + b + c\n    end\n    return a\nend", "  if n == 0 then\n    return nil\n  elseif\
    \ n == 1 then\n    return [3]\n  else\n    local a, b, c = tri(n - 1), tri(n -\
    \ 2), tri(n - 3)\n    return a + b + c\n  end\nend", "  if n == 0 then\n    return\
    \ nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2 == 0 then\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3)\n  end\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 3\n  local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n   \
    \ table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n   \
    \ table.insert(a, c + d + b)\n    table.insert(a, c + d + b + c)\n    table.insert(a,\
    \ c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + a)\n    table.insert(a,\
    \ c + d + b + c + d + a + b)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c)\n    table.insert(a, c + d + b + c + d + a + b + c + d)\n    table.insert(a,\
    \ c + d + b + c + d + a + b + c + d + a)\n    table.insert(a, c + d + b + c +\
    \ d + a + b + c + d + a + b)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c + d + a + b + c)\n    table.insert(a, c + d + b + c + d + a + b + c + d +\
    \ a + b + c + d)\n    table.insert(a, c + d + b + c + d + a + b + c + d + a +\
    \ b + c + d + a)\n    table.insert(a, c + d + b + c + d + a + b + c + d + a +\
    \ b + c + d + a + b)\n    table.insert(a, c + d + b + c + d + a + b + c + d +\
    \ a + b + c + d + a + b + c)\n    table.insert(a, c + d + b + c + d + a + b +\
    \ c + d + a + b + c + d + a + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + a + b + c + d + a + b + c + d + a + b + c + d + a)\n    table.insert(a,\
    \ c + d + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b)\n\
    \    table.insert(a, c + d + b + c + d + a + b + c + d + a + b + c + d + a + b\
    \ + c + d + a + b + c)\n    table.insert(a, c + d + b + c + d + a + b + c + d\
    \ + a + b + c + d + a + b + c + d + a + b + c + d)\n    table.insert(a, c + d\
    \ + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d + a + b + c + d\
    \ + a)\n    table.insert(a, c + d + b + c + d + a + b + c + d + a + b + c + d\
    \ + a + b + c + d + a + b + c + d + a + b)\n    table.insert(a, c + d + b + c\
    \ + d + a + b + c + d + a + b + c + d + a + ", "  local function tri_aux(n, acc)\n\
    \    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    else\n      return tri_aux(n - 1, acc + tri(n - 1) + tri(n\
    \ - 2))\n    end\n  end\n  return tri_aux(n, 3)\nend", "    local function tri_aux(n,\
    \ acc)\n        if n == 0 then\n            return acc\n        elseif n == 1\
    \ then\n            return tri_aux(n - 1, acc)\n        else\n            return\
    \ tri_aux(n - 1, tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 1)))\n        end\n\
    \    end\n    return tri_aux(n, 3)\nend", "  local result = {1,3,2}\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(result, result[i-1] + result[i-2])\n\
    \    i = i + 2\n  end\n  return result\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 0\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "    local function\
    \ tri_aux(n)\n        if n == 1 then\n            return 3\n        elseif n ==\
    \ 2 then\n            return 1\n        elseif n == 3 then\n            return\
    \ 2\n        else\n            return tri_aux(n - 1) + tri_aux(n - 2) + tri_aux(n\
    \ - 3)\n        end\n    end\n    return tri_aux(n)\nend", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "    local function tri_aux(m, n)\n        if m == 0 then\n\
    \            local ret = {}\n            for i = 1, n do\n                table.insert(ret,\
    \ m)\n            end\n            return ret\n        elseif m == 1 then\n  \
    \          local ret = {}\n            for i = 1, n do\n                table.insert(ret,\
    \ m)\n            end\n            return ret\n        else\n            local\
    \ ret = {}\n            for i = 1, n do\n                table.insert(ret, tri_aux(m\
    \ - 1, m))\n            end\n            return ret\n        end\n    end\n  \
    \  return tri_aux(n, 3)\nend", "    local function tri_aux(n, acc)\n        if\
    \ n == 0 then\n            return acc\n        elseif n == 1 then\n          \
    \  return tri_aux(n - 1, acc)\n        else\n            return tri_aux(n - 1,\
    \ tri_aux(n - 2, tri_aux(n - 1, acc) + tri(n - 1)))\n        end\n    end\n  \
    \  return tri_aux(n, 0)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n\
    \  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d\n    local e = b\n    local\
    \ f = c\n    b = d\n    c = f + e\n    d = e\n    n = n - 1\n  end\n  return a\n\
    end", "    local function tri_aux(n, a, b, c)\n        if n == 0 then\n      \
    \      return a\n        end\n        if n == 1 then\n            return b\n \
    \       end\n        return tri_aux(n - 1, a + b + c, b, c)\n    end\n    return\
    \ tri_aux(n, 0, 0, 1)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n \
    \ local d = 1\n  while n ~= 0 do\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, c + d)\n    table.insert(a,\
    \ c + d + b)\n    table.insert(a, c + d + b + c)\n    table.insert(a, c + d +\
    \ b + c + d)\n    table.insert(a, c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d)\n    table.insert(a, c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c +\
    \ d + b + c + d + b)\n    table.insert(a, c + d + b + c + d + b + c + d + b +\
    \ c + d + b + c + d + b + c)\n    table.insert(a, c + d + b + c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d)\n    table.insert(a, c + d + b + c +\
    \ d + b + c + d + b + c + d + b + c + d + b + c + d + b)\n    table.insert(a,\
    \ c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c)\n\
    \    table.insert(a, c + d + b + c + d + b + c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b\
    \ + c + d + b + c + d + b + c + d + b + c + d + b + c)\n    table.insert(a, c\
    \ + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d + b + c + d\
    \ + b + c + d)\n    table.insert(a, c + d + b + c + d + b + c + d + b + c + d\
    \ + b + c + d + b + c + d + b + c + d + b + c + d + b)\n", "  local function tri_aux(n,\
    \ acc)\n    if n == 1 then\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc + tri(n - 1) + tri(n - 2))\n    if n % 2 == 1 then\n      tri_aux =\
    \ tri_aux + tri(n - 1) + tri(n - 2)\n    end\n    return tri_aux\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      table.insert(acc, 1)\n      return acc\n    end\n    local tri_aux = tri_aux(n\
    \ - 1, acc)\n    table.insert(tri_aux, tri_aux[n] + tri_aux[n + 1] + tri_aux[n\
    \ + 2])\n    return tri_aux\n  end\n  return tri_aux(n, {})\nend", "  local function\
    \ tri_aux(n, acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n\
    \ - 1, acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 0 then\n\
    \      return acc\n    end\n    acc = tri_aux(n - 1, acc)\n    acc = tri_aux(n\
    \ - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n, 3)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n   \
    \ table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ c + d)\n    table.insert(a, c + d + b)\n    table.insert(a, c + d + b + a)\n\
    \    table.insert(a, c + d + b + a + c)\n    table.insert(a, c + d + b + a + c\
    \ + d)\n    table.insert(a, c + d + b + a + c + d + b)\n    table.insert(a, c\
    \ + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c + d + b\
    \ + a + c)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b +\
    \ a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c)\n    table.insert(a, c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d)\n    table.insert(a, c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d + b + a + c +\
    \ d + b + a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d)\n   \
    \ table.insert(a, c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d +\
    \ b + a + c + d + b + a + c + d + b + a)\n    table.insert(a, c + d + b + a +\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c)\n    table.insert(a,\
    \ c + d + b + a + c + d + b + a + c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d)\n    table.insert(a, c + d + b + a + c + d + b + a + c + d + b +\
    \ a + c + d + b + a + c + d + b + a + c + d + b)\n    table.insert(a, c + d +\
    \ b + a + c + d + b + a + c + d + b + a + c + d + ", "  local function tri_aux(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    end\n    acc = tri_aux(n - 1,\
    \ acc)\n    acc = tri_aux(n - 2, acc + acc)\n    return acc\n  end\n  return tri_aux(n,\
    \ 3)\nend", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local\
    \ i = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n \
    \   table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    ", "  local a = {}\n  local b = 1\n  local c = 3\n\
    \  local d = 1\n  while n ~= 0 do\n    a[#a + 1] = d \n    a, b, c = c, b, a +\
    \ b + c\n    d, a, b, c = a, b, c, d + b + c\n  end\n  return a\nend", "  local\
    \ result = {1}\n  for i = 2, n do\n    table.insert(result, tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1))\n  end\n  return result\nend", "  local result = {1,3,2}\n\
    \  local i = 1\n  while i <= n do\n    table.insert(result, result[i-1] + result[i-2])\n\
    \    i = i + 2\n  end\n  return result\nend", "    local function tri_aux(n, acc)\n\
    \        if n == 0 then\n            return acc\n        end\n        local tri_aux\
    \ = tri_aux(n - 1, acc + tri(n - 1) + tri(n - 2))\n        if n % 2 == 1 then\n\
    \            tri_aux = tri_aux + tri(n - 1)\n        end\n        return tri_aux\n\
    \    end\n    return tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 1 then\n      table.insert(acc, 1)\n    else\n      table.insert(acc,\
    \ tri_aux(n - 1, acc))\n      table.insert(acc, tri_aux(n - 2, acc))\n    end\n\
    \    return acc\n  end\n  return tri_aux(n, {})\nend", "  if n == 0 then\n   \
    \ return nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2 == 0 then\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend", "    local\
    \ function tri_aux(n, a, b, c)\n        if n == 0 then\n            return a\n\
    \        elseif n == 1 then\n            return b\n        else\n            return\
    \ tri_aux(n - 1, a + b + c, b, c)\n        end\n    end\n    return tri_aux(n,\
    \ 0, 0, 1)\nend", "  local a = 1\n  local b = 1\n  local c = 1\n  local d = 1\n\
    \  local sum = 0\n  local i = 1\n  while i <= n do\n    sum = a + b + c + d\n\
    \    a, b, c, d = d, c, b, sum\n    i = i + 1\n  end\n  return sum\nend", "  local\
    \ function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a\n    elseif\
    \ n == 1 then\n      return b\n    else\n      return tri_aux(n - 1, a + b, c,\
    \ a + c)\n    end\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  local result\
    \ = {1}\n  for i = 2, n do\n    table.insert(result, tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n  end\n  return result\nend", "  local function tri_aux(n, acc)\n\
    \    if n == 0 then\n      return acc\n    elseif n == 1 then\n      return tri_aux(n\
    \ - 1, acc + 1)\n    else\n      return tri_aux(n - 1, acc + tri_aux(n - 2, acc))\n\
    \    end\n  end\n  return tri_aux(n, 3)\nend", "  local function tri_aux(n, tri_aux,\
    \ tri_sum)\n    if n == 0 then\n      return tri_sum\n    elseif n == 1 then\n\
    \      return tri_aux(n - 1, tri_aux + 1, tri_sum)\n    else\n      return tri_aux(n\
    \ - 1, tri_aux + tri_sum, tri_sum + tri_aux(n - 2, tri_aux, tri_sum))\n    end\n\
    \  end\n  return tri_aux(n, {}, 0)\nend", "    local function tri_aux(n, a, b,\
    \ c)\n        if n == 0 then\n            return a\n        elseif n == 1 then\n\
    \            return b\n        else\n            return tri_aux(n - 1, a + b +\
    \ c, b, c)\n        end\n    end\n    return tri_aux(n, 0, 0, 1)\nend", "  local\
    \ a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  while n ~= 0 do\n   \
    \ a[#a + 1] = b\n    local tmp = c\n    c = d\n    d = b + tmp\n    b = tmp\n\
    \    n = n - 1\n  end\n  return a\nend", "  local function tri_aux(n, acc)\n \
    \   if n == 0 then\n      return acc\n    end\n    \n    local tri_aux_1 = tri_aux(n\
    \ - 1, acc + 1)\n    local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    \n\
    \    return tri_aux_1 + tri_aux_2 + tri_aux(n - 1, tri_aux_2)\n  end\n  \n  return\
    \ tri_aux(n, 3)\nend", "  local function tri_aux(n, acc)\n    if n == 1 then\n\
    \      return acc\n    end\n    local tri_aux_1 = tri_aux(n - 1, acc + 1)\n  \
    \  local tri_aux_2 = tri_aux(n - 2, acc + tri_aux_1)\n    return tri_aux_1 + tri_aux_2\
    \ + tri_aux(n - 1, tri_aux_2)\n  end\n  return tri_aux(n, 3)\nend", "  if n ==\
    \ 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n  elseif n % 2\
    \ == 0 then\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  else\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n  end\nend",
  "  local function tri_aux(n, a, b)\n    if n == 0 then\n      return a\n    end\n\
    \    if n == 1 then\n      return b\n    end\n    return tri_aux(n - 1, a + b,\
    \ b)\n  end\n  return tri_aux(n, 3, 1)\nend", "  local a = {}\n  local b = 1\n\
    \  local c = 3\n  local d = 1\n  local i = 1\n  while i <= n do\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    ", "    local function\
    \ tri_aux(n, a, b, c)\n        if n == 0 then\n            return a, b, c\n  \
    \      elseif n == 1 then\n            return b, c, a\n        else\n        \
    \    local new_a = tri_aux(n - 1, b, c, a)\n            local new_b = tri_aux(n\
    \ - 2, new_a, c, a)\n            local new_c = tri_aux(n - 3, new_b, a, new_a)\n\
    \            return new_a, new_b, new_c\n        end\n    end\n    return tri_aux(n,\
    \ 0, 0, 0)\nend", "  local result = {1}\n  local i = 1\n  while i <= n do\n  \
    \  table.insert(result, i)\n    i = i + 2\n  end\n  return result\nend", "  local\
    \ function tri_aux(n, a, b, c)\n    if n == 0 then\n      return a, b, c\n   \
    \ end\n    if n == 1 then\n      return a\n    end\n    return tri_aux(n - 1,\
    \ a + b, a + c, b + c)\n  end\n  return tri_aux(n, 0, 0, 1)\nend", "  if n ==\
    \ 0 then\n    return nil\n  elseif n == 1 then\n    return [3]\n  else\n    local\
    \ a, b, c = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    return a + b + c\n  end\n\
    end", "  local a = {}\n  local b = 1\n  local c = 3\n  local d = 1\n  local i\
    \ = 1\n  while i <= n do\n    table.insert(a, b)\n    table.insert(a, c)\n   \
    \ table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a,\
    \ c)\n    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n\
    \    table.insert(a, d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a,\
    \ d)\n    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n\
    \    table.insert(a, b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a,\
    \ b)\n    table.insert(a, c)\n    table.insert(a, d)\n    table.insert(a, b)\n\
    \    table.insert(a, c)\n    ", "  if n == 1 then\n    return [3]\n  elseif n\
    \ == 2 then\n    return [1, 3]\n  elseif n % 2 == 0 then\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  else\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3)\n  end\nend", "  local function tri_aux(n, a, b)\n    if n\
    \ == 0 then\n      return a\n    elseif n == 1 then\n      return b\n    else\n\
    \      return tri_aux(n - 1, b, a + b)\n    end\n  end\n  return tri_aux(n, 3,\
    \ 1)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
