name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]]\
    \ then\n      table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n   \
    \ end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[tostring(l[i])] then\n    \
    \  table.insert(out, l[i])\n    else\n      seen[tostring(l[i])] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u\
    \ })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = function(t, i) assert(u[i]);\
    \ return t[i] end})\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then table.insert(l,\
    \ v) break end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1, #u do\n      if u[i] then\n        table.insert(l,\
    \ v)\n        break\n      end\n    end\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n \
    \ while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then\n        table.insert(l, v)\n        u[v]\
    \ = false\n      end\n    end\n  end\n  return l\nend", "  local seen = {}\n \
    \ local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        break\n      end\n    end\n  end\n  return l\nend", "  local seen\
    \ = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] ==\
    \ true then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1 , #u do\n      if u[v] == true then break end\n    end\n    table.insert(l,\
    \ v)\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v]\
    \ = true end\n  return setmetatable(l, { __index = u })\nend", "  local seen =\
    \ {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v)\n      end\n    end\n  end\n  return\
    \ u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\
    \ u[v] = true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i\
    \ + 1\n  until not u[v]\n  return l\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n\
    \    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[i] then\n        table.insert(l, v)\n \
    \       break\n      end\n    end\n  end\n  return l\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l\
    \ do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then break end\n    end\n   \
    \ table.insert(l, v)\n  end\n  return l\nend", "  local seen = {}\n  local out\
    \ = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n\
    \    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  local i = 1\n  for _, v in ipairs(l) do\n    if v == i then\n    \
    \  i = i + 1\n    else\n      u[v] = true\n    end\n  end\n  return ipairs(u).sorted()\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n    \
    \  if u[v] == true then\n        table.insert(l, v)\n        u[v] = false\n  \
    \    end\n    end\n  end\n  return l\nend", "  local seen = {}\n  local out =\
    \ {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n\
    \    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[v] == true then break end\n    end\n  \
    \  table.insert(l, v)\n  end\n  return l\nend", "  local seen = {}\n  local out\
    \ = {}\n  for i = 1, #l do\n    if seen[l[i]] then continue end\n    seen[l[i]]\
    \ = true\n    out[#out + 1] = l[i]\n  end\n  return out\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n\
    \      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function(t, k) assert(u[k]) then return k end end})\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local r\n  do\n    local i = 1\n    r = {}\n    while i <= #u do\n  \
    \    if u[i] then\n        table.insert(r, i)\n      end\n      i = i + 1\n  \
    \  end\n  done\n  return r\nend", "  local u = {}\n  local i = 1\n  for _, v in\
    \ ipairs(l) do\n    if v == i then\n      i = i + 1\n    else\n      u[i - 1]\
    \ = v\n      i = i + 1\n    end\n  end\n  return u\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\
    \ break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n  \
    \    seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] ==\
    \ true then\n        table.insert(l, v)\n        u[v] = false\n      end\n   \
    \ end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v]\
    \ = true end\n  return setmetatable(l, { __index = u })\nend", "  local seen =\
    \ {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n    \
    \  table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n\
    \      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\n\
    \        table.insert(l, v)\n        u[v] = false\n      end\n    end\n  end\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] then\n        table.insert(l, v)\n  \
    \      break\n      end\n    end\n  end\n  return l\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local r\n  do\n    local i = 1\n    r = {}\n    while i <= #u do\n  \
    \    if u[i] then\n        table.insert(r, i)\n      end\n      i = i + 1\n  \
    \  end\n  done\n  return r\nend", "  local u = {}\n  for _, v in ipairs(l) do\
    \ u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local u\
    \ = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then\n        table.insert(l, v)\n        u[v]\
    \ = nil\n      end\n    end\n  end\n  return l\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then table.insert(l, v) break end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  local i = 1\n  for _, v in ipairs(l) do\n    if v == i then\n    \
    \  i = i + 1\n    else\n      u[i - 1] = v\n    end\n  end\n  return u\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local r\n  do\n    r = {}\n    for v in pairs(u)\
    \ do r[v] = true end\n  done\n  return r\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then table.insert(l, v) break end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local r\n  do\n    r =\
    \ {}\n    for v in pairs(u) do r[v] = true end\n  done\n  return r\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  for v in pairs(u) do\n    i = i + 1\n    if i > 1 then\n      if v < l[i -\
    \ 1] then\n        table.insert(l, v)\n      end\n    end\n  end\n  return l\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n   \
    \   if u[i] then\n        local j = i - 1\n        while j >= 0 and u[j] do\n\
    \          u[j] = false\n          j = j - 1\n        end\n        u[i] = false\n\
    \      end\n    end\n    i = i + 1\n  end\n  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[i] then\n        local j = i - 1\n    \
    \    while j >= 0 and u[j] do\n          u[j] = false\n          j = j - 1\n \
    \       end\n        u[i] = false\n      end\n    end\n    i = i + 1\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then\n        table.insert(l, v)\n        break\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then break end\n\
    \    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n   \
    \ if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local v = {}\n  for k, v in pairs(u) do v[#v + 1] = k\
    \ end\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <=\
    \ #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[i] then\n        table.insert(l,\
    \ v)\n        break\n      end\n    end\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then break end\n    end\n    table.insert(l, v)\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  local\
    \ i = 1\n  for _, v in ipairs(l) do\n    if v == nil then\n      break\n    end\n\
    \    table.insert(u, v)\n    i = i + 1\n  end\n  return u\nend", "  local seen\
    \ = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v)\n        table.insert(u, j - 1)\n   \
    \     break\n      end\n    end\n  end\n  return u\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1 , #u do\n      if u[v] == true then break end\n    end\n    table.insert(l,\
    \ v)\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v]\
    \ = true end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local v = {}\n  for k in pairs(u)\
    \ do v[k] = true end\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i\
    \ = i + 1\n  until not u[v]\n  return l\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = nil\n      end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n \
    \ end\n  return l\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l\
    \ do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local r\n  do\n    local i = 1\n    r = {}\n    while\
    \ i <= #u do\n      if u[i] then\n        table.insert(r, i)\n      end\n    \
    \  i = i + 1\n    end\n  done\n  return r\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] ==\
    \ true then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then break end\n    end\n    table.insert(l, v)\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local r\n  do\n    r = {}\n    for v in pairs(u)\
    \ do r[v] = true end\n  done\n  return r\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  for v in pairs(u) do\n    i = i + 1\n    if i > #l\
    \ then break end\n  end\n  return v\nend", "  local seen = {}\n  local out = {}\n\
    \  for i = 1, #l do\n    if seen[tostring(l[i])] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[tostring(l[i])] = true\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n \
    \   end\n  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n\
    \    v = l[i]\n    i = i + 1\n  until i > #l\n  return v\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n\
    \    v = l[i]\n    i = i + 1\n  until not u[v]\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n \
    \ while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local v = {}\n \
    \ for k, v in pairs(u) do v[#v + 1] = k end\n  return v\nend", "  local seen =\
    \ {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] ==\
    \ true then\n        table.insert(l, v)\n        break\n      end\n    end\n \
    \ end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = function(t, i) assert(u[i]); return\
    \ t[i] end})\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n\
    \  end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1 , #u do\n      if u[i] then\n        local j = i\n        while j < #u and\
    \ u[j] do\n          j = j + 1\n        end\n        table.insert(u, v + j - 1)\n\
    \      end\n    end\n  end\n  return u\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    u[v] = true\n  end\n  local i = 1\n  local v\n  while i <= #u do\n \
    \   v = i\n    for i = i + 1 , #u do\n      if u[v] == false then\n        break\
    \ -- leave the loop\n      end\n    end\n    table.insert(l, v)\n  end\n  return\
    \ l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local\
    \ i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n\
    \      if u[v] == true then break end\n    end\n    table.insert(l, v)\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u })\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n    \
    \  if u[v] == true then\n        table.insert(l, v)\n        break\n      end\n\
    \    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do\
    \ u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n \
    \   for i = i + 1 , #u do\n      if u[i] then\n        local j = i\n        while\
    \ j < #u and u[j] do\n          j = j + 1\n        end\n        table.insert(u,\
    \ v + j - 1)\n      end\n    end\n  end\n  return table.concat(u)\nend", "  local\
    \ u = {}\n  local i = 1\n  for _, v in ipairs(l) do\n    if v == i then\n    \
    \  i = i + 1\n    else\n      u[i - 1] = v\n    end\n  end\n  return u\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i\
    \ = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l, v)\n  \
    \      u[v] = nil\n      end\n    end\n  end\n  return l\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\n\
    \        table.insert(l, v)\n        break\n      end\n    end\n  end\n  return\
    \ l\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[tostring(l[i])]\
    \ then\n      table.insert(out, l[i])\n    else\n      seen[tostring(l[i])] =\
    \ true\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out =\
    \ {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v] =\
    \ true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == true then\n        table.insert(l, v)\n        break\n\
    \      end\n    end\n  end\n  return l\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[i] then\n        local j = i - 1\n        while j >= 0 and\
    \ u[j] do\n          u[j] = false\n          j = j - 1\n        end\n        u[i]\
    \ = false\n      end\n    end\n    i = i + 1\n  end\n  local a = {}\n  for i =\
    \ 1, #u do\n    if u[i] then a[i] = i end\n  end\n  return a\nend", "  local u\
    \ = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local r\n  do\n    local\
    \ i = 1\n    r = {}\n    while i <= #u do\n      if u[i] then\n        table.insert(r,\
    \ i)\n      end\n      i = i + 1\n    end\n  done\n  return r\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return table.sort(u)\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1 , #u do\n      if u[i] then\n        local j = i\n        while j < #u and\
    \ u[j] do\n          j = j + 1\n        end\n        table.insert(u, v + j - 1)\n\
    \      end\n    end\n  end\n  return table.concat(u)\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then\
    \ break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  for v in pairs(u) do\n    i = i + 1\n    if i > #l\
    \ then break end\n  end\n  return i\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1, #u do\n      if u[i] then\n        local j = i\n        while j < #u and\
    \ u[j] do\n          j = j + 1\n        end\n        table.insert(u, v + j - 1)\n\
    \      end\n    end\n  end\n  return u\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i\
    \ = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l, v)\n  \
    \      u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local u =\
    \ {}\n  local i = 1\n  for _, v in ipairs(l) do\n    if v == i then\n      i =\
    \ i + 1\n    else\n      u[i - 1] = v\n    end\n  end\n  return u\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ table.sort(u)\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  for v in pairs(u) do\n    i = i + 1\n    if\
    \ i > #l then break end\n  end\n  return i\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      seen[v]\
    \ = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then table.insert(l, v) break end\n    end\n  end\n  return l\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then table.insert(l, v) break end\n    end\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then break end\n    end\n    table.insert(l, v)\n\
    \  end\n  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u\
    \ })\nend", "  local u = {}\n  local i = 1\n  for _, v in ipairs(l) do\n    if\
    \ v == i then\n      i = i + 1\n    else\n      u[i - 1] = v\n    end\n  end\n\
    \  return u\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n\
    \    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[tostring(l[i])] then\n    \
    \  table.insert(out, l[i])\n    else\n      seen[tostring(l[i])] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i\
    \ = i + 1, #u do\n      if u[v] == true then\n        table.insert(l, v)\n   \
    \     break\n      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <=\
    \ #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true then break\
    \ end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1 ,\
    \ #u do\n      if u[v] == true then\n        table.insert(l, v)\n        break\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local r\n  do\n    local\
    \ i = 1\n    r = {}\n    while i <= #u do\n      if u[i] then\n        table.insert(r,\
    \ i)\n      end\n      i = i + 1\n    end\n  done\n  return r\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  for v in pairs(u) do\n    i = i + 1\n\
    \    if i > #l then break end\n  end\n  return v\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <=\
    \ #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true then break\
    \ end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] =\
    \ v\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
