language: lua
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeeagjxrw.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeeagjxrw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"^\" .. substring .. \"$\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3qj9q4hz.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3qj9q4hz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3qj9q4hz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S+\") do\n        if c == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfj6b5jg.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpgfj6b5jg.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, i, #substring) == substring then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswd37uhz.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpswd37uhz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S\") do\n        if string.sub(c, 1, string.len(substring))==substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi3olv8e.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpgi3olv8e.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstaalpvm.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpstaalpvm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, i, #substring) == substring then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswd37uhz.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpswd37uhz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%a\") do\n        if string.find(substring, c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplteey69i.lua:23:\
    \ expected: 4, actual: 9\nstack traceback:\n\t/tmp/tmplteey69i.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S+\") do\n        if c == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaraypd_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpvaraypd_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 1 end\n  if #string == 0 then return\
    \ 0 end\n  if #substring == 0 then return 1 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #substring) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr0zct40.lua:26:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpwr0zct40.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S+\") do\n        if string.find(substring, c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jvnl6v1.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp1jvnl6v1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstaalpvm.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpstaalpvm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then\n  \
    \  return 0\n  end\n  if substring == nil then\n    return 1\n  end\n  local count\
    \ = 0\n  for i = 1, #string do\n    if string.sub(i, #string) == substring then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cw08gk2.lua:28:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9cw08gk2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tif string.sub(string,pos,pos) == substring\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\tpos = pos + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3v_gdjc.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpd3v_gdjc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeeagjxrw.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeeagjxrw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string - #substring) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp67h9vr.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpqp67h9vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S\") do\n        if c == substring then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81i0ibpe.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp81i0ibpe.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%a\") do\n        if c == substring then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_rm6s4l.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpo_rm6s4l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tpos = string.find(substring, string, pos)\n\
    \t\tif pos == nil then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count\
    \ + 1\n\t\t\tpos = pos + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvtxlfbw.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpjvtxlfbw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjvtxlfbw.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ c in string.gmatch(string, \"%a\") do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjou21de4.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpjou21de4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tcount = count + 1\n\t\tpos = string.find(substring,\
    \ string, pos)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrfmcj6b.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwrfmcj6b.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwrfmcj6b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S\") do\n        if string.find(substring, c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvz6s4n4.lua:23:\
    \ expected: 4, actual: 9\nstack traceback:\n\t/tmp/tmpuvz6s4n4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstaalpvm.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpstaalpvm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then\n  \
    \  return 0\n  end\n  if substring == nil then\n    return 1\n  end\n  local count\
    \ = 0\n  for i = 1, #string do\n    if string.sub(i, #string) == substring then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cw08gk2.lua:28:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9cw08gk2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczta35ph.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpczta35ph.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string - #substring) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp67h9vr.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpqp67h9vr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstaalpvm.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpstaalpvm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeeagjxrw.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeeagjxrw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #substring) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ridkwd7.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_ridkwd7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tif string.sub(string, pos, pos) == substring\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\tpos = pos + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tewnnuk.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9tewnnuk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%a\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglzpzb7a.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpglzpzb7a.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeeagjxrw.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeeagjxrw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S+\") do\n        if c == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaraypd_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpvaraypd_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string + 1) ~= substring then\n\
    \            count = count + 1\n        elseif string.sub(i, #string + 1) ~= string.sub(i\
    \ - 1, #string + 1) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30d1smc6.lua:24:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp30d1smc6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- If the substring is not\
    \ in the string, return 0.\n\tif string.find(string, substring) == nil then\n\t\
    \treturn 0\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4ezyjftg.lua:23: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3eo8u25.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx3eo8u25.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then count = count\
    \ + 1 end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp852z9jn_.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp852z9jn_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"^\" .. substring .. \"$\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3qj9q4hz.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3qj9q4hz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3qj9q4hz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string + 1) ~= substring then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps02gvl41.lua:24:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmps02gvl41.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_ss5c9d.lua:10:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp3_ss5c9d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3_ss5c9d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ c in string.gmatch(string, \"%S+\") do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxzjwmjv.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpnxzjwmjv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jmdrzj0.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp_jmdrzj0.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S+\") do\n        if string.find(substring, c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jvnl6v1.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp1jvnl6v1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_uelizl.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpg_uelizl.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeeagjxrw.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeeagjxrw.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6c_l1lu.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpp6c_l1lu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #substring) == substring then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90yn5no3.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp90yn5no3.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659797578
