name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- is_simple_power(1, 4) => true\n-- is_simple_power(2,\
  \ 2) => true\n-- is_simple_power(8, 2) => true\n-- is_simple_power(3, 2) => false\n\
  -- is_simple_power(3, 1) => false\n-- is_simple_power(5, 3) => false\nlocal function\
  \ is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if x == n then\n    return true\n  end\n  if x < n then\n    return\
    \ false\n  end\n  local y = 1\n  while y < n do\n    if x % n == 0 then\n    \
    \  return false\n    end\n    y = y * n\n  end\n  return true\nend", "  if x ==\
    \ n then\n    return true\n  end\n  if x < n then\n    return false\n  end\n \
    \ local i = 2\n  while i <= n do\n    if x % i == 0 then\n      return false\n\
    \    end\n    i = i * 2\n  end\n  return true\nend", "  if x == n then\n    return\
    \ true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x,\
    \ n-1)\n  end\nend", "  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend", "  if n == 1 then\n \
    \   return true\n  end\n  if n == 0 then\n    return false\n  end\n  if n == -1\
    \ then\n    return false\n  end\n  if n == -2 then\n    return false\n  end\n\
    \  if n == -3 then\n    return false\n  end\n  if n == -4 then\n    return false\n\
    \  end\n  if n == -5 then\n    return false\n  end\n  if n == -6 then\n    return\
    \ false\n  end\n  if n == -7 then\n    return false\n  end\n  if n == -8 then\n\
    \    return false\n  end\n  if n == -9 then\n    return false\n  end\n  if n ==\
    \ -10 then\n    return false\n  end\n  if n == -11 then\n    return false\n  end\n\
    \  if n == -12 then\n    return false\n  end\n  if n == -13 then\n    return false\n\
    \  end\n  if n == -14 then\n    return false\n  end\n  if n == -15 then\n    return\
    \ false\n  end\n  if n == -16 then\n    return false\n  end\n  if n == -17 then\n\
    \    return false\n  end\n  if n == -18 then\n    return false\n  end\n  if n\
    \ == -19 then\n    return false\n  end\n  if n == -20 then\n    return false\n\
    \  end\n  if n == -21 then\n    return false\n  end\n  if n == -22 then\n    return\
    \ false\n  end\n  if n == -23 then\n    return false\n  end\n  if n == -24 then\n\
    \    return false\n  end\n  if n == -25 then\n    return false\n  end\n  if n\
    \ == -26 then\n    return false\n  end\n  if n == -27 then\n    return false\n\
    \  end\n  if n == -28 then\n    return false\n  end\n  if n == -29 then\n    return\
    \ false\n  end\n  if n == -30 then\n    return false\n  end\n  if n == -31 then\n\
    \    return false\n  end\n  if n == -32 then\n    return false\n  end\n  if n\
    \ == -33 then\n    return false\n  end\n  if n == -34 then\n    return false\n\
    \  end\n  if n == -35 then\n    return false\n  end\n  if n == -36 then\n    return\
    \ false\n  end\n  if n == -37 then\n    return false\n  end\n  if n == -38 then\n\
    \    return false\n  end\n  if n == -39 then\n    return false\n  end\n  if n\
    \ == -40 then\n    return false\n  end\n  if n == -41 then\n    return false\n\
    \  end\n  if n == -42 then\n    return false\n  end\n  if n == -43 then\n    return\
    \ false\n  end\n  if n == -44 then\n    return false\n  end\n  if n == -45 then\n",
  "  if x == n then\n    return true\n  else\n    return false\n  end\nend", "  if\
    \ x == n then\n    return true\n  end\n  if x < n then\n    return false\n  end\n\
    \  if n == 1 then\n    return true\n  end\n  if n % 2 == 0 then\n    return is_simple_power(x,\
    \ n / 2)\n  end\n  return is_simple_power(x, n / 2) or is_simple_power(x, n /\
    \ 2)\nend", "  if n == 1 then\n    return x == 1\n  else\n    return x % n ==\
    \ 0 and is_simple_power(x / n, n)\n  end\nend", "  if x == n then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if n == 1 then\n    return true\n\
    \  else\n    return (x == n) or (is_simple_power(x, n-1) and is_simple_power(x,\
    \ n-1))\n  end\nend", "  if n == 1 then\n    return true\n  end\n  if n == 0 then\n\
    \    return false\n  end\n  if n == -1 then\n    return false\n  end\n  if n ==\
    \ -2 then\n    return false\n  end\n  if n == -3 then\n    return false\n  end\n\
    \  if n == -4 then\n    return false\n  end\n  if n == -5 then\n    return false\n\
    \  end\n  if n == -6 then\n    return false\n  end\n  if n == -7 then\n    return\
    \ false\n  end\n  if n == -8 then\n    return false\n  end\n  if n == -9 then\n\
    \    return false\n  end\n  if n == -10 then\n    return false\n  end\n  if n\
    \ == -11 then\n    return false\n  end\n  if n == -12 then\n    return false\n\
    \  end\n  if n == -13 then\n    return false\n  end\n  if n == -14 then\n    return\
    \ false\n  end\n  if n == -15 then\n    return false\n  end\n  if n == -16 then\n\
    \    return false\n  end\n  if n == -17 then\n    return false\n  end\n  if n\
    \ == -18 then\n    return false\n  end\n  if n == -19 then\n    return false\n\
    \  end\n  if n == -20 then\n    return false\n  end\n  if n == -21 then\n    return\
    \ false\n  end\n  if n == -22 then\n    return false\n  end\n  if n == -23 then\n\
    \    return false\n  end\n  if n == -24 then\n    return false\n  end\n  if n\
    \ == -25 then\n    return false\n  end\n  if n == -26 then\n    return false\n\
    \  end\n  if n == -27 then\n    return false\n  end\n  if n == -28 then\n    return\
    \ false\n  end\n  if n == -29 then\n    return false\n  end\n  if n == -30 then\n\
    \    return false\n  end\n  if n == -31 then\n    return false\n  end\n  if n\
    \ == -32 then\n    return false\n  end\n  if n == -33 then\n    return false\n\
    \  end\n  if n == -34 then\n    return false\n  end\n  if n == -35 then\n    return\
    \ false\n  end\n  if n == -36 then\n    return false\n  end\n  if n == -37 then\n\
    \    return false\n  end\n  if n == -38 then\n    return false\n  end\n  if n\
    \ == -39 then\n    return false\n  end\n  if n == -40 then\n    return false\n\
    \  end\n  if n == -41 then\n    return false\n  end\n  if n == -42 then\n    return\
    \ false\n  end\n  if n == -43 then\n    return false\n  end\n  if n == -44 then\n\
    \    return false\n  end\n  if n == -45 then\n", "  if x == n then\n    return\
    \ true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x,\
    \ n-1)\n  end\nend", "  if x == n then\n    return true\n  end\n  if x < n then\n\
    \    return false\n  end\n  local power = 1\n  while power < n do\n    power =\
    \ power * x\n  end\n  return power == x\nend", "  if x == n then\n    return true\n\
    \  else\n    return false\n  end\nend", "  if x == n then\n    return true\n \
    \ elseif x < n then\n    return false\n  else\n    return is_simple_power(x, n-1)\n\
    \  end\nend", "  if x == 1 then\n    return true\n  elseif x == 0 then\n    return\
    \ false\n  elseif n == 0 then\n    return false\n  elseif n == 1 then\n    return\
    \ x == n\n  else\n    return is_simple_power(x, n-1) and is_simple_power(x*n,\
    \ n)\n  end\nend", "  if x == n then\n    return true\n  end\n  if x < n then\n\
    \    return false\n  end\n  if x ~= n then\n    return is_simple_power(x, n-1)\n\
    \  end\n  return false\nend", "  if n == 1 then\n    return true\n  end\n  if\
    \ x == 1 then\n    return false\n  end\n  if x == 0 then\n    return false\n \
    \ end\n  if n == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return\
    \ is_simple_power(x, n / 2)\n  end\n  return is_simple_power(x * x, n / 2)\nend",
  "  if x == n then\n    return true\n  elseif x < n then\n    return false\n  else\n\
    \    return is_simple_power(x, n-1)\n  end\nend", "  if n == 1 then\n    return\
    \ x == 1\n  else\n    return x % n == 0 and is_simple_power(x / n, n)\n  end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
