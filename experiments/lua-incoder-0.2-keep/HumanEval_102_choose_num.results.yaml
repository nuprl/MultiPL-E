language: lua
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   if x < 2 then\n      return\
    \ -1\n   end\n   local z = x\n   while z < y do\n      z = z * 2\n   end\n   return\
    \ z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99vju5l_.lua:24:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp99vju5l_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   if x > y then\n      x,\
    \ y = y, x\n   end\n   if x == y then\n      return x\n   end\n   if x % 2 ==\
    \ 0 then\n      return choose_num(x / 2, y)\n   else\n      return choose_num(3\
    \ * x + 1, y)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local max_num\n    for i = x, y + 1 do\n        if i % 2 == 0 then\n\
    \            if max_num == nil then\n                max_num = i\n           \
    \ else\n                if max_num < i then\n                    max_num = i\n\
    \                end\n            end\n        end\n    end\n    return max_num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz01k7eg.lua:26:\
    \ expected: 14, actual: 16\nstack traceback:\n\t/tmp/tmpkz01k7eg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local function is_even(n)\n        return n % 2 == 0\n    end\n    \n\
    \    local function is_between(low, high)\n        return low <= high and low\
    \ < high\n    end\n    \n    local function is_in_range(n)\n        return is_between(math.floor(n),\
    \ math.ceil(n))\n    end\n    \n    local function is_odd(n)\n        return n\
    \ % 2 == 1\n    end\n    \n    local function is_even_in_range(low, high)\n  \
    \      return is_between(low, high) and is_even(n)\n    end\n    \n    local function\
    \ is_odd_in_range(low, high)\n        return is_between(low, high) and is_odd(n)\n\
    \    end\n    \n    local function is_in_range_or_even_in_range(low, high)\n \
    \       return is_in_range(low) or is_even_in_range(low, high)\n    end\n    \n\
    \    local function is_in_range_or_odd_in_range(low, high)\n        return is_in_range(low)\
    \ or is_odd_in_range(low, high)\n    end\n    \n    local function is_in_range_or_even_in_range_or_odd_in_range(low,\
    \ high)\n        return is_in_range_or_even_in_range(low, high) or is_odd_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_odd_in_range_or_even_in_range(low,\
    \ high)\n        return is_in_range_or_odd_in_range(low, high) or is_even_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_even_in_range_or_odd_in_range_or_even_in_range(low,\
    \ high)\n        return is_in_range_or_even_in_range(low, high) or is_odd_in_range_or_even_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_odd_in_range_or_even_in_range_or_even_in_range(low,\
    \ high)\n        return is_in_range_or_odd_in_range(low, high) or is_even_in_range_or_even_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_even_in_range_or_odd_in_range_or_even_in_range_or_odd_in_range(low,\
    \ high)\n        return is_in_range_or_even_in_range(low, high) or is_odd_in_range_or_odd_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_odd_in_range_or_even_in_range_or_even_in_range_or_odd_in_range(low,\
    \ high)\n        return is_in_range_or_odd_in_range(low, high) or is_even_in_range_or_even_in_range(low,\
    \ high)\n    end\n    \n    local function is_in_range_or_even_in_range_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpax3e5m5p.lua:65: ''('' expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n    local x_even = x % 2\n    local y_even = y % 2\n    if x_even and y_even\
    \ then\n        local x_odd = x % 2\n        local y_odd = y % 2\n        if x_even\
    \ and y_odd then\n            return x\n        elseif x_odd and not y_even then\n\
    \            return y\n        elseif not x_even and y_odd then\n            return\
    \ x\n        elseif not x_odd and y_even then\n            return y\n        end\n\
    \    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5hlflk7.lua:29:\
    \ expected: 14, actual: 12\nstack traceback:\n\t/tmp/tmpv5hlflk7.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  if x < y then\n    x, y = y, x\n  end\n  local num = x\n  while num <\
    \ y do\n    num = num * 2 + 1\n  end\n  return num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hmbkwcr.lua:21:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmp2hmbkwcr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n  local function is_even(n)\n    return n % 2 == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1oi0wnsd.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal x_even = x % 2 == 0\n\tlocal y_even = y % 2 == 0\n\tlocal x_odd\
    \ = x % 2 ~= 0\n\tlocal y_odd = y % 2 ~= 0\n\tif x_even and y_even then\n\t\t\
    return x\n\telseif x_even and y_odd then\n\t\treturn y\n\telseif x_odd then\n\t\
    \treturn x\n\telseif y_even then\n\t\treturn y\n\telse\n\t\treturn -1\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu45lcfzl.lua:28:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpu45lcfzl.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   local max_num = x\n   for\
    \ i = y, 1, -1 do\n      if max_num % i == 0 then\n         max_num = max_num\
    \ / i\n      else\n         return -1\n      end\n   end\n   return max_num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7m7ex07.lua:25:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpr7m7ex07.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   local max_num = x\n   local\
    \ max_num2 = y\n   local i = 2\n   while i <= max_num2 do\n      if max_num %\
    \ i == 0 then\n         max_num = max_num / i\n         max_num2 = max_num2 -\
    \ i\n      else\n         i = i + 1\n      end\n   end\n   return max_num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
    \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptynos_8k.lua:28:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmptynos_8k.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      return choose_num(y, x)\n   end\n   if x == y then\n\
    \      return x\n   end\n   if x % 2 == 0 then\n      return choose_num(x / 2,\
    \ y) + 1\n   end\n   if y % 2 == 0 then\n      return choose_num(x, y / 2) + 1\n\
    \   end\n   return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n   \
    \ lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33, 12354),\
    \ 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphik0_7z4.lua:26:\
    \ expected: 14, actual: 1\nstack traceback:\n\t/tmp/tmphik0_7z4.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   local max_num = x\n   local\
    \ min_num = y\n   while max_num - min_num > 1 do\n      local num = max_num +\
    \ min_num\n      if num % 2 == 0 then\n         max_num = num\n      else\n  \
    \       min_num = num\n      end\n   end\n   return max_num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8o7sl9q.lua:27:\
    \ expected: 14, actual: 15\nstack traceback:\n\t/tmp/tmpr8o7sl9q.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n   if x < y then\n      x, y = y, x\n   end\n   for i = x, y + 1 do\n  \
    \    if i ~= math.floor(i) then\n         return i\n      end\n   end\n   return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = choose_num\n    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13,\
    \ 12), -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
    \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
    \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
    \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkmxdxrs.lua:22:\
    \ expected: 14, actual: -1\nstack traceback:\n\t/tmp/tmpzkmxdxrs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw16adgz9.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- This function takes two positive numbers x and y and returns the\n\
    -- biggest even integer number that is in the range [x, y] inclusive. If \n--\
    \ there's no such number, then the function should return -1.\n-- For example:\n\
    -- choose_num(12, 15) = 14\n-- choose_num(13, 12) = -1\nlocal function choose_num(x,\
    \ y)\n\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\n\t\n\tlocal function\
    \ is_odd(n)\n\t\treturn n % 2 == 1\n\tend\n\t\n\tlocal function is_between(a,\
    \ b)\n\t\treturn a <= b and a >= b\n\tend\n\t\n\tlocal function is_in_range(n)\n\
    \t\treturn is_between(x + 1, y) and is_between(x - 1, y)\n\tend\n\t\n\tlocal function\
    \ is_in_range_even(n)\n\t\treturn is_between(x + 1, y) and is_even(n) and is_in_range(n\
    \ - 1)\n\tend\n\t\n\tlocal function is_in_range_odd(n)\n\t\treturn is_between(x\
    \ + 1, y) and is_odd(n) and is_in_range(n - 1)\n\tend\n\t\n\tlocal function is_in_range_odd_even(n)\n\
    \t\treturn is_between(x + 1, y) and is_odd(n) and is_even(n) and is_in_range(n\
    \ - 1)\n\tend\n\t\n\tlocal function is_in_range_odd_odd(n)\n\t\treturn is_between(x\
    \ + 1, y) and is_odd(n) and is_odd(n) and is_in_range(n - 1)\n\tend\n\t\n\tlocal\
    \ function is_in_range_odd_even_even(n)\n\t\treturn is_between(x + 1, y) and is_odd(n)\
    \ and is_even(n) and is_in_range(n - 1)\n\tend\n\t\n\tlocal function is_in_range_odd_even_odd(n)\n\
    \t\treturn is_between(x + 1, y) and is_odd(n) and is_odd(n) and is_in_range(n\
    \ - 1)\n\tend\n\t\n\tlocal function is_in_range_odd_even_even_even(n)\n\t\treturn\
    \ is_between(x + 1, y) and is_odd(n) and is_even(n) and is_in_range(n - 1)\n\t\
    end\n\t\n\tlocal function is_in_range_odd_even_even_odd(n)\n\t\treturn is_between(x\
    \ + 1, y) and is_odd(n) and is_odd(n) and is_in_range(n - 1)\n\tend\n\t\n\tlocal\
    \ function is_in_range_odd_even_odd_even(n)\n\t\treturn is_between(x + 1, y) and\
    \ is_odd(n) and is_odd(n) and is_even(n) and is_in_range(n - 1)\n\tend\n\t\n\t\
    local function is_in_range_odd_even_odd_odd(n)\n\t\treturn is_between(x + 1, y)\
    \ and is_odd(n) and is_odd(n) and is_odd(n) and is_in_range(n - 1)\n\tend\n\t\n\
    \tlocal function is_in_range_odd_even_odd_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = choose_num\n    lu.assertEquals(candidate(12,\
    \ 15), 14)\n    lu.assertEquals(candidate(13, 12), -1)\n    lu.assertEquals(candidate(33,\
    \ 12354), 12354)\n    lu.assertEquals(candidate(5234, 5233), -1)\n    lu.assertEquals(candidate(6,\
    \ 29), 28)\n    lu.assertEquals(candidate(27, 10), -1)\n    lu.assertEquals(candidate(7,\
    \ 7), -1)\n    lu.assertEquals(candidate(546, 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuqg63w6z.lua:65: ''('' expected near ''lu''

    '
  stdout: ''
