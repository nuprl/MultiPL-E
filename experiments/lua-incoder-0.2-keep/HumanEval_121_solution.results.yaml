name: HumanEval_121_solution
language: lua
results:
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03d69t3w.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp03d69t3w.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fjqxe6a.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp1fjqxe6a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmgq3_aa.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpdmgq3_aa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu7tdwet.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmplu7tdwet.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ok1iv9r.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp_ok1iv9r.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx65g9vpp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpx65g9vpp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqlleq1c.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpgqlleq1c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduwho051.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpduwho051.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_eo7f9_.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpx_eo7f9_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvtek2a9.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpsvtek2a9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeaxj34eg.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpeaxj34eg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mflj301.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp7mflj301.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyw6g_1m.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpgyw6g_1m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekb3i5n2.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpekb3i5n2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcmarwcb.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzcmarwcb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzx55u2o.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpgzx55u2o.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1xoko2l.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpa1xoko2l.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkoch868l.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpkoch868l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma4j0zh4.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpma4j0zh4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6yjspxc.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpa6yjspxc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if lst[i] % 2 == 1 then\n            sum = sum + lst[i]\n        end\n  \
    \  end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy689nxjo.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmpy689nxjo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6klrcjod.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp6klrcjod.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oo9vug7.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp7oo9vug7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81xgtbm5.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp81xgtbm5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwv7g_k7.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpcwv7g_k7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5svnsh0.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpr5svnsh0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46ibrutx.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp46ibrutx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv2xdcmp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzv2xdcmp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h9l26v0.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp5h9l26v0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9zhdug6.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpu9zhdug6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoi26axba.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpoi26axba.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnxn1hk3.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbnxn1hk3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_o51jgc9.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp_o51jgc9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpese76act.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpese76act.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbee8r_gg.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbee8r_gg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalv01gtp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpalv01gtp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp660pji21.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp660pji21.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig2be2iu.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpig2be2iu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd2ur05q.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpnd2ur05q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8mqiut4.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpd8mqiut4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbr81n1g.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzbr81n1g.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbyjgxnk.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmppbyjgxnk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkzin20e.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpfkzin20e.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp531mwveg.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp531mwveg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj1isn2c.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmplj1isn2c.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1alumys8.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp1alumys8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgjpivmb.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpfgjpivmb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3796x93m.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp3796x93m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j2q9lzw.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp6j2q9lzw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfc2lsp4.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxfc2lsp4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatkm3itb.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpatkm3itb.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqsu9n0u.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbqsu9n0u.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h3h0223.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp_h3h0223.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7inezr1.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpt7inezr1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4yxxr5_.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpc4yxxr5_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqewcj6er.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpqewcj6er.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3oquohj.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpu3oquohj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8dylxo0.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpm8dylxo0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe403fjqc.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpe403fjqc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5wf_mwk.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpy5wf_mwk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0q3th1p.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpw0q3th1p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5xd8xuc.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpq5xd8xuc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7bqisb7.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmps7bqisb7.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktbs2_4f.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpktbs2_4f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbomvazy3.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbomvazy3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctgap9l1.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpctgap9l1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohxgbnna.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpohxgbnna.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08xh7u3s.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp08xh7u3s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor4roag9.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpor4roag9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52w2ea_1.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp52w2ea_1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7npxl5e.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpj7npxl5e.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfufnio9y.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpfufnio9y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kbyxd6r.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp8kbyxd6r.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n9zxdtd.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp4n9zxdtd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9wca0us.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpa9wca0us.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__l4i74m.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp__l4i74m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprezzmaw1.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmprezzmaw1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod4onkuq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpod4onkuq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7u1tddd.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpq7u1tddd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03lnr7w2.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp03lnr7w2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovgvjpc0.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpovgvjpc0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9v2e3bm.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmph9v2e3bm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o_gr17l.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp4o_gr17l.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxt1zwg_.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmprxt1zwg_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0ax_inw.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpn0ax_inw.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc3qz0z6.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpbc3qz0z6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7mns8dz.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpb7mns8dz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozrd_ib8.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpozrd_ib8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0up530vp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp0up530vp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncbu94wa.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpncbu94wa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pfb60je.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp_pfb60je.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wmkc1ma.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp0wmkc1ma.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8uyq0mq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmph8uyq0mq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8hquvky.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmps8hquvky.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6wut5bb.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpo6wut5bb.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhdmnxjj.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmphhdmnxjj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40vfsw5a.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp40vfsw5a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0tbsr8j.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpz0tbsr8j.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvp5gdrh.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpgvp5gdrh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp519qteuv.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp519qteuv.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wjgsn26.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp4wjgsn26.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgui90a4.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmprgui90a4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdmq0bf1.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpvdmq0bf1.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou2x4g6g.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpou2x4g6g.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n1031_z.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp0n1031_z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9vsaigg.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpo9vsaigg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_aju7xf.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpb_aju7xf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlico2jy.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxlico2jy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj05sc_0.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxj05sc_0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkyzs928.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpwkyzs928.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kgcvxib.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp9kgcvxib.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw7271cx.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpuw7271cx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1o85d4i.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpw1o85d4i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesv3q_67.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpesv3q_67.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4de554b_.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp4de554b_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_ux2moc.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmps_ux2moc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f3vymze.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp_f3vymze.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oqmz5y5.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp4oqmz5y5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa62h8514.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpa62h8514.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc0r940n.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpjc0r940n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5jgzvo.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp1s5jgzvo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb3bjs1p.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzb3bjs1p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_ezd2m8.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpd_ezd2m8.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon5i6fv2.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpon5i6fv2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ebsng5x.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp9ebsng5x.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz07egpu.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpdz07egpu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yze__hh.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp9yze__hh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f8s8cfj.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp_f8s8cfj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2qylmll.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpj2qylmll.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7qnbx1t.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpu7qnbx1t.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e6dnp4m.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp7e6dnp4m.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jqxt6pk.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp1jqxt6pk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwlnflhh.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmppwlnflhh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunau8evi.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpunau8evi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp549uduxo.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp549uduxo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6msk2h6o.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp6msk2h6o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo32lnbq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpvo32lnbq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8ifi0m6.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpu8ifi0m6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftmsa5r6.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpftmsa5r6.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw0chx6t.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzw0chx6t.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1xxtj99.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpj1xxtj99.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17o_mjoy.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp17o_mjoy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dikt49d.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp3dikt49d.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55r5ombx.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp55r5ombx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqsfimqq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpaqsfimqq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovu8athi.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpovu8athi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87vufzhq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp87vufzhq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuc3hy_5.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpwuc3hy_5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqn7j9jg.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpsqn7j9jg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewa7xpdt.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpewa7xpdt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglcdvtqq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpglcdvtqq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntar8zvn.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpntar8zvn.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wnlsouh.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp6wnlsouh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspm_0ikv.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpspm_0ikv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjb5p3gd.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxjb5p3gd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkzkih1w.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmprkzkih1w.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp469c5f4r.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp469c5f4r.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9ini9tx.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpr9ini9tx.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiytmexi.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpuiytmexi.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6e4txag.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpf6e4txag.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6a4csk9.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpm6a4csk9.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pfrkudd.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp_pfrkudd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2klxgnm.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpb2klxgnm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqhtdfkd.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpjqhtdfkd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq5viu69.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmprq5viu69.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmnpetmk.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmprmnpetmk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e9e3bvc.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp8e9e3bvc.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwfrha0u.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpcwfrha0u.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkxkgf7b.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmptkxkgf7b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqcwx59d.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpiqcwx59d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj8fhu5i.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpvj8fhu5i.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlpolvkm.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmprlpolvkm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl7s1k2e.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxl7s1k2e.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo29wrzm.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpvo29wrzm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsynvjxnn.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpsynvjxnn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_hfa92q.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp6_hfa92q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir2ovkpe.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpir2ovkpe.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuaoperq.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpwuaoperq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplac6ae5s.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmplac6ae5s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoqf13y5.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmphoqf13y5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ey54_5a.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp7ey54_5a.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0v6mnjp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpw0v6mnjp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzr6vgz_.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpjzr6vgz_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8mvnlde.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpx8mvnlde.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ourc8jg.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp3ourc8jg.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9_yco7y.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpf9_yco7y.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kln9kwi.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmp0kln9kwi.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqn0y8yj.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpjqn0y8yj.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt_ttf2y.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpgt_ttf2y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb1ywpo_.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpeb1ywpo_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgkcbb48.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpzgkcbb48.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocpi5nkv.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpocpi5nkv.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n2lmi8q.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmp7n2lmi8q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4s9yzl3.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpy4s9yzl3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb65yoiml.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpb65yoiml.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n    local sum = 0\n    for i = 1, #lst do\n    \
    \    if lst[i] % 2 == 1 then\n            sum = sum + lst[i]\n        end\n  \
    \  end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w0ns_5h.lua:19:\
    \ expected: 12, actual: 13\nstack traceback:\n\t/tmp/tmp4w0ns_5h.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4n3gkes.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpg4n3gkes.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejhgn2zp.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpejhgn2zp.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvivz57u.lua:19:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpxvivz57u.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- solution([5, 8, 7, 1])\
    \ ==> 12\n-- solution([3, 3, 3, 3, 3]) ==> 9\n-- solution([30, 13, 24, 321]) ==>0\n\
    local function solution(lst)\n  local sum = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv7yjhcp.lua:21:\
    \ expected: 0, actual: 54\nstack traceback:\n\t/tmp/tmpdv7yjhcp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
