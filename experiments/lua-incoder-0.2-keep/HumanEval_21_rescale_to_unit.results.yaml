language: lua
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66633frv.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp66633frv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] - min\n  end\n\
    \  for i = 1, #new_numbers do\n    new_numbers[i] = new_numbers[i] / scale\n \
    \ end\n  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxk17so8j.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpxk17so8j.lua:8: in local 'candidate'\n\t/tmp/tmpxk17so8j.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vx8iv5r.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp6vx8iv5r.lua:8: in local 'candidate'\n\t/tmp/tmp6vx8iv5r.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8ggo_28.lua:19:\
    \ expected: {0, 1}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpw8ggo_28.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j7dgoxw.lua:20:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmp7j7dgoxw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcxijp4i.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpkcxijp4i.lua:8: in local 'candidate'\n\t/tmp/tmpkcxijp4i.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuehtufgx.lua:19:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmpuehtufgx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + scale\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp6s2248.lua:19:\
    \ expected: {0, 1}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmpfp6s2248.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n \
    \   scaled_numbers[i] = ((numbers[i] - min) / range)\n  end\n  return scaled_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b4xij6s.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp2b4xij6s.lua:9: in local 'candidate'\n\t/tmp/tmp2b4xij6s.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * i\n  end\n  return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66633frv.lua:20:\
    \ expected: {0, 1}\nactual: {49.9, 97.8}\nstack traceback:\n\t/tmp/tmp66633frv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuehtufgx.lua:19:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmpuehtufgx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76y2oi0z.lua:18:\
    \ expected: {0, 1}\nactual: {47.9, 95.8}\nstack traceback:\n\t/tmp/tmp76y2oi0z.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm90x3ciu.lua:20:\
    \ expected: {0, 1}\nactual: {2, 2296.41}\nstack traceback:\n\t/tmp/tmpm90x3ciu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  assert(#numbers\
    \ >= 2, \"rescale_to_unit expects a list of at least two numbers\")\n  local min\
    \ = numbers[1]\n  local max = numbers[2]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i] - min\n  end\n \
    \ local new_min = min - scale\n  local new_max = max + scale\n  for i = 1, #numbers\
    \ do\n    numbers[i] = numbers[i] * scale + new_min\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc9qx9wa.lua:24:\
    \ expected: {0, 1}\nactual: {-45.9, 2248.51}\nstack traceback:\n\t/tmp/tmplc9qx9wa.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_fbdufc.lua:18:\
    \ expected: {0, 1}\nactual: {2, 95.8}\nstack traceback:\n\t/tmp/tmpx_fbdufc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpak8fx4kb.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpak8fx4kb.lua:8: in local 'candidate'\n\t/tmp/tmpak8fx4kb.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vx8iv5r.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp6vx8iv5r.lua:8: in local 'candidate'\n\t/tmp/tmp6vx8iv5r.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vx8iv5r.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp6vx8iv5r.lua:8: in local 'candidate'\n\t/tmp/tmp6vx8iv5r.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcxijp4i.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmpkcxijp4i.lua:8: in local 'candidate'\n\t/tmp/tmpkcxijp4i.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vx8iv5r.lua:8:\
    \ attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\
    \t/tmp/tmp6vx8iv5r.lua:8: in local 'candidate'\n\t/tmp/tmp6vx8iv5r.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
