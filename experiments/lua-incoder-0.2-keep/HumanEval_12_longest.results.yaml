language: lua
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ==\
    \ longest then\n      longest = strings[i]\n    else\n      return longest\n \
    \   end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq0kt8yw.lua:25:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpnq0kt8yw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3d3kvnk.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpp3d3kvnk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tm3yu8k.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp9tm3yu8k.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  local longest_len = -1\n  local longest_string\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_string = str\n    end\n  end\n  return longest_string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest < #strings[i] then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum1jfobv.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpum1jfobv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmwhzsuh.lua:25:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmppmwhzsuh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      break\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsqsbwo_.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpvsqsbwo_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], 1\n  for i = 2, #strings do\n    if longest_len > #strings[i]\
    \ then\n      longest, longest_len = strings[i], #strings[i]\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaktyy78x.lua:26:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpaktyy78x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum1jfobv.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpum1jfobv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmwhzsuh.lua:25:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmppmwhzsuh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3d3kvnk.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpp3d3kvnk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9o6ja4j.lua:26:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_9o6ja4j.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      break\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsqsbwo_.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpvsqsbwo_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == strings[#strings] then\n     \
    \ longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli55tqg8.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpli55tqg8.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest([])\n-- >>> longest(['a', 'b', 'c'])\n\
    -- 'a'\n-- >>> longest(['a', 'bb', 'ccc'])\n-- 'ccc'\nlocal function longest(strings)\n\
    \  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3d3kvnk.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpp3d3kvnk.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
