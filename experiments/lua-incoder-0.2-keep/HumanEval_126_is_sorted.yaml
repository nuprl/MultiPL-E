name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a list of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If list has more than 1 duplicate of the same\n-- number, return\
  \ False. Assume no negative numbers and only integers.\n-- Examples\n-- is_sorted([5])\
  \ \u279E True\n-- is_sorted([1, 2, 3, 4, 5]) \u279E True\n-- is_sorted([1, 3, 2,\
  \ 4, 5]) \u279E False\n-- is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n-- is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n-- is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  -- is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n-- is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
  \ False\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val\
    \ then\n      return false\n    end\n    last_val = lst[i]\n  end\n  return true\n\
    end", "  local sorted_list = table.sort(lst)\n  for _, value in ipairs(sorted_list)\
    \ do\n    if value == sorted_list[_] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local last_value = lst[1]\n  for i = 2, #lst do\n   \
    \ if lst[i] ~= last_value then\n      return false\n    end\n    last_value =\
    \ lst[i]\n  end\n  return true\nend", "  if #lst == 1 then\n    return lst[1]\
    \ == lst[1]\n  end\n  local last_val = lst[1]\n  local last_idx = 1\n  for idx\
    \ = 2, #lst do\n    if lst[idx] == last_val then\n      last_idx = idx\n    else\n\
    \      return false\n    end\n  end\n  return true\nend", "  local last_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return\
    \ false\n    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local\
    \ last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val then\n  \
    \    return false\n    end\n    last_val = lst[i]\n  end\n  return true\nend",
  "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  -- If list is empty, return true\n  if #lst == 0 then\n    return\
    \ true\n  end", "  local i = 1\n  while i <= #lst do\n    if lst[i] ~= lst[i -\
    \ 1] + 1 then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end", "  -- If there are more than 1 duplicates, return false\n  if #lst > 1 then\n\
    \    return false\n  end", "  -- Base case\n  if #lst == 1 then\n    return lst[1]\
    \ == lst[1]\n  end\n  -- If there are more than 1 duplicates, return false\n \
    \ if #lst > 1 then\n    return false\n  end\n  -- If there are only 1 duplicate,\
    \ return true\n  if #lst == 1 then\n    return true\n  end\n  -- If there are\
    \ only 2 duplicates, return false\n  if #lst == 2 then\n    return lst[1] == lst[2]\n\
    \  end\n  -- If there are only 3 duplicates, return true\n  if #lst == 3 then\n\
    \    return lst[1] == lst[2] and lst[2] == lst[3]\n  end\n  -- If there are only\
    \ 4 duplicates, return false\n  if #lst == 4 then\n    return lst[1] == lst[2]\
    \ and lst[2] == lst[3] and lst[3] == lst[4]\n  end\n  -- If there are only 5 duplicates,\
    \ return true\n  if #lst == 5 then\n    return lst[1] == lst[2] and lst[2] ==\
    \ lst[3] and lst[3] == lst[4] and lst[4] == lst[5]\n  end\n  -- If there are only\
    \ 6 duplicates, return true\n  if #lst == 6 then\n    return lst[1] == lst[2]\
    \ and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5] and lst[5] ==\
    \ lst[6]\n  end\n  -- If there are only 7 duplicates, return true\n  if #lst ==\
    \ 7 then\n    return lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4]\
    \ and lst[4] == lst[5] and lst[5] == lst[6] and lst[6] == lst[7]\n  end\n  --\
    \ If there are only 8 duplicates, return true\n  if #lst == 8 then\n    return\
    \ lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5]\
    \ and lst[5] == lst[6] and lst[6] == lst[7] and lst[7] == lst[8]\n  end\n  --\
    \ If there are only 9 duplicates, return true\n  if #lst == 9 then\n    return\
    \ lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4] and lst[4] == lst[5]\
    \ and lst[5] == lst[6] and lst[6] == lst[7] and lst[7] == lst[8] and lst[8] ==\
    \ lst[9]\n  end\n  -- If there are only 10 duplicates, return true\n  if #lst\
    \ == 10 then\n    return lst[1] == lst[2] and lst[2] == lst[3] and lst[3] == lst[4]\
    \ and lst[4] == lst[5] and lst[5] == lst[6] and lst[6] == lst[7] and ", "  local\
    \ last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val then\n  \
    \    return false\n    end\n    last_val = lst[i]\n  end\n  return true\nend",
  "  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val then\n\
    \      return false\n    end\n    last_val = lst[i]\n  end\n  return true\nend",
  "  local last_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_val then\n\
    \      return false\n    end\n    last_val = lst[i]\n  end\n  return true\nend",
  "  local sorted = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v == sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local last_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return\
    \ false\n    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local\
    \ last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n\
    \      return false\n    end\n    last_value = lst[i]\n  end\n  return true\n\
    end", "  local sorted = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(lst) do\n    if v == sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #lst ==\
    \ 0 then\n    return true\n  end\n  local last = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] ~= last then\n      return false\n    end\n    last = lst[i]\n\
    \  end\n  return true\nend", "  local last_val = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] ~= last_val then\n      return false\n    end\n    last_val = lst[i]\n\
    \  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
