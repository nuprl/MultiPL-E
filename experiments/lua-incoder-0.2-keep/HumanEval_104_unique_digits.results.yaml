name: HumanEval_104_unique_digits
language: lua
results:
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpguur0y7s.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpguur0y7s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    else\n      if digit ~= math.floor(digit) then\n        table.insert(ret,\
    \ digit)\n      else\n        local k = digit - math.floor(digit)\n        if\
    \ seen[k] then\n          table.insert(ret, k)\n        else\n          table.insert(seen,\
    \ k)\n        end\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploaypvhc.lua:35:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmploaypvhc.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(t, x[i])\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo6ct2gt.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpoo6ct2gt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcwgxnww.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmptcwgxnww.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex82x5yk.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpex82x5yk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmlpkcu7.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjmlpkcu7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxx80lf26.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxx80lf26.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a6cux9x.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp6a6cux9x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbizpqe4f.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpbizpqe4f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_om2frta.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_om2frta.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdamywvr.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsdamywvr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0jzynov.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpz0jzynov.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09it1a3_.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp09it1a3_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    else\n      local digits = string.gsub(digit, \"%d+\", \"\")\n      if digits[1]\
    \ ~= 0 then\n        table.insert(seen, digits)\n      end\n    end\n  end\n \
    \ for i = 1, #seen do\n    if seen[i] ~= 0 then\n      table.insert(ret, seen[i])\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72o5wkra.lua:34:\
    \ expected: {1, 15, 33}\nactual: {\"\", \"\", \"\", \"\"}\nstack traceback:\n\t\
    /tmp/tmp72o5wkra.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i ~= 0 and ((i / 10)\
    \ % 2) == 0 and i ~= i\n  end\n  local function is_odd(i)\n    return i ~= 0 and\
    \ ((i / 10) % 2) == 1 and i ~= i\n  end\n  local function is_zero(i)\n    return\
    \ i ~= 0 and i ~= i\n  end\n  local function is_negative(i)\n    return i ~= 0\
    \ and i ~= -i\n  end\n  local function is_positive(i)\n    return i ~= 0 and i\
    \ ~= i\n  end\n  local function is_negative(i)\n    return i ~= 0 and i ~= -i\n\
    \  end\n  local function is_positive(i)\n    return i ~= 0 and i ~= i\n  end\n\
    \  local function is_even(i)\n    return i ~= 0 and ((i / 10) % 2) == 0 and i\
    \ ~= i\n  end\n  local function is_odd(i)\n    return i ~= 0 and ((i / 10) % 2)\
    \ == 1 and i ~= i\n  end\n  local function is_zero(i)\n    return i ~= 0 and i\
    \ ~= i\n  end\n  local function is_negative(i)\n    return i ~= 0 and i ~= -i\n\
    \  end\n  local function is_positive(i)\n    return i ~= 0 and i ~= i\n  end\n\
    \  local function is_negative(i)\n    return i ~= 0 and i ~= -i\n  end\n  local\
    \ function is_positive(i)\n    return i ~= 0 and i ~= i\n  end\n  local function\
    \ is_even(i)\n    return i ~= 0 and ((i / 10) % 2) == 0 and i ~= i\n  end\n  local\
    \ function is_odd(i)\n    return i ~= 0 and ((i / 10) % 2) == 1 and i ~= i\n \
    \ end\n  local function is_zero(i)\n    return i ~= 0 and i ~= i\n  end\n  local\
    \ function is_negative(i)\n    return i ~= 0 and i ~= -i\n  end\n  local function\
    \ is_positive(i)\n    return i ~= 0 and i ~= i\n  end\n  local function is_negative(i)\n\
    \    return i ~= 0 and i ~= -i\n  end\n  local function is_positive(i)\n    return\
    \ i ~= 0 and i ~= i\n  end\n  local function is_even(i)\n    return i ~= 0 and\
    \ ((i / 10) % 2) == 0 and i ~= i\n  end\n  local function is_odd(i)\n    return\
    \ i ~= 0 and ((i / 10) % 2) == 1 and i ~= i\n  end\n  local function is_zero(i)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwaxri3q9.lua:91: 'end' expected (to close 'function' at line\
    \ 79) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] % 2 == 0 then\n        table.insert(result, x[i])\n    \
    \  end\n      i = i + 1\n    end\n  end\n  local result = {}\n  for i = 1, #x\
    \ do\n    helper(x[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vs7pqd9.lua:14:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp_vs7pqd9.lua:14: in function 'helper'\n\t/tmp/tmp_vs7pqd9.lua:21: in function\
    \ 'candidate'\n\t/tmp/tmp_vs7pqd9.lua:29: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayrkqk9q.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpayrkqk9q.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew2r70a1.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpew2r70a1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd90i6w.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_fd90i6w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  local i = 1\n  for v in x do\n    if\
    \ v % 2 == 0 then\n      new_x[i] = v\n      i = i + 1\n    end\n  end\n  return\
    \ new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm39khwn.lua:12:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpdm39khwn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2xgvkbz.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg2xgvkbz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[i] = v\n      i = i + 1\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nvry9iv.lua:12:\
    \ attempt to call method 'gmatch' (a nil value)\nstack traceback:\n\t/tmp/tmp8nvry9iv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12g392td.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp12g392td.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local ans = {}\n    for i = 1, #x\
    \ do\n        local digit = x[i]\n        if seen[digit] == nil then\n       \
    \     seen[digit] = true\n            ans[#ans + 1] = digit\n        end\n   \
    \ end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp06mthl.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpzp06mthl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    else\n      local found = false\n      for j = 1, #seen do\n        if digit\
    \ == seen[j] then\n          found = true\n          break\n        end\n    \
    \  end\n      if not found then\n        table.insert(ret, digit)\n        table.insert(seen,\
    \ digit)\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe4u874o.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpwe4u874o.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz51hvzt.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpyz51hvzt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sd_d58e.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp0sd_d58e.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local function is_digit(n)\n\
    \    return tonumber(n) >= 0 and tonumber(n) <= 9\n  end\n  local function is_unique_digit(digit)\n\
    \    local i = 1\n    while i <= #x do\n      local v = x[i]\n      if is_digit(v)\
    \ and v == digit then\n        return false\n      elseif is_even(v) then\n  \
    \      i = i + 1\n      elseif is_odd(v) then\n        i = i + 1\n      else\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_unique_digits(x)\n    local i = 1\n    while i <= #x do\n      local v =\
    \ x[i]\n      if is_unique_digit(v) then\n        i = i + 1\n      else\n    \
    \    return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_unique_digits_helper(x)\n    local i = 1\n    while i <= #x do\n      local\
    \ v = x[i]\n      if is_unique_digit(v) then\n        i = i + 1\n      else\n\
    \        return v\n      end\n    end\n  end\n  local function is_unique_digits_helper2(x)\n\
    \    local i = 1\n    while i <= #x do\n      local v = x[i]\n      if is_unique_digit(v)\
    \ then\n        i = i + 1\n      else\n        return v\n      end\n    end\n\
    \  end\n  local function is_unique_digits_helper3(x)\n    local i = 1\n    while\
    \ i <= #x do\n      local v = x[i]\n      if is_unique_digit(v) then\n       \
    \ i = i + 1\n      else\n        return v\n      end\n    end\n  end\n  local\
    \ function is_unique_digits_helper4(x)\n    local i = 1\n    while i <= #x do\n\
    \      local v = x[i]\n      if is_unique_digit(v) then\n        i = i + 1\n \
    \     else\n        return v\n      end\n    end\n  end\n  local function is_unique_digits_helper5(x)\n\
    \    local i = 1\n    while i <= #x do\n      local v = x[i]\n      if is_unique_digit(v)\
    \ then\n        i = i + 1\n      else\n        return v\n      end\n    end\n\
    \  end\n  local function is_unique_digits_helper6(x)\n    local i = 1\n    while\
    \ i <= #x do\n      local v = x[i]\n      if is_unique_digit(v) then\n       \
    \ i = i + 1\n      else\n        return v\n      end\n    end\n  end\n  local\
    \ function is_unique_digits_helper7(x)\n    local i = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8ax2c8qm.lua:125: 'end' expected (to close 'function' at line\
    \ 113) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7n1pl2o.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpp7n1pl2o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6l8ztry.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps6l8ztry.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyy16ut9.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpiyy16ut9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrnacwt2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrnacwt2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbs9t0dm.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvbs9t0dm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuwocr1y.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpeuwocr1y.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local results = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(results, digit)\n\
    \    else\n      local digits = string.format(\"%.0d\", digit)\n      if seen[digits]\
    \ then\n        table.insert(results, digit)\n      else\n        seen[digits]\
    \ = true\n      end\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenwkj52i.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpenwkj52i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x do\n    if v\
    \ ~= 0 then\n      while i ~= v do\n        ret[#ret+1] = v\n        i = i + 1\n\
    \      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplot3cfak.lua:12:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmplot3cfak.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(t, x[i])\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u8v1h2z.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2u8v1h2z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa34e6lo8.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpa34e6lo8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcocvm3a5.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpcocvm3a5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzckzcez.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpyzckzcez.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[i] = v\n      i = i + 1\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mkx6zk3.lua:12:\
    \ attempt to call method 'gmatch' (a nil value)\nstack traceback:\n\t/tmp/tmp0mkx6zk3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ynfguu4.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4ynfguu4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05wv69e4.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp05wv69e4.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprk8__hmb.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmprk8__hmb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = math.floor(digit / 10)\n   \
    \   if digits[digits] ~= 0 then\n        table.insert(res, digit)\n      else\n\
    \        seen[digits] = true\n      end\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7epzp_y9.lua:18:\
    \ attempt to index local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmp7epzp_y9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local result = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      result[#result + 1] = x[i]\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv65vrht4.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpv65vrht4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return ((i / 10) % 2) ==\
    \ 0 and i ~= 0\n  end\n  local function is_odd(i)\n    return ((i / 10) % 2) ==\
    \ 1 and i ~= 0\n  end\n  local function is_zero(i)\n    return i == 0\n  end\n\
    \  local function is_negative(i)\n    return i < 0\n  end\n  local function is_positive(i)\n\
    \    return i ~= 0\n  end\n  local function is_odd_or_zero(i)\n    return is_odd(i)\
    \ or is_zero(i)\n  end\n  local function is_even_or_negative(i)\n    return is_even(i)\
    \ or is_negative(i)\n  end\n  local function is_even_or_positive(i)\n    return\
    \ is_even(i) or is_positive(i)\n  end\n  local function is_odd_or_negative(i)\n\
    \    return is_odd(i) or is_negative(i)\n  end\n  local function is_odd_or_positive(i)\n\
    \    return is_odd(i) or is_positive(i)\n  end\n  local function is_even_or_odd_or_zero(i)\n\
    \    return is_even(i) or is_odd(i) or is_zero(i)\n  end\n  local function is_even_or_odd_or_negative(i)\n\
    \    return is_even(i) or is_odd(i) or is_negative(i)\n  end\n  local function\
    \ is_even_or_odd_or_positive(i)\n    return is_even(i) or is_odd(i) or is_positive(i)\n\
    \  end\n  local function is_odd_or_even_or_zero(i)\n    return is_odd(i) or is_even(i)\
    \ or is_zero(i)\n  end\n  local function is_odd_or_even_or_negative(i)\n    return\
    \ is_odd(i) or is_even(i) or is_negative(i)\n  end\n  local function is_odd_or_even_or_positive(i)\n\
    \    return is_odd(i) or is_even(i) or is_positive(i)\n  end\n  local function\
    \ is_even_or_odd_or_even_or_zero(i)\n    return is_even(i) or is_odd(i) or is_even(i)\
    \ or is_zero(i)\n  end\n  local function is_even_or_odd_or_even_or_negative(i)\n\
    \    return is_even(i) or is_odd(i) or is_even(i) or is_negative(i)\n  end\n \
    \ local function is_even_or_odd_or_even_or_positive(i)\n    return is_even(i)\
    \ or is_odd(i) or is_even(i) or is_positive(i)\n  end\n  local function is_odd_or_odd_or_zero(i)\n\
    \    return is_odd(i) or is_odd(i) or is_zero(i)\n  end\n  local function is_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp542jqqq2.lua:71: '(' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zd5l06z.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2zd5l06z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8824awq.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpr8824awq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqpkeyba.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphqpkeyba.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5u5w3b3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpb5u5w3b3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local v = x[i]\n    if seen[v] then\n      table.insert(res, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5rlldse.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmps5rlldse.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenz6bb0b.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpenz6bb0b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = string.gsub(digit, \"%d\", \"\
    \")\n      if digits[#digits] ~= 0 then\n        table.insert(res, digit)\n  \
    \    else\n        table.insert(seen, digit)\n      end\n    end\n  end\n  table.sort(res)\n\
    \  table.insert(res, table.concat(seen, \"0\"))\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptku_9oiw.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422, \"\"}\nstack traceback:\n\t\
    /tmp/tmptku_9oiw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local function is_odd_or_even(n)\n\
    \    return is_odd(n) or is_even(n)\n  end\n  local function is_unique_digit(n)\n\
    \    return not is_odd_or_even(n)\n  end\n  local function is_unique_digit_in_range(n)\n\
    \    return not is_odd_or_even(n) and n <= #x\n  end\n  local function is_unique_digit_in_range_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0\n  end\n  local function\
    \ is_unique_digit_in_range_or_empty_or_empty_or_empty(x)\n    return not is_odd_or_even(x)\
    \ and x <= #x or x == 0 or x == 1\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2\n\
    \  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2 or\
    \ x == 3\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2 or\
    \ x == 3 or x == 4\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2 or\
    \ x == 3 or x == 4 or x == 5\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2 or\
    \ x == 3 or x == 4 or x == 5 or x == 6\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty_or_empty(x)\n\
    \    return not is_odd_or_even(x) and x <= #x or x == 0 or x == 1 or x == 2 or\
    \ x == 3 or x == 4 or x == 5 or x == 6 or x == 7\n  end\n  local function is_unique_digit_in_range_or_empty_or_empty_or_empty_or_empty_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2lmt4ctp.lua:53: '(' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit == 1 then\n      table.insert(seen, digit)\n    end\n  end\n\
    \  table.sort(res)\n  for i = 1, #seen do\n    if seen[i] ~= 0 then\n      table.insert(res,\
    \ seen[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sva1fbz.lua:32:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmp6sva1fbz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv77aw492.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpv77aw492.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = string.gsub(digit, \"%d+\",\
    \ \"\")\n      if not seen[digits] then\n        table.insert(res, digit)\n  \
    \      seen[digits] = true\n      end\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgd8wc_80.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15}\nstack traceback:\n\t/tmp/tmpgd8wc_80.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixkvepyu.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpixkvepyu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(new_x, x[i])\n    end\n  end\n  return new_x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk7ny3bl.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxk7ny3bl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvejgykn7.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvejgykn7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] then\n      table.insert(ret, digit)\n\
    \    else\n      table.insert(seen, digit)\n    end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2i2x20n.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpw2i2x20n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz1wwth3.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjz1wwth3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrjgzugj.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpdrjgzugj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u2syqrr.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp0u2syqrr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9htwbzs.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpo9htwbzs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwq3t5ml.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpmwq3t5ml.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri84z4pw.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpri84z4pw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xe3_u6a.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_xe3_u6a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8lk53rw.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpp8lk53rw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb28b7yb.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsb28b7yb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgdxey8w.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvgdxey8w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      table.insert(result, 0)\n    else\n    \
    \  local count = 0\n      for j = 1, #result do\n        if result[j] == digit\
    \ then\n          count = count + 1\n        elseif count > 0 then\n         \
    \ break\n        end\n      end\n      if count > 0 then\n        table.insert(result,\
    \ digit)\n      else\n        table.insert(result, 0)\n      end\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp7399eq.lua:37:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpwp7399eq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i % 2 == 0\n  end\n\
    \  local function is_odd(i)\n    return i % 2 == 1\n  end\n  local function is_digit(i)\n\
    \    return i ~= nil and i ~= \"\"\n  end\n  local function is_digit2(i)\n   \
    \ return i ~= nil and i ~= \"\" and i ~= 0\n  end\n  local function is_digit3(i)\n\
    \    return i ~= nil and i ~= \"\" and i ~= 0 and i ~= 1\n  end\n  local function\
    \ is_digit4(i)\n    return i ~= nil and i ~= \"\" and i ~= 0 and i ~= 1 and i\
    \ ~= 2\n  end\n  local function is_digit5(i)\n    return i ~= nil and i ~= \"\"\
    \ and i ~= 0 and i ~= 1 and i ~= 2 and i ~= 3\n  end\n  local function is_digit6(i)\n\
    \    return i ~= nil and i ~= \"\" and i ~= 0 and i ~= 1 and i ~= 2 and i ~= 3\
    \ and i ~= 4\n  end\n  local function is_digit7(i)\n    return i ~= nil and i\
    \ ~= \"\" and i ~= 0 and i ~= 1 and i ~= 2 and i ~= 3 and i ~= 4 and i ~= 5\n\
    \  end\n  local function is_digit8(i)\n    return i ~= nil and i ~= \"\" and i\
    \ ~= 0 and i ~= 1 and i ~= 2 and i ~= 3 and i ~= 4 and i ~= 5 and i ~= 6\n  end\n\
    \  local function is_digit9(i)\n    return i ~= nil and i ~= \"\" and i ~= 0 and\
    \ i ~= 1 and i ~= 2 and i ~= 3 and i ~= 4 and i ~= 5 and i ~= 6 and i ~= 7\n \
    \ end\n  local function is_digit10(i)\n    return i ~= nil and i ~= \"\" and i\
    \ ~= 0 and i ~= 1 and i ~= 2 and i ~= 3 and i ~= 4 and i ~= 5 and i ~= 6 and i\
    \ ~= 7 and i ~= 8\n  end\n  local function is_digit11(i)\n    return i ~= nil\
    \ and i ~= \"\" and i ~= 0 and i ~= 1 and i ~= 2 and i ~= 3 and i ~= 4 and i ~=\
    \ 5 and i ~= 6 and i ~= 7 and i ~= 8 and i ~= 9\n  end\n  local function is_digit12(i)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx5k0tbtr.lua:61: 'end' expected (to close 'function' at line\
    \ 49) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jq3brsz.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp8jq3brsz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1khm5yty.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1khm5yty.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw7yptyk.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxw7yptyk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ihs_4yk.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_ihs_4yk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynsfbnkl.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpynsfbnkl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function helper(y)\n        local i = 1\n      \
    \  local z = {}\n        for i = 1, y do\n            if math.mod(i, 10) == 0\
    \ then\n                table.insert(z, i)\n            end\n        end\n   \
    \     return z\n    end\n    local function helper2(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper3(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper4(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper5(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper6(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper7(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper8(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper9(x)\n        local i = 1\n\
    \        local z = {}\n        for i = 1, x do\n            if math.mod(i, 10)\
    \ == 0 then\n                table.insert(z, i)\n            end\n        end\n\
    \        return z\n    end\n    local function helper10(x)\n        local i =\
    \ 1\n        local z = {}\n        for i = 1, x do\n            if math.mod(i,\
    \ 10) == 0 then\n                table.insert(z, i)\n            end\n       \
    \ end\n        return z\n    end\n    local function helper11(x)\n        local\
    \ i = 1\n        local z = {}\n        for i = 1, x do\n            if math.mod(i,\
    \ 10) == 0 then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe7wwqcyd.lua:126: 'end' expected (to close 'if' at line 114)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtpojtut.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpdtpojtut.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasxbp0eq.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpasxbp0eq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local res = {}\n    for i = 1, #x\
    \ do\n        local digit = x[i]\n        if seen[digit] then\n            table.insert(res,\
    \ digit)\n        else\n            seen[digit] = true\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyrhizja.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpnyrhizja.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5dw9jrg.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpk5dw9jrg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6eiwy6vx.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6eiwy6vx.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h8yuumg.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp0h8yuumg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ejanhs1.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6ejanhs1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaatgvfu9.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpaatgvfu9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7t_h8egr.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp7t_h8egr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogslbzo8.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpogslbzo8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt3al296.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpvt3al296.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk235c7dj.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpk235c7dj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6mxlx15.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_6mxlx15.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeptb273f.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpeptb273f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  \n  local function unique_digits_helper(list, index, result)\n    if index\
    \ == #list then\n      table.insert(result, list[index])\n    else\n      local\
    \ element = list[index]\n      local next_element = list[index + 1]\n      if\
    \ is_even(element) then\n        unique_digits_helper(list, index + 1, result)\n\
    \      else\n        unique_digits_helper(list, index + 1, unique_digits_helper(list,\
    \ index + 1, result))\n      end\n    end\n  end\n  \n  local result = {}\n  unique_digits_helper(x,\
    \ 0, result)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e22bbxq.lua:11:\
    \ attempt to perform arithmetic on local 'x' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_e22bbxq.lua:20: in function 'unique_digits_helper'\n\t/tmp/tmp_e22bbxq.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmp_e22bbxq.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzpfo0yy.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptzpfo0yy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    local digit\
    \ = x[i]\n    if digit % 2 == 0 then\n      table.insert(results, digit)\n   \
    \ end\n  end\n  return table.sort(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1snr0mgl.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1snr0mgl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetf_cgge.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpetf_cgge.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaaw_pk5f.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpaaw_pk5f.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbz2iav2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsbz2iav2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    if y == nil then\n      return\
    \ nil\n    end\n    if y[#y] == 0 then\n      return y\n    end\n    local i =\
    \ 1\n    while i <= #y do\n      if y[i] % 2 == 0 then\n        local j = i +\
    \ 1\n        while j <= #y and y[j] % 2 == 0 do\n          j = j + 1\n       \
    \ end\n        local k = j\n        while k <= #y and y[k] % 2 == 0 do\n     \
    \     k = k + 1\n        end\n        if k <= #y then\n          y[k], y[i] =\
    \ y[i], y[k]\n          i = i + 1\n        else\n          y[k], y[i] = y[i],\
    \ y[k]\n          i = i + 1\n          y = helper(y)\n        end\n      else\n\
    \        i = i + 1\n      end\n    end\n    return y\n  end\n  return helper(x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bm6zky1.lua:48:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1, 5=1422}\nstack traceback:\n\t/tmp/tmp6bm6zky1.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46a9vez3.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp46a9vez3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i % 2 == 0\n  end\n\
    \  local function is_odd(i)\n    return i % 2 == 1\n  end\n  local function is_digit(i)\n\
    \    return i >= 0 and i <= 9\n  end\n  local function is_odd_digit(i)\n    return\
    \ is_digit(i) and is_odd(i)\n  end\n  local function is_even_digit(i)\n    return\
    \ is_digit(i) and is_even(i)\n  end\n  local function is_odd_or_even_digit(i)\n\
    \    return is_digit(i) and is_odd(i) or is_even(i)\n  end\n  local function is_even_or_odd_digit(i)\n\
    \    return is_digit(i) and is_even(i) or is_odd(i)\n  end\n  local function is_odd_or_even_or_odd_digit(i)\n\
    \    return is_digit(i) and is_odd(i) or is_even(i) or is_odd(i)\n  end\n  local\
    \ function is_even_or_odd_or_even_or_odd_digit(i)\n    return is_digit(i) and\
    \ is_even(i) or is_odd(i) or is_even(i) or is_odd(i)\n  end\n  local function\
    \ is_odd_or_even_or_odd_or_even_or_odd_digit(i)\n    return is_digit(i) and is_odd(i)\
    \ or is_even(i) or is_odd(i) or is_even(i) or is_odd(i)\n  end\n  local function\
    \ is_even_or_odd_or_even_or_odd_or_even_or_odd_digit(i)\n    return is_digit(i)\
    \ and is_even(i) or is_odd(i) or is_even(i) or is_odd(i) or is_even(i) or is_odd(i)\n\
    \  end\n  local function is_odd_or_even_or_odd_or_even_or_odd_or_even_or_odd_digit(i)\n\
    \    return is_digit(i) and is_odd(i) or is_even(i) or is_odd(i) or is_even(i)\
    \ or is_odd(i) or is_even(i) or is_odd(i)\n  end\n  local function is_even_or_odd_or_even_or_odd_or_even_or_odd_or_even_or_odd_digit(i)\n\
    \    return is_digit(i) and is_even(i) or is_odd(i) or is_even(i) or is_odd(i)\
    \ or is_even(i) or is_odd(i) or is_even(i) or is_odd(i)\n  end\n  local function\
    \ is_odd_or_even_or_odd_or_even_or_odd_or_even_or_odd_or_even_or_odd_digit(i)\n\
    \    return is_digit(i) and is_odd(i) or is_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu6l5obub.lua:51: 'end' expected (to close 'function' at line\
    \ 49) near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit ~= 0 and digit ~= 1 then\n      local k\
    \ = math.floor(digit * 10)\n      if seen[k] then\n        res[#res + 1] = k\n\
    \      else\n        seen[k] = true\n        res[#res + 1] = digit\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo5m9_du.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmpbo5m9_du.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp733y6uxq.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp733y6uxq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qqgsv6n.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp8qqgsv6n.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local function is_digit(x)\n\
    \    return x >= 0 and x <= 9\n  end\n  local function is_unique_digit(x)\n  \
    \  return is_digit(x) and x ~= math.floor(x)\n  end\n  local function is_unique_digits(x)\n\
    \    return is_unique_digit(x) or is_unique_digits(x)\n  end\n  local function\
    \ is_unique_digits_helper(x)\n    local function helper(y)\n      if is_unique_digit(y)\
    \ then\n        return y\n      else\n        return helper(y + 1)\n      end\n\
    \    end\n    return helper(1)\n  end\n  local function helper(x)\n    if x ==\
    \ 1 then\n      return x\n    else\n      return helper(x - 1) and is_unique_digits_helper(x)\n\
    \    end\n  end\n  local function helper2(x)\n    if x == 1 then\n      return\
    \ x\n    else\n      return helper2(x - 1) and is_unique_digits_helper(x)\n  \
    \  end\n  end\n  local function helper3(x)\n    if x == 1 then\n      return x\n\
    \    else\n      return helper3(x - 1) and is_unique_digits_helper(x)\n    end\n\
    \  end\n  local function helper4(x)\n    if x == 1 then\n      return x\n    else\n\
    \      return helper4(x - 1) and is_unique_digits_helper(x)\n    end\n  end\n\
    \  local function helper5(x)\n    if x == 1 then\n      return x\n    else\n \
    \     return helper5(x - 1) and is_unique_digits_helper(x)\n    end\n  end\n \
    \ local function helper6(x)\n    if x == 1 then\n      return x\n    else\n  \
    \    return helper6(x - 1) and is_unique_digits_helper(x)\n    end\n  end\n  local\
    \ function helper7(x)\n    if x == 1 then\n      return x\n    else\n      return\
    \ helper7(x - 1) and is_unique_digits_helper(x)\n    end\n  end\n  local function\
    \ helper8(x)\n    if x == 1 then\n      return x\n    else\n      return helper8(x\
    \ - 1) and is_unique_digits_helper(x)\n    end\n  end\n  local function helper9(x)\n\
    \    if x == 1 then\n      return x\n    else\n      return helper9(x - 1) and\
    \ is_unique_digits_helper(x)\n    end\n  end\n  local function helper10(x)\n \
    \   if x == 1 then\n      return x\n    else\n      return helper10(x - 1) and\
    \ is_unique_digits_helper(x)\n    end\n  end\n  local function helper11(x)\n \
    \   if x == 1 then\n      return x\n    else\n      return helper11(x - 1) and\
    \ is_unique_digits_helper(x)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdcb51luq.lua:110: 'end' expected (to close 'if' at line 106)\
    \ near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspm8ceme.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpspm8ceme.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2gvaxm8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpt2gvaxm8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywesqj3o.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpywesqj3o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvp8t7ic.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjvp8t7ic.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws2v2lb9.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpws2v2lb9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx3i_al6.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpqx3i_al6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, 0)\n\
    \      continue\n    end\n    if seen[digit] then\n      table.insert(ret, digit)\n\
    \      continue\n    end\n    seen[digit] = true\n    table.insert(ret, digit)\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd5vrm28s.lua:17: '=' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqgnstmj.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpeqgnstmj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result+1] =\
    \ digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmb6zm0s.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmprmb6zm0s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      new_x[i] = digit\n    end\n  end\n \
    \ table.sort(new_x)\n  local new_x = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      new_x[i] = digit\n    end\n  end\n \
    \ return new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoh_n0h9.lua:31:\
    \ expected: {1, 15, 33}\nactual: {3=1422}\nstack traceback:\n\t/tmp/tmpdoh_n0h9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      i = i + 1\n    else\n      ret[#ret+1]\
    \ = digit\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka4xti40.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpka4xti40.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3nmf9is.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpk3nmf9is.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nghmeim.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6nghmeim.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15m4b4sq.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp15m4b4sq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function is_even(n)\n        return n % 2 == 0\n\
    \    end\n    local function is_odd(n)\n        return n % 2 == 1\n    end\n \
    \   local function is_digit(n)\n        return tonumber(n) >= 0 and tonumber(n)\
    \ < 10\n    end\n    local function is_unique_digit(n)\n        local i = 2\n\
    \        while i <= n do\n            if is_digit(n) then\n                if\
    \ is_even(i) then\n                    return false\n                else\n  \
    \                  i = i + 1\n                end\n            else\n        \
    \        return false\n            end\n        end\n        return true\n   \
    \ end\n    local function is_unique_digits(x)\n        local y = {}\n        for\
    \ _, v in ipairs(x) do\n            if is_unique_digit(v) then\n             \
    \   table.insert(y, v)\n            end\n        end\n        return y\n    end\n\
    \    return is_unique_digits(x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviazrh0r.lua:49:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpviazrh0r.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = string.format(\"%0d\", digit)\n\
    \      if seen[digits] then\n        table.insert(ret, digit)\n      else\n  \
    \      table.insert(seen, digits)\n      end\n    end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3_dwiah.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt3_dwiah.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    if x[i] % 2\
    \ == 0 then\n      table.insert(results, x[i])\n    end\n  end\n  return table.sort(results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygxd4dy_.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpygxd4dy_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_j6g2_i.lua:12:\
    \ attempt to call method 'gmatch' (a nil value)\nstack traceback:\n\t/tmp/tmph_j6g2_i.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaee3q6u.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpuaee3q6u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx2igea0.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpcx2igea0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5yi10_w.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpd5yi10_w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, 0)\n\
    \      return\n    end\n    if seen[digit] then\n      table.insert(ret, digit)\n\
    \      return\n    end\n    seen[digit] = true\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepo4h7_2.lua:30:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpepo4h7_2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuybtcizd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpuybtcizd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zpk66q2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6zpk66q2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulp6n5ki.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpulp6n5ki.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb3fzyas.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkb3fzyas.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_m_b8ys.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2_m_b8ys.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93yy4lsd.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp93yy4lsd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local res = {}\n    for i = 1, #x\
    \ do\n        if seen[x[i]] then\n            table.insert(res, x[i])\n      \
    \  else\n            seen[x[i]] = true\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qq79_a.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpc1qq79_a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzvedwmf.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpfzvedwmf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v391vfk.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9v391vfk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_0z9667.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmph_0z9667.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdu7i905.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwdu7i905.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvv2fylb_.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpvv2fylb_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatkst1po.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpatkst1po.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, 0)\n\
    \    elseif digit == 1 then\n      table.insert(ret, digit)\n    else\n      local\
    \ found = false\n      for j = 1, #seen do\n        if digit == seen[j] then\n\
    \          found = true\n          break\n        end\n      end\n      if not\
    \ found then\n        table.insert(ret, digit)\n        table.insert(seen, digit)\n\
    \      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppya55qwa.lua:38:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmppya55qwa.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya1397zz.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpya1397zz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd19qr92.lua:12:\
    \ attempt to call method 'gmatch' (a nil value)\nstack traceback:\n\t/tmp/tmpwd19qr92.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local result = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(result, 0)\n\
    \    else\n      local digit = digit % 10\n      if seen[digit] then\n       \
    \ table.insert(result, digit)\n      else\n        seen[digit] = true\n      \
    \  table.insert(result, digit)\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f2npui_.lua:32:\
    \ expected: {1, 15, 33}\nactual: {5, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp3f2npui_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtt2tmni.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpbtt2tmni.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, 0)\n\
    \    elseif digit == 1 then\n      table.insert(ret, digit)\n    elseif digit\
    \ > 1 then\n      local last = seen[digit]\n      if last == nil then\n      \
    \  table.insert(ret, digit)\n        seen[digit] = true\n      else\n        table.insert(ret,\
    \ last)\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp125o757b.lua:34:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp125o757b.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp63slprz.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpp63slprz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3s3cviu.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpu3s3cviu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnal0ownp.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnal0ownp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      table.insert(result, 0)\n    else\n    \
    \  local count = 0\n      for j = 1, #result do\n        if result[j] == digit\
    \ then\n          count = count + 1\n        elseif count == 1 then\n        \
    \  table.insert(result, digit)\n        end\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43_o35w5.lua:32:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp43_o35w5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfsw0h47.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpcfsw0h47.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jsqosfa.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4jsqosfa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmsnto9e.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwmsnto9e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mo04qu6.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4mo04qu6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgwh8l3_.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjgwh8l3_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wmt0xzv.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2wmt0xzv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy01ffp5.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpzy01ffp5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(res, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qecygl4.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp1qecygl4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp8sivzw.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpfp8sivzw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, 0)\n\
    \    else\n      local digits = math.floor(math.log10(digit))\n      if digits\
    \ in seen then\n        table.insert(res, seen[digits])\n      else\n        seen[digits]\
    \ = i\n        table.insert(res, digit)\n      end\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1396rbqb.lua:18: 'then' expected near 'in'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ledly1f.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp5ledly1f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqfns9mf.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphqfns9mf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i % 2 == 0\n  end\n\
    \  \n  local function is_odd(i)\n    return i % 2 ~= 0\n  end\n  \n  local function\
    \ is_digit(i)\n    return i ~= nil and i ~= \"\"\n  end\n  \n  local function\
    \ is_zero(i)\n    return i == 0\n  end\n  \n  local function is_negative(i)\n\
    \    return i < 0\n  end\n  \n  local function is_positive(i)\n    return i ~=\
    \ 0\n  end\n  \n  local function is_negative(i)\n    return i < 0\n  end\n  \n\
    \  local function is_positive(i)\n    return i ~= 0\n  end\n  \n  local function\
    \ is_even(i)\n    return i % 2 == 0\n  end\n  \n  local function is_odd(i)\n \
    \   return i % 2 ~= 0\n  end\n  \n  local function is_digit(i)\n    return i ~=\
    \ nil and i ~= \"\"\n  end\n  \n  local function is_zero(i)\n    return i == 0\n\
    \  end\n  \n  local function is_negative(i)\n    return i < 0\n  end\n  \n  local\
    \ function is_positive(i)\n    return i ~= 0\n  end\n  \n  local function is_negative(i)\n\
    \    return i < 0\n  end\n  \n  local function is_positive(i)\n    return i ~=\
    \ 0\n  end\n  \n  local function is_even(i)\n    return i % 2 == 0\n  end\n  \n\
    \  local function is_odd(i)\n    return i % 2 ~= 0\n  end\n  \n  local function\
    \ is_digit(i)\n    return i ~= nil and i ~= \"\"\n  end\n  \n  local function\
    \ is_zero(i)\n    return i == 0\n  end\n  \n  local function is_negative(i)\n\
    \    return i < 0\n  end\n  \n  local function is_positive(i)\n    return i ~=\
    \ 0\n  end\n  \n  local function is_negative(i)\n    return i < 0\n  end\n  \n\
    \  local function is_positive(i)\n    return i ~= 0\n  end\n  \n  local function\
    \ is_even(i)\n    return i % 2 == 0\n  end\n  \n  local function is_odd(i)\n \
    \   return i % 2 ~= 0\n  end\n  \n  local function is_digit(i)\n    return i ~=\
    \ nil and i ~= \"\"\n  end\n  \n  local function is_zero(i)\n    return i == 0\n\
    \  end\n  \n  local function is_negative(i)\n    return i < 0\n  end\n  \n  local\
    \ function is_positive(i)\n    return i ~= 0\n  end\n  \n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1jzh3_kq.lua:141: 'end' expected (to close 'function' at line\
    \ 9) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(result, x[i])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp9wgeth.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmplp9wgeth.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tkzajy2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp7tkzajy2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjjno9oi.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxjjno9oi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_1i_sdq.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpj_1i_sdq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit ~= math.floor(digit) then\n      table.insert(ret, digit)\n\
    \    end\n  end\n  for i = 1, #seen do\n    if seen[i] ~= 0 then\n      table.insert(ret,\
    \ seen[i])\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpega54k41.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpega54k41.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3xof3sn.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpx3xof3sn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgorxnxjr.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgorxnxjr.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg3jz9m0.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpmg3jz9m0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1]\
    \ = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0oh_0z3.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpy0oh_0z3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  local i = 1\n  while i <= #x do\n  \
    \  if x[i] % 2 == 0 then\n      new_x[i] = x[i]\n    end\n    i = i + 1\n  end\n\
    \  table.sort(new_x)\n  return new_x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifalswb8.lua:25:\
    \ expected: {1, 15, 33}\nactual: {3=1422}\nstack traceback:\n\t/tmp/tmpifalswb8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(n)\n    return math.mod(n, 2) ==\
    \ 0\n  end\n  local function is_odd(n)\n    return not is_even(n)\n  end\n  local\
    \ function is_digit(n)\n    return n ~= nil and n ~= 0 and n ~= math.floor(n)\n\
    \  end\n  local function is_unique_digit(n)\n    return is_digit(n) and is_unique_digit(math.floor(n))\n\
    \  end\n  local function is_unique_digits(x)\n    local result = {}\n    for _,\
    \ v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      end\n    end\n    return table.sort(result)\n  end\n  local function\
    \ is_unique_digits_helper(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n      if is_unique_digit(v) then\n        table.insert(result, v)\n    \
    \  else\n        table.insert(result, math.floor(v))\n      end\n    end\n   \
    \ return table.sort(result)\n  end\n  local function is_unique_digits_helper2(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      else\n        table.insert(result,\
    \ math.floor(v))\n      end\n    end\n    return table.sort(result)\n  end\n \
    \ local function is_unique_digits_helper3(x)\n    local result = {}\n    for _,\
    \ v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      else\n        table.insert(result, math.floor(v))\n      end\n   \
    \ end\n    return table.sort(result)\n  end\n  local function is_unique_digits_helper4(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      else\n        table.insert(result,\
    \ math.floor(v))\n      end\n    end\n    return table.sort(result)\n  end\n \
    \ local function is_unique_digits_helper5(x)\n    local result = {}\n    for _,\
    \ v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      else\n        table.insert(result, math.floor(v))\n      end\n   \
    \ end\n    return table.sort(result)\n  end\n  local function is_unique_digits_helper6(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      else\n        table.insert(result,\
    \ math.floor(v))\n      end\n    end\n    return table.sort(result)\n  end\n \
    \ local function is_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3adog_sd.lua:98: '(' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  local new_x_len = {}\n  for i = 1, #x\
    \ do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      new_x[#new_x +\
    \ 1] = digit\n      new_x_len[#new_x_len + 1] = 1\n    end\n  end\n  local new_x_sorted\
    \ = {}\n  local new_x_len_sorted = {}\n  for i = 1, #new_x do\n    local k = i\n\
    \    for j = 1, #new_x do\n      if new_x[j] == new_x[k] then\n        k = j\n\
    \      end\n    end\n    new_x_sorted[#new_x_sorted + 1] = new_x[k]\n    new_x_len_sorted[#new_x_len_sorted\
    \ + 1] = new_x_len[k]\n  end\n  return new_x_sorted, new_x_len_sorted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprub_iqxl.lua:37:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmprub_iqxl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wdf0ajd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp7wdf0ajd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrjyigwt.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpbrjyigwt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbz_rsqj.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxbz_rsqj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmpcoe5i.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnmpcoe5i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_0h7g0t.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpe_0h7g0t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo5y0nkn.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpdo5y0nkn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnztdght.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpdnztdght.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmjzbxu8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkmjzbxu8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8s00opr.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpm8s00opr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppodl2ofv.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmppodl2ofv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq03vmsz7.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq03vmsz7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1r8893e.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn1r8893e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbqmx7_e.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgbqmx7_e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9lcxqxy.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpu9lcxqxy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local ret = {}\n    for i = 1, #x\
    \ do\n        local digit = x[i]\n        if seen[digit] then\n            table.insert(ret,\
    \ digit)\n        else\n            seen[digit] = true\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mrpjf8h.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp5mrpjf8h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    if x[i] % 2\
    \ == 0 then\n      table.insert(results, x[i])\n    end\n  end\n  return table.sort(results)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp881y5jj6.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp881y5jj6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] % 2 == 0 then\n        table.insert(res, x[i])\n      end\n\
    \      i = i + 1\n    end\n  end\n  local res = {}\n  helper(1)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrzt8_8u.lua:27:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmptrzt8_8u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local v = x[i]\n    if seen[v] then\n      res[#res + 1] = v\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvry1lz77.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpvry1lz77.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtcdh9va.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpmtcdh9va.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      new_x[i] = nil\n    else\n      new_x[i]\
    \ = digit\n    end\n  end\n  table.sort(new_x)\n  local new_x = {}\n  for i =\
    \ 1, #x do\n    if new_x[i] == nil then\n      new_x[i] = x[i]\n    end\n  end\n\
    \  return new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifpnup30.lua:32:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpifpnup30.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      i = i + 1\n      continue\n    end\n\
    \    if ret[digit] == nil then\n      ret[digit] = true\n      i = i + 1\n   \
    \ else\n      i = i + 1\n      ret[digit] = true\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6ngspbgb.lua:17: '=' expected near 'end'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local res = {}\n    for i = 1, #x\
    \ do\n        local digit = x[i]\n        if seen[digit] == nil then\n       \
    \     seen[digit] = true\n            table.insert(res, digit)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1alm5psl.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp1alm5psl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
