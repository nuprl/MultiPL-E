language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    else\n      local k = math.floor(math.log10(digit))\n      if seen[k] then\n\
    \        table.insert(res, digit)\n      else\n        seen[k] = true\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6r87_mn.lua:31:\
    \ expected: {1, 15, 33}\nactual: {33}\nstack traceback:\n\t/tmp/tmpk6r87_mn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsendyl65.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsendyl65.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(t, x[i])\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsustzdy.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptsustzdy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local ret = {}\n    for i = 1, #x\
    \ do\n        if seen[x[i]] then\n            table.insert(ret, x[i])\n      \
    \  else\n            seen[x[i]] = true\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs18qtuc.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmphs18qtuc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local function is_digit(x)\n\
    \    return x >= 0 and x <= 9\n  end\n  local function is_unique_digit(x)\n  \
    \  return is_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list2(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list3(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list4(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list5(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list6(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list7(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list8(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list9(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list10(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list11(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list12(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list13(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list14(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list15(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list16(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list17(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list18(x)\n\
    \    return is_unique_digit(x) and x[#x] == \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphayvnwk4.lua:75: ''end'' expected (to close ''function'' at
    line 73) near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(res, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a6aqmbj.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp8a6aqmbj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      new_x = new_x:add(0)\n    else\n      new_x\
    \ = new_x:add(digit)\n    end\n  end\n  local new_x = new_x:sort()\n  local new_x\
    \ = new_x:filter(function(x)\n    return x ~= 0\n  end)\n  return new_x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp85ex2ez.lua:16:\
    \ attempt to call a nil value (method 'add')\nstack traceback:\n\t/tmp/tmpp85ex2ez.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp85ex2ez.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(new_x, x[i])\n    end\n  end\n  return table.sort(new_x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwz2bzv2l.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpwz2bzv2l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3drl99l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps3drl99l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
