language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    else\n      local k = math.floor(math.log10(digit))\n      if seen[k] then\n\
    \        table.insert(res, digit)\n      else\n        seen[k] = true\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6r87_mn.lua:31:\
    \ expected: {1, 15, 33}\nactual: {33}\nstack traceback:\n\t/tmp/tmpk6r87_mn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsendyl65.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsendyl65.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(t, x[i])\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsustzdy.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptsustzdy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local ret = {}\n    for i = 1, #x\
    \ do\n        if seen[x[i]] then\n            table.insert(ret, x[i])\n      \
    \  else\n            seen[x[i]] = true\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs18qtuc.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmphs18qtuc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local function is_digit(x)\n\
    \    return x >= 0 and x <= 9\n  end\n  local function is_unique_digit(x)\n  \
    \  return is_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list2(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list3(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list4(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list5(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list6(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list7(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list8(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list9(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list10(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list11(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list12(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list13(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list14(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list15(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list16(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list17(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list18(x)\n\
    \    return is_unique_digit(x) and x[#x] == \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphayvnwk4.lua:75: ''end'' expected (to close ''function'' at
    line 73) near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(res, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a6aqmbj.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp8a6aqmbj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      new_x = new_x:add(0)\n    else\n      new_x\
    \ = new_x:add(digit)\n    end\n  end\n  local new_x = new_x:sort()\n  local new_x\
    \ = new_x:filter(function(x)\n    return x ~= 0\n  end)\n  return new_x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp85ex2ez.lua:16:\
    \ attempt to call a nil value (method 'add')\nstack traceback:\n\t/tmp/tmpp85ex2ez.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp85ex2ez.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(new_x, x[i])\n    end\n  end\n  return table.sort(new_x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwz2bzv2l.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpwz2bzv2l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3drl99l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps3drl99l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4granv46.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4granv46.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      -- skip 0\n      i = i + 1\n    else\n \
    \     -- find all odd digit in x\n      local oddDigit = false\n      for j =\
    \ 1, #x do\n        if x[j] % 2 == 1 then\n          oddDigit = true\n       \
    \   break\n        end\n      end\n      if not oddDigit then\n        result[#result\
    \ + 1] = digit\n      end\n    end\n  end\n  return table.sort(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7la2bko.lua:36:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo7la2bko.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local seen = {}\n    local result\n    for i = 1, #x do\n\
    \        if seen[x[i]] then\n            result = result or {}\n            result[x[i]]\
    \ = true\n        else\n            seen[x[i]] = true\n        end\n    end\n\
    \    return result or x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyt95mak.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpzyt95mak.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    if y == nil then return nil\
    \ end\n    if y > 0 then\n      local z = {}\n      for i = 1, y do\n        local\
    \ k = math.floor((y - i) / 10)\n        if k > 0 then\n          table.insert(z,\
    \ k)\n        end\n      end\n      table.sort(z)\n      for i = 1, #z do\n  \
    \      if z[i] % 2 == 0 then\n          table.insert(z, z[i])\n        end\n \
    \     end\n      return z\n    end\n  end\n  \n  local z = {}\n  for i = 1, #x\
    \ do\n    local y = x[i]\n    if y > 0 then\n      local z = helper(y)\n     \
    \ if z ~= nil then\n        table.insert(z, y)\n      end\n    end\n  end\n  return\
    \ z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflvym0j2.lua:46:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpflvym0j2.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local new_x = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(new_x, x[i])\n    end\n  end\n  return table.sort(new_x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwz2bzv2l.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpwz2bzv2l.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(ret, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqfo3i7a.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpaqfo3i7a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret + 1] = digit\n    end\n\
    \    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ubyqbeo.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp8ubyqbeo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    else\n      local found = false\n      for j = 1, #seen do\n        if digit\
    \ == seen[j] then\n          found = true\n          break\n        end\n    \
    \  end\n      if not found then\n        table.insert(ret, digit)\n        table.insert(seen,\
    \ digit)\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18qfqcq3.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp18qfqcq3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    local digit\
    \ = x[i]\n    if digit % 2 == 0 then\n      table.insert(results, digit)\n   \
    \ end\n  end\n  return table.sort(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamo4l14t.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpamo4l14t.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret + 1] = digit\n    end\n\
    \    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ubyqbeo.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp8ubyqbeo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsendyl65.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpsendyl65.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x do\n    if v\
    \ ~= 0 then\n      while i <= v do\n        if i ~= v then\n          table.insert(ret,\
    \ i)\n        end\n        i = i + 1\n      end\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jsq581s.lua:12:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp0jsq581s.lua:12: in local 'candidate'\n\t/tmp/tmp0jsq581s.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  local function is_odd(x)\n    return x % 2 == 1\n  end\n  local function is_digit(x)\n\
    \    return x >= 0 and x <= 9\n  end\n  local function is_valid_digit(x)\n   \
    \ return is_digit(x) and is_even(x)\n  end\n  local function is_valid_digit_pair(x,\
    \ y)\n    return is_valid_digit(x) and is_valid_digit(y)\n  end\n  local function\
    \ is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n\
    \  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1],\
    \ x[2])\n  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and\
    \ is_valid_digit_pair(x[1], x[2])\n  end\n  local function is_valid_digit_pairs(x)\n\
    \    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n  end\n  local function\
    \ is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n\
    \  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1],\
    \ x[2])\n  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and\
    \ is_valid_digit_pair(x[1], x[2])\n  end\n  local function is_valid_digit_pairs(x)\n\
    \    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n  end\n  local function\
    \ is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n\
    \  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1],\
    \ x[2])\n  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and\
    \ is_valid_digit_pair(x[1], x[2])\n  end\n  local function is_valid_digit_pairs(x)\n\
    \    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n  end\n  local function\
    \ is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n\
    \  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1],\
    \ x[2])\n  end\n  local function is_valid_digit_pairs(x)\n    return #x == 2 and\
    \ is_valid_digit_pair(x[1], x[2])\n  end\n  local function is_valid_digit_pairs(x)\n\
    \    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n  end\n  local function\
    \ is_valid_digit_pairs(x)\n    return #x == 2 and is_valid_digit_pair(x[1], x[2])\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjo9bj64r.lua:86: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    else\n      local digits = string.gsub(digit, \"%d+\", \"\")\n      if digits[#digits]\
    \ ~= 0 then\n        table.insert(seen, digit)\n      end\n    end\n  end\n  table.sort(res)\n\
    \  table.insert(res, table.concat(seen, \"0\"))\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnicetvu.lua:31:\
    \ expected: {1, 15, 33}\nactual: {\"150330142201\"}\nstack traceback:\n\t/tmp/tmptnicetvu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3drl99l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps3drl99l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit == 1 then\n      table.insert(res, 0)\n    else\n      local\
    \ digits = string.gsub(digit, \"%d+\", \"\")\n      if digits[#digits] ~= 0 then\n\
    \        table.insert(res, 0)\n      else\n        local digit = tonumber(digit)\n\
    \        if digit ~= nil then\n          table.insert(seen, digit)\n        end\n\
    \      end\n    end\n  end\n  table.sort(res)\n  for i = 1, #seen do\n    if seen[i]\
    \ ~= 0 then\n      table.insert(res, seen[i])\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61vetpmt.lua:42:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmp61vetpmt.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = string.gsub(digit, \"%d+\",\
    \ \"\")\n      if not seen[digits] then\n        table.insert(ret, digit)\n  \
    \      table.insert(seen, digits)\n      end\n    end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3kezt29.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpf3kezt29.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    if y == nil then\n      return\
    \ nil\n    end\n    local z = {}\n    for i = 1, y do\n      if math.mod(x, 10)\
    \ == 0 then\n        z[#z + 1] = x\n      end\n      x = x / 10\n    end\n   \
    \ return z\n  end\n  return helper(#x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatyz32p_.lua:16:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpatyz32p_.lua:16:\
    \ in function </tmp/tmpatyz32p_.lua:10>\n\t(...tail calls...)\n\t/tmp/tmpatyz32p_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] then\n      table.insert(res, digit)\n\
    \    else\n      table.insert(seen, digit)\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphod5pxle.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmphod5pxle.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit % 2 == 0 then\n      table.insert(res, digit)\n    else\n  \
    \    local found = false\n      for j = 1, #seen do\n        if seen[j] == digit\
    \ then\n          found = true\n          break\n        end\n      end\n    \
    \  if not found then\n        table.insert(seen, digit)\n      end\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9me35i2v.lua:37:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9me35i2v.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit ~= 0 then\n      local digits = math.floor(digit / 10)\n   \
    \   if digits[digits] ~= 0 then\n        table.insert(ret, digit)\n      else\n\
    \        seen[digits] = true\n      end\n    end\n  end\n  for i = 1, #seen do\n\
    \    if not seen[i] then\n      table.insert(ret, i)\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpligmlo7e.lua:18:\
    \ attempt to index a number value (local 'digits')\nstack traceback:\n\t/tmp/tmpligmlo7e.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpligmlo7e.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] then\n      table.insert(res, digit)\n\
    \    else\n      table.insert(seen, digit)\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphod5pxle.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmphod5pxle.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t5slhco.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1t5slhco.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ew9vbfd.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp7ew9vbfd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i % 2 == 0\n  end\n\
    \  local function is_odd(i)\n    return i % 2 ~= 0\n  end\n  local function is_digit(i)\n\
    \    return i >= 0 and i <= 9\n  end\n  local function is_non_digit(i)\n    return\
    \ not is_digit(i)\n  end\n  local function is_non_odd_digit(i)\n    return not\
    \ is_odd(i)\n  end\n  local function is_non_even_digit(i)\n    return not is_even(i)\n\
    \  end\n  local function is_non_digit_or_odd_or_even(i)\n    return not is_digit(i)\
    \ or not is_odd(i) or not is_even(i)\n  end\n  local function is_non_digit_or_odd_or_even_or_non_digit(i)\n\
    \    return not is_digit(i) or not is_odd(i) or not is_even(i) or not is_non_digit(i)\n\
    \  end\n  local function is_non_digit_or_odd_or_even_or_non_digit_or_non_odd_or_even(i)\n\
    \    return not is_digit(i) or not is_odd(i) or not is_even(i) or not is_non_digit(i)\
    \ or not is_non_odd(i) or not is_even(i)\n  end\n  local function is_non_digit_or_odd_or_even_or_non_digit_or_non_odd_or_even_or_non_digit(i)\n\
    \    return not is_digit(i) or not is_odd(i) or not is_even(i) or not is_non_digit(i)\
    \ or not is_non_odd(i) or not is_even(i) or not is_non_digit(i)\n  end\n  local\
    \ function is_non_digit_or_odd_or_even_or_non_digit_or_non_odd_or_even_or_non_digit_or_non_odd_or_even(i)\n\
    \    return not is_digit(i) or not is_odd(i) or not is_even(i) or not is_non_digit(i)\
    \ or not is_non_odd(i) or not is_even(i) or not is_non_digit(i) or not is_non_odd(i)\
    \ or not is_even(i)\n  end\n  local function is_non_digit_or_odd_or_even_or_non_digit_or_non_odd_or_even_or_non_digit_or_non_odd_or_even_or_non_digit(i)\n\
    \    return not is_digit(i) or not is_odd(i) or not is_even(i) or not is_non_digit(i)\
    \ or not is_non_odd(i) or not is_even(i) or not is_non_digit(i) or not is_non_odd(i)\
    \ or not is_even(i) or not is_non_digit(i)\n  end\n  local function is_non_digit_or_odd_or_even_or_non_digit_or_non_odd_or_even_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7afiojoa.lua:47: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i = 1\n  local j = 1\n  local ans = {}\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      j = j + 1\n      ans[j] = x[i]\n\
    \    end\n    i = i + 1\n  end\n  return ans\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmjj1w8l.lua:26:\
    \ expected: {1, 15, 33}\nactual: {2=1422}\nstack traceback:\n\t/tmp/tmpvmjj1w8l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    if y == nil then return nil\
    \ end\n    if y == 0 then return y end\n    if y % 2 == 0 then return helper(y/2)\
    \ end\n    return helper(y/2) + y\n  end\n  return helper(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbffrn9j_.lua:13:\
    \ attempt to perform arithmetic on a table value (local 'y')\nstack traceback:\n\
    \t/tmp/tmpbffrn9j_.lua:13: in function </tmp/tmpbffrn9j_.lua:10>\n\t(...tail calls...)\n\
    \t/tmp/tmpbffrn9j_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(list, index)\n    if index == #list\
    \ then\n      return list\n    end\n    if list[index] % 2 == 0 then\n      local\
    \ new_list = helper(list, index + 1)\n      new_list = new_list + list[index +\
    \ 1]\n      return new_list\n    end\n    return helper(list, index + 1)\n  end\n\
    \  return helper(x, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngpjw9jk.lua:16:\
    \ attempt to perform arithmetic on a table value (local 'new_list')\nstack traceback:\n\
    \t/tmp/tmpngpjw9jk.lua:16: in function </tmp/tmpngpjw9jk.lua:10>\n\t(...tail calls...)\n\
    \t/tmp/tmpngpjw9jk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local function is_digit(n)\n\
    \    return tonumber(n) >= 0 and tonumber(n) <= 9\n  end\n  local function is_unique_digit(n)\n\
    \    return not is_digit(n) or is_unique_digit(tonumber(n))\n  end\n  local function\
    \ is_unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x) do\n \
    \     if is_unique_digit(v) then\n        table.insert(result, v)\n      end\n\
    \    end\n    return result\n  end\n  local function is_unique_digits_helper(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      elseif is_unique_digits(v) then\n\
    \        table.insert(result, v)\n      end\n    end\n    return result\n  end\n\
    \  local function is_unique_digits_helper2(x)\n    local result = {}\n    for\
    \ _, v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      elseif is_unique_digits_helper(v) then\n        table.insert(result,\
    \ v)\n      end\n    end\n    return result\n  end\n  local function is_unique_digits_helper3(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      elseif is_unique_digits_helper2(v)\
    \ then\n        table.insert(result, v)\n      end\n    end\n    return result\n\
    \  end\n  local function is_unique_digits_helper4(x)\n    local result = {}\n\
    \    for _, v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      elseif is_unique_digits_helper3(v) then\n        table.insert(result,\
    \ v)\n      end\n    end\n    return result\n  end\n  local function is_unique_digits_helper5(x)\n\
    \    local result = {}\n    for _, v in ipairs(x) do\n      if is_unique_digit(v)\
    \ then\n        table.insert(result, v)\n      elseif is_unique_digits_helper4(v)\
    \ then\n        table.insert(result, v)\n      end\n    end\n    return result\n\
    \  end\n  local function is_unique_digits_helper6(x)\n    local result = {}\n\
    \    for _, v in ipairs(x) do\n      if is_unique_digit(v) then\n        table.insert(result,\
    \ v)\n      elseif is_unique_digits_helper5(v) then\n        table.insert(result,\
    \ v)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmpj5289b.lua:104: ''end'' expected (to close ''if'' at line
    89) near <eof>

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(i)\n    return i % 2 == 0\n  end\n\
    \  local function is_odd(i)\n    return i % 2 == 1\n  end\n  local function is_digit(i)\n\
    \    return i >= 0 and i <= 9\n  end\n  local function is_unique_digit(i)\n  \
    \  return is_digit(x[i]) and x[i] ~= 0 and x[i] ~= 9\n  end\n  local function\
    \ is_unique_digits(x)\n    local i = 1\n    while i <= #x do\n      if not is_unique_digit(x[i])\
    \ then\n        return false\n      end\n      i = i + 1\n    end\n    return\
    \ true\n  end\n  local function is_unique_digits_helper(x)\n    local i = 1\n\
    \    while i <= #x do\n      if not is_unique_digit(x[i]) then\n        return\
    \ false\n      end\n      i = i + 1\n    end\n    return true\n  end\n  local\
    \ function is_unique_digits_helper2(x)\n    local i = 1\n    while i <= #x do\n\
    \      if not is_unique_digit(x[i]) then\n        return false\n      end\n  \
    \    i = i + 1\n    end\n    return true\n  end\n  local function is_unique_digits_helper3(x)\n\
    \    local i = 1\n    while i <= #x do\n      if not is_unique_digit(x[i]) then\n\
    \        return false\n      end\n      i = i + 1\n    end\n    return true\n\
    \  end\n  local function is_unique_digits_helper4(x)\n    local i = 1\n    while\
    \ i <= #x do\n      if not is_unique_digit(x[i]) then\n        return false\n\
    \      end\n      i = i + 1\n    end\n    return true\n  end\n  local function\
    \ is_unique_digits_helper5(x)\n    local i = 1\n    while i <= #x do\n      if\
    \ not is_unique_digit(x[i]) then\n        return false\n      end\n      i = i\
    \ + 1\n    end\n    return true\n  end\n  local function is_unique_digits_helper6(x)\n\
    \    local i = 1\n    while i <= #x do\n      if not is_unique_digit(x[i]) then\n\
    \        return false\n      end\n      i = i + 1\n    end\n    return true\n\
    \  end\n  local function is_unique_digits_helper7(x)\n    local i = 1\n    while\
    \ i <= #x do\n      if not is_unique_digit(x[i]) then\n        return false\n\
    \      end\n      i = i + 1\n    end\n    return true\n  end\n  local function\
    \ is_unique_digits_helper8(x)\n    local i = 1\n    while i <= #x do\n      if\
    \ not is_unique_digit(x[i]) then\n        return false\n      end\n      i = i\
    \ + 1\n    end\n    return true\n  end\n  local function \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl6cqru8l.lua:113: ''('' expected near ''=''

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0w0ik32.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpg0w0ik32.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg0w0ik32.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit == 1 then\n      table.insert(ret, 0)\n    else\n      local\
    \ found = false\n      for j = 1, #seen do\n        if digit == seen[j] then\n\
    \          found = true\n          break\n        end\n      end\n      if not\
    \ found then\n        table.insert(ret, digit)\n        table.insert(seen, digit)\n\
    \      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgckq9s12.lua:38:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 0}\nstack traceback:\n\t/tmp/tmpgckq9s12.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] == 0 then\n        table.insert(result, x[i])\n      else\n\
    \        helper(i * 10)\n      end\n      i = i + 1\n    end\n  end\n  local result\
    \ = {}\n  helper(1)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzv41ghje.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzv41ghje.lua:16: in upvalue 'helper'\n\
    \t/tmp/tmpzv41ghje.lua:16: in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16: in\
    \ upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16: in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16:\
    \ in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16: in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16:\
    \ in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16: in upvalue 'helper'\n\t/tmp/tmpzv41ghje.lua:16:\
    \ in upvalue 'helper'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpzv41ghje.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpzv41ghje.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.170 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgigzkcu.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmptgigzkcu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    else\n      local digits = string.gsub(digit, \"%d+\", \"\")\n      if not\
    \ seen[digits] then\n        table.insert(ret, digit)\n        table.insert(seen,\
    \ digits)\n      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogjz5wwz.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpogjz5wwz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit == 0 then\n      break\n    end\n    if result[digit] ==\
    \ nil then\n      result[digit] = true\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd8huu68.lua:26:\
    \ expected: {1, 15, 33}\nactual: {true, 15=true, 33=true, 1422=true}\nstack traceback:\n\
    \t/tmp/tmpmd8huu68.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret, digit)\n\
    \    elseif digit ~= 0 then\n      local found = false\n      for j = 1, #seen\
    \ do\n        if digit == seen[j] then\n          found = true\n          break\n\
    \        end\n      end\n      if not found then\n        table.insert(seen, digit)\n\
    \      end\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_22czf56.lua:35:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp_22czf56.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0w0ik32.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpg0w0ik32.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg0w0ik32.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] % 2 == 0 then\n        table.insert(result, x[i])\n    \
    \  end\n      i = i + 1\n    end\n  end\n  local result = {}\n  helper(1)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9idb78ej.lua:27:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp9idb78ej.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(res, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a6aqmbj.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp8a6aqmbj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3drl99l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps3drl99l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t5slhco.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1t5slhco.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit ~= 0 then\n      local k = digit % 10\n      if seen[k] then\n\
    \        table.insert(res, k)\n      else\n        seen[k] = true\n      end\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5ssg858.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpk5ssg858.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: -1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ #y do\n      if y[i] % 2 == 0 then\n        table.insert(x, y[i])\n      end\n\
    \      i = i + 1\n    end\n  end\n  helper(x)\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659792898
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] then\n      table.insert(res, digit)\n\
    \    else\n      seen[digit] = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8dgg9yb.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpu8dgg9yb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppynrbkqy.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmppynrbkqy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppynrbkqy.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    local digit\
    \ = x[i]\n    if digit % 2 == 0 then\n      table.insert(results, digit)\n   \
    \ end\n  end\n  return table.sort(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamo4l14t.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpamo4l14t.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t5slhco.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1t5slhco.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit ~= 0 and digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n      seen[digit] = true\n    end\n  end\n  for i = 1, #seen do\n  \
    \  if not seen[i] then\n      table.insert(ret, i)\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc54b_087.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpc54b_087.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n\
    \  local function is_odd(x)\n    return x % 2 ~= 0\n  end\n  local function is_digit(x)\n\
    \    return x >= 0 and x <= 9\n  end\n  local function is_unique_digit(x)\n  \
    \  return is_digit(x) and x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list(x)\n\
    \    return is_unique_digit(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(x)\n\
    \    return is_unique_digit_in_list(x) and x ~= 0 and x ~= 9\n  end\n  local function\
    \ is_unique_digit_in_list_in_order(x)\n    return is_unique_digit_in_list(x) and\
    \ x ~= 0 and x ~= 9\n  end\n  local function is_unique_digit_in_list_in_order(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpybgxu58p.lua:65: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit ~= 0 and digit ~= 1 then\n      table.insert(ret,\
    \ digit)\n    end\n    if digit == 0 then\n      local digits = string.gsub(seen,\
    \ \"%d+\", \"\")\n      if digits ~= \"\" then\n        table.insert(ret, digits)\n\
    \      end\n      seen[#seen+1] = x[i]\n    end\n  end\n  return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprie87zqq.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmprie87zqq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  for v in x:gmatch(\"%d*\"\
    ) do\n    if v ~= 0 then\n      ret[#ret+1] = v\n    end\n    i = i + 1\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0w0ik32.lua:12:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmpg0w0ik32.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg0w0ik32.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    if y == nil then return nil\
    \ end\n    if y[1] == 0 then return y\n    elseif y[1] % 2 == 0 then return helper(y)\
    \ end\n    return helper(y:sub(1, end))\n  end\n  return helper(x)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpul3jsyof.lua:14: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] == 0 then\n        table.insert(result, x[i])\n      end\n\
    \      i = i + 1\n    end\n  end\n  local result = {}\n  helper(1)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy2rb8d6.lua:27:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqy2rb8d6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n    i = i\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ipdcm1k.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9ipdcm1k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local i = 1\n  local j = 1\n  local ans = {}\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      j = j + 1\n      ans[j] = x[i]\n\
    \    end\n    i = i + 1\n  end\n  return ans\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmjj1w8l.lua:26:\
    \ expected: {1, 15, 33}\nactual: {2=1422}\nstack traceback:\n\t/tmp/tmpvmjj1w8l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(ret, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqfo3i7a.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpaqfo3i7a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function is_even(n)\n        return math.mod(n,\
    \ 2) == 0\n    end\n    local function is_odd(n)\n        return math.mod(n, 2)\
    \ == 1\n    end\n    local function is_digit(n)\n        return n >= 0 and n %\
    \ 10 ~= 0\n    end\n    local function is_unique_digit(n)\n        local i = 1\n\
    \        while i <= n do\n            if is_digit(n) and is_unique_digit(i) then\n\
    \                return false\n            else\n                i = i + 1\n \
    \           end\n        end\n        return true\n    end\n    local function\
    \ is_unique_digits(x)\n        local result = {}\n        for _, v in ipairs(x)\
    \ do\n            if is_unique_digit(v) then\n                table.insert(result,\
    \ v)\n            end\n        end\n        return result\n    end\n    local\
    \ function is_sorted(x)\n        local i = 1\n        while i <= #x do\n     \
    \       if x[i] ~= x[i-1] then\n                return false\n            end\n\
    \            i = i + 1\n        end\n        return true\n    end\n    if is_sorted(x)\
    \ then\n        return x\n    end\n    if is_unique_digits(x) then\n        return\
    \ nil\n    end\n    if is_even(x) then\n        return unique_digits(x)\n    end\n\
    \    if is_odd(x) then\n        local result = {}\n        for _, v in ipairs(x)\
    \ do\n            if is_digit(v) then\n                table.insert(result, v)\n\
    \            end\n        end\n        return result\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgnwxpob0.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\
    \t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\t/tmp/tmpgnwxpob0.lua:22:\
    \ in upvalue 'is_unique_digit'\n\t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\
    \t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\t/tmp/tmpgnwxpob0.lua:22:\
    \ in upvalue 'is_unique_digit'\n\t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\
    \t/tmp/tmpgnwxpob0.lua:22: in upvalue 'is_unique_digit'\n\t/tmp/tmpgnwxpob0.lua:22:\
    \ in upvalue 'is_unique_digit'\n\t...\t(skipping 333296 levels)\n\t/tmp/tmpgnwxpob0.lua:52:\
    \ in local 'candidate'\n\t/tmp/tmpgnwxpob0.lua:72: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.180 seconds, 0 successes, 1 error\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n    i = i\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ipdcm1k.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp9ipdcm1k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    if seen[x[i]] then\n      table.insert(ret, x[i])\n    else\n      seen[x[i]]\
    \ = true\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqfo3i7a.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpaqfo3i7a.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] then\n      table.insert(ret, digit)\n\
    \    else\n      seen[digit] = true\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq_65mj1.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmppq_65mj1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n    local digit\
    \ = x[i]\n    if digit % 2 == 0 then\n      table.insert(results, digit)\n   \
    \ end\n  end\n  return table.sort(results)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamo4l14t.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpamo4l14t.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  local i = 1\n  while i <= #x do\n \
    \   if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3drl99l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps3drl99l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprydtrz3c.lua:22:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprydtrz3c.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    local digit =\
    \ x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] = digit\n    end\n\
    \  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg30vo90.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpfg30vo90.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    else\n      local found = false\n      for j = 1, #seen do\n        if seen[j]\
    \ == digit then\n          found = true\n          break\n        end\n      end\n\
    \      if not found then\n        table.insert(seen, digit)\n      end\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2k7fxijq.lua:35:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp2k7fxijq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        local digit\
    \ = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret, digit)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4granv46.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp4granv46.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function is_even(n)\n    return n % 2 == 0\n  end\n\
    \  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local function is_digit(n)\n\
    \    return tonumber(n) == n and n >= 0 and n % 1 == 0\n  end\n  local function\
    \ is_unique_digit(n)\n    local i = 1\n    while i <= #x and is_digit(x[i]) do\n\
    \      if is_unique_digit(x[i]) then\n        return false\n      end\n      i\
    \ = i + 1\n    end\n    return true\n  end\n  local function is_unique_digits(x)\n\
    \    local i = 1\n    while i <= #x do\n      if is_unique_digit(x[i]) then\n\
    \        i = i + 1\n      else\n        return x\n      end\n    end\n    return\
    \ x\n  end\n  local function is_unique_digits_sorted(x)\n    local i = 1\n   \
    \ while i <= #x do\n      if is_unique_digit(x[i]) then\n        i = i + 1\n \
    \     else\n        return x\n      end\n    end\n    table.sort(x)\n    return\
    \ x\n  end\n  local function is_unique_digits_sorted_by_odd(x)\n    local i =\
    \ 1\n    while i <= #x do\n      if is_unique_digit(x[i]) then\n        i = i\
    \ + 1\n      else\n        return x\n      end\n    end\n    table.sort(x, function(a,\
    \ b) return is_odd(a) < is_odd(b) end)\n    return x\n  end\n  local function\
    \ is_unique_digits_sorted_by_even(x)\n    local i = 1\n    while i <= #x do\n\
    \      if is_unique_digit(x[i]) then\n        i = i + 1\n      else\n        return\
    \ x\n      end\n    end\n    table.sort(x, function(a, b) return is_even(a) <\
    \ is_even(b) end)\n    return x\n  end\n  local function is_unique_digits_sorted_by_odd_and_even(x)\n\
    \    local i = 1\n    while i <= #x do\n      if is_unique_digit(x[i]) then\n\
    \        i = i + 1\n      else\n        return x\n      end\n    end\n    table.sort(x,\
    \ function(a, b) return is_odd(a) < is_even(b) end)\n    table.sort(x, function(a,\
    \ b) return is_even(a) < is_odd(b) end)\n    return x\n  end\n  local function\
    \ is_unique_digits_sorted_by_odd_and_even_and_digit(x)\n    local i = 1\n    while\
    \ i <= #x do\n      if is_unique_digit(x[i]) then\n        i = i + 1\n      else\n\
    \        return x\n      end\n    end\n    table.sort(x, function(a, b) return\
    \ is_odd(a) < is_even(b) end)\n    table.sort(x, function(a, b) return is_even(a)\
    \ < is_odd(b) end)\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpojx1ve93.lua:111: ''end'' expected (to close ''function''
    at line 89) near <eof>

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local digit = x[i]\n\
    \    if digit % 2 == 0 then\n      table.insert(ret, digit)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkw7knr3.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpkkw7knr3.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n        if x[i]\
    \ % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ss5std2.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp3ss5std2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local function helper(y)\n    local i = 1\n    while i <=\
    \ y do\n      if x[i] == 0 then\n        local k = i\n        while x[k] == 0\
    \ do\n          k = k + 1\n        end\n        if k ~= i then\n          x[i],\
    \ x[k] = x[k], x[i]\n        end\n      end\n      i = i + 1\n    end\n  end\n\
    \  helper(1)\n  local i = 1\n  while i <= #x do\n    if x[i] == 0 then\n     \
    \ local k = i\n      while x[k] == 0 do\n        k = k + 1\n      end\n      if\
    \ k ~= i then\n        x[i], x[k] = x[k], x[i]\n      end\n    end\n    i = i\
    \ + 1\n  end\n  return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd9bo0eh.lua:45:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpbd9bo0eh.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local results = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if seen[digit] == nil then\n      seen[digit] = true\n\
    \      results[#results + 1] = digit\n    end\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jpy42vl.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp3jpy42vl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0\
    \ then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c2tyicc.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp6c2tyicc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, 0)\n\
    \    else\n      local found = false\n      for j = 1, #seen do\n        if digit\
    \ == seen[j] then\n          found = true\n          break\n        end\n    \
    \  end\n      if not found then\n        table.insert(seen, digit)\n        table.insert(res,\
    \ digit)\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsxam6yu.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpxsxam6yu.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 ==\
    \ 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9iwqnxd.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp_9iwqnxd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n    local function helper(y)\n        local i = 1\n      \
    \  while i <= y do\n            if x[i] % 2 == 0 then\n                return\
    \ false\n            else\n                i = i + 1\n            end\n      \
    \  end\n        return true\n    end\n    local function helper2(x)\n        local\
    \ i = 1\n        while i <= x do\n            if x[i] % 2 == 1 then\n        \
    \        return false\n            else\n                i = i + 1\n         \
    \   end\n        end\n        return true\n    end\n    local function helper3(x)\n\
    \        local i = 1\n        while i <= x do\n            if x[i] % 2 == 0 then\n\
    \                return false\n            else\n                i = i + 1\n \
    \           end\n        end\n        return true\n    end\n    local function\
    \ helper4(x)\n        local i = 1\n        while i <= x do\n            if x[i]\
    \ % 2 == 1 then\n                return false\n            else\n            \
    \    i = i + 1\n            end\n        end\n        return true\n    end\n \
    \   local function helper5(x)\n        local i = 1\n        while i <= x do\n\
    \            if x[i] % 2 == 0 then\n                return false\n           \
    \ else\n                i = i + 1\n            end\n        end\n        return\
    \ true\n    end\n    local function helper6(x)\n        local i = 1\n        while\
    \ i <= x do\n            if x[i] % 2 == 1 then\n                return false\n\
    \            else\n                i = i + 1\n            end\n        end\n \
    \       return true\n    end\n    local function helper7(x)\n        local i =\
    \ 1\n        while i <= x do\n            if x[i] % 2 == 0 then\n            \
    \    return false\n            else\n                i = i + 1\n            end\n\
    \        end\n        return true\n    end\n    local function helper8(x)\n  \
    \      local i = 1\n        while i <= x do\n            if x[i] % 2 == 1 then\n\
    \                return false\n            else\n                i = i + 1\n \
    \           end\n        end\n        return true\n    end\n    local function\
    \ helper9(x)\n        local i = 1\n        while i <= x do\n            if x[i]\
    \ % 2 == 0 then\n                return false\n            else\n            \
    \    i = i + 1\n            end\n        end\n        return true\n    end\n \
    \   local function helper10(x)\n        local i = 1\n        while i <= x do\n\
    \            if x[i] % 2 == 1 then\n                return false\n           \
    \ else\n                i = i + 1\n            end\n        end\n        return\
    \ true\n    end\n    local function helper11(x)\n        local i = 1\n       \
    \ while i <= x do\n            if x[i] % 2 == 0 then\n                return false\n\
    \            else\n                i = i + 1\n            end\n        end\n \
    \       return true\n    end\n    local function helper12(x)\n        local i\
    \ = 1\n        while i <= x do\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgpxlyinf.lua:145: ''end'' expected (to close ''while'' at
    line 133) near <eof>

    '
  stdout: ''
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n\
    \    elseif digit == 1 then\n      table.insert(res, 0)\n    else\n      local\
    \ found = false\n      for j = 1, #seen do\n        if digit == seen[j] then\n\
    \          found = true\n          break\n        end\n      end\n      if not\
    \ found then\n        table.insert(seen, digit)\n      end\n    end\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmze0q42w.lua:37:\
    \ expected: {1, 15, 33}\nactual: {0}\nstack traceback:\n\t/tmp/tmpmze0q42w.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local seen = {}\n  local res = {}\n  for i = 1, #x do\n\
    \    local v = x[i]\n    if seen[v] then\n      table.insert(res, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9putre47.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp9putre47.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrz2sn1l.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvrz2sn1l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
    -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
    \ unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <= #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t5slhco.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp1t5slhco.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792893
