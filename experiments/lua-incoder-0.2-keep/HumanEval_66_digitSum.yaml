name: HumanEval_66_digitSum
language: lua
prompt: "-- Task\n-- Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- digitSum(\"\
  \") => 0\n-- digitSum(\"abAB\") => 131\n-- digitSum(\"abcCd\") => 67\n-- digitSum(\"\
  helloE\") => 69\n-- digitSum(\"woArBld\") => 131\n-- digitSum(\"aAaaaXa\") => 153\n\
  local function digitSum(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n\
  \    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),\
  \ 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),\
  \ 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You\
  \ arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\n  local sum = 0\n  for i = 1, #s do\n    sum =\
    \ sum + string.byte(s,i)\n  end\n  return sum\nend", "  local sum = 0\n  for i\
    \ = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + string.sub(s,i,i)\n  end\n  return sum\nend", "  local sum = 0\n  for i =\
    \ 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n \
    \ end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + string.byte(s,i)\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1,\
    \ #s do\n    sum = sum + string.byte(string.sub(s,i,i)) -- ASCII code\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + string.byte(s,i)\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + string.byte(s,i)\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1,\
    \ #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n \
    \ end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return\
    \ sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #s do\n    sum = sum + string.byte(s,i)\n  end\n  return sum\nend",
  "  local sum = 0\n  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #s do\n    sum = sum\
    \ + tonumber(string.sub(s,i,i))\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #s do\n    sum = sum + tonumber(string.sub(s,i,i))\n  end\n  return\
    \ sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
