language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = \"\"\n       \
    \ for j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= \" \" then\n\
    \                prime_word = prime_word .. sentence:sub(i, i + 1)\n         \
    \   end\n        end\n        if prime_words[prime_word] == nil then\n       \
    \     prime_words[prime_word] = 1\n        else\n            prime_words[prime_word]\
    \ = prime_words[prime_word] + 1\n        end\n    end\n    local result = \"\"\
    \n    for key, value in pairs(prime_words) do\n        if value == 2 then\n  \
    \          result = result .. key\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5wh1eyb.lua:42:\
    \ expected: \"is\"\nactual: \"isisisisisisisisisisisisisiss s s s s s s s s s\
    \ s s s s \"\nstack traceback:\n\t/tmp/tmpb5wh1eyb.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local word = sentence:sub(i,i)\n\
    \        if prime_words[word] == nil then\n            prime_words[word] = true\n\
    \        end\n    end\n    local new_sentence = sentence\n    for i = 2, #sentence\
    \ do\n        local word = sentence:sub(i,i)\n        if prime_words[word] then\n\
    \            new_sentence = new_sentence:sub(1,#new_sentence)\n        end\n \
    \   end\n    return new_sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zovezy0.lua:36:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp5zovezy0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  local prime_words_len = {}\n  local prime_words_order = {}\n  for i\
    \ = 1, #sentence do\n    local word = sentence:sub(i,i)\n    local prime_words_len\
    \ = #prime_words\n    local prime_words_order = {}\n    for j = 1, #prime_words\
    \ do\n      local prime_word = prime_words[j]\n      if prime_word:len() == prime_words_len\
    \ and prime_word:sub(1,1) == word then\n        prime_words_order[j] = prime_word\n\
    \      end\n    end\n    table.insert(prime_words, word)\n    table.insert(prime_words_order,\
    \ word)\n  end\n  local result = \"\"\n  for i = 1, #prime_words do\n    local\
    \ prime_word = prime_words[i]\n    local prime_words_len = #prime_words\n    if\
    \ prime_words_len > 1 then\n      local prime_words_order = prime_words_order[i]\n\
    \      for j = 1, prime_words_len do\n        local prime_word_order = prime_words_order[j]\n\
    \        if prime_word_order ~= prime_word then\n          result = result ..\
    \ \" \" .. prime_word_order\n        end\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgq7z8es.lua:39:\
    \ attempt to index a nil value (local 'prime_words_order')\nstack traceback:\n\
    \t/tmp/tmpqgq7z8es.lua:39: in local 'candidate'\n\t/tmp/tmpqgq7z8es.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i + j) ~= sentence:sub(i - 1,\
    \ i + j) then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = \"\"\n    for i = 2, #primes do\n\
    \        result = result .. sentence:sub(primes[i], primes[i])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0flpi37.lua:39:\
    \ expected: \"is\"\nactual: \"i\"\nstack traceback:\n\t/tmp/tmpv0flpi37.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if i % prime_words[j] == 0 then\n        \
    \        prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_words, i)\n        end\n\
    \    end\n    local new_sentence = \"\"\n    for i = 1, #prime_words do\n    \
    \    new_sentence = new_sentence .. \" \" .. sentence:sub(1, prime_words[i])\n\
    \    end\n    return new_sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3uym2j7.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpu3uym2j7.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            primes[primes_count] = sentence[i]\n\
    \            primes_count = primes_count + 1\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8o0t7xsf.lua:37:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8o0t7xsf.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i) == primes[j]:sub(i - 1, i)\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(primes, sentence:sub(i, i))\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnwdzas5.lua:34:\
    \ expected: \"is\"\nactual: \"h i s   i s   a   t e s t\"\nstack traceback:\n\t\
    /tmp/tmptnwdzas5.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd76l3nle.lua:94: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = sentence[i]\n            primes_count = #primes\n        end\n    end\n\
    \    for i = 1, primes_count do\n        primes_string = primes_string .. \" \"\
    \ .. primes[i]\n    end\n    return primes_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9u0f2c1.lua:40:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpk9u0f2c1.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and primes[j] ~= sentence:len()\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence:len()\
    \ - i)\n        end\n    end\n    return table.concat(primes, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1o8jlaqg.lua:35:\
    \ expected: \"is\"\nactual: \"12 11 0\"\nstack traceback:\n\t/tmp/tmp1o8jlaqg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and primes[j] and sentence:len()\
    \ > i and sentence:len() < j then\n                prime = false\n           \
    \ end\n        end\n        if prime then\n            table.insert(primes, sentence:len()\
    \ - i)\n        end\n    end\n    return table.concat(primes, \" \")\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11\
    \ 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6\
    \ 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11\
    \ 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6\
    \ 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11\
    \ 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6\
    \ 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11\
    \ 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6\
    \ 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\
    \ 1 0\n18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp38tlk0qe.lua:68: expected: \"is\"\nactual: \"12 11\
    \ 10 9 8 7 6 5 4 3 2 1 0\"\nstack traceback:\n\t/tmp/tmp38tlk0qe.lua:68: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_string = \"\"\n    local prime_words_string2 = \"\"\n    local\
    \ prime_words_string3 = \"\"\n    local prime_words_string4 = \"\"\n    local\
    \ prime_words_string5 = \"\"\n    local prime_words_string6 = \"\"\n    local\
    \ prime_words_string7 = \"\"\n    local prime_words_string8 = \"\"\n    local\
    \ prime_words_string9 = \"\"\n    local prime_words_string10 = \"\"\n    local\
    \ prime_words_string11 = \"\"\n    local prime_words_string12 = \"\"\n    local\
    \ prime_words_string13 = \"\"\n    local prime_words_string14 = \"\"\n    local\
    \ prime_words_string15 = \"\"\n    local prime_words_string16 = \"\"\n    local\
    \ prime_words_string17 = \"\"\n    local prime_words_string18 = \"\"\n    local\
    \ prime_words_string19 = \"\"\n    local prime_words_string20 = \"\"\n    local\
    \ prime_words_string21 = \"\"\n    local prime_words_string22 = \"\"\n    local\
    \ prime_words_string23 = \"\"\n    local prime_words_string24 = \"\"\n    local\
    \ prime_words_string25 = \"\"\n    local prime_words_string26 = \"\"\n    local\
    \ prime_words_string27 = \"\"\n    local prime_words_string28 = \"\"\n    local\
    \ prime_words_string29 = \"\"\n    local prime_words_string30 = \"\"\n    local\
    \ prime_words_string31 = \"\"\n    local prime_words_string32 = \"\"\n    local\
    \ prime_words_string33 = \"\"\n    local prime_words_string34 = \"\"\n    local\
    \ prime_words_string35 = \"\"\n    local prime_words_string36 = \"\"\n    local\
    \ prime_words_string37 = \"\"\n    local prime_words_string38 = \"\"\n    local\
    \ prime_words_string39 = \"\"\n    local prime_words_string40 = \"\"\n    local\
    \ prime_words_string41 = \"\"\n    local prime_words_string42 = \"\"\n    local\
    \ prime_words_string43 = \"\"\n    local prime_words_string44 = \"\"\n    local\
    \ prime_words_string45 = \"\"\n    local prime_words_string46 = \"\"\n    local\
    \ prime_words_string47 = \"\"\n    local prime_words_string48 = \"\"\n    local\
    \ prime_words_string49 = \"\"\n    local prime_words_string50 = \"\"\n    local\
    \ prime_words_string51 = \"\"\n    local prime_words_string52 = \"\"\n    local\
    \ prime_words_string53 = \"\"\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8n_jwxr0.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n      \
    \  local length = #word\n        if prime_words_length[length] == nil then\n \
    \           prime_words_length[length] = 1\n            prime_words[length] =\
    \ word\n        else\n            prime_words_length[length] = prime_words_length[length]\
    \ + 1\n            prime_words[length] = prime_words[length] .. \" \" .. word\n\
    \        end\n    end\n    for i = 2, #prime_words do\n        if prime_words_length[i]\
    \ == nil then\n            prime_words_order[i] = prime_words[i]\n        else\n\
    \            local prime_words_length = prime_words_length[i]\n            local\
    \ prime_words_order = prime_words_order[i]\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_length\n            local\
    \ prime_words_order = prime_words_order\n            local prime_words_length\
    \ = prime_words_length\n            local prime_words_order = prime_words_order\n\
    \            local prime_words_length = prime_words_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgpseouak.lua:80: ''end'' expected (to close ''if'' at line
    31) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu14idsh0.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpu14idsh0.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb0dvjn8.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvb0dvjn8.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  local prime_words_len = {}\n  local prime_words_order = {}\n  local\
    \ prime_words_string = \"\"\n  local prime_words_string_len = 0\n  for word in\
    \ string.gmatch(sentence, \"([^ ]+)\") do\n    local word_len = #word\n    if\
    \ prime_words_string_len == 0 then\n      prime_words_string_len = word_len\n\
    \    end\n    if prime_words_string_len == word_len then\n      prime_words_string\
    \ = (prime_words_string .. \" \" .. word)\n    else\n      prime_words_string\
    \ = (prime_words_string .. \" \" .. word)\n      prime_words_len[prime_words_string_len]\
    \ = word_len\n      prime_words_order[prime_words_string_len] = prime_words_string_len\n\
    \      prime_words_string_len = word_len + 1\n    end\n  end\n  for i = 1, prime_words_string_len\
    \ do\n    if prime_words_len[i] == prime_words_string_len then\n      prime_words[prime_words_order[i]]\
    \ = prime_words_string\n    end\n  end\n  return prime_words[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1062d68.lua:46:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_1062d68.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 1, #sentence do\n    local prime = true\n    for j = 1, #prime_words\
    \ do\n      if prime_words[j] == sentence[i] then\n        prime = false\n   \
    \     break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ sentence[i])\n    end\n  end\n  return table.concat(prime_words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5v96ohn.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpq5v96ohn.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqenx03x.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpgqenx03x.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_string = \"\"\n    local prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_string = \"\"\n    local prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length =\
    \ 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers\
    \ = {}\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc98yzjyv.lua:48: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local new_sentence = \"\"\n    for i = 1, #prime_numbers do\n  \
    \      new_sentence = new_sentence .. \" \" .. sentence:sub(1, prime_numbers[i])\n\
    \    end\n    return new_sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabbzvbm6.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpabbzvbm6.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
