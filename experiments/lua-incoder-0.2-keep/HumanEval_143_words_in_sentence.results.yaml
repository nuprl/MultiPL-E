name: HumanEval_143_words_in_sentence
language: lua
results:
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = 1\n        for\
    \ j = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_word = j + 1\n                break\n            end\n\
    \        end\n        prime_words[#prime_words + 1] = sentence[i]\n    end\n \
    \   return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiiueuio.lua:33:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmiiueuio.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n        if\
    \ prime_words[word] == nil then\n            prime_words[word] = true\n      \
    \      prime_words_len[#prime_words_len + 1] = #word\n            prime_words_order[#prime_words_order\
    \ + 1] = word\n        end\n    end\n    local result = \"\"\n    for i = 1, #prime_words_len\
    \ do\n        local word = prime_words_order[i]\n        if prime_words[word]\
    \ then\n            for j = 1, prime_words_len[i] do\n                result =\
    \ result .. \" \" .. word\n            end\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrn057wa.lua:42:\
    \ expected: \"is\"\nactual: \" T h i s   a t e\"\nstack traceback:\n\t/tmp/tmprrn057wa.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            if sentence:sub(i, i+j) == prime_words[j]\
    \ then\n                prime_word[j] = true\n                break\n        \
    \    end\n        end\n        if #prime_words == 0 then\n            prime_words[#prime_words+1]\
    \ = sentence:sub(i, i)\n        end\n    end\n    return table.concat(prime_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3eggvss.lua:35:\
    \ expected: \"is\"\nactual: \"h\"\nstack traceback:\n\t/tmp/tmpp3eggvss.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphw7ci0d_.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    local prime_words_string = \"\"\n    local prime_words_string_length = 0\n\
    \    local prime_words_string_order = 0\n    local prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_length = {}\n    local prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string = \"\"\n    local prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_order = 0\n    local prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_length = {}\n\
    \    local prime_words_string_prime_words_string_prime_words_order = {}\n    local\
    \ prime_words_string_prime_words_string_prime_words_string = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_length\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_length\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9quv6ylu.lua:61: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]:tostring()))\n    end\n    return table.concat(result)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2in6en0.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpu2in6en0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgalerb2.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpxgalerb2.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        if\
    \ #result > #sentence then\n            return result\n        end\n        local\
    \ word = sentence:sub(1, prime_numbers[i])\n        local remainder = sentence:sub(prime_numbers[i]\
    \ + 1, #sentence)\n        if remainder ~= \"\" then\n            word = word\
    \ .. \" \" .. remainder\n        end\n        result = result .. word\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jgtttnw.lua:47:\
    \ expected: \"is\"\nactual: \"Thi s is a test\"\nstack traceback:\n\t/tmp/tmp5jgtttnw.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if prime_words[j] == sentence[i] then\n        prime = false\n   \
    \     break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ sentence[i])\n    end\n  end\n  return table.concat(prime_words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckepidvr.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpckepidvr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_length = {}\n    local prime_numbers_order = {}\n\
    \    local prime_numbers_string = \"\"\n    local prime_numbers_string2 = \"\"\
    \n    local prime_numbers_string3 = \"\"\n    local prime_numbers_string4 = \"\
    \"\n    local prime_numbers_string5 = \"\"\n    local prime_numbers_string6 =\
    \ \"\"\n    local prime_numbers_string7 = \"\"\n    local prime_numbers_string8\
    \ = \"\"\n    local prime_numbers_string9 = \"\"\n    local prime_numbers_string10\
    \ = \"\"\n    local prime_numbers_string11 = \"\"\n    local prime_numbers_string12\
    \ = \"\"\n    local prime_numbers_string13 = \"\"\n    local prime_numbers_string14\
    \ = \"\"\n    local prime_numbers_string15 = \"\"\n    local prime_numbers_string16\
    \ = \"\"\n    local prime_numbers_string17 = \"\"\n    local prime_numbers_string18\
    \ = \"\"\n    local prime_numbers_string19 = \"\"\n    local prime_numbers_string20\
    \ = \"\"\n    local prime_numbers_string21 = \"\"\n    local prime_numbers_string22\
    \ = \"\"\n    local prime_numbers_string23 = \"\"\n    local prime_numbers_string24\
    \ = \"\"\n    local prime_numbers_string25 = \"\"\n    local prime_numbers_string26\
    \ = \"\"\n    local prime_numbers_string27 = \"\"\n    local prime_numbers_string28\
    \ = \"\"\n    local prime_numbers_string29 = \"\"\n    local prime_numbers_string30\
    \ = \"\"\n    local prime_numbers_string31 = \"\"\n    local prime_numbers_string32\
    \ = \"\"\n    local prime_numbers_string33 = \"\"\n    local prime_numbers_string34\
    \ = \"\"\n    local prime_numbers_string35 = \"\"\n    local prime_numbers_string36\
    \ = \"\"\n    local prime_numbers_string37 = \"\"\n    local prime_numbers_string38\
    \ = \"\"\n    local prime_numbers_string39 = \"\"\n    local prime_numbers_string40\
    \ = \"\"\n    local prime_numbers_string41 = \"\"\n    local prime_numbers_string42\
    \ = \"\"\n    local prime_numbers_string43 = \"\"\n    local prime_numbers_string44\
    \ = \"\"\n    local prime_numbers_string45 = \"\"\n    local prime_numbers_string46\
    \ = \"\"\n    local prime_numbers_string47 = \"\"\n    local prime_numbers_string48\
    \ = \"\"\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprs8fg3_v.lua:81: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqu4nl7x.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpuqu4nl7x.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = true\n       \
    \ for j = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_word = false\n            end\n        end\n        if\
    \ prime_word then\n            table.insert(prime_words, sentence[i])\n      \
    \  end\n    end\n    return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz521ed68.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz521ed68.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n  \
    \              prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_words, sentence[i])\n        end\n    end\n  \
    \  return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdtd39lr.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptdtd39lr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dyn90xx.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp9dyn90xx.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_length = 1\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_string = \"\"\n    local primes_string_length\
    \ = 1\n    local primes_string_index = 1\n    local primes_string_value = \"\"\
    \n    local primes_string_prime = \"\"\n    local primes_string_prime_index =\
    \ 1\n    local primes_string_prime_value = \"\"\n    local primes_string_prime_length\
    \ = 1\n    local primes_string_prime_prime = \"\"\n    local primes_string_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_value = \"\"\n    local primes_string_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime = \"\"\n    local primes_string_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_value = \"\"\n    local primes_string_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime = \"\"\n    local primes_string_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_value = \"\"\n    local\
    \ primes_string_prime_prime_prime_prime_length = 1\n    local primes_string_prime_prime_prime_prime_prime\
    \ = \"\"\n    local primes_string_prime_prime_prime_prime_prime_index = 1\n  \
    \  local primes_string_prime_prime_prime_prime_prime_value = \"\"\n    local primes_string_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime = \"\"\n  \
    \  local primes_string_prime_prime_prime_prime_prime_prime_index = 1\n    local\
    \ primes_string_prime_prime_prime_prime_prime_prime_value = \"\"\n    local primes_string_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime = \"\"\
    \n    local primes_string_prime_prime_prime_prime_prime_prime_prime_index = 1\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime_value = \"\"\
    \n    local primes_string_prime_prime_prime_prime_prime_prime_prime_length = 1\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime = \"\"\
    \n    local primes_string_prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpekk4sqom.lua:68: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n        local\
    \ prime_words_len = #prime_words\n        local prime_words_order[prime_words_len]\
    \ = word\n        for j = 2, #prime_words_len do\n            if prime_words_len\
    \ % j == 0 then\n                local prime_word = prime_words_order[prime_words_len]\n\
    \                prime_words[prime_words_len] = prime_word\n                prime_words_len[prime_words_len]\
    \ = prime_words_len\n            end\n        end\n    end\n    local new_sentence\
    \ = sentence\n    for i = 1, #prime_words_len do\n        new_sentence = new_sentence:sub(1,#prime_words_len[i])\n\
    \        new_sentence = new_sentence:sub(1,#prime_words[i])\n    end\n    return\
    \ new_sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj_o6hqcv.lua:22: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    local prime_words_string = \"\"\n    local prime_words_index = 1\n    local\
    \ prime_words_index_length = 1\n    local prime_words_index_order = 1\n    local\
    \ prime_words_index_string = \"\"\n    local prime_words_index_string_index =\
    \ 1\n    local prime_words_index_string_length = 1\n    local prime_words_index_string_order\
    \ = 1\n    local prime_words_index_string_length_index = 1\n    local prime_words_index_string_order_length\
    \ = 1\n    local prime_words_index_string_length_index_length = 1\n    local prime_words_index_string_order_length_index_length\
    \ = 1\n    local prime_words_index_string_length_index_order_length = 1\n    local\
    \ prime_words_index_string_order_length_index_order_length = 1\n    local prime_words_index_string_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length_index_length\
    \ = 1\n    local prime_words_index_string_order_length_index_order_length_index_order_length_index_order_length_index_order_length_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpluzug19b.lua:63: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2wywwqi.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpr2wywwqi.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i+j) == sentence:sub(i,\
    \ i+j) then\n                prime_word[#prime_word+1] = sentence:sub(i, i+j)\n\
    \            end\n        end\n        table.insert(prime_words, table.concat(prime_word,\
    \ \" \"))\n    end\n    return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphs24ek_.lua:32:\
    \ expected: \"is\"\nactual: \"hi his his  his i his is his is  his is a his is\
    \ a  his is a t his is a te his is a tes his is a test his is a test his is a\
    \ test is is  is i is is is is  is is a is is a  is is a t is is a te is is a\
    \ tes is is a test is is a test is is a test is is a test s  s i s is s is  s\
    \ is a s is a  s is a t s is a te s is a tes s is a test s is a test s is a test\
    \ s is a test s is a test  i  is  is   is a  is a   is a t  is a te  is a tes\
    \  is a test  is a test  is a test  is a test  is a test  is a test is is  is\
    \ a is a  is a t is a te is a tes is a test is a test is a test is a test is a\
    \ test is a test is a test s  s a s a  s a t s a te s a tes s a test s a test\
    \ s a test s a test s a test s a test s a test s a test  a  a   a t  a te  a tes\
    \  a test  a test  a test  a test  a test  a test  a test  a test  a test a  a\
    \ t a te a tes a test a test a test a test a test a test a test a test a test\
    \ a test  t  te  tes  test  test  test  test  test  test  test  test  test  test\
    \  test te tes test test test test test test test test test test test test es\
    \ est est est est est est est est est est est est est st st st st st st st st\
    \ st st st st st st t t t t t t t t t t t t t t\"\nstack traceback:\n\t/tmp/tmpphs24ek_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.011 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1wr_rgg.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpc1wr_rgg.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_fxoiiu.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpz_fxoiiu.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and primes[j] ~= sentence:len()\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(primes, sentence:len() - 1)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #primes do\n        result =\
    \ result .. sentence:sub(1, primes[i])\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrbggqjf.lua:38:\
    \ expected: \"is\"\nactual: \"This is a tesThis is a tesThis is a tes\"\nstack\
    \ traceback:\n\t/tmp/tmpdrbggqjf.lua:38: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5294m_xb.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5294m_xb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i]:byte())\n        result = result ..\
    \ word\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcptvd1kd.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpcptvd1kd.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjr6vca9.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpjjr6vca9.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc76a51ou.lua:39:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpc76a51ou.lua:39: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n       \
    \ if prime_words[word] == nil then\n            prime_words[word] = true\n   \
    \         prime_words_length[#prime_words_length + 1] = #word\n            prime_words_order[#prime_words_order\
    \ + 1] = word\n        end\n    end\n    local prime_words_length = prime_words_length[1]\n\
    \    for i = 2, prime_words_length do\n        for j = 1, #prime_words_order do\n\
    \            if prime_words_length == prime_words_order[j] then\n            \
    \    prime_words[prime_words_order[j]] = nil\n                break\n        \
    \    end\n        end\n    end\n    local result = {}\n    for i = 1, #prime_words_order\
    \ do\n        if prime_words[prime_words_order[i]] then\n            result[#result\
    \ + 1] = prime_words_order[i]\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktis6i_n.lua:48:\
    \ expected: \"is\"\nactual: \"This ate\"\nstack traceback:\n\t/tmp/tmpktis6i_n.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzcok7xg.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpjzcok7xg.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n  \
    \              prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_words, sentence[i])\n        end\n    end\n  \
    \  return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpaooh9o.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxpaooh9o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb3obfx3.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmphb3obfx3.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiu9253uf.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsse_j12.lua:40:\
    \ expected: \"is\"\nactual: \"ThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpvsse_j12.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_str_len = 0\n    local prime_words_str_order\
    \ = 0\n    local prime_words_str_str = \"\"\n    local prime_words_str_str_len\
    \ = 0\n    local prime_words_str_str_order = 0\n    for i = 1, #sentence do\n\
    \        local word = sentence:sub(i,i)\n        if prime_words[word] == nil then\n\
    \            prime_words[word] = true\n            prime_words_len[#prime_words_len\
    \ + 1] = #word\n            prime_words_order[#prime_words_order + 1] = word\n\
    \            prime_words_str = prime_words_str .. \" \" .. word\n            prime_words_str_len\
    \ = prime_words_str_len + #word\n            prime_words_str_order = prime_words_str_order\
    \ + 1\n            prime_words_str_str = prime_words_str_str .. \" \" .. word\n\
    \            prime_words_str_str_len = prime_words_str_str_len + #word\n     \
    \       prime_words_str_str_order = prime_words_str_str_order + 1\n        end\n\
    \    end\n    local prime_words_len = prime_words_len[1]\n    local prime_words_order\
    \ = prime_words_order[1]\n    local prime_words_str = prime_words_str[1:prime_words_len]\n\
    \    local prime_words_str_len = prime_words_str_len[1:prime_words_str_len]\n\
    \    local prime_words_str_order = prime_words_str_order[1:prime_words_str_order]\n\
    \    local prime_words_str_str = prime_words_str_str[1:prime_words_str_str_len]\n\
    \    local prime_words_str_str_len = prime_words_str_str_len[1:prime_words_str_str_len]\n\
    \    local prime_words_str_str_order = prime_words_str_str_order[1:prime_words_str_str_order]\n\
    \    for i = 2, prime_words_str_str_order do\n        if prime_words_str_str_len[i]\
    \ ~= prime_words_str_str_order[i] then\n            return nil\n        end\n\
    \    end\n    return prime_words_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpuliuz9_g.lua:41: ']' expected near ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_str2 = {}\n    local\
    \ prime_words_str3 = {}\n    local prime_words_str4 = {}\n    local prime_words_str5\
    \ = {}\n    local prime_words_str6 = {}\n    local prime_words_str7 = {}\n   \
    \ local prime_words_str8 = {}\n    local prime_words_str9 = {}\n    local prime_words_str10\
    \ = {}\n    local prime_words_str11 = {}\n    local prime_words_str12 = {}\n \
    \   local prime_words_str13 = {}\n    local prime_words_str14 = {}\n    local\
    \ prime_words_str15 = {}\n    local prime_words_str16 = {}\n    local prime_words_str17\
    \ = {}\n    local prime_words_str18 = {}\n    local prime_words_str19 = {}\n \
    \   local prime_words_str20 = {}\n    local prime_words_str21 = {}\n    local\
    \ prime_words_str22 = {}\n    local prime_words_str23 = {}\n    local prime_words_str24\
    \ = {}\n    local prime_words_str25 = {}\n    local prime_words_str26 = {}\n \
    \   local prime_words_str27 = {}\n    local prime_words_str28 = {}\n    local\
    \ prime_words_str29 = {}\n    local prime_words_str30 = {}\n    local prime_words_str31\
    \ = {}\n    local prime_words_str32 = {}\n    local prime_words_str33 = {}\n \
    \   local prime_words_str34 = {}\n    local prime_words_str35 = {}\n    local\
    \ prime_words_str36 = {}\n    local prime_words_str37 = {}\n    local prime_words_str38\
    \ = {}\n    local prime_words_str39 = {}\n    local prime_words_str40 = {}\n \
    \   local prime_words_str41 = {}\n    local prime_words_str42 = {}\n    local\
    \ prime_words_str43 = {}\n    local prime_words_str44 = {}\n    local prime_words_str45\
    \ = {}\n    local prime_words_str46 = {}\n    local prime_words_str47 = {}\n \
    \   local prime_words_str48 = {}\n    local prime_words_str49 = {}\n    local\
    \ prime_words_str50 = {}\n    local prime_words_str51 = {}\n    local prime_words_str52\
    \ = {}\n    local prime_words_str53 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvtt56ii5.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence, 1 do\n        local prime = true\n        for\
    \ j = 2, #prime_numbers, 1 do\n            if i % prime_numbers[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(prime_numbers, i)\n \
    \       end\n    end\n    local result = {}\n    for i = 2, #prime_numbers, 1\
    \ do\n        local prime_number = prime_numbers[i]\n        for j = 2, #sentence,\
    \ 1 do\n            if sentence:sub(i, i + 1) ~= ' ' then\n                local\
    \ word = sentence:sub(i, i + 1)\n                table.insert(result, word)\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmpxmcoy.lua:45:\
    \ expected: \"is\"\nactual: \"hihihihihihihihihihihihihiisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s  i i i i i i i i i i i i iisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s \"\nstack traceback:\n\t/tmp/tmpjmpxmcoy.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, i)\n        local new_word = word:gsub(\"%a+\", \"\"\
    )\n        if new_word ~= \"\" then\n            result = result .. new_word\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbecjbgeq.lua:43:\
    \ expected: \"is\"\nactual: \"   \"\nstack traceback:\n\t/tmp/tmpbecjbgeq.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        result = result .. \" \" .. word\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5qt6sq6.lua:40:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpr5qt6sq6.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_index2 = {}\n    local prime_words_index3 = {}\n\
    \    local prime_words_index4 = {}\n    local prime_words_index5 = {}\n    local\
    \ prime_words_index6 = {}\n    local prime_words_index7 = {}\n    local prime_words_index8\
    \ = {}\n    local prime_words_index9 = {}\n    local prime_words_index10 = {}\n\
    \    local prime_words_index11 = {}\n    local prime_words_index12 = {}\n    local\
    \ prime_words_index13 = {}\n    local prime_words_index14 = {}\n    local prime_words_index15\
    \ = {}\n    local prime_words_index16 = {}\n    local prime_words_index17 = {}\n\
    \    local prime_words_index18 = {}\n    local prime_words_index19 = {}\n    local\
    \ prime_words_index20 = {}\n    local prime_words_index21 = {}\n    local prime_words_index22\
    \ = {}\n    local prime_words_index23 = {}\n    local prime_words_index24 = {}\n\
    \    local prime_words_index25 = {}\n    local prime_words_index26 = {}\n    local\
    \ prime_words_index27 = {}\n    local prime_words_index28 = {}\n    local prime_words_index29\
    \ = {}\n    local prime_words_index30 = {}\n    local prime_words_index31 = {}\n\
    \    local prime_words_index32 = {}\n    local prime_words_index33 = {}\n    local\
    \ prime_words_index34 = {}\n    local prime_words_index35 = {}\n    local prime_words_index36\
    \ = {}\n    local prime_words_index37 = {}\n    local prime_words_index38 = {}\n\
    \    local prime_words_index39 = {}\n    local prime_words_index40 = {}\n    local\
    \ prime_words_index41 = {}\n    local prime_words_index42 = {}\n    local prime_words_index43\
    \ = {}\n    local prime_words_index44 = {}\n    local prime_words_index45 = {}\n\
    \    local prime_words_index46 = {}\n    local prime_words_index47 = {}\n    local\
    \ prime_words_index48 = {}\n    local prime_words_index49 = {}\n    local prime_words_index50\
    \ = {}\n    local prime_words_index51 = {}\n    local prime_words_index52 = {}\n\
    \    local prime_words_index53 = {}\n    local prime_words_index54\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptvgogt1s.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    for i = 1, #sentence do\n        local prime\
    \ = true\n        for j = 1, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            primes_count = primes_count+1\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. primes[i]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqxridce.lua:41:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpuqxridce.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_string = \"\"\n    local words = sentence:gmatch(\"\
    [%a]+\")\n    for _, word in pairs(words) do\n        local prime = true\n   \
    \     for i = 2, #prime_numbers + 1 do\n            if word:len() ~= prime_numbers[i]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_numbers, word:len())\n\
    \            prime_numbers_string = prime_numbers_string .. \" \" .. word\n  \
    \      end\n    end\n    return prime_numbers_string\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimm\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7e54ktz_.lua:63: unfinished string near '\"lets go for swimm'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_numbers\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_numbers\
    \ do\n      if i % prime_numbers[j] == 0 then\n        prime = false\n       \
    \ break\n      end\n    end\n    if prime then\n      table.insert(prime_numbers,\
    \ i)\n    end\n  end\n  local result = \"\"\n  for i = 1, #prime_numbers do\n\
    \    local word = sentence:sub(1, prime_numbers[i])\n    local new_word = word:reverse():gsub(\"\
    (.)\", function (c)\n      return string.format(\"%1\" .. tostring(c:byte()) ..\
    \ \"%s\", tostring(c:byte()))\n    end)\n    result = result .. new_word\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22fzc21w.lua:33:\
    \ invalid format (width or precision too long)\nstack traceback:\n\t/tmp/tmp22fzc21w.lua:33:\
    \ in function </tmp/tmp22fzc21w.lua:32>\n\t[C]: in function 'gsub'\n\t/tmp/tmp22fzc21w.lua:32:\
    \ in function 'candidate'\n\t/tmp/tmp22fzc21w.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_string = \"\"\n    local prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_string = \"\"\n    local prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length =\
    \ 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_length_prime_numbers_string_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0b0ve_t9.lua:43: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local prime_words = {}\n  local prime_words_len = {}\n  for i = 1, #sentence\
    \ do\n    local word = sentence:sub(i,i)\n    local prime = #word\n    if prime\
    \ == 0 then\n      primes[#primes+1] = word\n      prime_words[#prime_words+1]\
    \ = word\n      prime_words_len[#prime_words_len+1] = word\n    else\n      local\
    \ prime_found = false\n      for j = 1, #primes do\n        if primes[j] == prime\
    \ then\n          prime_found = true\n          break\n        end\n      end\n\
    \      if not prime_found then\n        primes[#primes+1] = word\n        prime_words[#prime_words+1]\
    \ = word\n        prime_words_len[#prime_words_len+1] = word\n      end\n    end\n\
    \  end\n  local new_sentence = sentence\n  for i = 1, #primes do\n    new_sentence\
    \ = new_sentence:sub(1,prime_words_len[i]-1)\n    new_sentence = new_sentence:sub(1,primes[i])\n\
    \    new_sentence = new_sentence:sub(1,1)\n  end\n  return new_sentence\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8jf6v6m.lua:43:\
    \ attempt to perform arithmetic on field '?' (a string value)\nstack traceback:\n\
    \t/tmp/tmph8jf6v6m.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if i % prime_words[j] == 0 then\n        \
    \        prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_words, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #prime_words do\n        result\
    \ = result .. \" \" .. sentence:sub(1, prime_words[i])\n    end\n    return result:sub(2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowatrxh_.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpowatrxh_.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_length = 1\n    local primes_index\
    \ = 1\n    local primes_string = \"\"\n    local primes_string_length = 1\n  \
    \  local primes_string_index = 1\n    local primes_string_prime = \"\"\n    local\
    \ primes_string_prime_index = 1\n    local primes_string_prime_length = 1\n  \
    \  local primes_string_prime_prime = \"\"\n    local primes_string_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_length = 1\n    local primes_string_prime_prime_prime\
    \ = \"\"\n    local primes_string_prime_prime_prime_index = 1\n    local primes_string_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime = \"\"\n    local primes_string_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_length = 1\n    local primes_string_prime_prime_prime_prime_prime\
    \ = \"\"\n    local primes_string_prime_prime_prime_prime_prime_index = 1\n  \
    \  local primes_string_prime_prime_prime_prime_prime_length = 1\n    local primes_string_prime_prime_prime_prime_prime_prime\
    \ = \"\"\n    local primes_string_prime_prime_prime_prime_prime_prime_index =\
    \ 1\n    local primes_string_prime_prime_prime_prime_prime_prime_length = 1\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime = \"\"\n  \
    \  local primes_string_prime_prime_prime_prime_prime_prime_prime_index = 1\n \
    \   local primes_string_prime_prime_prime_prime_prime_prime_prime_length = 1\n\
    \    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime = \"\"\
    \n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = \"\"\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 1\n    local primes_string_prime_prime_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 1\n    local primes_string_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdyvnf420.lua:64: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3sr0e40_.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #prime_numbers do\n        result\
    \ = result .. \" \" .. sentence:sub(1, prime_numbers[i])\n    end\n    return\
    \ result:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9at_w8x.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmps9at_w8x.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    local prime_words_string = \"\"\n    local prime_words_string_length = 0\n\
    \    local prime_words_string_order = 0\n    local prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_length = {}\n    local prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string = \"\"\n    local prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_order = 0\n    local prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_length = {}\n\
    \    local prime_words_string_prime_words_string_prime_words_order = {}\n    local\
    \ prime_words_string_prime_words_string_prime_words_string = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_length\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_length\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5o4fdplb.lua:61: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_string = \"\"\n    local prime_words_string2 = \"\"\n    local\
    \ prime_words_string3 = \"\"\n    local prime_words_string4 = \"\"\n    local\
    \ prime_words_string5 = \"\"\n    local prime_words_string6 = \"\"\n    local\
    \ prime_words_string7 = \"\"\n    local prime_words_string8 = \"\"\n    local\
    \ prime_words_string9 = \"\"\n    local prime_words_string10 = \"\"\n    local\
    \ prime_words_string11 = \"\"\n    local prime_words_string12 = \"\"\n    local\
    \ prime_words_string13 = \"\"\n    local prime_words_string14 = \"\"\n    local\
    \ prime_words_string15 = \"\"\n    local prime_words_string16 = \"\"\n    local\
    \ prime_words_string17 = \"\"\n    local prime_words_string18 = \"\"\n    local\
    \ prime_words_string19 = \"\"\n    local prime_words_string20 = \"\"\n    local\
    \ prime_words_string21 = \"\"\n    local prime_words_string22 = \"\"\n    local\
    \ prime_words_string23 = \"\"\n    local prime_words_string24 = \"\"\n    local\
    \ prime_words_string25 = \"\"\n    local prime_words_string26 = \"\"\n    local\
    \ prime_words_string27 = \"\"\n    local prime_words_string28 = \"\"\n    local\
    \ prime_words_string29 = \"\"\n    local prime_words_string30 = \"\"\n    local\
    \ prime_words_string31 = \"\"\n    local prime_words_string32 = \"\"\n    local\
    \ prime_words_string33 = \"\"\n    local prime_words_string34 = \"\"\n    local\
    \ prime_words_string35 = \"\"\n    local prime_words_string36 = \"\"\n    local\
    \ prime_words_string37 = \"\"\n    local prime_words_string38 = \"\"\n    local\
    \ prime_words_string39 = \"\"\n    local prime_words_string40 = \"\"\n    local\
    \ prime_words_string41 = \"\"\n    local prime_words_string42 = \"\"\n    local\
    \ prime_words_string43 = \"\"\n    local prime_words_string44 = \"\"\n    local\
    \ prime_words_string45 = \"\"\n    local prime_words_string46 = \"\"\n    local\
    \ prime_words_string47 = \"\"\n    local prime_words_string48 = \"\"\n    local\
    \ prime_words_string49 = \"\"\n    local prime_words_string50 = \"\"\n    local\
    \ prime_words_string51 = \"\"\n    local prime_words_string52 = \"\"\n    local\
    \ prime_words_string53 = \"\"\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpswmvd2db.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_index = {}\n    local prime_numbers_length = {}\n\
    \    local prime_numbers_string = \"\"\n    local prime_numbers_string_index =\
    \ 0\n    local prime_numbers_string_length = 0\n    local prime_numbers_string_prime\
    \ = \"\"\n    local prime_numbers_string_prime_index = 0\n    local prime_numbers_string_prime_length\
    \ = 0\n    local prime_numbers_string_prime_prime = \"\"\n    local prime_numbers_string_prime_prime_index\
    \ = 0\n    local prime_numbers_string_prime_prime_length = 0\n    local prime_numbers_string_prime_prime_prime\
    \ = \"\"\n    local prime_numbers_string_prime_prime_prime_index = 0\n    local\
    \ prime_numbers_string_prime_prime_prime_length = 0\n    local prime_numbers_string_prime_prime_prime_prime\
    \ = \"\"\n    local prime_numbers_string_prime_prime_prime_prime_index = 0\n \
    \   local prime_numbers_string_prime_prime_prime_prime_length = 0\n    local prime_numbers_string_prime_prime_prime_prime_prime\
    \ = \"\"\n    local prime_numbers_string_prime_prime_prime_prime_prime_index =\
    \ 0\n    local prime_numbers_string_prime_prime_prime_prime_prime_length = 0\n\
    \    local prime_numbers_string_prime_prime_prime_prime_prime_prime = \"\"\n \
    \   local prime_numbers_string_prime_prime_prime_prime_prime_prime_index = 0\n\
    \    local prime_numbers_string_prime_prime_prime_prime_prime_prime_length = 0\n\
    \    local prime_numbers_string_prime_prime_prime_prime_prime_prime_prime = \"\
    \"\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_index =\
    \ 0\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_length\
    \ = 0\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_prime\
    \ = \"\"\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_prime_index\
    \ = 0\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_prime_length\
    \ = 0\n    local prime_numbers_string_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = \"\"\n    local prime_numbers_string_prime_prime_prime\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz_xnthv7.lua:61: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_str2 = \"\"\n    local prime_words_str3\
    \ = \"\"\n    local prime_words_str4 = \"\"\n    local prime_words_str5 = \"\"\
    \n    local prime_words_str6 = \"\"\n    local prime_words_str7 = \"\"\n    local\
    \ prime_words_str8 = \"\"\n    local prime_words_str9 = \"\"\n    local prime_words_str10\
    \ = \"\"\n    local prime_words_str11 = \"\"\n    local prime_words_str12 = \"\
    \"\n    local prime_words_str13 = \"\"\n    local prime_words_str14 = \"\"\n \
    \   local prime_words_str15 = \"\"\n    local prime_words_str16 = \"\"\n    local\
    \ prime_words_str17 = \"\"\n    local prime_words_str18 = \"\"\n    local prime_words_str19\
    \ = \"\"\n    local prime_words_str20 = \"\"\n    local prime_words_str21 = \"\
    \"\n    local prime_words_str22 = \"\"\n    local prime_words_str23 = \"\"\n \
    \   local prime_words_str24 = \"\"\n    local prime_words_str25 = \"\"\n    local\
    \ prime_words_str26 = \"\"\n    local prime_words_str27 = \"\"\n    local prime_words_str28\
    \ = \"\"\n    local prime_words_str29 = \"\"\n    local prime_words_str30 = \"\
    \"\n    local prime_words_str31 = \"\"\n    local prime_words_str32 = \"\"\n \
    \   local prime_words_str33 = \"\"\n    local prime_words_str34 = \"\"\n    local\
    \ prime_words_str35 = \"\"\n    local prime_words_str36 = \"\"\n    local prime_words_str37\
    \ = \"\"\n    local prime_words_str38 = \"\"\n    local prime_words_str39 = \"\
    \"\n    local prime_words_str40 = \"\"\n    local prime_words_str41 = \"\"\n \
    \   local prime_words_str42 = \"\"\n    local prime_words_str43 = \"\"\n    local\
    \ prime_words_str44 = \"\"\n    local prime_words_str45 = \"\"\n    local prime_words_str46\
    \ = \"\"\n    local prime_words_str47 = \"\"\n    local prime_words_str48 = \"\
    \"\n    local prime_words_str49 = \"\"\n    local prime_words_str50 = \"\"\n \
    \   local prime_words_str51 = \"\"\n    local prime_words_str52 = \"\"\n    local\
    \ prime_words_str53 = \"\"\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgq69qqxd.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_index = {}\n\
    \    local prime_words_index2 = 0\n    local prime_words_index3 = 0\n    local\
    \ prime_words_index4 = 0\n    local prime_words_index5 = 0\n    local prime_words_index6\
    \ = 0\n    local prime_words_index7 = 0\n    local prime_words_index8 = 0\n  \
    \  local prime_words_index9 = 0\n    local prime_words_index10 = 0\n    local\
    \ prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local prime_words_index13\
    \ = 0\n    local prime_words_index14 = 0\n    local prime_words_index15 = 0\n\
    \    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n    local\
    \ prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local prime_words_index20\
    \ = 0\n    local prime_words_index21 = 0\n    local prime_words_index22 = 0\n\
    \    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n    local\
    \ prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local prime_words_index27\
    \ = 0\n    local prime_words_index28 = 0\n    local prime_words_index29 = 0\n\
    \    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n    local\
    \ prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local prime_words_index34\
    \ = 0\n    local prime_words_index35 = 0\n    local prime_words_index36 = 0\n\
    \    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n    local\
    \ prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local prime_words_index41\
    \ = 0\n    local prime_words_index42 = 0\n    local prime_words_index43 = 0\n\
    \    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n    local\
    \ prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local prime_words_index48\
    \ = 0\n    local prime_words_index49 = 0\n    local prime_words_index50 = 0\n\
    \    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n    local\
    \ prime_words_index53 = 0\n    local prime_words_index54 = 0\n    local prime_words_index55\
    \ = 0\n    local prime\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmph4dauax9.lua:87: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= \" \" then\n \
    \               prime_word[#prime_word + 1] = sentence:sub(i, i + 1)\n       \
    \     end\n        end\n        table.insert(prime_words, #prime_word, prime_word)\n\
    \    end\n    local result = {}\n    for i = 2, #prime_words do\n        local\
    \ prime_word = prime_words[i]\n        for j = 1, #prime_word do\n           \
    \ local prime_word_length = prime_word[j]\n            for k = 1, #prime_words\
    \ do\n                local prime_word_2 = prime_words[k]\n                if\
    \ prime_word_length == prime_word_2[1] then\n                    table.insert(result,\
    \ prime_word_2[2])\n                end\n            end\n        end\n    end\n\
    \    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowsqzo8w.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpowsqzo8w.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklym93bt.lua:39:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpklym93bt.lua:39: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk598ca93.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpk598ca93.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        local rest = sentence:sub(primes[i]+1)\n        result = result .. \"\
    \ \" .. word\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2if4qi2.lua:41:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpj2if4qi2.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm__z42_j.lua:39:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpm__z42_j.lua:39: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local prime = primes[i]\n        for\
    \ j = 2, #sentence do\n            if sentence:sub(i, i+prime) == sentence:sub(j,\
    \ j+prime) then\n                table.insert(result, sentence:sub(i, i+prime))\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdvb21mv.lua:45:\
    \ expected: \"is\"\nactual: \"his is iss is a is a teis a tests a test\"\nstack\
    \ traceback:\n\t/tmp/tmpfdvb21mv.lua:45: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_index = {}\n    for i = 1,\
    \ #sentence do\n        local word = sentence:sub(i, i)\n        if primes[word]\
    \ ~= nil then\n            primes[word] = nil\n            primes_count = primes_count\
    \ - 1\n        else\n            primes[word] = true\n            primes_count\
    \ = primes_count + 1\n        end\n    end\n    for i = 1, #primes do\n      \
    \  if primes[i] then\n            primes_index[i] = i\n        end\n    end\n\
    \    local result = \"\"\n    for i = 1, #sentence do\n        local word = sentence:sub(i,\
    \ i)\n        if primes[word] ~= nil then\n            local index = primes_index[word]\n\
    \            if index == nil then\n                index = #primes\n         \
    \       primes[index] = true\n            end\n            for j = 1, index do\n\
    \                result = result .. word\n            end\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_fsnq5x.lua:54:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd_fsnq5x.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy73lccb.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpiy73lccb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbjd30ym.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpcbjd30ym.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9bz3is7.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpz9bz3is7.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if i % primes[j] == 0 then\n        prime = false\n        break\n    \
    \  end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n \
    \ end\n  local result = \"\"\n  for i = 2, #primes do\n    local word = sentence:sub(1,\
    \ primes[i])\n    local new_word = word:gsub(\"%a+\", function(c) return c:lower()\
    \ end)\n    result = result .. new_word\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzsbicz5.lua:41:\
    \ expected: \"is\"\nactual: \"thithisthis this isthis is a tthis is a tes\"\n\
    stack traceback:\n\t/tmp/tmppzsbicz5.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvyx6bc3.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpdvyx6bc3.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_index_count\
    \ = 0\n    local primes_string = \"\"\n    local primes_string_count = 0\n   \
    \ local primes_string_length = 0\n    local primes_string_length_count = 0\n \
    \   local primes_string_length_index = 0\n    local primes_string_length_index_count\
    \ = 0\n    local primes_string_length_string = \"\"\n    local primes_string_length_string_count\
    \ = 0\n    local primes_string_length_string_index = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsry4dnmx.lua:83: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime_word = {}\n    for j = 2, #prime_words\
    \ do\n      if i % prime_words[j] == 0 then\n        prime_word[j] = true\n  \
    \    end\n    end\n    prime_words[#prime_words + 1] = prime_word\n  end\n  local\
    \ new_sentence = sentence\n  for i = 1, #prime_words do\n    new_sentence = string.gsub(\n\
    \      new_sentence,\n      \"%a^%d\",\n      function(word)\n        return prime_words[i][word]\n\
    \      end)\n  end\n  return new_sentence\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4ov3uf_.lua:20:\
    \ attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\
    \t/tmp/tmpz4ov3uf_.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i+j) ~= primes[j] then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(i, i+primes[i]))\n    end\n    return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_71sem_6.lua:39:\
    \ expected: \"is\"\nactual: \"Thihis \"\nstack traceback:\n\t/tmp/tmp_71sem_6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n            table.insert(prime_words_len, 1)\n        else\n \
    \           local prime_words_len = prime_words_len + 1\n            for j = 2,\
    \ #prime_words do\n                if sentence[i] == prime_words[j] then\n   \
    \                 prime_words_len = prime_words_len - 1\n                    break\n\
    \                end\n            end\n        end\n    end\n    return table.concat(prime_words,\
    \ \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpginnf0xx.lua:47:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpginnf0xx.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if i % primes[j] == 0 then\n        prime = false\n        break\n    \
    \  end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n \
    \ end\n  local result = \"\"\n  for i = 1, #primes do\n    result = result ..\
    \ \" \" .. sentence:sub(1, primes[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0crhugy.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpj0crhugy.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i]:len() - 1)\n        local new_word =\
    \ word:reverse():gsub(\"(.)\", function (c)\n            return string.format(\"\
    %1$s\", c)\n        end)\n        result = result .. new_word\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjw4ospv4.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpjw4ospv4.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = \"\"\n    local prime_words_str2 = \"\"\n\
    \    local prime_words_str3 = \"\"\n    local prime_words_str4 = \"\"\n    local\
    \ prime_words_str5 = \"\"\n    local prime_words_str6 = \"\"\n    local prime_words_str7\
    \ = \"\"\n    local prime_words_str8 = \"\"\n    local prime_words_str9 = \"\"\
    \n    local prime_words_str10 = \"\"\n    local prime_words_str11 = \"\"\n   \
    \ local prime_words_str12 = \"\"\n    local prime_words_str13 = \"\"\n    local\
    \ prime_words_str14 = \"\"\n    local prime_words_str15 = \"\"\n    local prime_words_str16\
    \ = \"\"\n    local prime_words_str17 = \"\"\n    local prime_words_str18 = \"\
    \"\n    local prime_words_str19 = \"\"\n    local prime_words_str20 = \"\"\n \
    \   local prime_words_str21 = \"\"\n    local prime_words_str22 = \"\"\n    local\
    \ prime_words_str23 = \"\"\n    local prime_words_str24 = \"\"\n    local prime_words_str25\
    \ = \"\"\n    local prime_words_str26 = \"\"\n    local prime_words_str27 = \"\
    \"\n    local prime_words_str28 = \"\"\n    local prime_words_str29 = \"\"\n \
    \   local prime_words_str30 = \"\"\n    local prime_words_str31 = \"\"\n    local\
    \ prime_words_str32 = \"\"\n    local prime_words_str33 = \"\"\n    local prime_words_str34\
    \ = \"\"\n    local prime_words_str35 = \"\"\n    local prime_words_str36 = \"\
    \"\n    local prime_words_str37 = \"\"\n    local prime_words_str38 = \"\"\n \
    \   local prime_words_str39 = \"\"\n    local prime_words_str40 = \"\"\n    local\
    \ prime_words_str41 = \"\"\n    local prime_words_str42 = \"\"\n    local prime_words_str43\
    \ = \"\"\n    local prime_words_str44 = \"\"\n    local prime_words_str45 = \"\
    \"\n    local prime_words_str46 = \"\"\n    local prime_words_str47 = \"\"\n \
    \   local prime_words_str48 = \"\"\n    local prime_words_str49 = \"\"\n    local\
    \ prime_words_str50 = \"\"\n    local prime_words_str51 = \"\"\n    local prime_words_str52\
    \ = \"\"\n    local prime_words_str53 = \"\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgc5urdkq.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_str_len = 0\n    local prime_words_str_order\
    \ = 0\n    local prime_words_str_prime = 0\n    local prime_words_str_prime_len\
    \ = 0\n    local prime_words_str_prime_order = 0\n    local prime_words_str_prime_prime\
    \ = 0\n    local prime_words_str_prime_prime_len = 0\n    local prime_words_str_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime = 0\n    local prime_words_str_prime_prime_prime_len\
    \ = 0\n    local prime_words_str_prime_prime_prime_order = 0\n    local prime_words_str_prime_prime_prime_prime\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime = 0\n    local\
    \ prime_words_str_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime = 0\n    local\
    \ prime_words_str_prime_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime_prime = 0\n   \
    \ local prime_words_str_prime_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime_prime = 0\n   \
    \ local prime_words_str_prime_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime_prime = 0\n   \
    \ local prime_words_str_prime_prime_prime_prime_prime_len = 0\n    local prime_words_str_prime_prime_prime_prime_prime_order\
    \ = 0\n    local prime_words_str_prime_prime_prime_prime_prime_prime = 0\n   \
    \ local prime_words_str_prime_prime_prime_prime_prime_len\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppmu22pm0.lua:64: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    local words\
    \ = sentence:gmatch(\"[%a]+\")\n    for _, word in pairs(words) do\n        local\
    \ prime = true\n        for i = 2, #primes_string do\n            if primes_string[i]\
    \ == word:sub(1, 1) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = word\n            primes_count = primes_count + 1\n        end\n    end\n\
    \    for i = 2, #primes_string do\n        if primes_string[i] == words[#words]:sub(1,\
    \ 1) then\n            primes[#primes + 1] = words[#words]\n            primes_count\
    \ = primes_count + 1\n        end\n    end\n    if primes_count == 1 then\n  \
    \      return primes[1]\n    else\n        return primes\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv1x2e0_.lua:20:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmprv1x2e0_.lua:20: in function 'candidate'\n\t/tmp/tmprv1x2e0_.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if #prime_words[j] == i then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(prime_words, i)\n \
    \   end\n  end\n  local result = \"\"\n  for i = 2, #prime_words do\n    local\
    \ word = sentence:sub(1, prime_words[i])\n    local rest = sentence:sub(prime_words[i]\
    \ + 1, #sentence)\n    result = result .. \" \" .. word\n  end\n  return result:sub(1,\
    \ #result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bpnihee.lua:20:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp0bpnihee.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqwjsrjz.lua:40:\
    \ expected: \"is\"\nactual: \"ThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpiqwjsrjz.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    local words\
    \ = sentence:gmatch(\"[%a]+\")\n    for i = 1, #words do\n        local prime\
    \ = true\n        for j = 1, #primes do\n            if primes[j] == words[i]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            primes[#primes + 1] = words[i]\n\
    \            primes_count = #primes\n        end\n    end\n    for i = 1, primes_count\
    \ do\n        primes_string = primes_string .. \" \" .. primes[i]\n    end\n \
    \   return primes_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbli_7ad.lua:20:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpfbli_7ad.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if prime_words[j] == sentence[i] then\n        prime = false\n   \
    \     break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ sentence[i])\n    end\n  end\n  local result = \"\"\n  for i = 1, #prime_words\
    \ do\n    result = result .. \" \" .. prime_words[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvik6ldie.lua:39:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvik6ldie.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_numbers\
    \ = {}\n  local prime_numbers_count = 0\n  local prime_numbers_index = {}\n  local\
    \ prime_numbers_index_count = 0\n  local prime_numbers_string = \"\"\n  local\
    \ prime_numbers_string_count = 0\n  local prime_numbers_string_length = 0\n  local\
    \ prime_numbers_string_length_count = 0\n  local prime_numbers_string_length_index\
    \ = 0\n  local prime_numbers_string_length_index_count = 0\n  local prime_numbers_string_length_string\
    \ = \"\"\n  local prime_numbers_string_length_string_count = 0\n  local prime_numbers_string_length_string_length\
    \ = 0\n  local prime_numbers_string_length_string_length_count = 0\n  local prime_numbers_string_length_string_length_index\
    \ = 0\n  local prime_numbers_string_length_string_length_index_count = 0\n  local\
    \ prime_numbers_string_length_string_length_string = \"\"\n  local prime_numbers_string_length_string_length_string_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length = 0\n \
    \ local prime_numbers_string_length_string_length_string_length_count = 0\n  local\
    \ prime_numbers_string_length_string_length_string_length_index = 0\n  local prime_numbers_string_length_string_length_string_length_index_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string\
    \ = \"\"\n  local prime_numbers_string_length_string_length_string_length_string_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_index_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n  local prime_numbers_string_length_string_length_string_length_string_length_string_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length_index_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n  local prime_numbers_string_length_string_length_string_length_string_length_string_length_string_count\
    \ = 0\n  local prime_numbers_string_length_string_length_string_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdelfukfh.lua:66: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]:sub(1)))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflvhjuls.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpflvhjuls.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_index2 = 0\n    local prime_words_index3 = 0\n \
    \   local prime_words_index4 = 0\n    local prime_words_index5 = 0\n    local\
    \ prime_words_index6 = 0\n    local prime_words_index7 = 0\n    local prime_words_index8\
    \ = 0\n    local prime_words_index9 = 0\n    local prime_words_index10 = 0\n \
    \   local prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local\
    \ prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local prime_words_index15\
    \ = 0\n    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n\
    \    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local\
    \ prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_index22\
    \ = 0\n    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n\
    \    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local\
    \ prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local prime_words_index29\
    \ = 0\n    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n\
    \    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local\
    \ prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local prime_words_index36\
    \ = 0\n    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n\
    \    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local\
    \ prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local prime_words_index43\
    \ = 0\n    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n\
    \    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local\
    \ prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local prime_words_index50\
    \ = 0\n    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n\
    \    local prime_words_index53 = 0\n    local prime_words_index54 = 0\n    local\
    \ prime_words_index55\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7b87rjtr.lua:87: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n        if\
    \ prime_words[word] == nil then\n            prime_words[word] = true\n      \
    \      prime_words_len[#prime_words + 1] = #word\n            prime_words_order[#prime_words_order\
    \ + 1] = word\n        end\n    end\n    local result = \"\"\n    for i = 1, #prime_words_len\
    \ do\n        local word = prime_words_order[i]\n        local prime_words_len\
    \ = prime_words_len[i]\n        for j = 1, prime_words_len do\n            result\
    \ = result .. word\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputw7pvx7.lua:41:\
    \ expected: \"is\"\nactual: \"T\"\nstack traceback:\n\t/tmp/tmputw7pvx7.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_len_count = 0\n    local\
    \ prime_words_order_count = 0\n    for word in string.gmatch(sentence, \"([^ ]+)\"\
    ) do\n        local prime_words_len = #word\n        local prime_words_order_count\
    \ = #prime_words_order\n        local prime_words_str = prime_words_str .. \"\
    \ \" .. word\n        if prime_words_len == prime_words_len then\n           \
    \ prime_words[prime_words_len] = word\n            prime_words_len[prime_words_len]\
    \ = prime_words_len\n            prime_words_order[prime_words_order_count] =\
    \ prime_words_order_count\n            prime_words_order_count = prime_words_order_count\
    \ + 1\n        end\n    end\n    for prime_words_len_count = 2, #prime_words do\n\
    \        for prime_words_order_count = prime_words_order_count + 1, #prime_words_order\
    \ do\n            if prime_words_len[prime_words_len_count] == prime_words_len[prime_words_len_count-1]\
    \ then\n                local prime_words_str = prime_words_str .. \" \" .. prime_words[prime_words_len_count]\n\
    \                prime_words[prime_words_len_count] = nil\n                prime_words_len[prime_words_len_count]\
    \ = nil\n                prime_words_order[prime_words_order_count] = nil\n  \
    \              prime_words_order_count = prime_words_order_count - 1\n       \
    \         break\n            end\n        end\n    end\n    return prime_words_str\n\
    end\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpra2qn57c.lua:61: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence, 1 do\n        local prime = true\n        for\
    \ j = 2, #prime_numbers, 1 do\n            if i % prime_numbers[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(prime_numbers, i)\n \
    \       end\n    end\n    local result = \"\"\n    for i = 1, #prime_numbers,\
    \ 1 do\n        local word = sentence:sub(1, prime_numbers[i])\n        local\
    \ new_word = word:gsub(\"%w+\", \" \")\n        result = result .. new_word\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylk0h0yj.lua:41:\
    \ expected: \"is\"\nactual: \"                      \"\nstack traceback:\n\t/tmp/tmpylk0h0yj.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            primes_count = primes_count+1\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, primes_count do\n        result = result .. \" \" ..\
    \ sentence[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprllcsd_i.lua:33:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmprllcsd_i.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirppq659.lua:40:\
    \ expected: \"is\"\nactual: \"ThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpirppq659.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n\
    \        if prime_words[word] == nil then\n            prime_words[word] = true\n\
    \        end\n    end\n    local result = \"\"\n    for i = 1, #sentence do\n\
    \        if prime_words[sentence:sub(i, i)] then\n            result = result\
    \ .. sentence:sub(i, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tmn13nb.lua:35:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp7tmn13nb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_string = \"\"\n    local prime_words_string2 = \"\"\n    local\
    \ prime_words_string3 = \"\"\n    local prime_words_string4 = \"\"\n    local\
    \ prime_words_string5 = \"\"\n    local prime_words_string6 = \"\"\n    local\
    \ prime_words_string7 = \"\"\n    local prime_words_string8 = \"\"\n    local\
    \ prime_words_string9 = \"\"\n    local prime_words_string10 = \"\"\n    local\
    \ prime_words_string11 = \"\"\n    local prime_words_string12 = \"\"\n    local\
    \ prime_words_string13 = \"\"\n    local prime_words_string14 = \"\"\n    local\
    \ prime_words_string15 = \"\"\n    local prime_words_string16 = \"\"\n    local\
    \ prime_words_string17 = \"\"\n    local prime_words_string18 = \"\"\n    local\
    \ prime_words_string19 = \"\"\n    local prime_words_string20 = \"\"\n    local\
    \ prime_words_string21 = \"\"\n    local prime_words_string22 = \"\"\n    local\
    \ prime_words_string23 = \"\"\n    local prime_words_string24 = \"\"\n    local\
    \ prime_words_string25 = \"\"\n    local prime_words_string26 = \"\"\n    local\
    \ prime_words_string27 = \"\"\n    local prime_words_string28 = \"\"\n    local\
    \ prime_words_string29 = \"\"\n    local prime_words_string30 = \"\"\n    local\
    \ prime_words_string31 = \"\"\n    local prime_words_string32 = \"\"\n    local\
    \ prime_words_string33 = \"\"\n    local prime_words_string34 = \"\"\n    local\
    \ prime_words_string35 = \"\"\n    local prime_words_string36 = \"\"\n    local\
    \ prime_words_string37 = \"\"\n    local prime_words_string38 = \"\"\n    local\
    \ prime_words_string39 = \"\"\n    local prime_words_string40 = \"\"\n    local\
    \ prime_words_string41 = \"\"\n    local prime_words_string42 = \"\"\n    local\
    \ prime_words_string43 = \"\"\n    local prime_words_string44 = \"\"\n    local\
    \ prime_words_string45 = \"\"\n    local prime_words_string46 = \"\"\n    local\
    \ prime_words_string47 = \"\"\n    local prime_words_string48 = \"\"\n    local\
    \ prime_words_string49 = \"\"\n    local prime_words_string50 = \"\"\n    local\
    \ prime_words_string51 = \"\"\n    local prime_words_string52 = \"\"\n    local\
    \ prime_words_string53 = \"\"\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_4vnnkre.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_string = \"\"\n    local prime_words_count\
    \ = 0\n    local prime_words_index = 1\n    local prime_words_index2 = 0\n   \
    \ local prime_words_index3 = 0\n    local prime_words_index4 = 0\n    local prime_words_index5\
    \ = 0\n    local prime_words_index6 = 0\n    local prime_words_index7 = 0\n  \
    \  local prime_words_index8 = 0\n    local prime_words_index9 = 0\n    local prime_words_index10\
    \ = 0\n    local prime_words_index11 = 0\n    local prime_words_index12 = 0\n\
    \    local prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local\
    \ prime_words_index15 = 0\n    local prime_words_index16 = 0\n    local prime_words_index17\
    \ = 0\n    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n\
    \    local prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local\
    \ prime_words_index22 = 0\n    local prime_words_index23 = 0\n    local prime_words_index24\
    \ = 0\n    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n\
    \    local prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local\
    \ prime_words_index29 = 0\n    local prime_words_index30 = 0\n    local prime_words_index31\
    \ = 0\n    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n\
    \    local prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local\
    \ prime_words_index36 = 0\n    local prime_words_index37 = 0\n    local prime_words_index38\
    \ = 0\n    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n\
    \    local prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local\
    \ prime_words_index43 = 0\n    local prime_words_index44 = 0\n    local prime_words_index45\
    \ = 0\n    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n\
    \    local prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local\
    \ prime_words_index50 = 0\n    local prime_words_index51 = 0\n    local prime_words_index52\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1iuxggfy.lua:88: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_string\
    \ = \"\"\n    local primes_string_length = 0\n    local primes_string_length_index\
    \ = 0\n    local primes_string_length_string = \"\"\n    local primes_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_index = 0\n    local primes_string_length_string_length_string\
    \ = \"\"\n    local primes_string_length_string_length_string_length = 0\n   \
    \ local primes_string_length_string_length_string_length_index = 0\n    local\
    \ primes_string_length_string_length_string_length_string = \"\"\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5en5gxwb.lua:70: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_words[j] = nil\n                break\n            end\n\
    \        end\n        if prime_words[#prime_words] ~= nil then\n            prime_words[#prime_words]\
    \ = sentence[i]\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlv_fdn1.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptlv_fdn1.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ooa5_v9.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp3ooa5_v9.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            if sentence:sub(i, i + j) == prime_words[j]\
    \ then\n                prime_word[j] = true\n                break\n        \
    \    end\n        end\n        if #prime_words == 0 then\n            prime_words[#prime_words]\
    \ = sentence:sub(i, i)\n        end\n    end\n    return prime_words[#prime_words]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeglm1b01.lua:35:\
    \ expected: \"is\"\nactual: \"t\"\nstack traceback:\n\t/tmp/tmpeglm1b01.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uk8emr7.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp3uk8emr7.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = \"\"\n    local prime_words_str2 = \"\"\n\
    \    local prime_words_str3 = \"\"\n    local prime_words_str4 = \"\"\n    local\
    \ prime_words_str5 = \"\"\n    local prime_words_str6 = \"\"\n    local prime_words_str7\
    \ = \"\"\n    local prime_words_str8 = \"\"\n    local prime_words_str9 = \"\"\
    \n    local prime_words_str10 = \"\"\n    local prime_words_str11 = \"\"\n   \
    \ local prime_words_str12 = \"\"\n    local prime_words_str13 = \"\"\n    local\
    \ prime_words_str14 = \"\"\n    local prime_words_str15 = \"\"\n    local prime_words_str16\
    \ = \"\"\n    local prime_words_str17 = \"\"\n    local prime_words_str18 = \"\
    \"\n    local prime_words_str19 = \"\"\n    local prime_words_str20 = \"\"\n \
    \   local prime_words_str21 = \"\"\n    local prime_words_str22 = \"\"\n    local\
    \ prime_words_str23 = \"\"\n    local prime_words_str24 = \"\"\n    local prime_words_str25\
    \ = \"\"\n    local prime_words_str26 = \"\"\n    local prime_words_str27 = \"\
    \"\n    local prime_words_str28 = \"\"\n    local prime_words_str29 = \"\"\n \
    \   local prime_words_str30 = \"\"\n    local prime_words_str31 = \"\"\n    local\
    \ prime_words_str32 = \"\"\n    local prime_words_str33 = \"\"\n    local prime_words_str34\
    \ = \"\"\n    local prime_words_str35 = \"\"\n    local prime_words_str36 = \"\
    \"\n    local prime_words_str37 = \"\"\n    local prime_words_str38 = \"\"\n \
    \   local prime_words_str39 = \"\"\n    local prime_words_str40 = \"\"\n    local\
    \ prime_words_str41 = \"\"\n    local prime_words_str42 = \"\"\n    local prime_words_str43\
    \ = \"\"\n    local prime_words_str44 = \"\"\n    local prime_words_str45 = \"\
    \"\n    local prime_words_str46 = \"\"\n    local prime_words_str47 = \"\"\n \
    \   local prime_words_str48 = \"\"\n    local prime_words_str49 = \"\"\n    local\
    \ prime_words_str50 = \"\"\n    local prime_words_str51 = \"\"\n    local prime_words_str52\
    \ = \"\"\n    local prime_words_str53 = \"\"\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdblz2zid.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local prime_numbers_string_count = 0\n    local prime_numbers_string\
    \ = \"\"\n    local prime_numbers_count = 0\n    local prime_numbers_string_count\
    \ = 0\n    local prime_numbers_string = \"\"\n    local prime_numbers_count =\
    \ 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcgeu_vam.lua:87: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i + j) ~= primes[j] then\n   \
    \             prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(i, i + primes[i]))\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb12dsof.lua:39:\
    \ expected: \"is\"\nactual: \"Thihis \"\nstack traceback:\n\t/tmp/tmpvb12dsof.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmthqt83.lua:36:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphmthqt83.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1, i+j-1)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n     \
    \   result = result .. sentence:sub(i, i+primes[i])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpke310iyw.lua:39:\
    \ expected: \"is\"\nactual: \"Thihis \"\nstack traceback:\n\t/tmp/tmpke310iyw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = 1\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             prime_word = prime_word * #sentence\n            end\n        end\n\
    \        if prime_word == 1 then\n            table.insert(prime_words, sentence:sub(i,\
    \ i + 1))\n        end\n    end\n    return table.concat(prime_words)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65znqtyv.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp65znqtyv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_index = {}\n    local prime_numbers_length = {}\n\
    \    local prime_numbers_string = \"\"\n    local prime_numbers_string_index =\
    \ 0\n    local prime_numbers_string_length = 0\n    local prime_numbers_string_prime_numbers\
    \ = {}\n    local prime_numbers_string_prime_numbers_index = {}\n    local prime_numbers_string_prime_numbers_length\
    \ = {}\n    local prime_numbers_string_prime_numbers_string = \"\"\n    local\
    \ prime_numbers_string_prime_numbers_string_index = 0\n    local prime_numbers_string_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_prime_numbers_string_prime_numbers = {}\n\
    \    local prime_numbers_string_prime_numbers_string_prime_numbers_index = {}\n\
    \    local prime_numbers_string_prime_numbers_string_prime_numbers_length = {}\n\
    \    local prime_numbers_string_prime_numbers_string_prime_numbers_string = \"\
    \"\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_index\
    \ = 0\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_index\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_length\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string\
    \ = \"\"\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_index\
    \ = 0\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_index\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_length\
    \ = {}\n    local prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string_prime_numbers_string\
    \ = \"\"\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4i8owwye.lua:58: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i,i) == primes[j]:sub(#primes[j],#primes[j])\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence:sub(i,i))\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2p425d9.lua:35:\
    \ expected: \"is\"\nactual: \"h i s   a t e\"\nstack traceback:\n\t/tmp/tmph2p425d9.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             prime_word[#prime_word + 1] = sentence:sub(i, i + 1)\n         \
    \   end\n        end\n        prime_words[#prime_words + 1] = prime_word\n   \
    \ end\n    local new_sentence = \"\"\n    for i = 1, #prime_words do\n       \
    \ for j = 1, #prime_words[i] do\n            local prime_word = prime_words[i][j]\n\
    \            if prime_word ~= \" \" then\n                new_sentence = new_sentence\
    \ .. prime_word\n            end\n        end\n    end\n    return new_sentence\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckjeey7.lua:41:\
    \ expected: \"is\"\nactual: \"hihihihihihihihihihihihihihiisisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s s  i i i i i i i i i i i i i iisisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s s  a a a a a a a a a a a a a aa a a a a a a a a a a\
    \ a a a  t t t t t t t t t t t t t tteteteteteteteteteteteteteteesesesesesesesesesesesesesesststststststststststststststtttttttttttttt\"\
    \nstack traceback:\n\t/tmp/tmphckjeey7.lua:41: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.002 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiubhvyx1.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n  \
    \              prime = false\n                break\n            end\n       \
    \ end\n        if prime then\n            table.insert(prime_words, sentence[i])\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5gibkrs.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpc5gibkrs.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzisemaut.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime_word = {}\n    for j = 1, #sentence\
    \ do\n      if sentence:sub(i, i + 1) ~= ' ' then\n        prime_word[#prime_word\
    \ + 1] = '#'\n      end\n    end\n    prime_words[#prime_words + 1] = prime_word\n\
    \  end\n  local prime_words_str = table.concat(prime_words, '')\n  local prime_words_len\
    \ = #prime_words_str\n  local prime_words_str = prime_words_str:gsub('(#+)', '%d')\n\
    \  local prime_words_str = prime_words_str:gsub('(#*)', '%d')\n  local prime_words_str\
    \ = prime_words_str:gsub('(#?)', '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)',\
    \ '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local\
    \ prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str\
    \ = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)',\
    \ '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local\
    \ prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str\
    \ = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)',\
    \ '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local\
    \ prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str\
    \ = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)',\
    \ '%d')\n  local prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local\
    \ prime_words_str = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str\
    \ = prime_words_str:gsub('(#%)', '%d')\n  local prime_words_str = prime_words_str:gsub('\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpshx3afdm.lua:47: unfinished string near '''\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 1, #sentence do\n        local prime = true\n        for j = 1, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            primes[primes_count] = sentence[i]\n            primes_count = primes_count\
    \ + 1\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"\" then\n            primes_string = primes_string .. primes[i]\n        end\n\
    \    end\n    return primes_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxavot0l.lua:43:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpkxavot0l.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_index2\
    \ = 0\n    local primes_index3 = 0\n    local primes_index4 = 0\n    local primes_index5\
    \ = 0\n    local primes_index6 = 0\n    local primes_index7 = 0\n    local primes_index8\
    \ = 0\n    local primes_index9 = 0\n    local primes_index10 = 0\n    local primes_index11\
    \ = 0\n    local primes_index12 = 0\n    local primes_index13 = 0\n    local primes_index14\
    \ = 0\n    local primes_index15 = 0\n    local primes_index16 = 0\n    local primes_index17\
    \ = 0\n    local primes_index18 = 0\n    local primes_index19 = 0\n    local primes_index20\
    \ = 0\n    local primes_index21 = 0\n    local primes_index22 = 0\n    local primes_index23\
    \ = 0\n    local primes_index24 = 0\n    local primes_index25 = 0\n    local primes_index26\
    \ = 0\n    local primes_index27 = 0\n    local primes_index28 = 0\n    local primes_index29\
    \ = 0\n    local primes_index30 = 0\n    local primes_index31 = 0\n    local primes_index32\
    \ = 0\n    local primes_index33 = 0\n    local primes_index34 = 0\n    local primes_index35\
    \ = 0\n    local primes_index36 = 0\n    local primes_index37 = 0\n    local primes_index38\
    \ = 0\n    local primes_index39 = 0\n    local primes_index40 = 0\n    local primes_index41\
    \ = 0\n    local primes_index42 = 0\n    local primes_index43 = 0\n    local primes_index44\
    \ = 0\n    local primes_index45 = 0\n    local primes_index46 = 0\n    local primes_index47\
    \ = 0\n    local primes_index48 = 0\n    local primes_index49 = 0\n    local primes_index50\
    \ = 0\n    local primes_index51 = 0\n    local primes_index52 = 0\n    local primes_index53\
    \ = 0\n    local primes_index54 = 0\n    local primes_index55 = 0\n    local primes_index56\
    \ = 0\n    local primes_index57 = 0\n    local primes_index58 = 0\n    local primes_index59\
    \ = 0\n    local primes_index60 = 0\n    local primes_index61 = 0\n    local primes_index62\
    \ = 0\n    local primes_index63\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpntc257p7.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_words[j] = nil\n                break\n            end\n\
    \        end\n        if prime_words[#prime_words] ~= nil then\n            prime_words[#prime_words]\
    \ = sentence[i]\n        else\n            prime_words[#prime_words] = sentence[i]\n\
    \        end\n    end\n    return prime_words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rotwh_n.lua:37:\
    \ expected: \"is\"\nactual: {}\nstack traceback:\n\t/tmp/tmp5rotwh_n.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_str2 = {}\n    local\
    \ prime_words_str3 = {}\n    local prime_words_str4 = {}\n    local prime_words_str5\
    \ = {}\n    local prime_words_str6 = {}\n    local prime_words_str7 = {}\n   \
    \ local prime_words_str8 = {}\n    local prime_words_str9 = {}\n    local prime_words_str10\
    \ = {}\n    local prime_words_str11 = {}\n    local prime_words_str12 = {}\n \
    \   local prime_words_str13 = {}\n    local prime_words_str14 = {}\n    local\
    \ prime_words_str15 = {}\n    local prime_words_str16 = {}\n    local prime_words_str17\
    \ = {}\n    local prime_words_str18 = {}\n    local prime_words_str19 = {}\n \
    \   local prime_words_str20 = {}\n    local prime_words_str21 = {}\n    local\
    \ prime_words_str22 = {}\n    local prime_words_str23 = {}\n    local prime_words_str24\
    \ = {}\n    local prime_words_str25 = {}\n    local prime_words_str26 = {}\n \
    \   local prime_words_str27 = {}\n    local prime_words_str28 = {}\n    local\
    \ prime_words_str29 = {}\n    local prime_words_str30 = {}\n    local prime_words_str31\
    \ = {}\n    local prime_words_str32 = {}\n    local prime_words_str33 = {}\n \
    \   local prime_words_str34 = {}\n    local prime_words_str35 = {}\n    local\
    \ prime_words_str36 = {}\n    local prime_words_str37 = {}\n    local prime_words_str38\
    \ = {}\n    local prime_words_str39 = {}\n    local prime_words_str40 = {}\n \
    \   local prime_words_str41 = {}\n    local prime_words_str42 = {}\n    local\
    \ prime_words_str43 = {}\n    local prime_words_str44 = {}\n    local prime_words_str45\
    \ = {}\n    local prime_words_str46 = {}\n    local prime_words_str47 = {}\n \
    \   local prime_words_str48 = {}\n    local prime_words_str49 = {}\n    local\
    \ prime_words_str50 = {}\n    local prime_words_str51 = {}\n    local prime_words_str52\
    \ = {}\n    local prime_words_str53 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplzi6l3jd.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_index = {}\n    local primes_index_count\
    \ = 0\n    local primes_string = \"\"\n    local primes_string_count = 0\n   \
    \ local primes_string_length = 0\n    local primes_string_length_count = 0\n \
    \   local primes_string_length_index = 0\n    local primes_string_length_index_count\
    \ = 0\n    local primes_string_length_string = \"\"\n    local primes_string_length_string_count\
    \ = 0\n    local primes_string_length_string_index = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_length = 0\n    local primes_string_length_string_length_count\
    \ = 0\n    local primes_string_length_string_length_index = 0\n    local primes_string_length_string_length_index_count\
    \ = 0\n    local primes_string_length_string_length_string = \"\"\n    local primes_string_length_string_length_string_count\
    \ = 0\n    local primes_string_length_string_length_string_index = 0\n    local\
    \ primes_string_length_string_length_string_index_count = 0\n    local primes_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_count = 0\n\
    \    local primes_string_length_string_length_string_length_index = 0\n    local\
    \ primes_string_length_string_length_string_length_index_count = 0\n    local\
    \ primes_string_length_string_length_string_length_string = \"\"\n    local primes_string_length_string_length_string_length_string_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_index_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    local primes_string_length_string_length_string_length_string_length_string_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index_count\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    local primes_string_length_string_length_string_length_string_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcn3dgecs.lua:72: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             prime_word[#prime_word + 1] = sentence:sub(i, i + 1)\n         \
    \   end\n        end\n        table.insert(prime_words, #prime_word, prime_word)\n\
    \    end\n    local result = {}\n    for i = 2, #prime_words do\n        local\
    \ prime_word = prime_words[i]\n        for j = 1, #prime_word do\n           \
    \ local prime_word_length = prime_word[j]\n            for k = 1, #prime_words\
    \ do\n                if prime_words[k] == prime_word then\n                 \
    \   table.insert(result, prime_words[k])\n                    break\n        \
    \        end\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvopkmmra.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvopkmmra.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if i % primes[j] == 0 then\n        prime = false\n        break\n    \
    \  end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n \
    \ end\n  local result = \"\"\n  for i = 1, #primes do\n    result = result ..\
    \ \" \" .. sentence:sub(1, primes[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbvflip6.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpfbvflip6.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxswvvubn.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc4qkalfp.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = true\n       \
    \ for j = 2, #prime_words do\n            if #sentence:sub(i,i) == prime_words[j]\
    \ then\n                prime_word = false\n                break\n          \
    \  end\n        end\n        if prime_word then\n            table.insert(prime_words,\
    \ #prime_words + 1)\n        end\n    end\n    return table.concat(prime_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mcbk52_.lua:35:\
    \ expected: \"is\"\nactual: \"12345678910111213\"\nstack traceback:\n\t/tmp/tmp1mcbk52_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_str2 = {}\n    local prime_words_str3\
    \ = {}\n    local prime_words_str4 = {}\n    local prime_words_str5 = {}\n   \
    \ local prime_words_str6 = {}\n    local prime_words_str7 = {}\n    local prime_words_str8\
    \ = {}\n    local prime_words_str9 = {}\n    local prime_words_str10 = {}\n  \
    \  local prime_words_str11 = {}\n    local prime_words_str12 = {}\n    local prime_words_str13\
    \ = {}\n    local prime_words_str14 = {}\n    local prime_words_str15 = {}\n \
    \   local prime_words_str16 = {}\n    local prime_words_str17 = {}\n    local\
    \ prime_words_str18 = {}\n    local prime_words_str19 = {}\n    local prime_words_str20\
    \ = {}\n    local prime_words_str21 = {}\n    local prime_words_str22 = {}\n \
    \   local prime_words_str23 = {}\n    local prime_words_str24 = {}\n    local\
    \ prime_words_str25 = {}\n    local prime_words_str26 = {}\n    local prime_words_str27\
    \ = {}\n    local prime_words_str28 = {}\n    local prime_words_str29 = {}\n \
    \   local prime_words_str30 = {}\n    local prime_words_str31 = {}\n    local\
    \ prime_words_str32 = {}\n    local prime_words_str33 = {}\n    local prime_words_str34\
    \ = {}\n    local prime_words_str35 = {}\n    local prime_words_str36 = {}\n \
    \   local prime_words_str37 = {}\n    local prime_words_str38 = {}\n    local\
    \ prime_words_str39 = {}\n    local prime_words_str40 = {}\n    local prime_words_str41\
    \ = {}\n    local prime_words_str42 = {}\n    local prime_words_str43 = {}\n \
    \   local prime_words_str44 = {}\n    local prime_words_str45 = {}\n    local\
    \ prime_words_str46 = {}\n    local prime_words_str47 = {}\n    local prime_words_str48\
    \ = {}\n    local prime_words_str49 = {}\n    local prime_words_str50 = {}\n \
    \   local prime_words_str51 = {}\n    local prime_words_str52 = {}\n    local\
    \ prime_words_str53 = {}\n    local prime_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_60fftqt.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i])\n        result = result .. \" \" ..\
    \ word\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmanijwh0.lua:40:\
    \ expected: \"is\"\nactual: \" Thi This This  This is This is a t This is a tes\"\
    \nstack traceback:\n\t/tmp/tmpmanijwh0.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptnx_s2co.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and primes[j] and sentence:len()\
    \ > i and sentence:len() > i then\n                prime = false\n           \
    \ end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n  \
    \      result = result .. sentence:sub(1, primes[i])\n    end\n    return result\n\
    end\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp14j3vr7i.lua:67: ')' expected (to close '(' at line 66) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5u28ax_.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpw5u28ax_.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if primes[j] and sentence[i] == primes[j] then\n        prime = false\n\
    \      end\n    end\n    if prime then\n      table.insert(primes, sentence[i])\n\
    \    end\n  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0abp0rrq.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0abp0rrq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    local words\
    \ = sentence:gmatch(\"[%a]+\")\n    for i = 1, #words do\n        local word =\
    \ words[i]\n        local length = #word\n        if primes[length] == nil then\n\
    \            primes[length] = true\n            primes_count = primes_count +\
    \ 1\n        end\n    end\n    for i = 1, primes_count do\n        primes_string\
    \ = primes_string .. \" \" .. tostring(primes[i])\n    end\n    return primes_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzon5at0.lua:20:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmptzon5at0.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbu4fskg.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmprbu4fskg.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence[i] == primes[j] then\n            \
    \    prime = false\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n            table.insert(prime_words_len, 1)\n            table.insert(prime_words_order,\
    \ i)\n        end\n    end\n    for i = 2, #primes do\n        for j = 2, #prime_words\
    \ do\n            if primes[i] == prime_words[j] then\n                prime_words_len[prime_words[j]]\
    \ = prime_words_len[prime_words[j]] + 1\n            end\n        end\n    end\n\
    \    local result = \"\"\n    for i = 2, #prime_words do\n        if prime_words_len[prime_words[i]]\
    \ == 1 then\n            result = result .. prime_words[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xgtpwfj.lua:53:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9xgtpwfj.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = true\n       \
    \ for j = 2, #prime_words do\n            if #sentence:sub(i, i) == prime_words[j]\
    \ then\n                prime_word = false\n            end\n        end\n   \
    \     if prime_word then\n            table.insert(prime_words, #prime_words)\n\
    \        end\n    end\n    local new_sentence = \"\"\n    for i = 1, #prime_words\
    \ do\n        new_sentence = new_sentence .. \" \" .. sentence:sub(1, prime_words[i])\n\
    \    end\n    return new_sentence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz804sm51.lua:38:\
    \ expected: \"is\"\nactual: \"  T\"\nstack traceback:\n\t/tmp/tmpz804sm51.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i ~= primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5nv7v_1.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi\"\nstack traceback:\n\t/tmp/tmpj5nv7v_1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ecfdcgo.lua:39:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmp7ecfdcgo.lua:39: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    local prime_numbers_string = \"\"\n    local prime_numbers_string_length\
    \ = 0\n    local prime_numbers_string_length_string = \"\"\n    local prime_numbers_string_length_string_length\
    \ = 0\n    local prime_numbers_string_length_string_length_prime = 0\n    local\
    \ prime_numbers_string_length_string_length_prime_string = \"\"\n    local prime_numbers_string_length_string_length_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime_prime_string\
    \ = \"\"\n    local prime_numbers_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptnvp1uku.lua:57: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpejqw43.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpxpejqw43.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "leletletslets lets golets go forlets go for slets go for swimmlets go for\
    \ swimmin\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07v8sekn.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmp07v8sekn.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        local new_word = word:gsub(\"%a+\", \"\")\n        result = result ..\
    \ new_word\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sb8ins4.lua:41:\
    \ expected: \"is\"\nactual: \"        \"\nstack traceback:\n\t/tmp/tmp5sb8ins4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if #prime_words[j] == i then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(prime_words, sentence[i])\n\
    \    end\n  end\n  return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1djeq5m.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn1djeq5m.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local prime_words = {}\n  local prime_words_len = {}\n  local prime_words_order\
    \ = {}\n  local prime_words_str = {}\n  local prime_words_str_len = {}\n  local\
    \ prime_words_str_order = {}\n  local prime_words_str_str = {}\n  local prime_words_str_str_len\
    \ = {}\n  local prime_words_str_str_order = {}\n  local prime_words_str_str_str\
    \ = {}\n  local prime_words_str_str_str_len = {}\n  local prime_words_str_str_str_order\
    \ = {}\n  local prime_words_str_str_str_str = {}\n  local prime_words_str_str_str_str_len\
    \ = {}\n  local prime_words_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_len = {}\n  local prime_words_str_str_str_str_str_order\
    \ = {}\n  local prime_words_str_str_str_str_str_str = {}\n  local prime_words_str_str_str_str_str_len\
    \ = {}\n  local prime_words_str_str_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_str_len = {}\n  local prime_words_str_str_str_str_str_str_str_order\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_str = {}\n  local prime_words_str_str_str_str_str_str_str_len\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_str_len = {}\n  local\
    \ prime_words_str_str_str_str_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_str_str_len = {}\n  local\
    \ prime_words_str_str_str_str_str_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_str_str_len = {}\n  local\
    \ prime_words_str_str_str_str_str_str_str_str_str_order = {}\n  local prime_words_str_str_str_str_str_str_str_str_str_str_str\
    \ = {}\n  local prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n\
    \  local prime_words_str_str_str_str_str_str_str_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptbsdj6zv.lua:69: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 1, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i,i) == sentence:sub(j,j) then\n\
    \                prime_word[#prime_word+1] = sentence:sub(i,i)\n            end\n\
    \        end\n        table.insert(prime_words, #prime_word, prime_word)\n   \
    \ end\n    return prime_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2hw5yh3.lua:32:\
    \ expected: \n\"is\"\nactual: \n{\n    {\"e\"},\n    {\"t\", \"t\"},\n    {\"\
    a\"},\n    {\"s\", \"s\", \"s\"},\n    {\"t\", \"t\"},\n    {\"h\"},\n    {\"\
    \ \", \" \", \" \"},\n    {\"i\", \"i\"},\n    {\" \", \" \", \" \"},\n    {\"\
    s\", \"s\", \"s\"},\n    {\"i\", \"i\"},\n    {\" \", \" \", \" \"},\n    {\"\
    s\", \"s\", \"s\"},\n    {\"T\"}\n}\nstack traceback:\n\t/tmp/tmpt2hw5yh3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.002 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local prime_words = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  for i = 1, #sentence do\n    local word = sentence:sub(i,i)\n    if\
    \ prime_words[word] == nil then\n      prime_words[word] = true\n      prime_words_index[word]\
    \ = i\n      prime_words_length[word] = 1\n    else\n      prime_words_length[word]\
    \ = prime_words_length[word] + 1\n    end\n  end\n  for i = 2, #prime_words do\n\
    \    if prime_words_length[prime_words[i]] ~= prime_words_length[prime_words[i-1]]\
    \ then\n      primes[#primes+1] = prime_words[i]\n    end\n  end\n  local result\
    \ = \"\"\n  for i = 1, #primes do\n    result = result .. primes[i]\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmlncx46.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdmlncx46.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_str2 = {}\n    local\
    \ prime_words_str3 = {}\n    local prime_words_str4 = {}\n    local prime_words_str5\
    \ = {}\n    local prime_words_str6 = {}\n    local prime_words_str7 = {}\n   \
    \ local prime_words_str8 = {}\n    local prime_words_str9 = {}\n    local prime_words_str10\
    \ = {}\n    local prime_words_str11 = {}\n    local prime_words_str12 = {}\n \
    \   local prime_words_str13 = {}\n    local prime_words_str14 = {}\n    local\
    \ prime_words_str15 = {}\n    local prime_words_str16 = {}\n    local prime_words_str17\
    \ = {}\n    local prime_words_str18 = {}\n    local prime_words_str19 = {}\n \
    \   local prime_words_str20 = {}\n    local prime_words_str21 = {}\n    local\
    \ prime_words_str22 = {}\n    local prime_words_str23 = {}\n    local prime_words_str24\
    \ = {}\n    local prime_words_str25 = {}\n    local prime_words_str26 = {}\n \
    \   local prime_words_str27 = {}\n    local prime_words_str28 = {}\n    local\
    \ prime_words_str29 = {}\n    local prime_words_str30 = {}\n    local prime_words_str31\
    \ = {}\n    local prime_words_str32 = {}\n    local prime_words_str33 = {}\n \
    \   local prime_words_str34 = {}\n    local prime_words_str35 = {}\n    local\
    \ prime_words_str36 = {}\n    local prime_words_str37 = {}\n    local prime_words_str38\
    \ = {}\n    local prime_words_str39 = {}\n    local prime_words_str40 = {}\n \
    \   local prime_words_str41 = {}\n    local prime_words_str42 = {}\n    local\
    \ prime_words_str43 = {}\n    local prime_words_str44 = {}\n    local prime_words_str45\
    \ = {}\n    local prime_words_str46 = {}\n    local prime_words_str47 = {}\n \
    \   local prime_words_str48 = {}\n    local prime_words_str49 = {}\n    local\
    \ prime_words_str50 = {}\n    local prime_words_str51 = {}\n    local prime_words_str52\
    \ = {}\n    local prime_words_str53 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvqte1bhl.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 1, #sentence do\n        local prime = true\n        for j = 1, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            primes[primes_count] = sentence[i]\n            primes_count = primes_count\
    \ + 1\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"\" then\n            primes[i] = \"0\"\n        end\n    end\n    for i =\
    \ 1, #primes do\n        if primes[i] == \"0\" then\n            primes[i] = \"\
    1\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"1\" then\n            primes[i] = \"2\"\n        end\n    end\n    for i =\
    \ 1, #primes do\n        if primes[i] == \"2\" then\n            primes[i] = \"\
    3\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"3\" then\n            primes[i] = \"4\"\n        end\n    end\n    for i =\
    \ 1, #primes do\n        if primes[i] == \"4\" then\n            primes[i] = \"\
    5\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"5\" then\n            primes[i] = \"6\"\n        end\n    end\n    for i =\
    \ 1, #primes do\n        if primes[i] == \"6\" then\n            primes[i] = \"\
    7\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"7\" then\n            primes[i] = \"8\"\n        end\n    end\n    for i =\
    \ 1, #primes do\n        if primes[i] == \"8\" then\n            primes[i] = \"\
    9\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i] ==\
    \ \"9\" then\n            primes[i] = \"10\"\n        end\n    end\n    for i\
    \ = 1, #primes do\n        if primes[i] == \"10\" then\n            primes[i]\
    \ = \"11\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i]\
    \ == \"11\" then\n            primes[i] = \"12\"\n        end\n    end\n    for\
    \ i = 1, #primes do\n        if primes[i] == \"12\" then\n            primes[i]\
    \ = \"13\"\n        end\n    end\n    for i = 1, #primes do\n        if primes[i]\
    \ == \"13\" then\n            primes[i] = \"14\"\n        end\n    end\n    for\
    \ i = 1, #primes do\n        if primes[i] == \"14\" then\n            primes[i]\
    \ = \"15\"\n        end\n    end\n    for i = 1, #primes do\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3m5ok_1y.lua:126: 'end' expected (to close 'for' at line 112)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_str_len = {}\n    local prime_words_str_order\
    \ = {}\n    local prime_words_str_str = {}\n    local prime_words_str_str_len\
    \ = {}\n    local prime_words_str_str_order = {}\n    local prime_words_str_str_str\
    \ = {}\n    local prime_words_str_str_str_len = {}\n    local prime_words_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str = {}\n    local prime_words_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_order = {}\n    local prime_words_str_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_order = {}\n    local prime_words_str_str_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_order = {}\n   \
    \ local prime_words_str_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_order = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_str_str = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_order = {}\n    local prime\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7pzducwt.lua:69: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwxb54vh.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmprwxb54vh.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbsqfru7.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpmbsqfru7.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_str_len = 0\n    local prime_words_str_order\
    \ = 0\n    local prime_words_str_len2 = 0\n    local prime_words_str_order2 =\
    \ 0\n    local prime_words_str_len3 = 0\n    local prime_words_str_order3 = 0\n\
    \    local prime_words_str_len4 = 0\n    local prime_words_str_order4 = 0\n  \
    \  local prime_words_str_len5 = 0\n    local prime_words_str_order5 = 0\n    local\
    \ prime_words_str_len6 = 0\n    local prime_words_str_order6 = 0\n    local prime_words_str_len7\
    \ = 0\n    local prime_words_str_order7 = 0\n    local prime_words_str_len8 =\
    \ 0\n    local prime_words_str_order8 = 0\n    local prime_words_str_len9 = 0\n\
    \    local prime_words_str_order9 = 0\n    local prime_words_str_len10 = 0\n \
    \   local prime_words_str_order10 = 0\n    local prime_words_str_len11 = 0\n \
    \   local prime_words_str_order11 = 0\n    local prime_words_str_len12 = 0\n \
    \   local prime_words_str_order12 = 0\n    local prime_words_str_len13 = 0\n \
    \   local prime_words_str_order13 = 0\n    local prime_words_str_len14 = 0\n \
    \   local prime_words_str_order14 = 0\n    local prime_words_str_len15 = 0\n \
    \   local prime_words_str_order15 = 0\n    local prime_words_str_len16 = 0\n \
    \   local prime_words_str_order16 = 0\n    local prime_words_str_len17 = 0\n \
    \   local prime_words_str_order17 = 0\n    local prime_words_str_len18 = 0\n \
    \   local prime_words_str_order18 = 0\n    local prime_words_str_len19 = 0\n \
    \   local prime_words_str_order19 = 0\n    local prime_words_str_len20 = 0\n \
    \   local prime_words_str_order20 = 0\n    local prime_words_str_len21 = 0\n \
    \   local prime_words_str_order21 = 0\n    local prime_words_str_len22 = 0\n \
    \   local prime_words_str_order22 = 0\n    local prime_words_str_len23 = 0\n \
    \   local prime_words_str_order23 = 0\n    local prime_words_str_len24 = 0\n \
    \   local prime_words_str_order24 = 0\n    local prime\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo9k5wpky.lua:82: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]:sub(1)))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a9uf5kh.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp3a9uf5kh.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence[primes[i]:len(sentence)])\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4s4tvw9.lua:31:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpl4s4tvw9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_numbers\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_numbers\
    \ do\n      if i % prime_numbers[j] == 0 then\n        prime = false\n       \
    \ break\n      end\n    end\n    if prime then\n      table.insert(prime_numbers,\
    \ i)\n    end\n  end\n  local result = \"\"\n  for i = 1, #prime_numbers do\n\
    \    local word = sentence:sub(1, prime_numbers[i])\n    local rest = sentence:sub(prime_numbers[i]\
    \ + 1, #sentence)\n    result = result .. \" \" .. word\n  end\n  return result:sub(1,\
    \ #result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu75nsai1.lua:41:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpu75nsai1.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_string = \"\"\n    local prime_words_count = 0\n    local\
    \ prime_words_string = \"\"\n    local prime_words_count = 0\n    local prime_words_string\
    \ = \"\"\n    local prime_words_count = 0\n    local prime_words_string = \"\"\
    \n    local prime_words_count = 0\n    local prime_words_string = \"\"\n    local\
    \ prime_words_count = 0\n    local prime_words_string = \"\"\n    local prime_words_count\
    \ = 0\n    local prime_words_string = \"\"\n    local prime_words_count = 0\n\
    \    local prime_words_string = \"\"\n    local prime_words_count = 0\n    local\
    \ prime_words_string = \"\"\n    local prime_words_count = 0\n    local prime_words_string\
    \ = \"\"\n    local prime_words_count = 0\n    local prime_words_string = \"\"\
    \n    local prime_words_count = 0\n    local prime_words_string = \"\"\n    local\
    \ prime_words_count = 0\n    local prime_words_string = \"\"\n    local prime_words_count\
    \ = 0\n    local prime_words_string = \"\"\n    local prime_words_count = 0\n\
    \    local prime_words_string = \"\"\n    local prime_words_count = 0\n    local\
    \ prime_words_string = \"\"\n    local prime_words_count = 0\n    local prime_words_string\
    \ = \"\"\n    local prime_words_count = 0\n    local prime_words_string = \"\"\
    \n    local prime_words_count = 0\n    local prime_words_string = \"\"\n    local\
    \ prime_words_count = 0\n    local prime_words_string = \"\"\n    local prime_words_count\
    \ = 0\n    local prime_words_string = \"\"\n    local prime_words_count = 0\n\
    \    local prime_words_string = \"\"\n    local prime_words_count = 0\n    local\
    \ prime_words_string = \"\"\n    local prime_words_count = 0\n    local prime_words_string\
    \ = \"\"\n    local prime_words_count = 0\n    local prime_words_string = \"\"\
    \n    local prime_words_count = 0\n    local prime_words_string = \"\"\n    local\
    \ prime_words_count = 0\n    local prime_words_string = \"\"\n    local prime_words_count\
    \ = 0\n    local prime_words_string = \"\"\n    local prime_words_count = 0\n\
    \    local prime_words_string = \"\"\n    local prime_words_count = 0\n    local\
    \ prime_words_string = \"\"\n    local prime_words_count = 0\n    local prime_words_string\
    \ = \"\"\n    local prime_words_count = 0\n    local prime_words_string = \"\"\
    \n    local prime_words_count = 0\n    local prime_words_string = \"\"\n    \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp46r91k4i.lua:98: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if #sentence:sub(i, i + j) ~= #prime_words[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_words, #sentence:sub(i,\
    \ i + 1))\n        end\n    end\n    return table.concat(prime_words)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz8j1ayd.lua:20:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpkz8j1ayd.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l0y1xfr.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp5l0y1xfr.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i) == primes[j] then\n       \
    \         prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        result = result .. sentence:sub(i,\
    \ i)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxzg_s_d.lua:38:\
    \ expected: \"is\"\nactual: \"This is a tes\"\nstack traceback:\n\t/tmp/tmpgxzg_s_d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_words do\n            if #sentence:sub(i, i+j) == prime_words[j]\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(prime_words, #sentence:sub(i, i))\n   \
    \     end\n    end\n    return table.concat(prime_words)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zk1phdx.lua:34:\
    \ expected: \"is\"\nactual: \"111111111111\"\nstack traceback:\n\t/tmp/tmp8zk1phdx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = \"\"\n    local prime_words_len_count = 0\n\
    \    local prime_words_order_count = 0\n    local prime_words_str_count = 0\n\
    \    local prime_words_str_order = 0\n    local prime_words_str_len = 0\n    local\
    \ prime_words_str_len_count = 0\n    for i = 1, #sentence do\n        local word\
    \ = sentence:sub(i,i)\n        if prime_words_len[#prime_words+1] == 0 then\n\
    \            prime_words[#prime_words+1] = word\n            prime_words_len[#prime_words+1]\
    \ = 1\n            prime_words_order[#prime_words+1] = #prime_words + 1\n    \
    \        prime_words_str_count = #prime_words_str\n        else\n            local\
    \ prime_words_len = prime_words_len[#prime_words]\n            if prime_words_len\
    \ > 1 then\n                prime_words_len_count = prime_words_len_count\n  \
    \          end\n            if prime_words_len == 1 then\n                prime_words_str\
    \ = prime_words_str\n            end\n            local prime_words_order = prime_words_order[#prime_words]\n\
    \            local prime_words_str = prime_words_str\n            local prime_words_str_len\
    \ = prime_words_str_len + #prime_words_str\n            if prime_words_len > 1\
    \ then\n                prime_words_str_len = prime_words_str_len + #prime_words_str\n\
    \            end\n            local prime_words_str = prime_words_str\n      \
    \      local prime_words_str_order = prime_words_str_order + 1\n            if\
    \ prime_words_len > 1 then\n                prime_words_str_order = prime_words_str_order\
    \ + 1\n            end\n        end\n    end\n    for i = 1, #prime_words do\n\
    \        if prime_words_len[i] > 1 then\n            prime_words_len_count = prime_words_len_count\n\
    \        end\n        if prime_words_len[i] == 1 then\n            prime_words_str\
    \ = prime_words_str\n        end\n        local prime_words_order = prime_words_order[i]\n\
    \        local prime_words_str = prime_words_str\n        local prime_words_str_len\
    \ = prime_words_str_len + #prime_words_str\n        if prime_words_len[i] > 1\
    \ then\n            prime_words_str_len = prime_words_str_len + #prime_words_str\n\
    \        end\n        local prime_words_str = prime_words_str\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptd13ejuw.lua:82: 'end' expected (to close 'for' at line 55)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if primes[j] and sentence[i] ~= ' ' then\n        prime = false\n     \
    \   break\n      end\n    end\n    if prime then\n      table.insert(primes, i)\n\
    \    end\n  end\n  local result = {}\n  for i = 1, #primes do\n    table.insert(result,\
    \ sentence:sub(1, primes[i]))\n  end\n  return table.concat(result)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcfup49t.lua:39:\
    \ expected: \"is\"\nactual: \"ThThi\"\nstack traceback:\n\t/tmp/tmpjcfup49t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3ejwj78.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpf3ejwj78.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_index = {}\n   \
    \ local prime_words_len_index = {}\n    local prime_words_index2 = 0\n    local\
    \ prime_words_len_index2 = 0\n    local prime_words_index3 = 0\n    local prime_words_len_index3\
    \ = 0\n    local prime_words_index4 = 0\n    local prime_words_len_index4 = 0\n\
    \    local prime_words_index5 = 0\n    local prime_words_len_index5 = 0\n    local\
    \ prime_words_index6 = 0\n    local prime_words_len_index6 = 0\n    local prime_words_index7\
    \ = 0\n    local prime_words_len_index7 = 0\n    local prime_words_index8 = 0\n\
    \    local prime_words_len_index8 = 0\n    local prime_words_index9 = 0\n    local\
    \ prime_words_len_index9 = 0\n    local prime_words_index10 = 0\n    local prime_words_len_index10\
    \ = 0\n    local prime_words_index11 = 0\n    local prime_words_len_index11 =\
    \ 0\n    local prime_words_index12 = 0\n    local prime_words_len_index12 = 0\n\
    \    local prime_words_index13 = 0\n    local prime_words_len_index13 = 0\n  \
    \  local prime_words_index14 = 0\n    local prime_words_len_index14 = 0\n    local\
    \ prime_words_index15 = 0\n    local prime_words_len_index15 = 0\n    local prime_words_index16\
    \ = 0\n    local prime_words_len_index16 = 0\n    local prime_words_index17 =\
    \ 0\n    local prime_words_len_index17 = 0\n    local prime_words_index18 = 0\n\
    \    local prime_words_len_index18 = 0\n    local prime_words_index19 = 0\n  \
    \  local prime_words_len_index19 = 0\n    local prime_words_index20 = 0\n    local\
    \ prime_words_len_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_len_index21\
    \ = 0\n    local prime_words_index22 = 0\n    local prime_words_len_index22 =\
    \ 0\n    local prime_words_index23 = 0\n    local prime_words_len_index23 = 0\n\
    \    local prime_words_index24 = 0\n    local prime_words_len_index24 = 0\n  \
    \  local prime_words_index25 = 0\n    local prime_words_len_index25 = 0\n    local\
    \ prime_words_index26 = 0\n    local prime_words_len_index26 = 0\n    local prime_words_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpae91knod.lua:84: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence:len() > i and sentence:len() > i and sentence:len() > i and\
    \ sentence:len() > i and sentence:len() > i and sentence:len() > i and sentence:len()\
    \ > i and sentence\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwq1psj8t.lua:21: 'then' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    local words\
    \ = sentence:gmatch(\"[%a]+\")\n    for _, word in pairs(words) do\n        local\
    \ prime = true\n        for i = 2, #primes do\n            if primes[i] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            primes[#primes + 1] = #words + 1\n\
    \            primes_count = #primes\n        end\n    end\n    for i = 1, primes_count\
    \ do\n        primes_string = primes_string .. \" \" .. primes[i]\n    end\n \
    \   return primes_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wwvrxl9.lua:20:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp0wwvrxl9.lua:20: in function 'candidate'\n\t/tmp/tmp0wwvrxl9.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = true\n       \
    \ for j = 1, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_word = false\n            end\n        end\n        if\
    \ prime_word then\n            table.insert(prime_words, sentence[i])\n      \
    \  end\n    end\n    return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2rsvvf4.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpg2rsvvf4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if i % primes[j] == 0 then\n        prime = false\n        break\n    \
    \  end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n \
    \ end\n  local result = \"\"\n  for i = 1, #primes do\n    result = result ..\
    \ \" \" .. sentence:sub(1, primes[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16l0psba.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp16l0psba.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_order = {}\n\
    \    local prime_words_string = \"\"\n    local prime_words_index = 1\n    local\
    \ prime_words_length_index = 1\n    local prime_words_order_index = 1\n    local\
    \ prime_words_string_index = 1\n    for word in string.gmatch(sentence, \"([^\
    \ ]+)\") do\n        local prime_words_length = #word\n        if prime_words_length\
    \ == 0 then\n            prime_words_length_index = 1\n        else\n        \
    \    prime_words_length[prime_words_length_index] = prime_words_length\n     \
    \       prime_words_length_index = prime_words_length_index + 1\n        end\n\
    \        local prime_words_order = #prime_words\n        if prime_words_order\
    \ == 0 then\n            prime_words_order_index = 1\n        else\n         \
    \   prime_words_order[prime_words_order_index] = prime_words_order\n         \
    \   prime_words_order_index = prime_words_order_index + 1\n        end\n     \
    \   local prime_words_string = prime_words_string..\" \" .. word\n        prime_words_index\
    \ = prime_words_index + 1\n        prime_words[prime_words_index] = word\n   \
    \ end\n    for prime_words_length_index=1, #prime_words_length do\n        for\
    \ prime_words_order_index=1, #prime_words_order do\n            local prime_words_string\
    \ = prime_words_string..\" \" .. prime_words[prime_words_order_index][prime_words_length_index-1]\n\
    \        end\n    end\n    return prime_words_string\nend\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence(\"\
    lets go for swimming\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n\
    print(words_in_sentence(\"lets go for swimming\"))\nprint(words_in_sentence\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjn3r2gr0.lua:66: ')' expected (to close '(' at line 65) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm2r6p_u.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpxm2r6p_u.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local prime_words\
    \ = {}\n  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #prime_words\
    \ do\n      if #sentence:sub(i, i + j) == prime_words[j] then\n        prime =\
    \ false\n        break\n      end\n    end\n    if prime then\n      table.insert(prime_words,\
    \ #sentence:sub(i, i + 1))\n    end\n  end\n  local new_sentence = sentence\n\
    \  for _, word in ipairs(prime_words) do\n    new_sentence = new_sentence:sub(1,\
    \ #new_sentence - word)\n  end\n  return new_sentence\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchye2hvg.lua:39:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpchye2hvg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_lengths = {}\n    local prime_words_order = {}\n\
    \    local prime_words_string = \"\"\n    local prime_words_string_length = 0\n\
    \    local prime_words_string_order = 0\n    local prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_lengths = {}\n    local prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string = \"\"\n    local prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_order = 0\n    local prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_lengths =\
    \ {}\n    local prime_words_string_prime_words_string_prime_words_order = {}\n\
    \    local prime_words_string_prime_words_string_prime_words_string = \"\"\n \
    \   local prime_words_string_prime_words_string_prime_words_string_length = 0\n\
    \    local prime_words_string_prime_words_string_prime_words_string_order = 0\n\
    \    local prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_lengths\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_lengths\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_order\
    \ = {}\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string\
    \ = \"\"\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_length\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_order\
    \ = 0\n    local prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words_string_prime_words\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgwivbjtb.lua:61: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd_7f9t1.lua:39:\
    \ expected: \"is\"\nactual: \"Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmptd_7f9t1.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  local prime_words = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_words_index = {}\n  local prime_words_length = {}\n  local\
    \ prime_words_index = {}\n  local prime_words_length = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_length = {}\n  local prime_words_index = {}\n  local\
    \ prime_words_length = {}\n  local prime_words_index = {}\n  local prime_words_length\
    \ = {}\n  local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl1w7dd30.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_len = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_len = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkk1pxvx8.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphyttae34.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = \"\"\n    local prime_words_str_len = 0\n    local prime_words_str_order\
    \ = 0\n    local prime_words_str_str = \"\"\n    local prime_words_str_str_len\
    \ = 0\n    local prime_words_str_str_order = 0\n    local prime_words_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_len = 0\n    local prime_words_str_str_str_order\
    \ = 0\n    local prime_words_str_str_str_str = \"\"\n    local prime_words_str_str_str_str_len\
    \ = 0\n    local prime_words_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_len = 0\n    local prime_words_str_str_str_str_str_order\
    \ = 0\n    local prime_words_str_str_str_str_str_str = \"\"\n    local prime_words_str_str_str_str_str_len\
    \ = 0\n    local prime_words_str_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_str_len = 0\n    local prime_words_str_str_str_str_str_str_order\
    \ = 0\n    local prime_words_str_str_str_str_str_str_str = \"\"\n    local prime_words_str_str_str_str_str_str_str_len\
    \ = 0\n    local prime_words_str_str_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_str_str_len = 0\n    local\
    \ prime_words_str_str_str_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_str_str_str_len = 0\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_str_str_str_len = 0\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_order = 0\n    local prime_words_str_str_str_str_str_str_str_str_str\
    \ = \"\"\n    local prime_words_str_str_str_str_str_str_str_str_str_len = 0\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_order = 0\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str = \"\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfxay4arf.lua:69: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiru_dfdq.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwwlpqysl.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n            end\n        end\n        if\
    \ prime then\n            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_otgvb1.lua:36:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpv_otgvb1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 1, #sentence do\n        local char = sentence:sub(i,i)\n        if char ==\
    \ \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n\
    \            primes[#primes + 1] = 1\n            primes_count = primes_count\
    \ + 1\n        end\n    end\n    for i = 1, primes_count do\n        local prime\
    \ = primes[i]\n        for j = 1, #sentence do\n            local char = sentence:sub(i,i)\n\
    \            if char == \"a\" or char == \"e\" or char == \"i\" or char == \"\
    o\" or char == \"u\" then\n                if prime == 1 then\n              \
    \      primes[#primes + 1] = 1\n                else\n                    primes[#primes\
    \ + 1] = 0\n                end\n            end\n        end\n    end\n    for\
    \ i = 1, #primes do\n        if primes[i] == 1 then\n            primes_string\
    \ = primes_string .. \" \" .. i\n        end\n    end\n    return primes_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmck5gi7.lua:50:\
    \ expected: \"is\"\nactual: \" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n\
    stack traceback:\n\t/tmp/tmpbmck5gi7.lua:50: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphve4tny.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpphve4tny.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #sentence do\n            if sentence:sub(i, i + j) == sentence:sub(j,\
    \ j) then\n                prime_word[#prime_word + 1] = sentence:sub(i, i + j)\n\
    \            end\n        end\n        prime_words[#prime_words + 1] = prime_word\n\
    \    end\n    local result = {}\n    for i = 2, #prime_words do\n        for j\
    \ = 2, #prime_words[i] do\n            if prime_words[i][j] == prime_words[i][j\
    \ - 1] then\n                table.insert(result, prime_words[i][j])\n       \
    \     end\n        end\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnamcy3p.lua:40:\
    \ expected: \"is\"\nactual: \"t\"\nstack traceback:\n\t/tmp/tmpxnamcy3p.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkqtxcos.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmprkqtxcos.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomobru6z.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpomobru6z.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    for i =\
    \ 1, #sentence do\n        local word = sentence:sub(i,i)\n        local prime\
    \ = true\n        for j = 1, #primes do\n            if primes[j] == word then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, word)\n     \
    \       table.insert(prime_words, word)\n            table.insert(prime_words_len,\
    \ #prime_words)\n        end\n    end\n    local result = \"\"\n    for i = 1,\
    \ #prime_words do\n        local word = prime_words[i]\n        local length =\
    \ prime_words_len[i]\n        if length == 1 then\n            result = result\
    \ .. word\n        else\n            for j = 1, length do\n                result\
    \ = result .. \" \" .. word\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uz0acsa.lua:52:\
    \ expected: \"is\"\nactual: \"T h h i i i s s s s           a a a a a a t t t\
    \ t t t t e e e e e e e e\"\nstack traceback:\n\t/tmp/tmp6uz0acsa.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i,i) == sentence:sub(j,j) then\n\
    \                prime_word[#prime_word+1] = sentence:sub(i,i)\n            end\n\
    \        end\n        prime_words[#prime_words+1] = prime_word\n    end\n    local\
    \ result = \"\"\n    for i = 1, #prime_words do\n        local prime_word = prime_words[i]\n\
    \        for j = 1, #prime_word do\n            if prime_word[j] ~= \"\" then\n\
    \                local prime_word_length = #prime_word[j]\n                if\
    \ prime_word_length == 1 then\n                    result = result .. prime_word[j]\n\
    \                else\n                    local prime_word_length = #prime_word[j]\n\
    \                    if prime_word_length == 2 then\n                        result\
    \ = result .. prime_word[j] .. \" \"\n                    else\n             \
    \           local prime_word_length = #prime_word[j]\n                       \
    \ if prime_word_length == 3 then\n                            result = result\
    \ .. prime_word[j] .. \" \" .. prime_word[j+1] .. \" \"\n                    \
    \    else\n                            local prime_word_length = #prime_word[j]\n\
    \                            if prime_word_length == 4 then\n                \
    \                result = result .. prime_word[j] .. \" \" .. prime_word[j+1]\
    \ .. \" \" .. prime_word[j+2] .. \" \"\n                            else\n   \
    \                             local prime_word_length = #prime_word[j]\n     \
    \                           if prime_word_length == 5 then\n                 \
    \                   result = result .. prime_word[j] .. \" \" .. prime_word[j+1]\
    \ .. \" \" .. prime_word[j+2] .. \" \" .. prime_word[j+3] .. \" \"\n         \
    \                       else\n                                    local prime_word_length\
    \ = #prime_word[j]\n                                    if prime_word_length ==\
    \ 6 then\n                                        result = result .. prime_word[j]\
    \ .. \" \" .. prime_word[j+1] .. \" \" .. prime_word[j+2] .. \" \" .. prime_word[j+3]\
    \ .. \" \" .. prime_word[j+4] .. \" \"\n                                    end\n\
    \                                end\n                            end\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrauhh4_.lua:69:\
    \ expected: \"is\"\nactual: \"hiisss   iisss   a   ttessstt\"\nstack traceback:\n\
    \t/tmp/tmpwrauhh4_.lua:69: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        result = result .. \" \" .. word\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f99wwfg.lua:40:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp5f99wwfg.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnp0_wae.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpgnp0_wae.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp96t6xusb.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = true\n       \
    \ for j = 2, #prime_words do\n            if sentence[i] == prime_words[j] then\n\
    \                prime_word = false\n                break\n            end\n\
    \        end\n        if prime_word then\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdukwnit.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmdukwnit.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            table.insert(prime_words, sentence[i])\n        end\n    end\n  \
    \  return table.concat(prime_words, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbnpi__6.lua:37:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppbnpi__6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = 1\n        for\
    \ j = 1, #sentence do\n            if sentence[i] == sentence[j] then\n      \
    \          prime_word = prime_word + 1\n            end\n        end\n       \
    \ if prime_word == 2 then\n            table.insert(prime_words, sentence[i])\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmped_feqn6.lua:34:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmped_feqn6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0cl0dsbo.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #prime_numbers do\n        local\
    \ word = sentence:sub(1, prime_numbers[i])\n        local new_word = word:gsub(\"\
    %w+\", function (word)\n            return word:sub(1, #word)\n        end)\n\
    \        result = result .. new_word\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjimmjes.lua:43:\
    \ expected: \"is\"\nactual: \"ThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpjjimmjes.lua:43: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 1, #sentence do\n        local prime = true\n        for j = 1, #primes do\n\
    \            if sentence[i] == primes[j] then\n                prime = false\n\
    \            end\n        end\n        if prime then\n            primes[#primes\
    \ + 1] = sentence[i]\n            primes_count = primes_count + 1\n        end\n\
    \    end\n    for i = 1, #primes do\n        if primes_count == i then\n     \
    \       primes_string = primes_string .. \" \" .. primes[i]\n        end\n   \
    \ end\n    return primes_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryt1j9ol.lua:42:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpryt1j9ol.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcymmom4g.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpcymmom4g.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e5us2pk.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmp2e5us2pk.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppetojm_9.lua:39:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmppetojm_9.lua:39: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             prime_word[#prime_word + 1] = sentence:sub(i, i + 1)\n         \
    \   end\n        end\n        prime_words[#prime_words + 1] = prime_word\n   \
    \ end\n    local prime_words_string = \"\"\n    for i = 1, #prime_words do\n \
    \       for j = 1, #prime_words[i] do\n            prime_words_string = prime_words_string\
    \ .. prime_words[i][j]\n        end\n    end\n    return prime_words_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4htp5tly.lua:38:\
    \ expected: \"is\"\nactual: \"hihihihihihihihihihihihihihiisisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s s  i i i i i i i i i i i i i iisisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s s  a a a a a a a a a a a a a aa a a a a a a a a a a\
    \ a a a  t t t t t t t t t t t t t tteteteteteteteteteteteteteteesesesesesesesesesesesesesesststststststststststststststtttttttttttttt\"\
    \nstack traceback:\n\t/tmp/tmp4htp5tly.lua:38: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.002 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_str2 = {}\n    local\
    \ prime_words_str3 = {}\n    local prime_words_str4 = {}\n    local prime_words_str5\
    \ = {}\n    local prime_words_str6 = {}\n    local prime_words_str7 = {}\n   \
    \ local prime_words_str8 = {}\n    local prime_words_str9 = {}\n    local prime_words_str10\
    \ = {}\n    local prime_words_str11 = {}\n    local prime_words_str12 = {}\n \
    \   local prime_words_str13 = {}\n    local prime_words_str14 = {}\n    local\
    \ prime_words_str15 = {}\n    local prime_words_str16 = {}\n    local prime_words_str17\
    \ = {}\n    local prime_words_str18 = {}\n    local prime_words_str19 = {}\n \
    \   local prime_words_str20 = {}\n    local prime_words_str21 = {}\n    local\
    \ prime_words_str22 = {}\n    local prime_words_str23 = {}\n    local prime_words_str24\
    \ = {}\n    local prime_words_str25 = {}\n    local prime_words_str26 = {}\n \
    \   local prime_words_str27 = {}\n    local prime_words_str28 = {}\n    local\
    \ prime_words_str29 = {}\n    local prime_words_str30 = {}\n    local prime_words_str31\
    \ = {}\n    local prime_words_str32 = {}\n    local prime_words_str33 = {}\n \
    \   local prime_words_str34 = {}\n    local prime_words_str35 = {}\n    local\
    \ prime_words_str36 = {}\n    local prime_words_str37 = {}\n    local prime_words_str38\
    \ = {}\n    local prime_words_str39 = {}\n    local prime_words_str40 = {}\n \
    \   local prime_words_str41 = {}\n    local prime_words_str42 = {}\n    local\
    \ prime_words_str43 = {}\n    local prime_words_str44 = {}\n    local prime_words_str45\
    \ = {}\n    local prime_words_str46 = {}\n    local prime_words_str47 = {}\n \
    \   local prime_words_str48 = {}\n    local prime_words_str49 = {}\n    local\
    \ prime_words_str50 = {}\n    local prime_words_str51 = {}\n    local prime_words_str52\
    \ = {}\n    local prime_words_str53 = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp25t5w6iq.lua:86: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_index = {}\n    local\
    \ prime_words_length = {}\n    local prime_words_index = {}\n    local prime_words_length\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_length = {}\n\
    \    local prime_words_index = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_index = {}\n    local prime_words_length = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_index = {}\n\
    \    local prime_words_length = {}\n    local prime_words_index = {}\n    local\
    \ prime_words_length = {}\n    local prime_words_index = {}\n    local prime_words_length\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_length = {}\n\
    \    local prime_words_index = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_index = {}\n    local prime_words_length = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_index = {}\n\
    \    local prime_words_length = {}\n    local prime_words_index = {}\n    local\
    \ prime_words_length = {}\n    local prime_words_index = {}\n    local prime_words_length\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_length = {}\n\
    \    local prime_words_index = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_index = {}\n    local prime_words_length = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_index = {}\n\
    \    local prime_words_length = {}\n    local prime_words_index = {}\n    local\
    \ prime_words_length = {}\n    local prime_words_index = {}\n    local prime_words_length\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_length = {}\n\
    \    local prime_words_index = {}\n    local prime_words_length = {}\n    local\
    \ prime_words_index = {}\n    local prime_words_length = {}\n    local prime_words_index\
    \ = {}\n    local prime_words_length = {}\n    local prime_words_index = {}\n\
    \    local prime_words_length = {}\n    local prime_words_index = {}\n    local\
    \ prime_words_length = {}\n    local prime_words_index = {}\n    local prime_words_length\
    \ = {}\n    local prime_words_index = {}\n    local prime_words_length = {}\n\
    \    local prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcw532aev.lua:94: 'end' expected (to close 'function' at line\
    \ 15) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    local primes_count = 0\n    local primes_string = \"\"\n    for i =\
    \ 1, #sentence do\n        local letter = sentence:sub(i,i)\n        if letter:sub(1,1)\
    \ ~= letter then\n            primes[primes_count] = letter\n            primes_count\
    \ = primes_count + 1\n        end\n    end\n    for i = 1, primes_count do\n \
    \       local prime = primes[i]\n        local prime_string = primes_string ..\
    \ \" \" .. prime\n        for j = 1, #sentence do\n            local letter =\
    \ sentence:sub(j,j)\n            if letter:sub(1,1) ~= letter then\n         \
    \       if prime == letter:sub(1,1) then\n                    primes_string =\
    \ primes_string .. \" \" .. letter\n                end\n            end\n   \
    \     end\n    end\n    return primes_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvstubdk9.lua:44:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvstubdk9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = \"\"\n       \
    \ for j = 2, #sentence do\n            if sentence:sub(i, i + j) ~= \" \" then\n\
    \                prime_word = prime_word .. sentence:sub(i, i + j)\n         \
    \   end\n        end\n        if prime_words[prime_word] == nil then\n       \
    \     prime_words[prime_word] = 1\n        else\n            prime_words[prime_word]\
    \ = prime_words[prime_word] + 1\n        end\n    end\n    local result = \"\"\
    \n    for prime_word, count in pairs(prime_words) do\n        if count == 1 then\n\
    \            result = result .. prime_word\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06d7955_.lua:42:\
    \ expected: \"is\"\nactual: \"hishis his ihis ishis is his is ahis is a his is\
    \ a this is a tehis is a teshis is a testhis is a testhis is a teststststststststststststststs\
    \ is iss is s is as is a s is a ts is a tes is a tess is a tests is a tests is\
    \ a tests is a tests is a tests as a s a ts a tes a tess a tests a tests a tests\
    \ a tests a tests a tests a tests a testttttttttttttt a  a t a te a tes a test\
    \ a test a test a test a test a test a test a test a testtestesttesttesttesttesttesttesttesttesttesttesttestestestestestestestestestestestestestestis\
    \ is ais a is a tis a teis a tesis a testis a testis a testis a testis a testis\
    \ a testis a test is is  is a is a  is a t is a te is a tes is a test is a test\
    \ is a test is a test is a test is a testa ta tea tesa testa testa testa testa\
    \ testa testa testa testa testa testis is iis isis is is is ais is a is is a tis\
    \ is a teis is a tesis is a testis is a testis is a testis is a test te tes test\
    \ test test test test test test test test test test\"\nstack traceback:\n\t/tmp/tmp06d7955_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.008 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:len() > i and primes[j] ~= sentence:len()\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence:len()\
    \ - i)\n        end\n    end\n    local result = \"\"\n    for i = 1, #primes\
    \ do\n        result = result .. sentence:sub(1, primes[i])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys_g89v7.lua:39:\
    \ expected: \"is\"\nactual: \"This is a teThis is a t\"\nstack traceback:\n\t\
    /tmp/tmpys_g89v7.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1, i+j-1)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n     \
    \   result = result .. sentence:sub(i, primes[i])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbutyf54.lua:39:\
    \ expected: \"is\"\nactual: \"Thhi\"\nstack traceback:\n\t/tmp/tmpcbutyf54.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence, 1 do\n        local prime = true\n        for\
    \ j = 2, #prime_numbers, 1 do\n            if i % prime_numbers[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(prime_numbers, i)\n \
    \       end\n    end\n    local result = {}\n    for i = 1, #prime_numbers, 1\
    \ do\n        local word = sentence:sub(1, prime_numbers[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylu4ihxr.lua:40:\
    \ expected: \"is\"\nactual: \"ThThiThisThis This isThis is a tThis is a tes\"\n\
    stack traceback:\n\t/tmp/tmpylu4ihxr.lua:40: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh90dspy.lua:39:\
    \ expected: \"is\"\nactual: \" Th Thi This This  This is This is a t This is a\
    \ tes\"\nstack traceback:\n\t/tmp/tmpbh90dspy.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n  local primes = {}\n\
    \  for i = 2, #sentence do\n    local prime = true\n    for j = 2, #primes do\n\
    \      if i % primes[j] == 0 then\n        prime = false\n        break\n    \
    \  end\n    end\n    if prime then\n      table.insert(primes, i)\n    end\n \
    \ end\n  local result = \"\"\n  for i = 1, #primes do\n    local word = sentence:sub(1,\
    \ primes[i])\n    local rest = sentence:sub(primes[i] + 1)\n    local new_word\
    \ = word:reverse()\n    result = result .. new_word\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51fijna7.lua:42:\
    \ expected: \"is\"\nactual: \"hTihTsihT sihTsi sihTt a si sihTset a si sihT\"\n\
    stack traceback:\n\t/tmp/tmp51fijna7.lua:42: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- Input: sentence = \"This is a test\"\n-- Output: \"\
    is\"\n-- Example 2:\n-- Input: sentence = \"lets go for swimming\"\n-- Output:\
    \ \"go for\"\n-- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains\
    \ only letters\nlocal function words_in_sentence(sentence)\n    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 2, #prime_numbers do\n        local\
    \ prime_number = prime_numbers[i]\n        for j = 2, #sentence do\n         \
    \   if sentence:sub(i, i + 1) ~= ' ' then\n                local word = sentence:sub(i,\
    \ i + 1)\n                table.insert(result, word)\n            end\n      \
    \  end\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt7pgf1k.lua:45:\
    \ expected: \"is\"\nactual: \"hihihihihihihihihihihihihiisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s  i i i i i i i i i i i i iisisisisisisisisisisisisiss\
    \ s s s s s s s s s s s s \"\nstack traceback:\n\t/tmp/tmpkt7pgf1k.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
