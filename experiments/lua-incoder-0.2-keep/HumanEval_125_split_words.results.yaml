language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu4vlx_a.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x1062390\nstack traceback:\n\
    \t/tmp/tmpqu4vlx_a.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpppzsowj_.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"\")\n  local num_words = #words\n  if num_words\
    \ == 0 then\n    return nil\n  elseif num_words == 1 then\n    return words\n\
    \  else\n    local num_letters = #(words[1]:lower())\n    if num_letters % 2 ~=\
    \ 0 then\n      return words\n    else\n      local letters = {}\n      for i\
    \ = 1, num_letters do\n        table.insert(letters, words[i]:lower())\n     \
    \ end\n      return letters\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio7ca_om.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpio7ca_om.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpio7ca_om.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprht8j7b9.lua:71: unfinished string near ''"[%w%''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  if words == \"\" then return\
    \ 1 end\n  local words = words:gsub(\"%w+\", \"\")\n  local count = 0\n  for i\
    \ = 1, #words do\n    if words[i]:lower() ~= words[i] then count = count + 1 end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpgbvl90.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplpgbvl90.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplpgbvl90.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8qxjxsa0.lua:9: unfinished string near ''"(%S+)''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"(,[^ ]+$)\", \" \"):gsub(\"(^,[^ ]+)\", \" \")\n  local num_words\
    \ = #words\n  if num_words == 0 then\n    return nil\n  elseif num_words == 1\
    \ then\n    return words\n  else\n    local num_letters = #(words[1]:lower())\n\
    \    if num_letters % 2 == 1 then\n      return words\n    else\n      return\
    \ words[1], words[num_words-1]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgu0w3y8t.lua:16:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpgu0w3y8t.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgu0w3y8t.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4igjho.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbe4igjho.lua:10: in local 'candidate'\n\t/tmp/tmpbe4igjho.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return nil\n  else\n    local num_words = 0\n   \
    \ local num_commas = 0\n    local num_letters = 0\n    for word in words do\n\
    \      num_words = num_words + 1\n      num_letters = num_letters + #word\n  \
    \    if word:sub(1, 1) == \"-\" then\n        num_commas = num_commas + 1\n  \
    \    end\n    end\n    if num_words == 0 then\n      return nil\n    elseif num_words\
    \ == 1 then\n      return words[1]\n    else\n      return words[1] .. \",\" ..\
    \ words[num_words]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2kmntij.lua:28:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpz2kmntij.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpz2kmntij.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  local num_words = #words\n  if num_words == 0 then\n\
    \    return 0\n  elseif num_words == 1 then\n    return 1\n  else\n    return\
    \ num_words - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewp382im.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpewp382im.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"\")\n  return words and words:gsub(\",\", \" \"\
    ):gsub(\"%z\", \"a\"):gsub(\"%z\", \"A\"):gsub(\"%z\", \"0\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjb860g3d.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpjb860g3d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjb860g3d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\", \"\")\n  if words == \"\" then\n    return 0\n  end\n\
    \  local words = words:gsub(\",\", \" \")\n  local words = words:gsub(\"%z\",\
    \ \"\")\n  return words:gsub(\"%a\", function()\n    return string.len(string.lower(string.sub(words,\
    \ 1, 1)))\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje6q821j.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpje6q821j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
