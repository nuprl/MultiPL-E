language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu4vlx_a.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x1062390\nstack traceback:\n\
    \t/tmp/tmpqu4vlx_a.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpppzsowj_.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"\")\n  local num_words = #words\n  if num_words\
    \ == 0 then\n    return nil\n  elseif num_words == 1 then\n    return words\n\
    \  else\n    local num_letters = #(words[1]:lower())\n    if num_letters % 2 ~=\
    \ 0 then\n      return words\n    else\n      local letters = {}\n      for i\
    \ = 1, num_letters do\n        table.insert(letters, words[i]:lower())\n     \
    \ end\n      return letters\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio7ca_om.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpio7ca_om.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpio7ca_om.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%p]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprht8j7b9.lua:71: unfinished string near ''"[%w%''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  if words == \"\" then return\
    \ 1 end\n  local words = words:gsub(\"%w+\", \"\")\n  local count = 0\n  for i\
    \ = 1, #words do\n    if words[i]:lower() ~= words[i] then count = count + 1 end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpgbvl90.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplpgbvl90.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplpgbvl90.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"\
    (%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\", \" \"):gsub(\"(%S+)\",\
    \ \" \"):gsub(\"(%S+)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8qxjxsa0.lua:9: unfinished string near ''"(%S+)''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"(,[^ ]+$)\", \" \"):gsub(\"(^,[^ ]+)\", \" \")\n  local num_words\
    \ = #words\n  if num_words == 0 then\n    return nil\n  elseif num_words == 1\
    \ then\n    return words\n  else\n    local num_letters = #(words[1]:lower())\n\
    \    if num_letters % 2 == 1 then\n      return words\n    else\n      return\
    \ words[1], words[num_words-1]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgu0w3y8t.lua:16:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpgu0w3y8t.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpgu0w3y8t.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4igjho.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbe4igjho.lua:10: in local 'candidate'\n\t/tmp/tmpbe4igjho.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return nil\n  else\n    local num_words = 0\n   \
    \ local num_commas = 0\n    local num_letters = 0\n    for word in words do\n\
    \      num_words = num_words + 1\n      num_letters = num_letters + #word\n  \
    \    if word:sub(1, 1) == \"-\" then\n        num_commas = num_commas + 1\n  \
    \    end\n    end\n    if num_words == 0 then\n      return nil\n    elseif num_words\
    \ == 1 then\n      return words[1]\n    else\n      return words[1] .. \",\" ..\
    \ words[num_words]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2kmntij.lua:28:\
    \ attempt to index a function value (local 'words')\nstack traceback:\n\t/tmp/tmpz2kmntij.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpz2kmntij.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  local num_words = #words\n  if num_words == 0 then\n\
    \    return 0\n  elseif num_words == 1 then\n    return 1\n  else\n    return\
    \ num_words - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewp382im.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 3\nstack traceback:\n\t/tmp/tmpewp382im.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"\")\n  return words and words:gsub(\",\", \" \"\
    ):gsub(\"%z\", \"a\"):gsub(\"%z\", \"A\"):gsub(\"%z\", \"0\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjb860g3d.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpjb860g3d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjb860g3d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\", \"\")\n  if words == \"\" then\n    return 0\n  end\n\
    \  local words = words:gsub(\",\", \" \")\n  local words = words:gsub(\"%z\",\
    \ \"\")\n  return words:gsub(\"%a\", function()\n    return string.len(string.lower(string.sub(words,\
    \ 1, 1)))\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje6q821j.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpje6q821j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\376\\377\\177-\\377]\", \"\")\n  local num_words = #words\n  local num_letters\
    \ = 0\n  for i = 1, num_words do\n    local letter = words[i]\n    if letter:lower()\
    \ ~= letter then\n      num_letters = num_letters + 1\n    end\n  end\n  return\
    \ num_letters, words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpn5rgqw0k.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %w+\", function(w)\n    w = w:lower()\n    if w == \"and\" or w == \"or\" or w\
    \ == \"but\" or w == \"yet\" then\n      return w\n    else\n      return w ..\
    \ \",\"\n    end\n  end)\n  return words:gsub(\",+\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidmpl_t_.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpidmpl_t_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\",+\", \" \")\n  return words:gsub(\"(^| )([^ ]+)($| )\", function(_,\
    \ a, b, c)\n    return a .. b:lower() .. c\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf071q5c2.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   \"\nstack traceback:\n\t/tmp/tmpf071q5c2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    return 0\n  end\n  local num_words = 0\n  for i = 1,\
    \ #words do\n    local word = words[i]\n    if word ~= \"\" then\n      num_words\
    \ = num_words + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5fi3abjf.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp5fi3abjf.lua:14: in local 'candidate'\n\t/tmp/tmp5fi3abjf.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+\")\n    if words\
    \ == nil then\n      words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+\")\n      if words\
    \ == nil then\n        words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+,[%w-]+\")\n \
    \     end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_t3jp9a.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55c8026a9810\nstack traceback:\n\
    \t/tmp/tmpg_t3jp9a.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\\
    128-\\191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\128-\\191]+\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\128-\\191,\\128-\\191]+\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\128-\\191,\\128-\\191,\\\
    128-\\191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\128-\\191,\\\
    128-\\191,\\128-\\191,\\128-\\191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\\
    128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191]+\", \"\
    %z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\\
    191,\\128-\\191,\\128-\\191,\\128-\\191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\\
    244,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\\
    128-\\191,\\128-\\191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\191,\\\
    128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\191,\\128-\\\
    191]+\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244,\\128-\\19\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpustquebu.lua:9: unfinished string near '\"[%z\x01-\x7F-,-\x13\
    '\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4igjho.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbe4igjho.lua:10: in local 'candidate'\n\t/tmp/tmpbe4igjho.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if words == nil then\n    return nil\n  end\n  local num_words = #words\n \
    \ local num_letters = 0\n  for i = 1, num_words do\n    local letters = words[i]:gsub(\"\
    [%w'-]+\", \"\")\n    local num_letters = #letters + num_letters\n  end\n  if\
    \ num_letters % 2 ~= 0 then\n    return num_letters / 2\n  else\n    return num_letters\
    \ / 2 + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpok717lk2.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpok717lk2.lua:13: in local 'candidate'\n\t/tmp/tmpok717lk2.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return nil\n    end\n    local num_words\
    \ = #words\n    local num_letters = 0\n    for i = 1, num_words do\n        local\
    \ word = words[i]\n        if word:match(\"^[%w-]+$\") then\n            num_letters\
    \ = num_letters + #word\n        else\n            num_letters = num_letters +\
    \ #word\n        end\n    end\n    if num_letters % 2 ~= 0 then\n        return\
    \ nil\n    end\n    local num_letters = num_letters / 2\n    local letters = {}\n\
    \    for i = 1, num_letters do\n        table.insert(letters, words[i])\n    end\n\
    \    return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy30c8yuc.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpy30c8yuc.lua:13: in local 'candidate'\n\t/tmp/tmpy30c8yuc.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w]+\")\n  end\n  if words\
    \ == nil then\n    return 0\n  end\n  return #words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhn570w4.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmplhn570w4.lua:16: in local 'candidate'\n\t/tmp/tmplhn570w4.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n    return words:gsub(\",\", \" \"):gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp70x4fzd.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpp70x4fzd.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*$\", \"\")\n    local words = words:gsub(\"%z\", \"%1\"\
    )\n    local words = words:gsub(\"%1\", \"%z\")\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssons60p.lua:9:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpssons60p.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpssons60p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z ]\"\
    , \" \"):gsub(\"%S+\", \" \")\n  if words == \"\" then\n    return 1\n  else\n\
    \    return #words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqgx3769.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmpnqgx3769.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8uyvnqz.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpz8uyvnqz.lua:10: in local 'candidate'\n\t/tmp/tmpz8uyvnqz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  return words:gsub(\",\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuojvsdx8.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpuojvsdx8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244]+\", \"\")\n  local num_words = #words\n  if num_words == 0 then\n \
    \   return nil\n  end\n  local num_commas = #words - 1\n  local num_letters =\
    \ #words - 1\n  local num_letters_with_odd_order = num_letters - 1\n  local letters\
    \ = {}\n  for i = 1, num_letters do\n    table.insert(letters, words[i])\n  end\n\
    \  if num_commas > 0 then\n    table.insert(letters, ',')\n  end\n  if num_letters_with_odd_order\
    \ > 0 then\n    table.insert(letters, string.char(ord('a') + (num_letters_with_odd_order\
    \ - 1)))\n  end\n  return letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dcknn0v.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp2dcknn0v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377]\", \"\"):gsub(\"%z\", \"%x\"):gsub(\"%x\", \"%z\"):gsub(\"%c\"\
    , \"%d\"):gsub(\"%d\", \"%c\")\n    local letters = {}\n    for i = 1, #words\
    \ do\n        table.insert(letters, words[i])\n    end\n    local counts = {}\n\
    \    for i = 1, #letters do\n        local letter = letters[i]\n        if counts[letter]\
    \ == nil then\n            counts[letter] = 1\n        else\n            counts[letter]\
    \ = counts[letter] + 1\n        end\n    end\n    local results = {}\n    for\
    \ i = 1, #letters do\n        local letter = letters[i]\n        if counts[letter]\
    \ % 2 == 1 then\n            table.insert(results, letter)\n        end\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpj8zd5ick.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377]'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\"):gsub(\"\
    %w+,%w+\", function(w) return w end):gsub(\"%w+,%w+,%w+\", function(w) return\
    \ w end):gsub(\"%w+,%w+,%w+,%w+\", function(w) return w end)\n  return words and\
    \ words:gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return w end):gsub(\"%w+\", function(w) return\
    \ w end):gsub(\"%w+,\", function(w) return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6kpp9xj0.lua:11: ''end'' expected (to close ''function'' at
    line 10) near ''=''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for _,\
    \ word in pairs(words) do\n    if word ~= \"\" then\n      num_words = num_words\
    \ + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0ipsojn.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpg0ipsojn.lua:14: in local 'candidate'\n\t/tmp/tmpg0ipsojn.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words\
    \ = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n\
    \  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"%w+\"\
    , \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1uyhbhj.lua:50: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words\
    \ = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\\
    1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n \
    \   local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127]+\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127]+\", \"\")\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp5a4fe2z.lua:54: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    return txt:gsub(\"%w+\", \",\")\n  else\n    return words\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet6oecx2.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f38d471750\nstack traceback:\n\
    \t/tmp/tmpet6oecx2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnwbzcnl.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmplnwbzcnl.lua:10: in local 'candidate'\n\t/tmp/tmplnwbzcnl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n    local spaces = txt:gsub(\"[%z\\1-\\127]+\", \" \")\n    local commas\
    \ = txt:gsub(\"[%z\\1-\\127]+\", \",\")\n    local letters = txt:gsub(\"[%z\\\
    1-\\127]+\", \"a\")\n    local oddLetters = txt:gsub(\"[%z\\1-\\127]+\", \"b\"\
    )\n    local evenLetters = txt:gsub(\"[%z\\1-\\127]+\", \"c\")\n    local oddLettersCount\
    \ = txt:gsub(\"[%z\\1-\\127]+\", \"d\")\n    local evenLettersCount = txt:gsub(\"\
    [%z\\1-\\127]+\", \"e\")\n    local oddLettersCount2 = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"f\")\n    local evenLettersCount2 = txt:gsub(\"[%z\\1-\\127]+\", \"g\")\n\
    \    local oddLettersCount3 = txt:gsub(\"[%z\\1-\\127]+\", \"h\")\n    local evenLettersCount3\
    \ = txt:gsub(\"[%z\\1-\\127]+\", \"i\")\n    local oddLettersCount4 = txt:gsub(\"\
    [%z\\1-\\127]+\", \"j\")\n    local evenLettersCount4 = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"k\")\n    local oddLettersCount5 = txt:gsub(\"[%z\\1-\\127]+\", \"l\")\n \
    \   local evenLettersCount5 = txt:gsub(\"[%z\\1-\\127]+\", \"m\")\n    local oddLettersCount6\
    \ = txt:gsub(\"[%z\\1-\\127]+\", \"n\")\n    local evenLettersCount6 = txt:gsub(\"\
    [%z\\1-\\127]+\", \"o\")\n    local oddLettersCount7 = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"p\")\n    local evenLettersCount7 = txt:gsub(\"[%z\\1-\\127]+\", \"q\")\n\
    \    local oddLettersCount8 = txt:gsub(\"[%z\\1-\\127]+\", \"r\")\n    local evenLettersCount8\
    \ = txt:gsub(\"[%z\\1-\\127]+\", \"s\")\n    local oddLettersCount9 = txt:gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1a6dx4hy.lua:32: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\377]\", \"\
    \")\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\377]\"\
    , \"\")\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377]\", \"\"\
    )\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\377]\",\
    \ \"\")\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\\
    177-\\377]\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\\
    377]\", \"\")\n    local words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\\
    377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    local\
    \ words = words:gsub(\"[%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\\
    377\\177-\\377\\177-\\377\\177-\\377\\177-\\377]\", \"\")\n    local words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\\
    377\\177-\\377\\177-\\377]\", \"\")\n    local words = words:gsub(\"[%z\\1-\\\
    127\\194-\\244\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\377\\177-\\\
    377\\177-\\377\\177-\\377]\", \"\")\n    local words = words:gsub(\"[%z\\1-\\\
    127\\194-\\244\\377\\\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp_eff6igs.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377]'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt\n    end\n    local num_words =\
    \ 0\n    for word in words do\n        local num_letters = #word\n        if num_letters\
    \ == 0 then\n            num_letters = 1\n        end\n        if num_letters\
    \ % 2 == 1 then\n            num_letters = num_letters + 1\n        end\n    \
    \    num_words = num_words + num_letters\n    end\n    return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09u2p8p1.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp09u2p8p1.lua:10: in local 'candidate'\n\t/tmp/tmp09u2p8p1.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"%S+\", \" \"):gsub(\"%S+\", \",\")\n  return words:gsub(\",\", \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkdka8gq.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   \"\nstack traceback:\n\t/tmp/tmpnkdka8gq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377]\", \"\"):gsub(\"%z\", \"%x\"):gsub(\"%x\", \"%z\"):gsub(\"\
    %c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"%w\", \"%x\"):gsub(\"%w\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\"):gsub(\"%c\", \"%x\"):gsub(\"%c\", \"%z\"):gsub(\"\
    %x\", \"%c\"):gsub(\"%x\", \"%w\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp4fc458yu.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if #words == 0 then\n    return 1\n  elseif #words == 1 then\n    return #words\n\
    \  else\n    local count = 0\n    for i = 1, #words do\n      if words[i] ~= \"\
    \" then\n        count = count + 1\n      end\n    end\n    return count\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpju898_i0.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpju898_i0.lua:10: in local 'candidate'\n\t/tmp/tmpju898_i0.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words\
    \ = words:gsub(\"%w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n \
    \ local words = words:gsub(\"%w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    )\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    )\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    )\n  local words = words:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjbnv8usg.lua:23: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\"):gsub(\"\
    %w+,\", \"\"):gsub(\"%w+,%w+\", \"\")\n  local num_words = 0\n  for w in words:gmatch(\"\
    %w+\") do\n    num_words = num_words + 1\n  end\n  return num_words, words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbqgvwdm.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpqbqgvwdm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z0-9]+\"\
    , \" \"):gsub(\"%S+\", \" \")\n  return words:gsub(\"(%S+)\", function (x)\n \
    \   return x:lower() .. \" \"\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3cwmt4f.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmps3cwmt4f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local wordCount = #words\n  local\
    \ words = {}\n  for i = 1, wordCount do\n    table.insert(words, words[i])\n \
    \ end\n  return wordCount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lmrik46.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp9lmrik46.lua:13: in local 'candidate'\n\t/tmp/tmp9lmrik46.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377]\", \"\"):gsub(\"%z\", \" \")\n  local words = words:gsub(\"%S+\"\
    , \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %S+\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqq2sj_bw.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377]'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\")\n\
    \  if words == \"\" then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i36k_7l.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmp1i36k_7l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\"):gsub(\"\
    %w+,\", \"\"):gsub(\"%w+,%w+\", \"\")\n  if words == \"\" then\n    return 0\n\
    \  else\n    return #words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo8g2o5y.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpjo8g2o5y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt\n    end\n    local num_letters\
    \ = #words\n    local num_commas = #words - num_letters\n    if num_commas ==\
    \ 0 then\n        return words\n    end\n    local num_letters_with_odd_order\
    \ = num_letters - 1\n    local letters = {}\n    for i = 1, num_letters_with_odd_order\
    \ do\n        table.insert(letters, words[i])\n    end\n    table.insert(letters,\
    \ words[num_letters_with_odd_order])\n    return letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb79suqn2.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpb79suqn2.lua:10: in local 'candidate'\n\t/tmp/tmpb79suqn2.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z]+\", \" \"\
    ):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"\
    [%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\"\
    , \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n\
    \  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"\
    [%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\",\
    \ \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"\
    [%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\"\
    , \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n\
    \  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"\
    [%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\",\
    \ \" \"):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"\
    [%z]+$\", \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\"\
    , \"\")\n  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n\
    \  local words = words:gsub(\"[%z]+\", \" \"):gsub(\"[%z]+$\", \"\")\n  local\
    \ words = words:gsub(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaytmorhw.lua:30: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbmidnhy9.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbmidnhy9.lua:10: in local 'candidate'\n\t/tmp/tmpbmidnhy9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\370-\\377\\376\\377\\377]\", \"\")\n  local words = words:gsub(\"%z\", \"\
    \")\n  local words = words:gsub(\"%1-\", \"\")\n  local words = words:gsub(\"\
    %2-\", \"\")\n  local words = words:gsub(\"%3-\", \"\")\n  local words = words:gsub(\"\
    %4-\", \"\")\n  local words = words:gsub(\"%5-\", \"\")\n  local words = words:gsub(\"\
    %6-\", \"\")\n  local words = words:gsub(\"%7-\", \"\")\n  local words = words:gsub(\"\
    %8-\", \"\")\n  local words = words:gsub(\"%9-\", \"\")\n  local words = words:gsub(\"\
    %a-\", \"\")\n  local words = words:gsub(\"%b-\", \"\")\n  local words = words:gsub(\"\
    %c-\", \"\")\n  local words = words:gsub(\"%d-\", \"\")\n  local words = words:gsub(\"\
    %e-\", \"\")\n  local words = words:gsub(\"%f-\", \"\")\n  local words = words:gsub(\"\
    %g-\", \"\")\n  local words = words:gsub(\"%h-\", \"\")\n  local words = words:gsub(\"\
    %i-\", \"\")\n  local words = words:gsub(\"%j-\", \"\")\n  local words = words:gsub(\"\
    %k-\", \"\")\n  local words = words:gsub(\"%l-\", \"\")\n  local words = words:gsub(\"\
    %m-\", \"\")\n  local words = words:gsub(\"%n-\", \"\")\n  local words = words:gsub(\"\
    %o-\", \"\")\n  local words = words:gsub(\"%p-\", \"\")\n  local words = words:gsub(\"\
    %q-\", \"\")\n  local words = words:gsub(\"%r-\", \"\")\n  local words = words:gsub(\"\
    %s-\", \"\")\n  local words = words:gsub(\"%t-\", \"\")\n  local words = words:gsub(\"\
    %u-\", \"\")\n  local words = words:gsub(\"%v-\", \"\")\n  local words = words:gsub(\"\
    %w-\", \"\")\n  local words = words:gsub(\"%x-\", \"\")\n  local words = words:gsub(\"\
    %y-\", \"\")\n  local words = words:gsub(\"%z-\", \"\")\n  local words = words:gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpcodipvlg.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \"\
    ,\"):gsub(\"%w+\", \" \"):gsub(\"%w+\", \" \")\n  else\n    return words\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6u4bjcz.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x561caa4dd7d0\nstack traceback:\n\
    \t/tmp/tmpa6u4bjcz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"%w+,\"\
    , \" \")\n  local words = words:gsub(\"%w+\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  local words = words:gsub(\"%w+,\", \" \")\n  local words = words:gsub(\"\
    %w+,\", \" \")\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpooedibjb.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z ]\"\
    , \" \")\n  local words_list = words:gsub(\"(%S+)\", \" \")\n  local num_words\
    \ = words_list:gsub(\"^%s*(%d+)%s*$\", \"%1\"):gsub(\"^%d+\", \"\"):gsub(\"^%s*\"\
    , \"\"):gsub(\"%s*$\", \"\")\n  return words_list, num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w3ru27i.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmp1w3ru27i.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \")\n    local words = words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local words = words:gsub(\"%w+,\", \"\
    \ \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local\
    \ words = words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \"\
    \ \"):gsub(\"%w+,\", \" \")\n    local words = words:gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local words =\
    \ words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \")\n    local words = words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \"\
    \ \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local words = words:gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    )\n    local words = words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local words = words:gsub(\"%w+,\", \"\
    \ \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local\
    \ words = words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \"\
    \ \"):gsub(\"%w+,\", \" \")\n    local words = words:gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local words =\
    \ words:gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):g\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprotor0jj.lua:22: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    return 0\n  end\n  local num_words = 0\n  for word in\
    \ words do\n    local num_letters = 0\n    for letter in word do\n      num_letters\
    \ = num_letters + 1\n    end\n    if num_letters % 2 == 1 then\n      num_words\
    \ = num_words + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7_2hlzp.lua:16:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpm7_2hlzp.lua:16: in local 'candidate'\n\t/tmp/tmpm7_2hlzp.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\376\\377]\", \"\")\n    local words = words:gsub(\",\", \" \")\n    local\
    \ words = words:gsub(\"%z\", \"\")\n    local words = words:gsub(\"%1-\", \"\"\
    )\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %1-\", \"\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp10s6j82y.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%S+\", \" \")\n    local num_words = 0\n    local num_commas = 0\n  \
    \  local num_letters = 0\n    for word in words:gmatch(\"%S+\") do\n        num_words\
    \ = num_words + 1\n        num_letters = num_letters + #word\n        if word:sub(1,\
    \ 1) ~= ',' then\n            num_commas = num_commas + 1\n        end\n    end\n\
    \    if num_words == 0 then\n        return num_letters\n    end\n    if num_commas\
    \ == 0 then\n        return num_letters\n    end\n    return num_letters - num_commas\
    \ - num_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzronzq9.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpgzronzq9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377]\", \"\"):gsub(\"%z\", \"%1\")\n  local num_words\
    \ = words:gsub(\"%z\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"\
    %1\", \"%1\"):gsub(\"%1\", \"%1\"):gsub(\"%1\", \"%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzy0pkbn_.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]+\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]?\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\\
    1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244]{2,}\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]{2,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpuwzfrkrj.lua:9: unfinished string near '\"[%z\x01-\x7F-]{2,'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244]+\", \"\")\n  local wordlist = words:gsub(\",\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"\
    %S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\", \" \")\n  local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n  local wordlist = wordlist:gsub(\"%S+\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpedhq6dv_.lua:42: unfinished string near ''"%S+''

    '
  stdout: ''
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return nil\n  end\n  local num_words = #words\n \
    \ local num_commas = #words - 1\n  local num_letters = #words[1]\n  if num_letters\
    \ % 2 ~= 0 then\n    return num_words\n  else\n    return num_letters / 2\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe36a99cs.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpe36a99cs.lua:13: in local 'candidate'\n\t/tmp/tmpe36a99cs.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq2uxti6_.lua:71: unfinished string near ''"[%w%''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea15_mr5.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x559fea12c6d0\nstack traceback:\n\
    \t/tmp/tmpea15_mr5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \"\"\
    )\n    local num_words = #words\n    local num_commas = #words - num_words\n \
    \   local num_letters = #words\n    local num_letters_with_odd_order = num_letters\
    \ - 1\n    local num_letters_with_odd_order_with_commas = num_letters_with_odd_order\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas = num_letters_with_odd_order_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas + 1\n    local\
    \ num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n    local num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas\
    \ = num_letters_with_odd_order_with_commas_with_commas_with_commas_with_commas\
    \ + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsn4qxczw.lua:40: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z]+\"\
    , \" \"):gsub(\"%S+\", \" \")\n  if words == \"\" then\n    return 0\n  else\n\
    \    return #words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw3fwj5l.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmpkw3fwj5l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4igjho.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbe4igjho.lua:10: in local 'candidate'\n\t/tmp/tmpbe4igjho.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n    local wordlist = words:gsub(\"%S+\", \" \")\n    local wordlist =\
    \ wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \"\
    \ \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n    local wordlist = wordlist:gsub(\"%S+\", \" \")\n    local wordlist\
    \ = wordlist:gsub(\"%S+\", \" \")\n    local wordlist = wordlist:gsub(\"%S+\"\
    , \" \")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphntsbe89.lua:58: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe4ek4_9.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxe4ek4_9.lua:13: in local 'candidate'\n\t/tmp/tmpxe4ek4_9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpaquot99i.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return nil\n    end\n    local num_words\
    \ = 0\n    for word in words do\n        if word ~= \"\" then\n            num_words\
    \ = num_words + 1\n        end\n    end\n    if num_words == 0 then\n        return\
    \ nil\n    end\n    local num_commas = 0\n    for word in words do\n        if\
    \ word ~= \"\" then\n            if word:sub(1, 1) ~= \",\" then\n           \
    \     num_commas = num_commas + 1\n            end\n        end\n    end\n   \
    \ if num_commas == 0 then\n        return num_words\n    end\n    return num_words\
    \ + num_commas\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn4lssb8.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpxn4lssb8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for i =\
    \ 1, #words do\n    local word = words[i]\n    if word ~= \"\" then\n      num_words\
    \ = num_words + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jsywbby.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp8jsywbby.lua:14: in local 'candidate'\n\t/tmp/tmp8jsywbby.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for word\
    \ in words do\n    local num_letters = #word\n    local num_commas = #word - num_letters\n\
    \    local num_letters_with_odd_order = num_letters - 1\n    if num_commas > 0\
    \ then\n      num_words = num_words + 1\n    end\n    if num_commas == 0 then\n\
    \      num_words = num_words + 1\n    end\n    if num_letters_with_odd_order %\
    \ 2 == 1 then\n      num_words = num_words + 1\n    end\n  end\n  return num_words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxiub0y0.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpwxiub0y0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    return txt:gsub(\"%w+\", \",\")\n  else\n    return words\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet6oecx2.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f38d471750\nstack traceback:\n\
    \t/tmp/tmpet6oecx2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w]+\")\n  end\n  if words\
    \ == nil then\n    return 0\n  end\n  local num_words = 0\n  for word in words\
    \ do\n    local num_letters = #word\n    if num_letters == 0 then\n      num_letters\
    \ = 1\n    end\n    if num_letters % 2 == 1 then\n      num_letters = num_letters\
    \ + 1\n    end\n    num_words = num_words + num_letters\n  end\n  return num_words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_6h2v5t.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmpf_6h2v5t.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z]+\", \" \"\
    ):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\",\
    \ \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+\", \",\"):gsub(\"[%w]+\", \" \"):gsub(\"[%w]+\", \",\"):gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8lh_685.lua:9: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  end\n  local num_words = 0\n  for i =\
    \ 1, #words do\n    local word = words[i]\n    if word ~= \"\" then\n      num_words\
    \ = num_words + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8qkut9_e.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp8qkut9_e.lua:14: in local 'candidate'\n\t/tmp/tmp8qkut9_e.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea15_mr5.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x559fea12c6d0\nstack traceback:\n\
    \t/tmp/tmpea15_mr5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z]+\"\
    , \" \")\n  local words = words:gsub(\"[,]+\", \" \")\n  local words = words:gsub(\"\
    [%a]+\", \" \")\n  local words = words:gsub(\"[%A]+\", \" \")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \")\n  local words = words:gsub(\"[%W]+\", \" \")\n\
    \  local words = words:gsub(\"[%c]+\", \" \")\n  local words = words:gsub(\"[%C]+\"\
    , \" \")\n  local words = words:gsub(\"[%d]+\", \" \")\n  local words = words:gsub(\"\
    [%D]+\", \" \")\n  local words = words:gsub(\"[%e]+\", \" \")\n  local words =\
    \ words:gsub(\"[%E]+\", \" \")\n  local words = words:gsub(\"[%f]+\", \" \")\n\
    \  local words = words:gsub(\"[%F]+\", \" \")\n  local words = words:gsub(\"[%g]+\"\
    , \" \")\n  local words = words:gsub(\"[%G]+\", \" \")\n  local words = words:gsub(\"\
    [%h]+\", \" \")\n  local words = words:gsub(\"[%H]+\", \" \")\n  local words =\
    \ words:gsub(\"[%I]+\", \" \")\n  local words = words:gsub(\"[%j]+\", \" \")\n\
    \  local words = words:gsub(\"[%J]+\", \" \")\n  local words = words:gsub(\"[%k]+\"\
    , \" \")\n  local words = words:gsub(\"[%K]+\", \" \")\n  local words = words:gsub(\"\
    [%l]+\", \" \")\n  local words = words:gsub(\"[%L]+\", \" \")\n  local words =\
    \ words:gsub(\"[%m]+\", \" \")\n  local words = words:gsub(\"[%M]+\", \" \")\n\
    \  local words = words:gsub(\"[%n]+\", \" \")\n  local words = words:gsub(\"[%N]+\"\
    , \" \")\n  local words = words:gsub(\"[%p]+\", \" \")\n  local words = words:gsub(\"\
    [%P]+\", \" \")\n  local words = words:gsub(\"[%r]+\", \" \")\n  local words =\
    \ words:gsub(\"[%R]+\", \" \")\n  local words = words:gsub(\"[%t]+\", \" \")\n\
    \  local words = words:gsub(\"[%\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw7h6u_yz.lua:43: unfinished string near ''"[%''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp42kibpbm.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\"):gsub(\"\
    %w+,%w+\", \"%w+\")\n  return words:gsub(\"%w\", function(c) return c:lower()\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmf6nihp.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" !\"\nstack traceback:\n\t/tmp/tmpfmf6nihp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+,[%w-]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfyf9qkwg.lua:23: unfinished string near ''"[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[%w-]+,[''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for i =\
    \ 1, #words do\n    local word = words[i]\n    if word ~= \"\" then\n      num_words\
    \ = num_words + 1\n    end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jsywbby.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp8jsywbby.lua:14: in local 'candidate'\n\t/tmp/tmp8jsywbby.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1,\
    \ #words do\n    if words[i] ~= \"\" then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeanyavse.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpeanyavse.lua:14: in local 'candidate'\n\t/tmp/tmpeanyavse.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n  local words = words:gsub(\"%z\", \" \")\n  local words = words:gsub(\"\
    %a\", \" \")\n  local words = words:gsub(\"%A\", \" \")\n  local words = words:gsub(\"\
    %w\", \" \")\n  local words = words:gsub(\"%W\", \" \")\n  local words = words:gsub(\"\
    %c\", \" \")\n  local words = words:gsub(\"%C\", \" \")\n  local words = words:gsub(\"\
    %d\", \" \")\n  local words = words:gsub(\"%D\", \" \")\n  local words = words:gsub(\"\
    %f\", \" \")\n  local words = words:gsub(\"%F\", \" \")\n  local words = words:gsub(\"\
    %g\", \" \")\n  local words = words:gsub(\"%G\", \" \")\n  local words = words:gsub(\"\
    %h\", \" \")\n  local words = words:gsub(\"%H\", \" \")\n  local words = words:gsub(\"\
    %i\", \" \")\n  local words = words:gsub(\"%I\", \" \")\n  local words = words:gsub(\"\
    %j\", \" \")\n  local words = words:gsub(\"%J\", \" \")\n  local words = words:gsub(\"\
    %k\", \" \")\n  local words = words:gsub(\"%K\", \" \")\n  local words = words:gsub(\"\
    %l\", \" \")\n  local words = words:gsub(\"%L\", \" \")\n  local words = words:gsub(\"\
    %m\", \" \")\n  local words = words:gsub(\"%M\", \" \")\n  local words = words:gsub(\"\
    %n\", \" \")\n  local words = words:gsub(\"%N\", \" \")\n  local words = words:gsub(\"\
    %p\", \" \")\n  local words = words:gsub(\"%P\", \" \")\n  local words = words:gsub(\"\
    %q\", \" \")\n  local words = words:gsub(\"%Q\", \" \")\n  local words = words:gsub(\"\
    %r\", \" \")\n  local words = words:gsub(\"%R\", \" \")\n  local words = words:gsub(\"\
    %s\", \" \")\n  local words = words:gsub(\"%S\", \" \")\n  local words = words:gsub(\"\
    %t\", \" \")\n  local words = words:gsub(\"%T\", \" \")\n  local words = words:gsub(\"\
    %u\", \" \")\n  local words = words:gsub(\"%U\", \" \")\n  local words = words:gsub(\"\
    %v\", \" \")\n  local words = words:gsub(\"%V\", \" \")\n  local words = words:gsub(\"\
    %w\", \" \")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwdf412js.lua:66: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"%w+\", \" \")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaqbhn48.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55c1b5ae1770\nstack traceback:\n\
    \t/tmp/tmpwaqbhn48.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\\
    1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\\
    244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\\
    194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\\
    1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\"\
    , \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpj57jvyje.lua:9: unfinished string near '\"[%z\x01-\x7F-'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnwbzcnl.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmplnwbzcnl.lua:10: in local 'candidate'\n\t/tmp/tmplnwbzcnl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    377\\177-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\177-\\\
    377\\200-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\177-\\\
    377\\200-\\377\\377-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    377\\177-\\377\\200-\\377\\377-\\377\\377-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\177-\\377\\200-\\377\\377-\\377\\377-\\377\\377-\\\
    377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\177-\\377\\200-\\\
    377\\377-\\377\\377-\\377\\377-\\377\\377-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\177-\\377\\200-\\377\\377-\\377\\377-\\377\\377-\\\
    377\\377-\\377\\377-\\377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    377\\177-\\377\\200-\\377\\377-\\377\\377-\\377\\377-\\377\\377-\\377\\377-\\\
    377]\", \" \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377\\177-\\377\\200-\\\
    377\\377-\\377\\377-\\377\\377-\\377\\377-\\377\\377-\\377]\", \" \"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377\\177-\\377\\200-\\377\\377-\\377\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpa839tpzy.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1,\
    \ #words do\n    count = count + #words[i]\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuqu60k24.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpuqu60k24.lua:14: in local 'candidate'\n\t/tmp/tmpuqu60k24.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnwbzcnl.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmplnwbzcnl.lua:10: in local 'candidate'\n\t/tmp/tmplnwbzcnl.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  end\n  local num_words = #words\n  local\
    \ num_commas = txt:gsub(\"[%w-]+\", \",\"):gmatch(\",\"):gsub(\"^,\", \"\"):gsub(\"\
    ,$\", \"\")\n  return num_words - num_commas\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt04ezz18.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt04ezz18.lua:13: in local 'candidate'\n\t/tmp/tmpt04ezz18.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\376\\377\\177-\\377]\", \"\")\n    local words = words:gsub(\"%z\", \"\"\
    )\n    local words = words:gsub(\"%1-\", \"\")\n    local words = words:gsub(\"\
    %-\", \"\")\n    local words = words:gsub(\"%\\177\", \"\")\n    local words =\
    \ words:gsub(\"%\\377\", \"\")\n    local words = words:gsub(\"%\\376\", \"\"\
    )\n    local words = words:gsub(\"%\\370-\", \"\")\n    local words = words:gsub(\"\
    %\\376\", \"\")\n    local words = words:gsub(\"%\\377\", \"\")\n    local words\
    \ = words:gsub(\"%\\370-\", \"\")\n    local words = words:gsub(\"%\\376\", \"\
    \")\n    local words = words:gsub(\"%\\377\", \"\")\n    local words = words:gsub(\"\
    %\\370-\", \"\")\n    local words = words:gsub(\"%\\376\", \"\")\n    local words\
    \ = words:gsub(\"%\\377\", \"\")\n    local words = words:gsub(\"%\\370-\", \"\
    \")\n    local words = words:gsub(\"%\\376\", \"\")\n    local words = words:gsub(\"\
    %\\377\", \"\")\n    local words = words:gsub(\"%\\370-\", \"\")\n    local words\
    \ = words:gsub(\"%\\376\", \"\")\n    local words = words:gsub(\"%\\377\", \"\"\
    )\n    local words = words:gsub(\"%\\370-\", \"\")\n    local words = words:gsub(\"\
    %\\376\", \"\")\n    local words = words:gsub(\"%\\377\", \"\")\n    local words\
    \ = words:gsub(\"%\\370-\", \"\")\n    local words = words:gsub(\"%\\376\", \"\
    \")\n    local words = words:gsub(\"%\\377\", \"\")\n    local words = words:gsub(\"\
    %\\370-\", \"\")\n    local words = words:gsub(\"%\\376\", \"\")\n    local words\
    \ = words:gsub(\"%\\377\", \"\")\n    local words = words:gsub(\"%\\370-\", \"\
    \")\n    local words = words:gsub(\"%\\376\", \"\")\n    local words = words:gsub(\"\
    %\\377\", \"\")\n    local words = words:gsub(\"%\\370-\", \"\")\n    local words\
    \ = words:gsub(\"%\\376\", \"\")\n    local words = words:gsub(\"%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptl4p7mec.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z ]\"\
    , \" \"):gsub(\"%S+\", \" \")\n  local num_words = words:gsub(\"%w+\", \"\"):gsub(\"\
    %w+$\", \"\")\n  return num_words, words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1p8u19d.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmpy1p8u19d.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if words == nil then\n    return 1\n  end\n  local count = 0\n  for word in\
    \ words do\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy374xl4.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpxy374xl4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgge9g1ml.lua:77: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\")\n\
    \  local comma = txt:gsub(\"%w+,\", \"\")\n  if comma == \"\" then\n    return\
    \ words\n  else\n    return comma\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lmndt6k.lua:21:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp1lmndt6k.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\"):gsub(\",$\", \"\
    \")\n  else\n    return words\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbscykxbn.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55abd25777c0\nstack traceback:\n\
    \t/tmp/tmpbscykxbn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\"\
    , \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"\
    %w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"\
    ):gsub(\"%\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnhf1mwd8.lua:9: unfinished string near ''"%''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  elseif #words == 1 then\n    return #words\
    \ + 1\n  else\n    return #words + 1\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd109f4wu.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpd109f4wu.lua:10: in local 'candidate'\n\t/tmp/tmpd109f4wu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377]\", \"\")\n    return words and words:gsub(\",\", \"\
    \ \"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\377]\", \"\"):gsub(\"%z\", \"\
    \"):gsub(\"%1-%z\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptlk3zq14.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpdmda6ouh.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  return words:gsub(\"%w+\", \"\
    \ \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcb_t64w.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpxcb_t64w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt\n    end\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%w-]+\")\n    local words = txt:gmatch(\"[%w-]+\")\n    local words = txt:gmatch(\"\
    [%\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpele8dfcb.lua:47: unfinished string near ''"[%''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \")\n  local words = words:gsub(\"%S+\", \" \")\n  local words = words:gsub(\"\
    %w+\", \" \")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\n  local words = words:gsub(\"\
    %w+\", \"\")\n  local words = words:gsub(\"%w+\", \"\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwgp0c0cm.lua:69: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[^a-zA-Z ]\"\
    , \" \"):gsub(\"%S+\", \" \"):gsub(\"%S+\", \",\")\n  return words:gsub(\",\"\
    , \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7276ab6.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"    \"\nstack traceback:\n\t/tmp/tmpz7276ab6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for word\
    \ in words do\n    if word ~= \"\" then\n      num_words = num_words + 1\n   \
    \ end\n  end\n  return num_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuowlrnaq.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpuowlrnaq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1,\
    \ #words do\n    if words[i]:find(\" \") then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv2yk0ylo.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpv2yk0ylo.lua:14: in local 'candidate'\n\t/tmp/tmpv2yk0ylo.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\376\\377]\", \"\")\n  local splits = words:gsub(\"([^ ,]+)\", \" \"):gsub(\"\
    ([^ ,]+)\", \" \")\n  local splits_count = splits:gsub(\"([^ ,]+)\", \" \"):gsub(\"\
    ([^ ,]+)\", \" \")\n  return splits_count or splits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpcx19afmz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    return words:gsub(\"%w+\",\
    \ \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtvk5rmz.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpbtvk5rmz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[^a-zA-Z ]\"\
    , \" \"):gsub(\"%s+\", \" \")\n    local num_words = #words\n    local num_letters\
    \ = #txt\n    local num_letters_with_odd_order = 0\n    local letters_with_odd_order\
    \ = {}\n    for i = 1, num_letters do\n        local letter = string.lower(txt:sub(i,\
    \ i))\n        if letter:sub(1, 1) == 'a' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'b' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'c' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'd' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'e' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'f' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'g' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'h' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'i' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'j' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'k' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'l' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'm' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'n' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:sub(1, 1) == 'o' then\n            num_letters_with_odd_order\
    \ = num_letters_with_odd_order + 1\n        end\n        if letter:sub(1, 1) ==\
    \ 'p' then\n            num_letters_with_odd_order = num_letters_with_odd_order\
    \ + 1\n        end\n        if letter:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvgonnliw.lua:65: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"([^ ,]+)\", \"\
    \ \"):gsub(\"(,[^ ]+$)\", \",\")\n  local words = words:gsub(\"(^,+)\", \" \"\
    ):gsub(\"(,+$)\", \" \")\n  return words:gsub(\"(^[%z]+)\", \" \"):gsub(\"([%z]+)$\"\
    , \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2la4shc1.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   \"\nstack traceback:\n\t/tmp/tmp2la4shc1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377]\", \"\")\n  local splits = words:gsub(\",\", \" \"\
    )\n  local letters = splits:gsub(\"[a-z]\", \"\")\n  return letters:gsub(\"[%z\\\
    1-\\127\\194-\\244\\377\\370-\\377]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpcbql13tv.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \"\")\n    if words == \"\" then\n        return nil\n    end\n\
    \    local words = words:gsub(\",\", \" \")\n    local words = words:gsub(\"%a+\"\
    , function(c) return string.lower(c) end)\n    local words = words:gsub(\"%a+\"\
    , \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    local words = words:gsub(\"%a+\", \"\")\n    local words = words:gsub(\"\
    %a+\", \"\")\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk1dg3c5d.lua:71: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local wordCount = #words\n  local\
    \ words = {}\n  for i = 1, wordCount do\n    words[i] = words[i]:lower()\n  end\n\
    \  return wordCount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpya59mm28.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpya59mm28.lua:13: in local 'candidate'\n\t/tmp/tmpya59mm28.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp42kibpbm.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w'-]+\"\
    )\n    if words == nil then\n        return nil\n    end\n    local num_words\
    \ = #words\n    local num_letters = 0\n    for i = 1, num_words do\n        local\
    \ word = words[i]\n        if word:len() > 0 then\n            num_letters = num_letters\
    \ + word:len()\n        end\n    end\n    if num_letters % 2 ~= 0 then\n     \
    \   return num_letters / 2\n    else\n        return num_letters / 2 + 1\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccv3fuig.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpccv3fuig.lua:13: in local 'candidate'\n\t/tmp/tmpccv3fuig.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if words == nil then\n    return nil\n  else\n    local num_words = 0\n   \
    \ local num_commas = 0\n    for word in words do\n      if word:sub(1, 1) ~= ','\
    \ then\n        num_words = num_words + 1\n      else\n        num_commas = num_commas\
    \ + 1\n      end\n    end\n    if num_commas == 0 then\n      return words\n \
    \   else\n      return words[num_words - 1]\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzeu83kj.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x563a77c81890\nstack traceback:\n\
    \t/tmp/tmpuzeu83kj.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  elseif #words == 1 then\n    return #words\
    \ + 1\n  else\n    return #words + 1\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd109f4wu.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpd109f4wu.lua:10: in local 'candidate'\n\t/tmp/tmpd109f4wu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \")\n    local letters = {}\n    for i = 1, #words do\n  \
    \      table.insert(letters, words[i])\n    end\n    local count = 0\n    for\
    \ i = 1, #letters do\n        if letters[i] ~= letters[i + 1] then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vmbmy6t.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmp6vmbmy6t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z]+\", \" \"\
    ):gsub(\"[%z]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local\
    \ words = words:gsub(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydine041.lua:30: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"\
    [%z\\1-\\127\\194-\\244]\", \"%z\")\n  local words = words:gsub(\"%z\", \"%1\"\
    )\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"%z\"\
    , \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\")\n  local words = words:gsub(\"\
    %z\", \"%1\")\n  local words = words:gsub(\"%1\", \"%z\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdo1il85a.lua:43: unfinished string near ''"%z''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7qsmn0.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpt_7qsmn0.lua:13: in local 'candidate'\n\t/tmp/tmpt_7qsmn0.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  local num_letters = #words\n  local letters = {}\n \
    \ for i = 1, num_letters do\n    table.insert(letters, words[i])\n  end\n  table.sort(letters)\n\
    \  local num_letters_with_odd_order = #letters - 1\n  if num_letters_with_odd_order\
    \ % 2 == 1 then\n    return num_letters_with_odd_order\n  else\n    return num_letters_with_odd_order\
    \ / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81hdkmth.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: -1\nstack traceback:\n\t/tmp/tmp81hdkmth.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\")\n\
    \  if words == \"\" then\n    return 1\n  else\n    local splits = words:gsub(\"\
    %w+\", \",\")\n    local count = 0\n    for _,v in pairs(splits) do\n      count\
    \ = count + v:lower():byte()\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxarmcdvf.lua:15:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxarmcdvf.lua:15: in local 'candidate'\n\t/tmp/tmpxarmcdvf.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea15_mr5.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x559fea12c6d0\nstack traceback:\n\
    \t/tmp/tmpea15_mr5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if #words == 0 then\n        return txt\n    end\n    local comma = txt:find(\"\
    ,\")\n    if comma == nil then\n        return #words\n    end\n    return #words\
    \ - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjf3pjf2.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpgjf3pjf2.lua:10: in local 'candidate'\n\t/tmp/tmpgjf3pjf2.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+,[%w-]+\")\n    if words\
    \ == nil then\n      words = txt:gmatch(\"[%w-]+,[%w-]+,[%w-]+\")\n    end\n \
    \ end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj7ojznw.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55968a6a9770\nstack traceback:\n\
    \t/tmp/tmpjj7ojznw.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    return 0\n  end\n  local wordCount = 0\n  for word in words\
    \ do\n    wordCount = wordCount + 1\n  end\n  return wordCount\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7krcumhp.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmp7krcumhp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\"):gsub(\"\
    %w+,\", \"\")\n  if words == \"\" then return 1 end\n  return #words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vjry7uv.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmp9vjry7uv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4u7upgd.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x15f42b0\nstack traceback:\n\
    \t/tmp/tmpd4u7upgd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    words = txt:gmatch(\"%w+,\")\n    if words == nil then\n\
    \      return #txt\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hu9ypkj.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x558e00f15700\nstack traceback:\n\
    \t/tmp/tmp2hu9ypkj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n    local counts = {}\n    for word in words:gmatch(\"\
    %w+\") do\n        counts[word] = counts[word] or 0\n        counts[word] = counts[word]\
    \ + 1\n    end\n    local results = {}\n    for word, count in pairs(counts) do\n\
    \        if count % 2 == 1 then\n            table.insert(results, word)\n   \
    \     end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj4aghb4.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpbj4aghb4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\", \"\")\n    local words = words:gsub(\"%S+\", \" \"\
    )\n    local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"\
    %S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n    local words =\
    \ words:gsub(\"%S+\", \" \")\n    local words = words:gsub(\"%S+\", \" \")\n \
    \   local words = words:gsub(\"%S+\", \" \")\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9m2k72zf.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"%w+\")\n  if\
    \ words == nil then\n    return 1\n  else\n    return #words\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_tqjoe7.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps_tqjoe7.lua:13: in local 'candidate'\n\t/tmp/tmps_tqjoe7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if #words == 0 then\n    return 1\n  else\n    return #words + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbf6iv4p.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpcbf6iv4p.lua:10: in local 'candidate'\n\t/tmp/tmpcbf6iv4p.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[^A-Za-z0-9]+\"\
    , \" \"):gsub(\"%S+\", \" \"):gsub(\"%S+\", \" \")\n    local count = {}\n   \
    \ for i = 1, #words do\n        table.insert(count, words[i])\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpm1my6n.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprpm1my6n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\"):gsub(\",$\", \"\
    \"):gsub(\"^,\", \"\"):gsub(\",$\", \"\")\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkurgm1i.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x5632b8b70850\nstack traceback:\n\
    \t/tmp/tmpqkurgm1i.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w'-]+\"\
    )\n    if #words == 0 then\n        return txt:gsub(\"[%w'-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygm84xlx.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpygm84xlx.lua:10: in local 'candidate'\n\t/tmp/tmpygm84xlx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local num_words = 0\n  for i =\
    \ 1, #words do\n    local word = words[i]\n    local num_letters = #word\n   \
    \ if num_letters == 0 then\n      num_letters = 1\n    end\n    if num_letters\
    \ % 2 == 1 then\n      num_letters = num_letters + 1\n    end\n    if num_letters\
    \ <= 26 then\n      num_words = num_words + 1\n    end\n  end\n  return num_words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7u1jtpuj.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7u1jtpuj.lua:14: in local 'candidate'\n\t/tmp/tmp7u1jtpuj.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n\
    \  end\n  if words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if\
    \ words == nil then\n    words = txt:gmatch(\"[%w-]+\")\n  end\n  if words ==\
    \ nil then\n    words = txt:gmatch(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgge9g1ml.lua:77: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  return words:gsub(\",\", \" \"):gsub(\"%w+\", \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalbx3zse.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpalbx3zse.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \"\"):gsub(\"\
    %w+,\", \"\"):gsub(\"%w+,%w+\", \"\")\n  if words == \"\" then return 1 end\n\
    \  local words = words:gsub(\"%w+\", \"\")\n  local letters = {}\n  for i = 1,\
    \ #words do\n    table.insert(letters, words[i])\n  end\n  local count = 0\n \
    \ for i = 1, #letters do\n    if letters[i] ~= letters[i+1] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb67ow36h.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpb67ow36h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w%p]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%p]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq2uxti6_.lua:71: unfinished string near ''"[%w%''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpaquot99i.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[^ ]+\")\n\
    \  if words == nil then\n    return 0\n  else\n    local count = 0\n    for word\
    \ in words do\n      count = count + 1\n      if word:sub(1, 1) == '-' then\n\
    \        count = count - 1\n      end\n    end\n    return count\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv2uyfvq.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpdv2uyfvq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  elseif #words == 1 then\n    return #words[1]\n\
    \  else\n    return #words[1]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0p1v_dze.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp0p1v_dze.lua:10: in local 'candidate'\n\t/tmp/tmp0p1v_dze.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return nil\n    end\n    local words = words\n\
    \    local num_words = 0\n    for word in words do\n        local num_letters\
    \ = #word\n        if num_letters > 0 then\n            num_words = num_words\
    \ + 1\n        end\n    end\n    return num_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjecy4qp.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpdjecy4qp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if words == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1,\
    \ #words do\n    count = count + 1\n    if words[i] ~= '' then\n      words[i]\
    \ = words[i]:lower()\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4m_8rs6.lua:14:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmph4m_8rs6.lua:14: in local 'candidate'\n\t/tmp/tmph4m_8rs6.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w'-]+\")\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words\
    \ == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n\
    \    words = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words\
    \ = txt:gmatch(\"[%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"\
    [%w'-]+\")\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\"\
    )\n  end\n  if words == nil then\n    words = txt:gmatch(\"[%w'-]+\")\n  end\n\
    \  if words == nil then\n    words = txt:gmatch(\"\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplhwq3qlx.lua:74: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return nil\n  end\n  local num_words = #words\n \
    \ local num_commas = #words - 1\n  local num_letters = 0\n  for i = 1, num_commas,\
    \ 2 do\n    num_letters = num_letters + 1\n  end\n  return num_letters, words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb673e4g6.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpb673e4g6.lua:13: in local 'candidate'\n\t/tmp/tmpb673e4g6.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n\
    \    if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n \
    \   if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n  \
    \  if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n   \
    \ if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n    if\
    \ words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n    if words\
    \ == nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n    if words ==\
    \ nil then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil\
    \ then\n        words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n \
    \       words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n  \
    \      words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n   \
    \     words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n    \
    \    words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n     \
    \   words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n      \
    \  words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n       \
    \ words = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n        words\
    \ = txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n        words =\
    \ txt:gmatch(\"[%w-]+\")\n    end\n    if words == nil then\n        words = txt:gmatch(\"\
    [%w-]+\")\n    end\n    if words == nil then\n        words = txt:gmatch(\"[%w-]+\"\
    )\n    end\n    if words == nil then\n        words = txt:gmatch(\"[%w-]+\")\n\
    \    end\n    if words == nil then\n        words = txt:gmatch(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ppqrfu5.lua:77: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    return words:gsub(\"%w+\",\
    \ \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtvk5rmz.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"   !\"\nstack traceback:\n\t/tmp/tmpbtvk5rmz.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return 1\n  else\n    return #words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn8a2keiz.lua:13:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn8a2keiz.lua:13: in local 'candidate'\n\t/tmp/tmpn8a2keiz.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n    local\
    \ letters = {}\n    for i = 1, #words do\n        table.insert(letters, words[i])\n\
    \    end\n    local count = 0\n    for i = 1, #letters do\n        if letters[i]\
    \ ~= letters[i+1] then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg0njlnu.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmpxg0njlnu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%w]+\", \" \"\
    ):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local\
    \ words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words =\
    \ words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"\
    [%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\",\
    \ \" \"):gsub(\"[%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"\
    [%w]+$\", \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\"\
    , \"\")\n  local words = words:gsub(\"[%w]+\", \" \"):gsub(\"[%w]+$\", \"\")\n\
    \  local words = words:gsub(\"[%w]+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxp8vjmj3.lua:29: unfinished string near ''"[%w]+''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return #txt\n  else\n    return words\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea15_mr5.lua:20:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x559fea12c6d0\nstack traceback:\n\
    \t/tmp/tmpea15_mr5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+\", \",\")\n  local count = 1\n  for i = 1, #words do\n    if words[i]\
    \ ~= \"\" then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaszpj2ef.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 5\nstack traceback:\n\t/tmp/tmpaszpj2ef.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\
    \")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words =\
    \ words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\\
    1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\"\
    , \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words\
    \ = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\\
    244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n\
    \    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\\
    244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n\
    \    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\\
    244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n\
    \    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"\
    [%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\\
    244]+\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n\
    \    words = words:gsub(\"[%z\\1-\\127\\194-\\244]+\", \"\")\n    words = words:gsub(\"\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgi6jfzu6.lua:33: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gmatch(\"[%w-]+\"\
    )\n    if words == nil then\n        return txt:gsub(\"[%w-]+\", \",\")\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1wszyel.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55f9ba19d720\nstack traceback:\n\
    \t/tmp/tmpd1wszyel.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659799950
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\377\\376\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpdmda6ouh.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n    local words = txt:gsub(\"[%z\\1-\\127]+\"\
    , \"\")\n    local num_words = #words\n    local num_letters = 0\n    for i =\
    \ 1, num_words do\n        local letters = words[i]:gsub(\"[%z\\1-\\127]+\", \"\
    \")\n        num_letters = #letters + num_letters\n    end\n    return num_letters,\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplem65aof.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmplem65aof.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if #words == 0 then\n    return 1\n  elseif #words == 1 then\n    return #words\
    \ + 1\n  else\n    return #words + 1\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd109f4wu.lua:10:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpd109f4wu.lua:10: in local 'candidate'\n\t/tmp/tmpd109f4wu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\370-\\376\\377]\", \"\")\n  local words = words:gsub(\"%z\", \"%1\")\n  local\
    \ words = words:gsub(\"%1\", \"%2\")\n  local words = words:gsub(\"%2\", \"%3\"\
    )\n  local words = words:gsub(\"%3\", \"%4\")\n  local words = words:gsub(\"%4\"\
    , \"%5\")\n  local words = words:gsub(\"%5\", \"%6\")\n  local words = words:gsub(\"\
    %6\", \"%7\")\n  local words = words:gsub(\"%7\", \"%8\")\n  local words = words:gsub(\"\
    %8\", \"%9\")\n  local words = words:gsub(\"%9\", \"%A\")\n  local words = words:gsub(\"\
    %A\", \"%B\")\n  local words = words:gsub(\"%B\", \"%C\")\n  local words = words:gsub(\"\
    %C\", \"%D\")\n  local words = words:gsub(\"%D\", \"%E\")\n  local words = words:gsub(\"\
    %E\", \"%F\")\n  local words = words:gsub(\"%F\", \"%G\")\n  local words = words:gsub(\"\
    %G\", \"%H\")\n  local words = words:gsub(\"%H\", \"%I\")\n  local words = words:gsub(\"\
    %I\", \"%J\")\n  local words = words:gsub(\"%J\", \"%K\")\n  local words = words:gsub(\"\
    %K\", \"%L\")\n  local words = words:gsub(\"%L\", \"%M\")\n  local words = words:gsub(\"\
    %M\", \"%N\")\n  local words = words:gsub(\"%N\", \"%O\")\n  local words = words:gsub(\"\
    %O\", \"%P\")\n  local words = words:gsub(\"%P\", \"%Q\")\n  local words = words:gsub(\"\
    %Q\", \"%R\")\n  local words = words:gsub(\"%R\", \"%S\")\n  local words = words:gsub(\"\
    %S\", \"%T\")\n  local words = words:gsub(\"%T\", \"%U\")\n  local words = words:gsub(\"\
    %U\", \"%V\")\n  local words = words:gsub(\"%V\", \"%W\")\n  local words = words:gsub(\"\
    %W\", \"%X\")\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxe2n95yt.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\\
    370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\"\
    , \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\\
    127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\\
    377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\\
    377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\\
    244\\377\\370-\\376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\\
    376\\377]\", \"\"):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"\
    ):gsub(\"[%z\\1-\\127\\194-\\244\\377\\370-\\376\\377]\", \"\"):gsub(\"\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp5lna173z.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") ==\
    \ 3\nlocal function split_words(txt)\n  local words = txt:gsub(\"[%z\\1-\\127\\\
    194-\\244\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\\
    377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\\
    377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\\
    376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\370-\\376\\377\\377\\\
    370-\\376\\377\\377\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvv1suznz.lua:9: decimal escape too large near '\"[%z\x01-\x7F\
    -\\377\\'\n"
  stdout: ''
