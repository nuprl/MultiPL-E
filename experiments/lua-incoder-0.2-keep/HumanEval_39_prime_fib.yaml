name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
  -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n\
    \  if n == 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3\
    \ end\n  -- recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n /\
    \ 2)\n    return m + prime_fib(n / 2)\n  end\n  -- recursive case\n  local m =\
    \ prime_fib(n / 2)\n  return prime_fib(n / 2) + m\nend", "  -- base case\n  if\
    \ n < 2 then\n    return 1\n  end", "  if n < 2 then\n    return 1\n  elseif n\
    \ < 5 then\n    return 2\n  elseif n < 13 then\n    return 3\n  elseif n < 21\
    \ then\n    return 5\n  else\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \  end\nend", "  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n \
    \ if n == 3 then return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n\
    \  local fibs = prime_fib(n / 2)\n  local fib = fibs + fibs + 1\n  return fib\n\
    end", "  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if\
    \ n == 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n\
    \  -- recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n \
    \   return m + prime_fib(n / 2)\n  end\n  -- recursive case\n  if n % 3 == 0 then\n\
    \    local m = prime_fib(n / 3)\n    return m + prime_fib(n / 3)\n  end\n  --\
    \ recursive case\n  if n % 5 == 0 then\n    local m = prime_fib(n / 5)\n    return\
    \ m + prime_fib(n / 5)\n  end\n  -- recursive case\n  return prime_fib(n / 2)\
    \ + prime_fib(n / 3)\nend", "  if n < 2 then\n    return n\n  elseif n < 5 then\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 3) + prime_fib(n - 5)\n  end\nend", "  if n < 2 then\n\
    \    return 1\n  elseif n < 3 then\n    return 2\n  elseif n % 2 == 0 then\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 3)\n  end\nend", "  local fib = {}\n  fib[1] = 1\n  fib[2]\
    \ = 2\n  for i = 4, n, 1 do\n    fib[i] = fib[i - 1] + fib[i - 2]\n  end\n  return\
    \ fib[n]\nend", "  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3) + prime_fib(n - 5)\n  end\nend", "  if n < 2 then return n end\n  if n\
    \ == 2 then return 1 end\n  if n == 3 then return 2 end\n  if n % 2 == 0 then\
    \ return prime_fib(n - 1) + prime_fib(n - 2) end\n  local i = 3\n  while i * i\
    \ <= n do\n    if n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n\
    \ - 1)\n    end\n    i = i + 2\n  end\n  return prime_fib(n * 2) + prime_fib(n\
    \ * 3)\nend", "  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n\
    \  if n == 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2\
    \ end\n  -- recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n\
    \ - 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end", "  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n ==\
    \ 3 then return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local\
    \ i = 3\n  while i <= n do\n    i = i + 2\n    if n % i == 0 then return i end\n\
    \  end\n  return n\nend", "  if n < 2 then return 1 end\n  if n == 2 then return\
    \ 1 end\n  if n == 3 then return 2 end\n  if n % 2 == 0 then return prime_fib(n\
    \ / 2) end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n   \
    \   return prime_fib((n / i) + 1)\n    end\n    i = i + 2\n  end\n  return n\n\
    end", "  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif\
    \ n == 3 then\n    return 5\n  else\n    local fibs = prime_fib(n - 1)\n    return\
    \ fibs + fibs + fibs + 1\n  end\nend", "  local fib = {}\n  fib[1] = 1\n  fib[2]\
    \ = fib[1]\n  for i = 2, n do\n    fib[i] = fib[i - 1] + fib[i - 2]\n  end\n \
    \ return fib[n]\nend", "  -- base case\n  if n < 2 then return 1 end\n  -- recursive\
    \ case\n  if n == 2 then return 1 end\n  -- recursive case\n  if n == 3 then return\
    \ 2 end\n  -- recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n\
    \ - 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n == 2 then return\
    \ 2 end\n  -- Recursive case\n  if n == 3 then return 3 end\n  -- Recursive case\n\
    \  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- Recursive\
    \ case\n  if n % 3 == 0 then return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3) end\n  -- Recursive case\n  return prime_fib(n - 1) + prime_fib(n - 2)\n\
    end", "  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif\
    \ n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend", "  -- base case\n\
    \  if n < 2 then return 1 end\n  -- recursive case\n  if n == 1 then return 2\
    \ end\n  -- recursive case\n  if n == 2 then return 3 end\n  -- recursive case\n\
    \  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive case\n  return\
    \ prime_fib(3 * n + 1) - prime_fib(n / 2)\nend", "  if n < 2 then return 1 end\n\
    \  if n == 2 then return 1 end\n  if n == 3 then return 2 end\n  if n % 2 == 0\
    \ then return prime_fib(n / 2) end\n  local fibs = prime_fib(n / 2)\n  local fibs_2\
    \ = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n / 2)\n  local fibs_4 = prime_fib(n\
    \ / 2)\n  local fibs_5 = prime_fib(n / 2)\n  local fibs_6 = prime_fib(n / 2)\n\
    \  local fibs_7 = prime_fib(n / 2)\n  local fibs_8 = prime_fib(n / 2)\n  local\
    \ fibs_9 = prime_fib(n / 2)\n  local fibs_10 = prime_fib(n / 2)\n  local fibs_11\
    \ = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n / 2)\n  local fibs_13 = prime_fib(n\
    \ / 2)\n  local fibs_14 = prime_fib(n / 2)\n  local fibs_15 = prime_fib(n / 2)\n\
    \  local fibs_16 = prime_fib(n / 2)\n  local fibs_17 = prime_fib(n / 2)\n  local\
    \ fibs_18 = prime_fib(n / 2)\n  local fibs_19 = prime_fib(n / 2)\n  local fibs_20\
    \ = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n / 2)\n  local fibs_22 = prime_fib(n\
    \ / 2)\n  local fibs_23 = prime_fib(n / 2)\n  local fibs_24 = prime_fib(n / 2)\n\
    \  local fibs_25 = prime_fib(n / 2)\n  local fibs_26 = prime_fib(n / 2)\n  local\
    \ fibs_27 = prime_fib(n / 2)\n  local fibs_28 = prime_fib(n / 2)\n  local fibs_29\
    \ = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n / 2)\n  local fibs_31 = prime_fib(n\
    \ / 2)\n  local fibs_32 = prime_fib(n / 2)\n  local fibs_33 = prime_fib(n / 2)\n\
    \  local fibs_34 = prime_fib(n / 2)\n  local fibs_35 = prime_fib("]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
