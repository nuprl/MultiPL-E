language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz8z62ks.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfz8z62ks.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_value =\
    \ i\n      if divisor_value > max_divisor_value then\n        max_divisor_value\
    \ = divisor_value\n        max_divisor_value_n = 1\n      else\n        max_divisor_value\
    \ = max_divisor_value_n\n      end\n    end\n    max_divisor_value_n = max_divisor_value_n\
    \ ^ i\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrtmolse.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjrtmolse.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx344g7pf.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx344g7pf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = i\n            end\n        end\n\
    \    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt8st2vv.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvt8st2vv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is one less than the square root of n\n  local max_divisor\
    \ = math.floor(math.sqrt(n))\n  -- If n is a perfect square, return its square\
    \ root\n  if n == max_divisor then\n    return max_divisor\n  -- Otherwise, find\
    \ the largest divisor smaller than n\n  else\n    -- If n is evenly divisible\
    \ by max_divisor, return max_divisor\n    if n % max_divisor == 0 then\n     \
    \ return max_divisor\n    -- Otherwise, find the largest divisor smaller than\
    \ max_divisor\n    else\n      -- If n is evenly divisible by max_divisor + 1,\
    \ return max_divisor + 1\n      if n % max_divisor == 1 then\n        return max_divisor\
    \ + 1\n      -- Otherwise, find the largest divisor smaller than max_divisor +\
    \ 1\n      else\n        -- If n is evenly divisible by max_divisor + 2, return\
    \ max_divisor + 2\n        if n % max_divisor == 2 then\n          return max_divisor\
    \ + 2\n        -- Otherwise, find the largest divisor smaller than max_divisor\
    \ + 2\n        else\n          -- If n is evenly divisible by max_divisor + 3,\
    \ return max_divisor + 3\n          if n % max_divisor == 3 then\n           \
    \ return max_divisor + 3\n          -- Otherwise, find the largest divisor smaller\
    \ than max_divisor + 3\n          else\n            -- If n is evenly divisible\
    \ by max_divisor + 4, return max_divisor + 4\n            if n % max_divisor ==\
    \ 4 then\n              return max_divisor + 4\n            -- Otherwise, find\
    \ the largest divisor smaller than max_divisor + 4\n            else\n       \
    \       -- If n is evenly divisible by max_divisor + 5, return max_divisor + 5\n\
    \              if n % max_divisor == 5 then\n                return max_divisor\
    \ + 5\n              -- Otherwise, find the largest divisor smaller than max_divisor\
    \ + 5\n              else\n                -- If n is evenly divisible by max_divisor\
    \ + 6, return max_divisor + 6\n                if n % max_divisor == 6 then\n\
    \                  return max_divisor + 6\n                -- Otherwise, find\
    \ the largest divisor smaller than max_divisor + 6\n                else\n   \
    \               -- If n is evenly divisible by max_divisor + 7, return max_divisor\
    \ + 7\n                  if n % max_divisor == 7 then\n                    return\
    \ max_divisor + 7\n                  -- Otherwise, find the largest divisor smaller\
    \ than max_divisor + 7\n                  else\n                    -- If n is\
    \ evenly divisible by max_divisor + 8, return max_divisor + 8\n              \
    \      if n % \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmu2fl_bp.lua:54: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_m1mn_5.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy_m1mn_5.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then return 1 end\n  -- Recursive case\n  if n %\
    \ 2 == 0 then return largest_divisor(n / 2) end\n  -- Recursive case\n  if n %\
    \ 3 == 0 then return largest_divisor(n / 3) end\n  -- Recursive case\n  if n %\
    \ 5 == 0 then return largest_divisor(n / 5) end\n  -- Recursive case\n  if n %\
    \ 7 == 0 then return largest_divisor(n / 7) end\n  -- Recursive case\n  if n %\
    \ 11 == 0 then return largest_divisor(n / 11) end\n  -- Recursive case\n  if n\
    \ % 13 == 0 then return largest_divisor(n / 13) end\n  -- Recursive case\n  if\
    \ n % 17 == 0 then return largest_divisor(n / 17) end\n  -- Recursive case\n \
    \ if n % 19 == 0 then return largest_divisor(n / 19) end\n  -- Recursive case\n\
    \  if n % 23 == 0 then return largest_divisor(n / 23) end\n  -- Recursive case\n\
    \  if n % 29 == 0 then return largest_divisor(n / 29) end\n  -- Recursive case\n\
    \  if n % 31 == 0 then return largest_divisor(n / 31) end\n  -- Recursive case\n\
    \  if n % 37 == 0 then return largest_divisor(n / 37) end\n  -- Recursive case\n\
    \  if n % 41 == 0 then return largest_divisor(n / 41) end\n  -- Recursive case\n\
    \  if n % 43 == 0 then return largest_divisor(n / 43) end\n  -- Recursive case\n\
    \  if n % 47 == 0 then return largest_divisor(n / 47) end\n  -- Recursive case\n\
    \  if n % 53 == 0 then return largest_divisor(n / 53) end\n  -- Recursive case\n\
    \  if n % 59 == 0 then return largest_divisor(n / 59) end\n  -- Recursive case\n\
    \  if n % 61 == 0 then return largest_divisor(n / 61) end\n  -- Recursive case\n\
    \  if n % 67 == 0 then return largest_divisor(n / 67) end\n  -- Recursive case\n\
    \  if n % 71 == 0 then return largest_divisor(n / 71) end\n  -- Recursive case\n\
    \  if n % 73 == 0 then return largest_divisor(n / 73) end\n  -- Recursive case\n\
    \  if n % 79 == 0 then return largest_divisor(n / 79) end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpye45k0vz.lua:62: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_square = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            local\
    \ divisor_square = i * i\n            if divisor_square > max_divisor_square then\n\
    \                max_divisor = divisor\n                max_divisor_square = divisor_square\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalx7qot1.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpalx7qot1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvkas_57.lua:23:\
    \ expected: 5, actual: 1.0\nstack traceback:\n\t/tmp/tmpzvkas_57.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprga7uaoa.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprga7uaoa.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor, max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3thatv0v.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3thatv0v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvkas_57.lua:23:\
    \ expected: 5, actual: 1.0\nstack traceback:\n\t/tmp/tmpzvkas_57.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor_value = i\n      \
    \      if divisor_value > max_divisor then\n                max_divisor = divisor_value\n\
    \                max_divisor_value = i\n            end\n        end\n    end\n\
    \    return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0ptfnqq.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu0ptfnqq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    local divisor = i\n    while divisor > 1 do\n  \
    \    divisor = divisor / 2\n    end\n    if n % divisor == 0 then\n      if divisor\
    \ > max_divisor then\n        max_divisor = divisor\n        max_divisor_remainder\
    \ = n % divisor\n        max_divisor_remainder_pow = i\n      end\n    end\n \
    \ end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe5675iz.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpqe5675iz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by checking if n is evenly divisible by 2\n  if n % 2 == 0 then\n\
    \    -- If n is evenly divisible by 2, we check if n is evenly divisible by 3\n\
    \    if n % 3 == 0 then\n      -- If n is evenly divisible by 3, we check if n\
    \ is evenly divisible by 5\n      if n % 5 == 0 then\n        -- If n is evenly\
    \ divisible by 5, we check if n is evenly divisible by 7\n        if n % 7 ==\
    \ 0 then\n          -- If n is evenly divisible by 7, we check if n is evenly\
    \ divisible by 11\n          if n % 11 == 0 then\n            -- If n is evenly\
    \ divisible by 11, we check if n is evenly divisible by 13\n            if n %\
    \ 13 == 0 then\n              -- If n is evenly divisible by 13, we check if n\
    \ is evenly divisible by 17\n              if n % 17 == 0 then\n             \
    \   -- If n is evenly divisible by 17, we check if n is evenly divisible by 19\n\
    \                if n % 19 == 0 then\n                  -- If n is evenly divisible\
    \ by 19, we check if n is evenly divisible by 23\n                  if n % 23\
    \ == 0 then\n                    -- If n is evenly divisible by 23, we check if\
    \ n is evenly divisible by 29\n                    if n % 29 == 0 then\n     \
    \                 -- If n is evenly divisible by 29, we check if n is evenly divisible\
    \ by 31\n                      if n % 31 == 0 then\n                        --\
    \ If n is evenly divisible by 31, we check if n is evenly divisible by 37\n  \
    \                      if n % 37 == 0 then\n                          -- If n\
    \ is evenly divisible by 37, we check if n is evenly divisible by 41\n       \
    \                   if n % 41 == 0 then\n                            -- If n is\
    \ evenly divisible by 41, we check if n is evenly divisible by 43\n          \
    \                  if n % 43 == 0 then\n                              -- If n\
    \ is evenly divisible by 43, we check if n is evenly divisible by 47\n       \
    \                       if n % 47 == 0 then\n                                --\
    \ If n is evenly divisible by 47, we check if n is evenly divisible by 53\n  \
    \                              if n % 53 == 0 then\n                         \
    \         -- If n is evenly divisible by 53, we check if n is evenly divisible\
    \ by 59\n                                  if n % 59 == 0 then\n             \
    \                       -- If n is evenly divisible by 59, we check if n is evenly\
    \ divisible by 61\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpie8s79uj.lua:51: ''end'' expected (to close ''if'' at line
    38) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapgznquu.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpapgznquu.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ % i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zgqm4aj.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp4zgqm4aj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 1, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_0jeqjp.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq_0jeqjp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = math.floor(n/i)\n    if divisor > max_divisor then\n    \
    \  max_divisor = divisor\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor_remainder\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47j_zvkb.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp47j_zvkb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_square = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            local\
    \ divisor_square = i * i\n            if divisor_square > max_divisor_square then\n\
    \                max_divisor = divisor\n                max_divisor_square = divisor_square\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalx7qot1.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpalx7qot1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local divisor = i\n      if\
    \ divisor > max_divisor then\n        max_divisor = divisor\n        max_divisor_p\
    \ = i\n      end\n      if divisor > max_divisor_n then\n        max_divisor_n\
    \ = divisor\n      end\n    end\n  end\n  return max_divisor_p, max_divisor_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7iwlktp7.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7iwlktp7.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            local div = i / n\n            if div > max_div\
    \ then\n                max_div = div\n                max_div_n = n\n       \
    \     end\n        end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_uydvxm.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpn_uydvxm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpn_uydvxm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    while max_divisor_remainder\
    \ > 1 do\n        max_divisor = max_divisor + 1\n        max_divisor_remainder\
    \ = max_divisor_remainder / max_divisor\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn05_o7lc.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn05_o7lc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswyn1lf7.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpswyn1lf7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  local max_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder = 1\n  local max_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder = 1\n\
    \  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor = 1\n\
    \  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  local max_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor_remainder_divisor\
    \ = 1\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsyetrx3p.lua:38: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n      end\n      if divisor > max_divisor_value\
    \ then\n        max_divisor_value = divisor\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy9s5qwg.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzy9s5qwg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  local max_divisor_pp = 1\n  local max_divisor_nn = n\n  local max_divisor_ppp\
    \ = 1\n  local max_divisor_pnn = 1\n  local max_divisor_pnnn = n\n  local max_divisor_pnnnn\
    \ = n\n  local max_divisor_pnnnnn = n\n  local max_divisor_pnnnnnn = n\n  local\
    \ max_divisor_pnnnnnnn = n\n  local max_divisor_pnnnnnnnn = n\n  local max_divisor_pnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnn =\
    \ n\n  local max_divisor_pnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnnnnnnnnn\
    \ = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn = n\n  local max_divisor_pnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0q7iefir.lua:48: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfgmn6fh5.lua:68: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor_remainder\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkne0jdek.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkne0jdek.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            divisor =\
    \ i\n            if max_divisor < divisor then\n                max_divisor =\
    \ divisor\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kr3_moe.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5kr3_moe.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even.\n  -- The largest divisor\
    \ is n because n is odd.\n  -- The largest divisor is n+1 because n is odd and\
    \ n+1 is even.\n  -- The largest divisor is n+2 because n is odd and n+2 is even.\n\
    \  -- The largest divisor is n+3 because n is odd and n+3 is even.\n  -- The largest\
    \ divisor is n+4 because n is odd and n+4 is even.\n  -- The largest divisor is\
    \ n+5 because n is odd and n+5 is even.\n  -- The largest divisor is n+6 because\
    \ n is odd and n+6 is even.\n  -- The largest divisor is n+7 because n is odd\
    \ and n+7 is even.\n  -- The largest divisor is n+8 because n is odd and n+8 is\
    \ even.\n  -- The largest divisor is n+9 because n is odd and n+9 is even.\n \
    \ -- The largest divisor is n+10 because n is odd and n+10 is even.\n  -- The\
    \ largest divisor is n+11 because n is odd and n+11 is even.\n  -- The largest\
    \ divisor is n+12 because n is odd and n+12 is even.\n  -- The largest divisor\
    \ is n+13 because n is odd and n+13 is even.\n  -- The largest divisor is n+14\
    \ because n is odd and n+14 is even.\n  -- The largest divisor is n+15 because\
    \ n is odd and n+15 is even.\n  -- The largest divisor is n+16 because n is odd\
    \ and n+16 is even.\n  -- The largest divisor is n+17 because n is odd and n+17\
    \ is even.\n  -- The largest divisor is n+18 because n is odd and n+18 is even.\n\
    \  -- The largest divisor is n+19 because n is odd and n+19 is even.\n  -- The\
    \ largest divisor is n+20 because n is odd and n+20 is even.\n  -- The largest\
    \ divisor is n+21 because n is odd and n+21 is even.\n  -- The largest divisor\
    \ is n+22 because n is odd and n+22 is even.\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk6oyeve_.lua:41: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpirr3kj9_.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzraf6mwy.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Initialize largest divisor to 1\n  local largest = 1\n  -- Initialize largest\
    \ divisor to 0\n  local largest2 = 0\n  -- Initialize largest divisor to 0\n \
    \ local largest3 = 0\n  -- Initialize largest divisor to 0\n  local largest4 =\
    \ 0\n  -- Initialize largest divisor to 0\n  local largest5 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest6 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest7 = 0\n  -- Initialize largest divisor to 0\n  local largest8\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest9 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest10 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest11 = 0\n  -- Initialize largest divisor to 0\n  local largest12\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest13 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest14 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest15 = 0\n  -- Initialize largest divisor to 0\n  local largest16\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest17 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest18 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest19 = 0\n  -- Initialize largest divisor to 0\n  local largest20\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest21 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest22 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest23 = 0\n  -- Initialize largest divisor to 0\n  local largest24\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest25 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest26 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest27 = 0\n  -- Initialize largest divisor to 0\n  local largest28\
    \ = 0\n  -- Initialize largest divisor to 0\n  local largest29 = 0\n  -- Initialize\
    \ largest divisor to 0\n  local largest30 = 0\n  -- Initialize largest divisor\
    \ to 0\n  local largest31 = 0\n  -- Initialize largest divisor to 0\n  local largest32\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdy9nc_7e.lua:81: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5gff1mc5.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxazf2j3z.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxazf2j3z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  else\n                max_divisor_value = max_divisor / i\n            end\n\
    \        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa_zgowh.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfa_zgowh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  local max_divisor_ppppp\
    \ = 1\n  local max_divisor_pppppp = 1\n  local max_divisor_ppppppp = 1\n  local\
    \ max_divisor_pppppppp = 1\n  local max_divisor_ppppppppp = 1\n  local max_divisor_pppppppppp\
    \ = 1\n  local max_divisor_ppppppppppp = 1\n  local max_divisor_pppppppppppp =\
    \ 1\n  local max_divisor_ppppppppppppp = 1\n  local max_divisor_ppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppp = 1\n  local max_divisor_ppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_pppppppppppppppppppppp = 1\n  local max_divisor_ppppppppppppppppppppp\
    \ = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0gq2yp0.lua:54: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/3)\
    \ + 1\n    local max_div3 = math.floor(n/7) + 1\n    local max_div4 = math.floor(n/11)\
    \ + 1\n    local max_div5 = math.floor(n/13) + 1\n    local max_div6 = math.floor(n/17)\
    \ + 1\n    local max_div7 = math.floor(n/19) + 1\n    local max_div8 = math.floor(n/23)\
    \ + 1\n    local max_div9 = math.floor(n/29) + 1\n    local max_div10 = math.floor(n/31)\
    \ + 1\n    local max_div11 = math.floor(n/37) + 1\n    local max_div12 = math.floor(n/41)\
    \ + 1\n    local max_div13 = math.floor(n/43) + 1\n    local max_div14 = math.floor(n/47)\
    \ + 1\n    local max_div15 = math.floor(n/53) + 1\n    local max_div16 = math.floor(n/59)\
    \ + 1\n    local max_div17 = math.floor(n/61) + 1\n    local max_div18 = math.floor(n/67)\
    \ + 1\n    local max_div19 = math.floor(n/71) + 1\n    local max_div20 = math.floor(n/73)\
    \ + 1\n    local max_div21 = math.floor(n/79) + 1\n    local max_div22 = math.floor(n/83)\
    \ + 1\n    local max_div23 = math.floor(n/89) + 1\n    local max_div24 = math.floor(n/97)\
    \ + 1\n    local max_div25 = math.floor(n/101) + 1\n    local max_div26 = math.floor(n/103)\
    \ + 1\n    local max_div27 = math.floor(n/107) + 1\n    local max_div28 = math.floor(n/109)\
    \ + 1\n    local max_div29 = math.floor(n/113) + 1\n    local max_div30 = math.floor(n/127)\
    \ + 1\n    local max_div31 = math.floor(n/13) + 1\n    local max_div32 = math.floor(n/137)\
    \ + 1\n    local max_div33 = math.floor(n/143) + 2\n    local max_div34 = math.floor(n/149)\
    \ + 2\n    local max_div35 = math.floor(n/153) + 2\n    local max_div36 = math.floor(n/157)\
    \ + 2\n    local max_div37 = math.floor(n/163) + 2\n    local max_div38 = math.floor(n/169)\
    \ + 2\n    local max_div39 = math.floor(n/173) + 2\n    local max_div40 = math.floor(n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpchqqxmd_.lua:45: '')'' expected (to close ''('' at line 44)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr24zno4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbr24zno4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0_vjjl7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo0_vjjl7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by finding the largest divisor of n that is smaller than n.\n \
    \ -- This will be the largest divisor of n that is smaller than n / 2.\n  -- We\
    \ then divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor of n that is smaller than n / 2.\n  --\
    \ This will be the largest divisor of n that is smaller than n / 2.\n  -- We then\
    \ divide n by this divisor and continue this process until n is evenly divisible\
    \ by n.\n  -- This process will continue until n becomes evenly divisible by n.\n\
    \  -- We then return the largest divisor \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpszwwjz.lua:45: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9nih_wn.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa9nih_wn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            while n % p\
    \ == 0 do\n                p = p * 2\n            end\n            if p > max_divisor\
    \ then\n                max_divisor = p\n                max_divisor_p = i\n \
    \           end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9gjxs87.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpj9gjxs87.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local p = i\n      local n =\
    \ n / i\n      while n > 1 do\n        p = p + 1\n        n = n / p\n      end\n\
    \      if n > max_divisor then\n        max_divisor = n\n        max_divisor_p\
    \ = p\n      end\n    end\n  end\n  return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdht0a6h.lua:30:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpkdht0a6h.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzraf6mwy.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  local max_divisor_value_n3 = 1\n  local\
    \ max_divisor_value_n4 = 1\n  local max_divisor_value_n5 = 1\n  local max_divisor_value_n6\
    \ = 1\n  local max_divisor_value_n7 = 1\n  local max_divisor_value_n8 = 1\n  local\
    \ max_divisor_value_n9 = 1\n  local max_divisor_value_n10 = 1\n  local max_divisor_value_n11\
    \ = 1\n  local max_divisor_value_n12 = 1\n  local max_divisor_value_n13 = 1\n\
    \  local max_divisor_value_n14 = 1\n  local max_divisor_value_n15 = 1\n  local\
    \ max_divisor_value_n16 = 1\n  local max_divisor_value_n17 = 1\n  local max_divisor_value_n18\
    \ = 1\n  local max_divisor_value_n19 = 1\n  local max_divisor_value_n20 = 1\n\
    \  local max_divisor_value_n21 = 1\n  local max_divisor_value_n22 = 1\n  local\
    \ max_divisor_value_n23 = 1\n  local max_divisor_value_n24 = 1\n  local max_divisor_value_n25\
    \ = 1\n  local max_divisor_value_n26 = 1\n  local max_divisor_value_n27 = 1\n\
    \  local max_divisor_value_n28 = 1\n  local max_divisor_value_n29 = 1\n  local\
    \ max_divisor_value_n30 = 1\n  local max_divisor_value_n31 = 1\n  local max_divisor_value_n32\
    \ = 1\n  local max_divisor_value_n33 = 1\n  local max_divisor_value_n34 = 1\n\
    \  local max_divisor_value_n35 = 1\n  local max_divisor_value_n36 = 1\n  local\
    \ max_divisor_value_n37 = 1\n  local max_divisor_value_n38 = 1\n  local max_divisor_value_n39\
    \ = 1\n  local max_divisor_value_n40 = 1\n  local max_divisor_value_n41 = 1\n\
    \  local max_divisor_value_n42 = 1\n  local max_divisor_value_n43 = 1\n  local\
    \ max_divisor_value_n44 = 1\n  local max_divisor_value_n45 = 1\n  local max_divisor_value_n46\
    \ = 1\n  local max_divisor_value_n47 = 1\n  local max_divisor_value_n48 = 1\n\
    \  local max_divisor_value_n49 = 1\n  local max_divisor_value_n50 = 1\n  local\
    \ max_divisor_value_n51 = 1\n  local max_divisor_value_n52 = 1\n  local max_divisor_value_n53\
    \ = 1\n  local max_divisor_value_n54 = 1\n  local max_divisor_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9hlwei6.lua:73: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            else\n\
    \                max_div_n = max_div_n * i \n            end\n        end\n  \
    \  end\n    return max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkns5kb_.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphkns5kb_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_m1mn_5.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy_m1mn_5.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_divisor = 1\n  local max_divisor_remainder\
    \ = n\n  local max_divisor_remainder_divisor = 1\n  for i = 2, n do\n    local\
    \ divisor = math.floor(n/i)\n    if divisor > max_divisor then\n      max_divisor\
    \ = divisor\n      max_divisor_remainder = n - max_divisor*i\n      max_divisor_remainder_divisor\
    \ = divisor\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7skno5p.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv7skno5p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81ufb3aq.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp81ufb3aq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div_n == i then\n          max_div = i\n        else\n        \
    \  max_div = max_div\n        end\n      end\n      max_div_n = i\n    end\n \
    \ end\n  return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcocgw0j1.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcocgw0j1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            divisor = i\n            if max_divisor <\
    \ divisor then\n                max_divisor = divisor\n            end\n     \
    \   end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgicgi_3i.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpgicgi_3i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that divides n evenly is n-1\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 1\n  -- >>> largest_divisor(21)\n\
    \  -- 2\n  -- >>> largest_divisor(22)\n  -- 2\n  -- >>> largest_divisor(23)\n\
    \  -- 3\n  -- >>> largest_divisor(24)\n  -- 4\n  -- >>> largest_divisor(25)\n\
    \  -- 5\n  -- >>> largest_divisor(26)\n  -- 6\n  -- >>> largest_divisor(27)\n\
    \  -- 7\n  -- >>> largest_divisor(28)\n  -- 8\n  -- >>> largest_divisor(29)\n\
    \  -- 9\n  -- >>> largest_divisor(30)\n  -- 10\n  -- >>> largest_divisor(31)\n\
    \  -- 11\n  -- >>> largest_divisor(32)\n  -- 12\n  -- >>> largest_divisor(33)\n\
    \  -- 13\n  -- >>> largest_divisor(34)\n  -- 14\n  -- >>> largest_divisor(35)\n\
    \  -- 15\n  -- >>> largest_divisor(36)\n  -- 16\n  -- >>> largest_divisor(37)\n\
    \  -- 17\n  -- >>> largest_divisor(38)\n  -- 18\n  -- >>> largest_divisor(39)\n\
    \  -- 19\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>> largest_divisor(41)\n\
    \  -- 21\n  -- >>> largest_divisor(42)\n  -- 22\n  -- >>> largest_divisor(43)\n\
    \  -- 23\n  -- >>> largest_divisor(44)\n  -- 24\n  -- >>> largest_divisor(45)\n\
    \  -- 25\n  -- >>> largest_divisor(46)\n  -- 26\n  -- >>> largest_divisor(47)\n\
    \  -- 27\n  -- >>> largest_divisor(48)\n  -- 28\n  -- >>> largest_divisor(49)\n\
    \  -- 29\n  -- >>> largest_divisor(50)\n  -- 30\n  -- >>> largest_divisor(\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmb4zd8ol.lua:90: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ % i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zgqm4aj.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp4zgqm4aj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor = i\n  \
    \    local remainder = n / i\n      local remainder_pow = math.pow(remainder,\
    \ 2)\n      if remainder_pow > max_divisor_remainder_pow then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = remainder\n        max_divisor_remainder_pow\
    \ = remainder_pow\n      end\n    end\n  end\n  return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpmuszm2.lua:28:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpgpmuszm2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div_n\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizqy709i.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpizqy709i.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n\n  if n % 2 == 0 then\n    return n\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptlmjd_du.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor_value*i\n           \
    \ end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mwhrscj.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_mwhrscj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 0\n  for i = 1, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5034q2g.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo5034q2g.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_divisor = 1\n  local max_divisor_p\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = math.floor(n/i)\n\
    \      if divisor_p > max_divisor then\n        max_divisor = divisor_p\n    \
    \    max_divisor_p = i\n      end\n    end\n  end\n  return max_divisor_p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2kxum4u.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpr2kxum4u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr24zno4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbr24zno4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpijwhh11p.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthoulepr.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpthoulepr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    for i = 2, n do\n      if n % i == 0 then\n        if max_divisor <\
    \ i then\n          max_divisor = i\n          max_divisor_index = i\n       \
    \ end\n      end\n    end\n    return max_divisor_index\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpnd7a9i.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvpnd7a9i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor_value*i\n           \
    \ end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mwhrscj.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_mwhrscj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_count\
    \ = 0\n  local max_divisor_remainder_count_max = 0\n  local max_divisor_remainder_count_min\
    \ = 0\n  local max_divisor_remainder_count_min_index = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      local divisor_remainder_count = divisor_remainder\n      local\
    \ divisor_remainder_count_max = divisor_remainder_count\n      local divisor_remainder_count_min\
    \ = divisor_remainder_count\n      local divisor_remainder_count_min_index = divisor_remainder_count\n\
    \      for j = 1, divisor_remainder_count do\n        if divisor_remainder ==\
    \ 0 then\n          divisor_remainder_count_max = j\n          divisor_remainder_count_min\
    \ = divisor_remainder_count\n          divisor_remainder_count_min_index = j\n\
    \          break\n        end\n        divisor_remainder = divisor_remainder /\
    \ i\n        divisor_remainder_count = divisor_remainder - 1\n        if divisor_remainder\
    \ > max_divisor_remainder then\n          max_divisor_remainder = divisor_remainder\n\
    \          max_divisor_remainder_count = divisor_remainder_count\n          max_divisor_remainder_count_max\
    \ = divisor_remainder_count_max\n          max_divisor_remainder_count_min = divisor_remainder_count_min\n\
    \          max_divisor_remainder_count_min_index = divisor_remainder_count_min_index\n\
    \        end\n      end\n    end\n  end\n  return max_divisor_remainder\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j5ok9yl.lua:46:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp1j5ok9yl.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local p =\
    \ i\n            local pp = i\n            while p * pp <= n do\n            \
    \    pp = pp * 2\n            end\n            if p * pp > n then\n          \
    \      p = n\n                pp = 1\n            end\n            if p * pp >\
    \ max_divisor then\n                max_divisor = p\n                max_divisor_p\
    \ = p\n                max_divisor_pp = pp\n            end\n        end\n   \
    \ end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrdg6zjj.lua:32:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwrdg6zjj.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/5\n  --\
    \ The smallest divisor is n/5\n  -- The largest divisor is n/7\n  -- The smallest\
    \ divisor is n/7\n  -- The largest divisor is n/11\n  -- The smallest divisor\
    \ is n/11\n  -- The largest divisor is n/13\n  -- The smallest divisor is n/13\n\
    \  -- The largest divisor is n/17\n  -- The smallest divisor is n/17\n  -- The\
    \ largest divisor is n/19\n  -- The smallest divisor is n/19\n  -- The largest\
    \ divisor is n/23\n  -- The smallest divisor is n/23\n  -- The largest divisor\
    \ is n/29\n  -- The smallest divisor is n/29\n  -- The largest divisor is n/31\n\
    \  -- The smallest divisor is n/31\n  -- The largest divisor is n/37\n  -- The\
    \ smallest divisor is n/37\n  -- The largest divisor is n/41\n  -- The smallest\
    \ divisor is n/41\n  -- The largest divisor is n/43\n  -- The smallest divisor\
    \ is n/43\n  -- The largest divisor is n/47\n  -- The smallest divisor is n/47\n\
    \  -- The largest divisor is n/53\n  -- The smallest divisor is n/53\n  -- The\
    \ largest divisor is n/59\n  -- The smallest divisor is n/59\n  -- The largest\
    \ divisor is n/61\n  -- The smallest divisor is n/61\n  -- The largest divisor\
    \ is n/67\n  -- The smallest divisor is n/67\n  -- The largest divisor is n/71\n\
    \  -- The smallest divisor is n/71\n  -- The largest divisor is n/73\n  -- The\
    \ smallest divisor is n/73\n  -- The largest divisor is n/79\n  -- The smallest\
    \ divisor is n/79\n  -- The largest divisor is n/83\n  -- The smallest divisor\
    \ is n/83\n  -- The largest divisor is n/89\n  -- The smallest divisor is n/89\n\
    \  -- The largest divisor is n/97\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprreclpg7.lua:68: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The smallest \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp60rucgv.lua:68: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even\n  -- The smallest divisor\
    \ is 1 because 1 is even\n  -- The largest divisor is n because n is odd\n  --\
    \ The smallest divisor is 2 because 2 is odd\n  -- The largest divisor is n/2\
    \ because n/2 is even\n  -- The smallest divisor is n/2 because n/2 is odd\n \
    \ -- The largest divisor is n/3 because n/3 is even\n  -- The smallest divisor\
    \ is n/3 because n/3 is odd\n  -- The largest divisor is n/4 because n/4 is even\n\
    \  -- The smallest divisor is n/4 because n/4 is odd\n  -- The largest divisor\
    \ is n/5 because n/5 is even\n  -- The smallest divisor is n/5 because n/5 is\
    \ odd\n  -- The largest divisor is n/6 because n/6 is even\n  -- The smallest\
    \ divisor is n/6 because n/6 is odd\n  -- The largest divisor is n/7 because n/7\
    \ is even\n  -- The smallest divisor is n/7 because n/7 is odd\n  -- The largest\
    \ divisor is n/8 because n/8 is even\n  -- The smallest divisor is n/8 because\
    \ n/8 is odd\n  -- The largest divisor is n/9 because n/9 is even\n  -- The smallest\
    \ divisor is n/9 because n/9 is odd\n  -- The largest divisor is n/10 because\
    \ n/10 is even\n  -- The smallest divisor is n/10 because n/10 is odd\n  -- The\
    \ largest divisor is n/11 because n/11 is even\n  -- The smallest divisor is n/11\
    \ because n/11 is odd\n  -- The largest divisor is n/12 because n/12 is even\n\
    \  -- The smallest divisor is n/12 because n/12 is odd\n  -- The largest divisor\
    \ is n/13 because n/13 is even\n  -- The smallest divisor is n/13 because n/13\
    \ is odd\n  -- The largest divisor is n/14 because n/14 is even\n  -- The smallest\
    \ divisor is n/14 because n/14 is odd\n  -- The largest divisor is n/15 because\
    \ n/15 is even\n  -- The smallest divisor is n/15 because n/15 is odd\n  -- The\
    \ largest divisor is n/16 because n/16 is even\n  -- The smallest divisor is n/16\
    \ because n/16 is odd\n  -- The largest divisor is n/17 because \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lr30zxt.lua:51: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsohe4b80.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpsohe4b80.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    while max_divisor_remainder\
    \ > 1 do\n        max_divisor = max_divisor + 1\n        max_divisor_remainder\
    \ = max_divisor_remainder / max_divisor\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn05_o7lc.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn05_o7lc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxviahfg.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptxviahfg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmptxviahfg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ryqlpej.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ryqlpej.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsohe4b80.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpsohe4b80.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            else\n                max_divisor_p\
    \ = max_divisor_p / i\n                max_divisor_n = max_divisor_n * i\n   \
    \         end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr_6wn4z.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphr_6wn4z.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswyn1lf7.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpswyn1lf7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2thoctjl.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2thoctjl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0_vjjl7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo0_vjjl7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is evenly divisible by n-1\n  -- >>>\
    \ largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(20)\n  -- 10\n  -- >>>\
    \ largest_divisor(30)\n  -- 15\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>>\
    \ largest_divisor(50)\n  -- 30\n  -- >>> largest_divisor(60)\n  -- 40\n  -- >>>\
    \ largest_divisor(70)\n  -- 50\n  -- >>> largest_divisor(80)\n  -- 60\n  -- >>>\
    \ largest_divisor(90)\n  -- 70\n  -- >>> largest_divisor(100)\n  -- 80\n  -- >>>\
    \ largest_divisor(200)\n  -- 100\n  -- >>> largest_divisor(300)\n  -- 200\n  --\
    \ >>> largest_divisor(400)\n  -- 300\n  -- >>> largest_divisor(500)\n  -- 400\n\
    \  -- >>> largest_divisor(600)\n  -- 500\n  -- >>> largest_divisor(700)\n  --\
    \ 600\n  -- >>> largest_divisor(800)\n  -- 700\n  -- >>> largest_divisor(900)\n\
    \  -- 800\n  -- >>> largest_divisor(1000)\n  -- 900\n  -- >>> largest_divisor(2000)\n\
    \  -- 1000\n  -- >>> largest_divisor(3000)\n  -- 2000\n  -- >>> largest_divisor(4000)\n\
    \  -- 3000\n  -- >>> largest_divisor(5000)\n  -- 4000\n  -- >>> largest_divisor(6000)\n\
    \  -- 5000\n  -- >>> largest_divisor(7000)\n  -- 6000\n  -- >>> largest_divisor(8000)\n\
    \  -- 7000\n  -- >>> largest_divisor(9000)\n  -- 8000\n  -- >>> largest_divisor(10000)\n\
    \  -- 9000\n  -- >>> largest_divisor(20000)\n  -- 10000\n  -- >>> largest_divisor(30000)\n\
    \  -- 20000\n  -- >>> largest_divisor(40000)\n  -- 30000\n  -- >>> largest_divisor(50000)\n\
    \  -- 40000\n  -- >>> largest_divisor(60000)\n  -- 50000\n  -- >>> largest_divisor(70000)\n\
    \  -- 60000\n  -- >>> largest_divisor(80000)\n  -- 70000\n  -- >>> largest_divisor(90000)\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjx4o9nk8.lua:89: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfgmn6fh5.lua:68: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    local divisor = math.floor(n/i)\n    if divisor > max_divisor then\n    \
    \  max_divisor = divisor\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor, math.floor(max_divisor_remainder)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29jbgs6y.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp29jbgs6y.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_divisor = i\n    \
    \  max_divisor_remainder = n % i\n      max_divisor_remainder_pow = math.pow(i,\
    \ max_divisor_remainder)\n    end\n  end\n  return max_divisor * max_divisor_remainder\
    \ * max_divisor_remainder_pow\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9inxu_2s.lua:21:\
    \ expected: 1, actual: 0.0\nstack traceback:\n\t/tmp/tmp9inxu_2s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr24zno4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbr24zno4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_value = i\n      end\n\
    \    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphez61ils.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphez61ils.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            while n % p\
    \ == 0 do\n                p = p * 2\n            end\n            if p > max_divisor\
    \ then\n                max_divisor = p\n                max_divisor_p = i\n \
    \           end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9gjxs87.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpj9gjxs87.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      if max_divisor < i then\n        max_divisor = i\n\
    \        max_divisor_index = i\n      end\n    end\n  end\n  return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi93wcbc7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi93wcbc7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvkas_57.lua:23:\
    \ expected: 5, actual: 1.0\nstack traceback:\n\t/tmp/tmpzvkas_57.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ divisor of n that divides n evenly is 1\n  -- The largest divisor of n that\
    \ divides n evenly is n+1\n  -- The smallest divisor of n that divides n evenly\
    \ is n\n  -- The largest divisor of n that divides n evenly is n-1\n  -- The smallest\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphshyjgh9.lua:46: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            else\n                max_divisor_p\
    \ = max_divisor_p / i\n                max_divisor_n = max_divisor_n * i\n   \
    \         end\n        end\n    end\n    return max_divisor_p, max_divisor_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv411x29u.lua:28:\
    \ expected: 5, actual: 1.0\nstack traceback:\n\t/tmp/tmpv411x29u.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  else\n                max_divisor_value = max_divisor_value * i / n\n     \
    \       end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv9i4kc0.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqv9i4kc0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0_vjjl7.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo0_vjjl7.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  local max_divisor_value_n3 = 1\n  local\
    \ max_divisor_value_n4 = 1\n  local max_divisor_value_n5 = 1\n  local max_divisor_value_n6\
    \ = 1\n  local max_divisor_value_n7 = 1\n  local max_divisor_value_n8 = 1\n  local\
    \ max_divisor_value_n9 = 1\n  local max_divisor_value_n10 = 1\n  local max_divisor_value_n11\
    \ = 1\n  local max_divisor_value_n12 = 1\n  local max_divisor_value_n13 = 1\n\
    \  local max_divisor_value_n14 = 1\n  local max_divisor_value_n15 = 1\n  local\
    \ max_divisor_value_n16 = 1\n  local max_divisor_value_n17 = 1\n  local max_divisor_value_n18\
    \ = 1\n  local max_divisor_value_n19 = 1\n  local max_divisor_value_n20 = 1\n\
    \  local max_divisor_value_n21 = 1\n  local max_divisor_value_n22 = 1\n  local\
    \ max_divisor_value_n23 = 1\n  local max_divisor_value_n24 = 1\n  local max_divisor_value_n25\
    \ = 1\n  local max_divisor_value_n26 = 1\n  local max_divisor_value_n27 = 1\n\
    \  local max_divisor_value_n28 = 1\n  local max_divisor_value_n29 = 1\n  local\
    \ max_divisor_value_n30 = 1\n  local max_divisor_value_n31 = 1\n  local max_divisor_value_n32\
    \ = 1\n  local max_divisor_value_n33 = 1\n  local max_divisor_value_n34 = 1\n\
    \  local max_divisor_value_n35 = 1\n  local max_divisor_value_n36 = 1\n  local\
    \ max_divisor_value_n37 = 1\n  local max_divisor_value_n38 = 1\n  local max_divisor_value_n39\
    \ = 1\n  local max_divisor_value_n40 = 1\n  local max_divisor_value_n41 = 1\n\
    \  local max_divisor_value_n42 = 1\n  local max_divisor_value_n43 = 1\n  local\
    \ max_divisor_value_n44 = 1\n  local max_divisor_value_n45 = 1\n  local max_divisor_value_n46\
    \ = 1\n  local max_divisor_value_n47 = 1\n  local max_divisor_value_n48 = 1\n\
    \  local max_divisor_value_n49 = 1\n  local max_divisor_value_n50 = 1\n  local\
    \ max_divisor_value_n51 = 1\n  local max_divisor_value_n52 = 1\n  local max_divisor_value_n53\
    \ = 1\n  local max_divisor_value_n54 = 1\n  local max_divisor_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9hlwei6.lua:73: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = i\n    while divisor > 1 do\n      divisor = divisor / 2\n\
    \    end\n    if n % divisor == 0 then\n      max_divisor = divisor\n      max_divisor_remainder\
    \ = n % divisor\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9a6rh0fx.lua:23:\
    \ expected: 1, actual: 0.75\nstack traceback:\n\t/tmp/tmp9a6rh0fx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      local divisor_p = i\n      local divisor_pp = i\n      local divisor_ppp\
    \ = i\n      while divisor_p * divisor_pp <= n do\n        divisor_p = divisor_p\
    \ * 2\n        divisor_pp = divisor_pp * 2\n        divisor_ppp = divisor_ppp\
    \ * 2\n      end\n      if divisor_p * divisor_pp > n then\n        divisor_p\
    \ = divisor_p * 2\n        divisor_pp = divisor_pp * 2\n        divisor_ppp =\
    \ divisor_ppp * 2\n      end\n      if divisor_p * divisor_ppp > n then\n    \
    \    divisor_p = divisor_p * 2\n        divisor_ppp = divisor_ppp * 2\n      end\n\
    \      if divisor_p * divisor_ppp > n then\n        divisor_p = divisor_p * 2\n\
    \        divisor_ppp = divisor_ppp * 2\n      end\n      if divisor_p * divisor_ppp\
    \ > n then\n        divisor_p = divisor_p * 2\n        divisor_ppp = divisor_ppp\
    \ * 2\n      end\n      if divisor_p * divisor_ppp > n then\n        divisor_p\
    \ = divisor_p * 2\n        divisor_ppp = divisor_ppp * 2\n      end\n      if\
    \ divisor_p * divisor_ppp > n then\n        divisor_p = divisor_p * 2\n      \
    \  divisor_ppp = divisor_ppp * 2\n      end\n      if divisor_p * divisor_ppp\
    \ > n then\n        divisor_p = divisor_p * 2\n        divisor_ppp = divisor_ppp\
    \ * 2\n      end\n      if divisor_p * divisor_ppp > n then\n        divisor_p\
    \ = divisor_p * 2\n        divisor_ppp = divisor_ppp * 2\n      end\n      if\
    \ divisor_p * divisor_ppp > n then\n        divisor_p = divisor_p * 2\n      \
    \  divisor_ppp = divisor_ppp * 2\n      end\n      if divisor_p * divisor_ppp\
    \ > n then\n        divisor_p = divisor_p * 2\n        divisor_ppp = divisor_ppp\
    \ * 2\n      end\n      if divisor_p * divisor_ppp > n then\n        divisor_p\
    \ = divisor_p * 2\n        divisor_ppp = divisor_ppp * 2\n      end\n      if\
    \ divisor_p * divisor_ppp > n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpncwymbyv.lua:65: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if and only if n is evenly divisible by all numbers\
    \ up to and including n.\n  -- The largest divisor is n if and only if n is evenly\
    \ divisible by all numbers up to and including n.\n  -- The largest divisor is\
    \ n-1 if and only if n is evenly divisible by all numbers up to and including\
    \ n.\n  -- The largest divisor is n if and only if n is evenly divisible by all\
    \ numbers up to and including n.\n  -- The largest divisor is n-1 if and only\
    \ if n is evenly divisible by all numbers up to and including n.\n  -- The largest\
    \ divisor is n if and only if n is evenly divisible by all numbers up to and including\
    \ n.\n  -- The largest divisor is n-1 if and only if n is evenly divisible by\
    \ all numbers up to and including n.\n  -- The largest divisor is n if and only\
    \ if n is evenly divisible by all numbers up to and including n.\n  -- The largest\
    \ divisor is n-1 if and only if n is evenly divisible by all numbers up to and\
    \ including n.\n  -- The largest divisor is n if and only if n is evenly divisible\
    \ by all numbers up to and including n.\n  -- The largest divisor is n-1 if and\
    \ only if n is evenly divisible by all numbers up to and including n.\n  -- The\
    \ largest divisor is n if and only if n is evenly divisible by all numbers up\
    \ to and including n.\n  -- The largest divisor is n-1 if and only if n is evenly\
    \ divisible by all numbers up to and including n.\n  -- The largest divisor is\
    \ n if and only if n is evenly divisible by all numbers up to and including n.\n\
    \  -- The largest divisor is n-1 if and only if n is evenly divisible by all numbers\
    \ up to and including n.\n  -- The largest divisor is n if and only if n is evenly\
    \ divisible by all numbers up to and including n.\n  -- The largest divisor is\
    \ n-1 if and only if n is evenly divisible by all numbers up to and including\
    \ n.\n  -- The largest divisor is n if and only if n is evenly divisible by all\
    \ numbers up to and including n.\n  -- The largest divisor is n-1 if and only\
    \ if n is evenly divisible by all numbers up to and including n.\n  -- The largest\
    \ divisor is n if and only if n is evenly divisible by all numbers up to and including\
    \ n.\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgay8dg3k.lua:37: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ % i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zgqm4aj.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp4zgqm4aj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor * max_divisor_value +\
    \ i\n            end\n        end\n    end\n    return max_divisor_value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbjs06k6.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdbjs06k6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxazf2j3z.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxazf2j3z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  local max_divisor_value_n3 = 1\n  local\
    \ max_divisor_value_n4 = 1\n  local max_divisor_value_n5 = 1\n  local max_divisor_value_n6\
    \ = 1\n  local max_divisor_value_n7 = 1\n  local max_divisor_value_n8 = 1\n  local\
    \ max_divisor_value_n9 = 1\n  local max_divisor_value_n10 = 1\n  local max_divisor_value_n11\
    \ = 1\n  local max_divisor_value_n12 = 1\n  local max_divisor_value_n13 = 1\n\
    \  local max_divisor_value_n14 = 1\n  local max_divisor_value_n15 = 1\n  local\
    \ max_divisor_value_n16 = 1\n  local max_divisor_value_n17 = 1\n  local max_divisor_value_n18\
    \ = 1\n  local max_divisor_value_n19 = 1\n  local max_divisor_value_n20 = 1\n\
    \  local max_divisor_value_n21 = 1\n  local max_divisor_value_n22 = 1\n  local\
    \ max_divisor_value_n23 = 1\n  local max_divisor_value_n24 = 1\n  local max_divisor_value_n25\
    \ = 1\n  local max_divisor_value_n26 = 1\n  local max_divisor_value_n27 = 1\n\
    \  local max_divisor_value_n28 = 1\n  local max_divisor_value_n29 = 1\n  local\
    \ max_divisor_value_n30 = 1\n  local max_divisor_value_n31 = 1\n  local max_divisor_value_n32\
    \ = 1\n  local max_divisor_value_n33 = 1\n  local max_divisor_value_n34 = 1\n\
    \  local max_divisor_value_n35 = 1\n  local max_divisor_value_n36 = 1\n  local\
    \ max_divisor_value_n37 = 1\n  local max_divisor_value_n38 = 1\n  local max_divisor_value_n39\
    \ = 1\n  local max_divisor_value_n40 = 1\n  local max_divisor_value_n41 = 1\n\
    \  local max_divisor_value_n42 = 1\n  local max_divisor_value_n43 = 1\n  local\
    \ max_divisor_value_n44 = 1\n  local max_divisor_value_n45 = 1\n  local max_divisor_value_n46\
    \ = 1\n  local max_divisor_value_n47 = 1\n  local max_divisor_value_n48 = 1\n\
    \  local max_divisor_value_n49 = 1\n  local max_divisor_value_n50 = 1\n  local\
    \ max_divisor_value_n51 = 1\n  local max_divisor_value_n52 = 1\n  local max_divisor_value_n53\
    \ = 1\n  local max_divisor_value_n54 = 1\n  local max_divisor_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9hlwei6.lua:73: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n that is smaller than n\n  local max_divisor = 1\n\
    \  -- The largest divisor of n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_ktfufg.lua:73: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5q110vf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa5q110vf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ryqlpej.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ryqlpej.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            else\n                max_divisor_p\
    \ = n / i\n                max_divisor_n = i\n            end\n        end\n \
    \   end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj9yh3hq.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcj9yh3hq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 0\n  -- >>> largest_divisor(21)\n\
    \  -- 0\n  -- >>> largest_divisor(22)\n  -- 0\n  -- >>> largest_divisor(23)\n\
    \  -- 0\n  -- >>> largest_divisor(24)\n  -- 0\n  -- >>> largest_divisor(25)\n\
    \  -- 0\n  -- >>> largest_divisor(26)\n  -- 0\n  -- >>> largest_divisor(27)\n\
    \  -- 0\n  -- >>> largest_divisor(28)\n  -- 0\n  -- >>> largest_divisor(29)\n\
    \  -- 0\n  -- >>> largest_divisor(30)\n  -- 0\n  -- >>> largest_divisor(31)\n\
    \  -- 0\n  -- >>> largest_divisor(32)\n  -- 0\n  -- >>> largest_divisor(33)\n\
    \  -- 0\n  -- >>> largest_divisor(34)\n  -- 0\n  -- >>> largest_divisor(35)\n\
    \  -- 0\n  -- >>> largest_divisor(36)\n  -- 0\n  -- >>> largest_divisor(37)\n\
    \  -- 0\n  -- >>> largest_divisor(38)\n  -- 0\n  -- >>> largest_divisor(39)\n\
    \  -- 0\n  -- >>> largest_divisor(40)\n  -- 0\n  -- >>> largest_divisor(41)\n\
    \  -- 0\n  -- >>> largest_divisor(42)\n  -- 0\n  -- >>> largest_divisor(43)\n\
    \  -- 0\n  -- >>> largest_divisor(44)\n  -- 0\n  -- >>> largest_divisor(45)\n\
    \  -- 0\n  -- >>> largest_divisor(46)\n  -- 0\n  -- >>> largest_divisor(47)\n\
    \  -- 0\n  -- >>> largest_divisor(48)\n  -- 0\n  -- >>> largest_divisor(49)\n\
    \  -- 0\n  -- >>> largest_divisor(50)\n  -- 0\n  -- >>> largest_divisor(51)\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfimqy8km.lua:91: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local divisor = 1\n  while\
    \ divisor < math.sqrt(n) do\n    divisor = 2 * divisor\n  end\n  -- If n is a\
    \ perfect square, return its square root\n  if n == math.floor(n) then\n    return\
    \ math.sqrt(n)\n  end\n  -- If n is even, return its square root (rounded down)\n\
    \  if n % 2 == 0 then\n    return math.sqrt(math.floor(n))\n  end\n  -- If n is\
    \ odd, return its square root (rounded up)\n  return math.sqrt(math.ceil(n))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_j5iv8z.lua:25:\
    \ expected: 1, actual: 1.7320508075689\nstack traceback:\n\t/tmp/tmpw_j5iv8z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            else\n\
    \                max_div_n = max_div_n * i -- Multiply n by i to find largest\
    \ number that divides n evenly\n            end\n        end\n    end\n    return\
    \ max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiojsyxes.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpiojsyxes.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr24zno4.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpbr24zno4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswyn1lf7.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpswyn1lf7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_m1mn_5.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy_m1mn_5.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81ufb3aq.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp81ufb3aq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  if divisor > max_divisor then\n                max_divisor = divisor\n    \
    \            max_divisor_remainder = n / divisor\n            end\n        end\n\
    \    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmhvdzvs.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzmhvdzvs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\
    \ + max_div\n    local max_div3 = math.floor(n/max_div2) + max_div2\n    local\
    \ max_div4 = math.floor(n/max_div3) + max_div3\n    local max_div5 = math.floor(n/max_div4)\
    \ + max_div4\n    local max_div6 = math.floor(n/max_div5) + max_div5\n    local\
    \ max_div7 = math.floor(n/max_div6) + max_div6\n    local max_div8 = math.floor(n/max_div7)\
    \ + max_div7\n    local max_div9 = math.floor(n/max_div8) + max_div8\n    local\
    \ max_div10 = math.floor(n/max_div9) + max_div9\n    local max_div11 = math.floor(n/max_div10)\
    \ + max_div10\n    local max_div12 = math.floor(n/max_div11) + max_div11\n   \
    \ local max_div13 = math.floor(n/max_div12) + max_div12\n    local max_div14 =\
    \ math.floor(n/max_div13) + max_div13\n    local max_div15 = math.floor(n/max_div14)\
    \ + max_div14\n    local max_div16 = math.floor(n/max_div15) + max_div15\n   \
    \ local max_div17 = math.floor(n/max_div16) + max_div16\n    local max_div18 =\
    \ math.floor(n/max_div17) + max_div17\n    local max_div19 = math.floor(n/max_div18)\
    \ + max_div18\n    local max_div20 = math.floor(n/max_div19) + max_div19\n   \
    \ local max_div21 = math.floor(n/max_div20) + max_div20\n    local max_div22 =\
    \ math.floor(n/max_div21) + max_div21\n    local max_div23 = math.floor(n/max_div22)\
    \ + max_div22\n    local max_div24 = math.floor(n/max_div23) + max_div23\n   \
    \ local max_div25 = math.floor(n/max_div24) + max_div24\n    local max_div26 =\
    \ math.floor(n/max_div25) + max_div25\n    local max_div27 = math.floor(n/max_div26)\
    \ + max_div26\n    local max_div28 = math.floor(n/max_div27) + max_div27\n   \
    \ local max_div29 = math.floor(n/max_div28) + max_div28\n    local max_div30 =\
    \ math.floor(n/max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx2zomf0r.lua:35: '')'' expected (to close ''('' at line 34)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ % i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zgqm4aj.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp4zgqm4aj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2thoctjl.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2thoctjl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div_n * i > max_div then\n          max_div = max_div_n\n     \
    \   end\n      end\n      max_div_n = i\n    end\n  end\n  return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdicuzau7.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdicuzau7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- If n is divisible by i, then\
    \ n is divisible by max_divisor\n            if max_divisor_remainder == 0 then\n\
    \                max_divisor = i\n                max_divisor_remainder = n\n\
    \            else\n                -- If n is divisible by max_divisor, then n\
    \ is divisible by max_divisor_remainder\n                max_divisor_remainder\
    \ = max_divisor_remainder / i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25z4of0z.lua:27:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp25z4of0z.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj3bjxs1.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpyj3bjxs1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers up to\
    \ n-1\n  -- The largest divisor is n if n is evenly divisible by all numbers up\
    \ to n\n  -- The largest divisor is n+1 if n is evenly divisible by all numbers\
    \ up to n+1\n  -- The largest divisor is n+2 if n is evenly divisible by all numbers\
    \ up to n+2\n  -- The largest divisor is n+3 if n is evenly divisible by all numbers\
    \ up to n+3\n  -- The largest divisor is n+4 if n is evenly divisible by all numbers\
    \ up to n+4\n  -- The largest divisor is n+5 if n is evenly divisible by all numbers\
    \ up to n+5\n  -- The largest divisor is n+6 if n is evenly divisible by all numbers\
    \ up to n+6\n  -- The largest divisor is n+7 if n is evenly divisible by all numbers\
    \ up to n+7\n  -- The largest divisor is n+8 if n is evenly divisible by all numbers\
    \ up to n+8\n  -- The largest divisor is n+9 if n is evenly divisible by all numbers\
    \ up to n+9\n  -- The largest divisor is n+10 if n is evenly divisible by all\
    \ numbers up to n+10\n  -- The largest divisor is n+11 if n is evenly divisible\
    \ by all numbers up to n+11\n  -- The largest divisor is n+12 if n is evenly divisible\
    \ by all numbers up to n+12\n  -- The largest divisor is n+13 if n is evenly divisible\
    \ by all numbers up to n+13\n  -- The largest divisor is n+14 if n is evenly divisible\
    \ by all numbers up to n+14\n  -- The largest divisor is n+15 if n is evenly divisible\
    \ by all numbers up to n+15\n  -- The largest divisor is n+16 if n is evenly divisible\
    \ by all numbers up to n+16\n  -- The largest divisor is n+17 if n is evenly divisible\
    \ by all numbers up to n+17\n  -- The largest divisor is n+18 if n is evenly divisible\
    \ by all numbers up to n+18\n  -- The largest divisor is n+19 if n is evenly divisible\
    \ by all numbers \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyodzh3xb.lua:37: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv_qzd_v.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdv_qzd_v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            else\n                max_divisor_remainder = i\n         \
    \   end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa9egfda.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpoa9egfda.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzraf6mwy.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an auxiliary table to store the largest divisor so far\n  local max_divisor\
    \ = {}\n  -- We start by dividing n by all numbers from 1 to n\n  for i = 1, n\
    \ do\n    -- We check if the current divisor is smaller than the current largest\
    \ divisor\n    if max_divisor[i] < i then\n      -- If it is, we update the largest\
    \ divisor so far\n      max_divisor[i] = i\n    end\n  end\n  -- We return the\
    \ largest divisor so far\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadigadaj.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpadigadaj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpadigadaj.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzhdmzp.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3xzhdmzp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor_remainder\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkne0jdek.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkne0jdek.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_divisor = 1\n  local max_divisor_p\
    \ = 1\n  local max_divisor_n = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      max_divisor_p = i\n      max_divisor = i\n      max_divisor_n = 1\n   \
    \   break\n    end\n    max_divisor_p = max_divisor_p * i\n    max_divisor_n =\
    \ (max_divisor_n * i) + i\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g8iw71z.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1g8iw71z.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = n % i\n       \
    \     end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1q2xdud.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpb1q2xdud.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2thoctjl.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2thoctjl.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt44wzya.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppt44wzya.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    local max_divisor_ppp = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor_p = i / max_divisor\n            local divisor_pp\
    \ = i / max_divisor_p\n            local divisor_ppp = i / max_divisor_pp\n  \
    \          if divisor_ppp > max_divisor_ppp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_ppp > max_divisor_ppp\
    \ then\n                max_divisor_ppp = divisor_ppp\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_pp = divisor_pp\n            end\n\
    \            if divisor_pp > max_divisor_pp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_pp > max_divisor_pp then\n\
    \                max_divisor_ppp = divisor_ppp\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_pp = divisor_pp\n            end\n\
    \            if divisor_pp > max_divisor_pp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_pp > max_divisor_pp then\n\
    \                max_divisor_ppp = divisor_ppp\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_pp = divisor_pp\n            end\n\
    \            if divisor_pp > max_divisor_pp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_pp > max_divisor_pp then\n\
    \                max_divisor_ppp = divisor_ppp\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_pp = divisor_pp\n            end\n\
    \            if divisor_pp > max_divisor_pp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_pp > max_divisor_pp then\n\
    \                max_divisor_ppp = divisor_ppp\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_pp = divisor_pp\n            end\n\
    \            if divisor_pp > max_divisor_pp then\n                max_divisor_ppp\
    \ = divisor_ppp\n                max_divisor_p = divisor_p\n                max_divisor_pp\
    \ = divisor_pp\n            end\n            if divisor_pp > max_divisor_pp then\n\
    \                max_divisor_ppp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvbf5x2t3.lua:71: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_divisor = 1\n  local max_divisor_value\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      if max_divisor < i then\n\
    \        max_divisor = i\n      else\n        max_divisor_value = i\n      end\n\
    \    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp677qxwgm.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp677qxwgm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = max_divisor_pp\n\
    \            end\n            max_divisor_pp = i\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1gmwnye.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpe1gmwnye.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659792379
