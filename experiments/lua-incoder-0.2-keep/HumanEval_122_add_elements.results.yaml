language: lua
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case: k is 0 or\
    \ 1.\n  if k == 0 or k == 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkosnfbvq.lua:25: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  -- Base case\n  if k ==\
    \ 1 then\n    return arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc3x8idye.lua:25: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n  local sum = 0\n  for i\
    \ = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cgp6l5.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp7_cgp6l5.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty array of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n-- Output:\
    \ 24 # sum of 21 + 3\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <=\
    \ k <= len(arr)\nlocal function add_elements(arr, k)\n    local sum = 0\n    for\
    \ i = 1, k do\n        sum = sum + arr[i]\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gj9fwrd.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmp2gj9fwrd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
