language: lua
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for _, c in ipairs(word) do\n      max = max\
    \ and #word or max\n    end\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolzc7a9k.lua:24:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpolzc7a9k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count == nil or count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo3umfh0.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpdo3umfh0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7klcscoa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7klcscoa.lua:13: in local 'candidate'\n\t/tmp/tmp7klcscoa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local max = nil\n  \
    \  for _, char in pairs(count) do\n      if max and max > count[char] then\n \
    \       max = count[char]\n      end\n    end\n    if max then\n      table.insert(max,\
    \ word)\n    end\n  end\n  if #max > 1 then\n    return table.unpack(max, 1, #max)\n\
    \  else\n    return max[1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pt5ggju.lua:36:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2pt5ggju.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    for _, word in ipairs(words) do\n      if\
    \ #word == max then\n        return word\n      end\n    end\n  end\n  return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5ly0cs6.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpb5ly0cs6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoqt1vbp.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmppoqt1vbp.lua:13: in local 'candidate'\n\t/tmp/tmppoqt1vbp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count and count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18af9ex7.lua:24:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp18af9ex7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max <\
    \ #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  return word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplavbfsuq.lua:35:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplavbfsuq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for i = 1, #word do\n      local count = 0\n\
    \      for _, c in ipairs(word) do\n        if c == word[i] then\n          count\
    \ = count + 1\n        end\n      end\n      if count > max then\n        max\
    \ = count\n      end\n    end\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey4xx3t1.lua:32:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpey4xx3t1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    local count = 0\n    for _, c in pairs(word) do\n      count = count\
    \ + 1\n      if count > max then\n        max = count\n        word = word\n \
    \     end\n    end\n  end\n  return word\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwgloqfa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpiwgloqfa.lua:13: in local 'candidate'\n\t/tmp/tmpiwgloqfa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
