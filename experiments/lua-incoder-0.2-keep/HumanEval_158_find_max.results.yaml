language: lua
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for _, c in ipairs(word) do\n      max = max\
    \ and #word or max\n    end\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolzc7a9k.lua:24:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpolzc7a9k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count == nil or count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo3umfh0.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpdo3umfh0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7klcscoa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7klcscoa.lua:13: in local 'candidate'\n\t/tmp/tmp7klcscoa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local max = nil\n  \
    \  for _, char in pairs(count) do\n      if max and max > count[char] then\n \
    \       max = count[char]\n      end\n    end\n    if max then\n      table.insert(max,\
    \ word)\n    end\n  end\n  if #max > 1 then\n    return table.unpack(max, 1, #max)\n\
    \  else\n    return max[1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pt5ggju.lua:36:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp2pt5ggju.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    for _, word in ipairs(words) do\n      if\
    \ #word == max then\n        return word\n      end\n    end\n  end\n  return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5ly0cs6.lua:31:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpb5ly0cs6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoqt1vbp.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmppoqt1vbp.lua:13: in local 'candidate'\n\t/tmp/tmppoqt1vbp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count and count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18af9ex7.lua:24:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp18af9ex7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max <\
    \ #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  return word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplavbfsuq.lua:35:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplavbfsuq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for i = 1, #word do\n      local count = 0\n\
    \      for _, c in ipairs(word) do\n        if c == word[i] then\n          count\
    \ = count + 1\n        end\n      end\n      if count > max then\n        max\
    \ = count\n      end\n    end\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey4xx3t1.lua:32:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpey4xx3t1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    local count = 0\n    for _, c in pairs(word) do\n      count = count\
    \ + 1\n      if count > max then\n        max = count\n        word = word\n \
    \     end\n    end\n  end\n  return word\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwgloqfa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpiwgloqfa.lua:13: in local 'candidate'\n\t/tmp/tmpiwgloqfa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or 0\n    for _, c in ipairs(word) do\n      max = max + 1\n\
    \    end\n  end\n  if max > 0 then\n    local maxChars = \"\"\n    for _, word\
    \ in ipairs(words) do\n      for _, c in ipairs(word) do\n        if maxChars\
    \ == \"\" then\n          maxChars = c\n        else\n          if maxChars >\
    \ c then\n            maxChars = c\n          end\n        end\n      end\n  \
    \  end\n    return maxChars\n  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauxxcs17.lua:39:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpauxxcs17.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxChar = nil\n\
    \    for _, char in pairs(count) do\n      if maxChar == nil or count[char] >\
    \ count[maxChar] then\n        maxChar = char\n      end\n    end\n    max[#max+1]\
    \ = maxChar\n  end\n  local maxChar = nil\n  for _, char in pairs(max) do\n  \
    \  if maxChar == nil or count[char] > count[maxChar] then\n      maxChar = char\n\
    \    end\n  end\n  return maxChar\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaift_lv8.lua:36:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpaift_lv8.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    local maxChars = #words[1]\n    for _, word\
    \ in ipairs(words) do\n      maxChars = maxChars or #word\n      if #word > maxChars\
    \ then\n        maxChars = #word\n      end\n    end\n    return words[#words]\n\
    \  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq4aawmf.lua:35:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmptq4aawmf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local word\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count[char]\
    \ = count[char] or 0\n      count[char] = count[char] + 1\n    end\n    local\
    \ maxChar, maxCount = nil, 0\n    for _, char in pairs(count) do\n      if maxCount\
    \ < count[char] then\n        maxChar = char\n        maxCount = count[char]\n\
    \      end\n    end\n    max[#max+1] = maxChar\n  end\n  local maxChar, maxCount\
    \ = nil, 0\n  for _, char in pairs(max) do\n    if maxCount < count[char] then\n\
    \      maxChar = char\n      maxCount = count[char]\n    end\n  end\n  return\
    \ maxChar\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj3z6ewg.lua:39:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkj3z6ewg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tt6c54g.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6tt6c54g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n      if count > max_count then\n        max_count = count\n\
    \        max_word = word\n      end\n    end\n  end\n  return max_word\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmg93lc8_.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpmg93lc8_.lua:13: in local 'candidate'\n\t/tmp/tmpmg93lc8_.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max <\
    \ #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      return word\n    end\n  end\n  return \"\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xkuhsa3.lua:30:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp8xkuhsa3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in ipairs(words) do\n    local count\
    \ = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n   \
    \ if count > max then\n      max = count\n    end\n  end\n  if max > 0 then\n\
    \    return words[#words]\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5njpd2w0.lua:33:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp5njpd2w0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    local i, j = 1, #words\n    while i <= j\
    \ do\n      local c = words[i]\n      local n = #c\n      for k = 1, max do\n\
    \        if c[k] ~= words[i][k] then\n          n = k\n          break\n     \
    \   end\n      end\n      if n > #words[i] then\n        words[i], words[j] =\
    \ words[j], words[i]\n      end\n      if i == j then\n        break\n      end\n\
    \      i = i + 1\n      j = j - 1\n    end\n  end\n  return words[#words]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdolfsfk.lua:45:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpkdolfsfk.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz58lajw9.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz58lajw9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    for _, c in pairs(count) do\n   \
    \   if count[c] > max[c] then\n        max[c] = count[c]\n      end\n    end\n\
    \  end\n  for _, c in pairs(max) do\n    if max[c] == 1 then\n      return c\n\
    \    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4381nper.lua:33:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4381nper.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in pairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqklda692.lua:114: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in ipairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in ipairs(words) do\n      if max > #word\
    \ then\n        max = #word\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  for _, word in ipairs(words) do\n      if max > #word then\n        max = #word\n\
    \      end\n    end\n  end\n  if max > 0 then\n    for _, word in ipairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in ipairs(words) do\n      if max > #word\
    \ then\n        max = #word\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  for _, word in ipairs(words) do\n      if max > #word then\n        max = #word\n\
    \      end\n    end\n  end\n  if max > 0 then\n    for _, word in ipairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in ipairs(words) do\n      if max > #word\
    \ then\n        max = #word\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  for _, word in ipairs(words) do\n      if max > #word then\n        max = #word\n\
    \      end\n    end\n  end\n  if max > 0 then\n    for _, word in ipairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in ipairs(words) do\n      if max > #word\
    \ then\n        max = #word\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  for _, word in ipairs(words) do\n      if max > #word then\n        max = #word\n\
    \      end\n    end\n  end\n  if max > 0 then\n    for _, word in ipairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in ipairs(words) do\n      if max > #word\
    \ then\n        max = #word\n      end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpju3gym9a.lua:126: ''end'' expected (to close ''for'' at line
    106) near <eof>

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in ipairs(words) do\n    if max\
    \ > #word then\n      return word\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_gyfkga.lua:25:\
    \ expected: \"string\"\nactual: \"of\"\nstack traceback:\n\t/tmp/tmp3_gyfkga.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4pvfn_.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptl4pvfn_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxChar = \"\"\n    for _,\
    \ c in ipairs(count) do\n      if count[c] > max[maxChar] then\n        maxChar\
    \ = c\n      end\n    end\n    max[maxChar] = max[maxChar] + 1\n  end\n  local\
    \ maxChar = \"\"\n  for _, c in ipairs(max) do\n    if max[c] > maxChar and max[c]\
    \ > 1 then\n      maxChar = c\n    end\n  end\n  return maxChar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zrrmk3a.lua:22:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2zrrmk3a.lua:22: in local 'candidate'\n\t/tmp/tmp2zrrmk3a.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3clt5ahb.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3clt5ahb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in pairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max ~= 0 then\n    local i = 1\n    while i <= max do\n   \
    \   local word = words[i]\n      local count = 0\n      for _, char in pairs(word)\
    \ do\n        count = count + 1\n      end\n      if count > max then\n      \
    \  return word\n      end\n      i = i + 1\n    end\n  end\n  return \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg37pi2pq.lua:22:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpg37pi2pq.lua:22: in local 'candidate'\n\t/tmp/tmpg37pi2pq.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n\
    \    if count > max[word] then\n      max[word] = count\n    end\n  end\n  local\
    \ maxCount = 0\n  local maxWord = \"\"\n  for word, count in ipairs(max) do\n\
    \    if count > maxCount then\n      maxCount = count\n      maxWord = word\n\
    \    end\n  end\n  return maxWord\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09u82gn3.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp09u82gn3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp09u82gn3.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local word = {}\n  for _, word in pairs(words)\
    \ do\n    local count = 0\n    for _, c in pairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in pairs(words) do\n    local count = 0\n    for _, c in\
    \ pairs(word) do\n      count = count + 1\n    end\n    if count > max[#max] then\n\
    \      max[#max] = count\n    end\n  end\n  for _, word in pairs(words) do\n \
    \   local count = 0\n    for _, c in pairs(word) do\n      count = count + 1\n\
    \    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    local count = 0\n    for _, c in pairs(word)\
    \ do\n      count = count + 1\n    end\n    if count > max[#max] then\n      max[#max]\
    \ = count\n    end\n  end\n  for _, word in pairs(words) do\n    local count =\
    \ 0\n    for _, c in pairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max[#max] then\n      max[#max] = count\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max[#max] then\n      max[#max]\
    \ = count\n    end\n  end\n  for _, word in pairs(words) do\n    local count =\
    \ 0\n    for _, c in pairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max[#max] then\n      max[#max] = count\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max[#max] then\n      max[#max]\
    \ = count\n    end\n  end\n  for _, word in pairs(words) do\n    local count =\
    \ 0\n    for _, c in pairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max[#max] then\n      max[#max] = count\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max[#max] then\n      max[#\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbsigstbx.lua:99: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = #word\n    if max[word] == nil then\n      max[word] = count\n    else\n\
    \      if count > max[word] then\n        max[word] = count\n      end\n    end\n\
    \  end\n  local maxCount = #max\n  if maxCount == 0 then\n    return \"\"\n  end\n\
    \  local maxWord = nil\n  local maxCountWord = nil\n  for word, count in pairs(max)\
    \ do\n    if count > maxCount then\n      maxCount = count\n      maxWord = word\n\
    \      maxCountWord = word\n    end\n  end\n  return maxCountWord\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp939j_m2u.lua:39:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp939j_m2u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4pvfn_.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptl4pvfn_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = #word > max and #word or max\n  end\n  return words[math.min(#words,\
    \ max)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifnd13mj.lua:21:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpifnd13mj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4pvfn_.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptl4pvfn_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or 0\n    for _, c in ipairs(word) do\n      max = max + (#word\
    \ - #c) + 1\n    end\n  end\n  if max > 0 then\n    return words[#words]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53r2206v.lua:25:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp53r2206v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if max_count == nil or count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeje79okf.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpeje79okf.lua:13: in local 'candidate'\n\t/tmp/tmpeje79okf.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ local count = 0\n    for char in word do\n      count = count + 1\n    end\n\
    \    if count > max then\n      max = count\n    end\n  end\n  if max > 0 then\n\
    \    return words[#words]\n  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpal8580r_.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpal8580r_.lua:11: in local 'candidate'\n\t/tmp/tmpal8580r_.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max + 1\n  end\n  for word in words do\n    max = max - 1\n    if max\
    \ < 0 then\n      return word\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmf86rqlb.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpmf86rqlb.lua:11: in local 'candidate'\n\t/tmp/tmpmf86rqlb.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max or #word\n    if #word > max then\n      max = #word\n    end\n  end\n\
    \  if max > 0 then\n    local maxChars = #words[max]\n    for i = 1, #words do\n\
    \      if #words[i] < maxChars then\n        return words[i]\n      end\n    end\n\
    \  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmputeme4jr.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmputeme4jr.lua:11: in local 'candidate'\n\t/tmp/tmputeme4jr.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local max = nil\n  \
    \  for _, char in pairs(count) do\n      if max and max > count[char] then\n \
    \       max = count[char]\n      end\n    end\n  end\n  return words[#words]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6civcauh.lua:30:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp6civcauh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4pvfn_.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptl4pvfn_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyt1oiwh6.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpyt1oiwh6.lua:13: in local 'candidate'\n\t/tmp/tmpyt1oiwh6.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or 0\n    for _, c in ipairs(word) do\n      max = max + 1\n\
    \    end\n  end\n  if max > 0 then\n    local maxChar = \"\"\n    for _, word\
    \ in ipairs(words) do\n      for _, c in ipairs(word) do\n        if maxChar >\
    \ c then\n          maxChar = c\n        end\n      end\n    end\n    return maxChar\n\
    \  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvf4w9gsp.lua:35:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvf4w9gsp.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local word = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, c in ipairs(word) do\n      count[c] =\
    \ count[c] or 0\n      count[c] = count[c] + 1\n    end\n    for _, c in pairs(count)\
    \ do\n      if count[c] > max[c] then\n        max[c] = count[c]\n        word[c]\
    \ = word[c]\n      end\n    end\n  end\n  for _, c in pairs(max) do\n    word[c]\
    \ = word[c] .. max[c]\n  end\n  return word[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicoya295.lua:33:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpicoya295.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local max_count = 0\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, c in ipairs(word) do\n      count = count\
    \ + 1\n      if not max[c] or count > max_count then\n        max[c] = word\n\
    \        max_count = count\n      end\n    end\n  end\n  local max_word = nil\n\
    \  for _, word in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word)\
    \ do\n      count = count + 1\n      if max[c] and count > max_count then\n  \
    \      max_count = count\n        max_word = max[c]\n      end\n    end\n  end\n\
    \  return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1h51gf_.lua:38:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpb1h51gf_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz04ljrg.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpbz04ljrg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = #word > max and #word or max\n  end\n  return words[math.min(#words,\
    \ max)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifnd13mj.lua:21:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmpifnd13mj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3clt5ahb.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3clt5ahb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local word = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, c in ipairs(word) do\n      count[c] =\
    \ count[c] or 0\n      count[c] = count[c] + 1\n    end\n    for _, c in pairs(count)\
    \ do\n      if count[c] > max[c] then\n        max[c] = count[c]\n      end\n\
    \    end\n  end\n  for _, c in pairs(max) do\n    words[#words + 1] = words[#words\
    \ + 1]..c\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph40pkqju.lua:33:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmph40pkqju.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local max_count = 0\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max = {word}\n    elseif count == max_count then\n      table.insert(max, word)\n\
    \    end\n  end\n  if #max > 0 then\n    return table.concat(max, \" \")\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblk_lscg.lua:32:\
    \ expected: \"string\"\nactual: \"name of string\"\nstack traceback:\n\t/tmp/tmpblk_lscg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    if #word > max then\n      max = #word\n    end\n  end\n  if max > 0\
    \ then\n    for _, word in pairs(words) do\n      if #word == max then\n     \
    \   return word\n      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bvl_xh_.lua:30:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp0bvl_xh_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwkvhgpc.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmppwkvhgpc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz58lajw9.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz58lajw9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxChar = \"\"\n    for _,\
    \ c in pairs(count) do\n      if count[c] > 1 then\n        if maxChar == \"\"\
    \ then\n          maxChar = c\n        else\n          if count[c] > count[maxChar]\
    \ then\n            maxChar = c\n          end\n        end\n      end\n    end\n\
    \    max[#max+1] = maxChar\n  end\n  local maxChar = \"\"\n  for _, c in pairs(max)\
    \ do\n    if maxChar == \"\" then\n      maxChar = c\n    else\n      if max[c]\
    \ > max[maxChar] then\n        maxChar = c\n      end\n    end\n  end\n  return\
    \ maxChar\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozr8pgdz.lua:46:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpozr8pgdz.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr84jtvnk.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpr84jtvnk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  local word\n  for _, word in ipairs(words) do\n\
    \    if max > #word then\n      max = #word\n    end\n  end\n  if max > 0 then\n\
    \    local word\n    for _, word in ipairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  return word\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7awhw3k.lua:34:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu7awhw3k.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoqt1vbp.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmppoqt1vbp.lua:13: in local 'candidate'\n\t/tmp/tmppoqt1vbp.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr84jtvnk.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpr84jtvnk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in pairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  for _, word in pairs(words) do\n    if #word == max then\n   \
    \   return word\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vtukziz.lua:29:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp3vtukziz.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n  \
    \    count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rnfe3z4.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp9rnfe3z4.lua:13: in local 'candidate'\n\t/tmp/tmp9rnfe3z4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or 0\n    for _, c in ipairs(word) do\n      max = max + 1\n\
    \      if max > #word then\n        return word\n      end\n    end\n  end\n \
    \ return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqmctn50.lua:26:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppqmctn50.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7klcscoa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7klcscoa.lua:13: in local 'candidate'\n\t/tmp/tmp7klcscoa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for i = 1, #word do\n      if not words[i] then\n\
    \        words[i] = nil\n      end\n    end\n  end\n  for _, word in ipairs(words)\
    \ do\n    if not word then\n      words[#words + 1] = nil\n    end\n  end\n  for\
    \ i = 1, #words do\n    if words[i] then\n      max = max - 1\n      break\n \
    \   end\n  end\n  for i = 1, #words do\n    if words[i] then\n      words[i] =\
    \ words[i]\n      break\n    end\n  end\n  if max > 0 then\n    return words[#words]\n\
    \  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpziw5h4t5.lua:45:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpziw5h4t5.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_vb_joe.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp4_vb_joe.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max + 1\n  end\n  for word in words do\n    max = max - 1\n    if max\
    \ < 0 then\n      return word\n    end\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmf86rqlb.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpmf86rqlb.lua:11: in local 'candidate'\n\t/tmp/tmpmf86rqlb.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max or #word\n  end\n  for word in words do\n    local count = 0\n   \
    \ for char in word do\n      count = count + 1\n      if count > max then\n  \
    \      return word\n      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp65jg5z7b.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp65jg5z7b.lua:11: in local 'candidate'\n\t/tmp/tmp65jg5z7b.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in ipairs(words) do\n    max = max\
    \ + 1\n    if max > #word then\n      return word\n    end\n  end\n  return \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxlkv3tz.lua:26:\
    \ expected: \"string\"\nactual: \"of\"\nstack traceback:\n\t/tmp/tmpjxlkv3tz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  local words = {}\n  for _, word in ipairs(words)\
    \ do\n    words[#words + 1] = word\n  end\n  local maxword = \"\"\n  for i = 1,\
    \ #words do\n    local count = {}\n    for j = 1, #words do\n      if words[j]\
    \ == words[i] then\n        count[#count + 1] = 1\n      end\n    end\n    if\
    \ #count == max then\n      maxword = words[i]\n    end\n  end\n  return maxword\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduy5g8jb.lua:36:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpduy5g8jb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count and count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18af9ex7.lua:24:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmp18af9ex7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + #word\n  end\n  if max > 0 then\n    local maxChar = \"\"\
    \n    for _, word in pairs(words) do\n      local count = 0\n      for _, char\
    \ in pairs(word) do\n        count = count + 1\n        if count > max then\n\
    \          maxChar = char\n          break\n        end\n      end\n    end\n\
    \    return maxChar\n  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgha1e44.lua:18:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmprgha1e44.lua:18: in local 'candidate'\n\t/tmp/tmprgha1e44.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxChar = \"\"\n    for _,\
    \ c in ipairs(count) do\n      if count[c] > max[maxChar] then\n        maxChar\
    \ = c\n      end\n    end\n    max[maxChar] = max[maxChar] + 1\n  end\n  local\
    \ maxChar = \"\"\n  for _, c in ipairs(max) do\n    if max[c] > maxChar and max[c]\
    \ > 1 then\n      maxChar = c\n    end\n  end\n  return maxChar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zrrmk3a.lua:22:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2zrrmk3a.lua:22: in local 'candidate'\n\t/tmp/tmp2zrrmk3a.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max >\
    \ #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    if max > #word then\n      max = #word\n\
    \    end\n  end\n  return word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw3hqyli.lua:40:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmw3hqyli.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max or #word\n    if #word > max then\n      max = #word\n    end\n  end\n\
    \  if max > 0 then\n    local i = 1\n    local word\n    while i <= max do\n \
    \     word = words[i]\n      i = i + 1\n      if #word > max then\n        return\
    \ word\n      end\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr28tsfp6.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpr28tsfp6.lua:11: in local 'candidate'\n\t/tmp/tmpr28tsfp6.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  local word = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, c in ipairs(word) do\n      count[c] =\
    \ count[c] or 0\n      count[c] = count[c] + 1\n    end\n    local maxc = nil\n\
    \    for _, c in pairs(count) do\n      if maxc == nil or count[c] > count[maxc]\
    \ then\n        maxc = c\n      end\n    end\n    max[#max+1] = word\n  end\n\
    \  local maxc = nil\n  for _, word in ipairs(max) do\n    if maxc == nil or #word\
    \ > #maxc then\n      maxc = word\n    end\n  end\n  return maxc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi70foeru.lua:38:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpi70foeru.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = nil\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max_count == nil or count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo3umfh0.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpdo3umfh0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ if word:len() > max then\n      max = word:len()\n    end\n  end\n  if max >\
    \ 0 then\n    local maxChars = \"\"\n    for word in words do\n      if word:len()\
    \ > maxChars:len() then\n        maxChars = word\n      end\n    end\n    return\
    \ maxChars\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuk6afz58.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpuk6afz58.lua:11: in local 'candidate'\n\t/tmp/tmpuk6afz58.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0823s5x.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpt0823s5x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    for i = 1, #word do\n      if not word:sub(i,\
    \ i) == word:sub(i - 1, i) then\n        max = max - 1\n        break\n      end\n\
    \    end\n  end\n  return words[#words]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ghlgdt.lua:27:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp09ghlgdt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tt6c54g.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6tt6c54g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    for _, char in pairs(count)\
    \ do\n      if count[char] > max[char] then\n        max[char] = count[char]\n\
    \      end\n    end\n  end\n  for _, char in pairs(max) do\n    if max[char] ==\
    \ 1 then\n      return char\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk42qehiu.lua:33:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpk42qehiu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in pairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqklda692.lua:114: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr84jtvnk.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpr84jtvnk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tt6c54g.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6tt6c54g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr84jtvnk.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpr84jtvnk.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz58lajw9.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz58lajw9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in pairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqklda692.lua:114: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxChar = \"\"\
    \n    for _, char in pairs(count) do\n      if count[char] > count[maxChar] then\n\
    \        maxChar = char\n      end\n    end\n    max[#max+1] = maxChar\n  end\n\
    \  local maxChar = \"\"\n  for _, char in pairs(max) do\n    if count[char] >\
    \ count[maxChar] then\n      maxChar = char\n    end\n  end\n  return maxChar\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuxzag34.lua:26:\
    \ attempt to index a nil value (global 'count')\nstack traceback:\n\t/tmp/tmpzuxzag34.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpzuxzag34.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or 0\n    for _, c in ipairs(word) do\n      max = max + 1\n\
    \    end\n  end\n  local index = #words - 1\n  while index > 0 do\n    local word\
    \ = words[index]\n    for _, c in ipairs(word) do\n      max = max + 1\n    end\n\
    \    index = index - 1\n  end\n  return words[max]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_dus49l.lua:31:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpf_dus49l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxc = nil\n    for c, v in\
    \ pairs(count) do\n      if v > maxc then\n        maxc = v\n      end\n    end\n\
    \    if maxc then\n      max[#max+1] = word\n    end\n  end\n  local maxc = nil\n\
    \  for c, v in pairs(max) do\n    if v > maxc then\n      maxc = v\n    end\n\
    \  end\n  if maxc then\n    return max[maxc]\n  end\n  return \"\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcghemep.lua:41:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzcghemep.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6dsjy2x.lua:27:\
    \ expected: \"string\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpo6dsjy2x.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0823s5x.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpt0823s5x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxChar = nil\n\
    \    for char, count in pairs(count) do\n      if count > max[#max] then\n   \
    \     maxChar = char\n      end\n    end\n    max[#max+1] = maxChar\n  end\n \
    \ local maxChar = nil\n  for _, maxChar in ipairs(max) do\n    if maxChar == \"\
    \" then\n      return nil\n    end\n  end\n  return maxChar\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8rihlxo.lua:36:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt8rihlxo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7klcscoa.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7klcscoa.lua:13: in local 'candidate'\n\t/tmp/tmp7klcscoa.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = nil\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl4pvfn_.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmptl4pvfn_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in ipairs(words) do\n    if max\
    \ > #word then\n      return word\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_gyfkga.lua:25:\
    \ expected: \"string\"\nactual: \"of\"\nstack traceback:\n\t/tmp/tmp3_gyfkga.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max >\
    \ #word then\n      return word\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy4hkoo1.lua:25:\
    \ expected: \"string\"\nactual: \"of\"\nstack traceback:\n\t/tmp/tmpcy4hkoo1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = #word > max and #word or max\n  end\n  return words[#words]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4r2p4w_.lua:21:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmph4r2p4w_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in pairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqklda692.lua:114: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_7f36nq.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpt_7f36nq.lua:13: in local 'candidate'\n\t/tmp/tmpt_7f36nq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, char in pairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0d2tcji.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpu0d2tcji.lua:13: in local 'candidate'\n\t/tmp/tmpu0d2tcji.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798316
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    max = #word > max and #word or max\n  end\n  return max and words[#words]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tghtu55.lua:21:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp6tghtu55.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max or #word\n    if #word > max then\n      max = #word\n    end\n  end\n\
    \  if max > 0 then\n    local maxChars = #words[max]\n    for i = 1, max do\n\
    \      local chars = #words[i]\n      if chars > maxChars then\n        maxChars\
    \ = chars\n        word = words[i]\n      end\n    end\n  end\n  return word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp68pk_gr.lua:11:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpp68pk_gr.lua:11: in local 'candidate'\n\t/tmp/tmpp68pk_gr.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rriv84.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpp5rriv84.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max >\
    \ #word then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local\
    \ maxChar = \"\"\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n      if #word > #maxChar then\n        maxChar\
    \ = word\n      end\n    end\n    return maxChar\n  else\n    return \"\"\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixr1obnt.lua:39:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpixr1obnt.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798316
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in pairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0823s5x.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmpt0823s5x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxc = \"\"\n    for _, c in\
    \ pairs(count) do\n      if maxc ~= \"\" and maxc ~= c then\n        break\n \
    \     end\n      maxc = c\n    end\n    table.insert(max, maxc)\n  end\n  if #max\
    \ > 1 then\n    return table.concat(max, \"\")\n  end\n  return \"\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu50_tz2j.lua:34:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpu50_tz2j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxChar = nil\n\
    \    for _, char in pairs(count) do\n      if maxChar == nil or count[char] >\
    \ count[maxChar] then\n        maxChar = char\n      end\n    end\n    max[#max+1]\
    \ = maxChar\n  end\n  local maxChar = nil\n  for _, char in pairs(max) do\n  \
    \  if maxChar == nil or count[char] > count[maxChar] then\n      maxChar = char\n\
    \    end\n  end\n  return maxChar\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}),\
    \ 'string')\n    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n\
    \    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc',\
    \ 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play', 'this', 'game', 'of',\
    \ 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we', 'are', 'gonna',\
    \ 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are', 'a', 'mad',\
    \ 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}),\
    \ 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaift_lv8.lua:36:\
    \ expected: \"string\"\nactual: nil\nstack traceback:\n\t/tmp/tmpaift_lv8.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    max = #word > max and #word or max\n  end\n  return max and words[#words]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tghtu55.lua:21:\
    \ expected: \"enam\"\nactual: \"game\"\nstack traceback:\n\t/tmp/tmp6tghtu55.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm7nc4rp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgm7nc4rp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    for _, char in pairs(count)\
    \ do\n      if count[char] > max[char] then\n        max[char] = count[char]\n\
    \      end\n    end\n  end\n  for _, char in pairs(max) do\n    if max[char] ==\
    \ 1 then\n      return char\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk42qehiu.lua:33:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpk42qehiu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  if max > 0 then\n    for _, word in pairs(words)\
    \ do\n      if max > #word then\n        max = #word\n      end\n    end\n  end\n\
    \  if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in pairs(words) do\n      if max > #word then\n        max = #word\n  \
    \    end\n    end\n  end\n  if max > 0 then\n    for _, word in pairs(words) do\n\
    \      if max > #word then\n        max = #word\n      end\n    end\n  end\n \
    \ if max > 0 then\n    for _, word in pairs(words) do\n      if max > #word then\n\
    \        max = #word\n      end\n    end\n  end\n  if max > 0 then\n    for _,\
    \ word in \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_max\n    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n\
    \    lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa',\
    \ 'bb', 'cc'}), 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n\
    \    lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')\n\
    \    lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')\n   \
    \ lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')\n\
    \    lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}),\
    \ 'b')\n    lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqklda692.lua:114: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = -1\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if count > max_count then\n\
    \      max_count = count\n      max_word = word\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14_8ta07.lua:25:\
    \ expected: \"enam\"\nactual: \"name\"\nstack traceback:\n\t/tmp/tmp14_8ta07.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max_count = 0\n  local max_word = \"\"\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word) do\n\
    \      count = count + 1\n      if count > max_count then\n        max_count =\
    \ count\n        max_word = word\n      end\n    end\n  end\n  return max_word\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
    \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
    \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
    \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbsvsgmp.lua:27:\
    \ expected: \"string\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsbsvsgmp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings.\n-- The list contains\
    \ different words. Return the word with maximum number\n-- of unique characters.\
    \ If multiple strings have maximum number of unique\n-- characters, return the\
    \ one which comes first in lexicographical order.\n-- find_max([\"name\", \"of\"\
    , \"string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"\
    enam\"\n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function\
    \ find_max(words)\n  local max = 0\n  local word = \"\"\n  for _, word in pairs(words)\
    \ do\n    max = max + 1\n  end\n  for _, word in pairs(words) do\n    if max >\
    \ #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    if max > #word then\n      max = #word\n\
    \    end\n  end\n  for _, word in pairs(words) do\n    if max > #word then\n \
    \     max = #word\n    end\n  end\n  for _, word in pairs(words) do\n    if max\
    \ > #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    if max > #word then\n      max = #word\n\
    \    end\n  end\n  for _, word in pairs(words) do\n    if max > #word then\n \
    \     max = #word\n    end\n  end\n  for _, word in pairs(words) do\n    if max\
    \ > #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    if max > #word then\n      max = #word\n\
    \    end\n  end\n  for _, word in pairs(words) do\n    if max > #word then\n \
    \     max = #word\n    end\n  end\n  for _, word in pairs(words) do\n    if max\
    \ > #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  for _, word\
    \ in pairs(words) do\n    if max > #word then\n      max = #word\n    end\n  end\n\
    \  for _, word in pairs(words) do\n    if max > #word then\n      max = #word\n\
    \    end\n  end\n  for _, word in pairs(words) do\n    if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_max\n    lu.assertEquals(candidate({'name',\
    \ 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name', 'enam',\
    \ 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')\n\
    \    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
    \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
    \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
    \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
    \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
    \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqgwjb49.lua:111: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798315
